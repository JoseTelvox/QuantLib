<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_composite_quote" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::CompositeQuote</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_quote" prot="public" virt="non-virtual">QuantLib::Quote</basecompoundref>
    <basecompoundref refid="class_quant_lib_1_1_observer" prot="public" virt="non-virtual">QuantLib::Observer</basecompoundref>
    <includes refid="compositequote_8hpp" local="no">compositequote.hpp</includes>
    <templateparamlist>
      <param>
        <type>class BinaryFunction</type>
      </param>
    </templateparamlist>
    <sectiondef kind="user-defined">
      <header>Observer interface</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_composite_quote_1a30d1558011b4ed1d46c22a5fefc09c8d" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
        <definition>Handle&lt;Quote&gt; QuantLib::CompositeQuote&lt; BinaryFunction &gt;::element1_</definition>
        <argsstring></argsstring>
        <name>element1_</name>
        <qualifiedname>QuantLib::CompositeQuote::element1_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quotes/compositequote.hpp" line="58" column="16" bodyfile="ql/quotes/compositequote.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_composite_quote_1ac6dd53f1d3c2f4dd628c8d754bbeb1b3" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
        <definition>Handle&lt;Quote&gt; QuantLib::CompositeQuote&lt; BinaryFunction &gt;::element2_</definition>
        <argsstring></argsstring>
        <name>element2_</name>
        <qualifiedname>QuantLib::CompositeQuote::element2_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quotes/compositequote.hpp" line="58" column="26" bodyfile="ql/quotes/compositequote.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_composite_quote_1a90bea5dfdd2ddc8aa8fbfed41b76e2a5" prot="private" static="no" mutable="no">
        <type>BinaryFunction</type>
        <definition>BinaryFunction QuantLib::CompositeQuote&lt; BinaryFunction &gt;::f_</definition>
        <argsstring></argsstring>
        <name>f_</name>
        <qualifiedname>QuantLib::CompositeQuote::f_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quotes/compositequote.hpp" line="59" column="24" bodyfile="ql/quotes/compositequote.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_composite_quote_1acdcd33cbc27ed80a32156dd550b35804" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::CompositeQuote&lt; BinaryFunction &gt;::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <qualifiedname>QuantLib::CompositeQuote::update</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_observer_1a07905c55dca858470fcf4a1aea0005aa">update</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must be implemented in derived classes. An instance of Observer does not call this method directly: instead, it will be called by the observables the instance registered with when they need to notify any changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quotes/compositequote.hpp" line="55" column="14" bodyfile="ql/quotes/compositequote.hpp" bodystart="94" bodyend="96"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>inspectors</header>
      <memberdef kind="function" id="class_quant_lib_1_1_composite_quote_1a3a73707fe49c7b9e1fa66556505b5a3e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CompositeQuote&lt; BinaryFunction &gt;::value1</definition>
        <argsstring>() const</argsstring>
        <name>value1</name>
        <qualifiedname>QuantLib::CompositeQuote::value1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quotes/compositequote.hpp" line="45" column="14" bodyfile="ql/quotes/compositequote.hpp" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_composite_quote_1a8f6801d7cac7714843930d178e79b379" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CompositeQuote&lt; BinaryFunction &gt;::value2</definition>
        <argsstring>() const</argsstring>
        <name>value2</name>
        <qualifiedname>QuantLib::CompositeQuote::value2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quotes/compositequote.hpp" line="46" column="14" bodyfile="ql/quotes/compositequote.hpp" bodystart="46" bodyend="46"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Quote interface</header>
      <memberdef kind="function" id="class_quant_lib_1_1_composite_quote_1a8d2ee293350e4f394d60781476ad7f1b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CompositeQuote&lt; BinaryFunction &gt;::value</definition>
        <argsstring>() const override</argsstring>
        <name>value</name>
        <qualifiedname>QuantLib::CompositeQuote::value</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_quote_1a25f93d1c25434ae28f20f9416b497ccb">value</reimplements>
        <briefdescription>
<para>returns the current value </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quotes/compositequote.hpp" line="50" column="14" bodyfile="ql/quotes/compositequote.hpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_composite_quote_1ad862f91acb53fdd40b62b42a1fb60361" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool QuantLib::CompositeQuote&lt; BinaryFunction &gt;::isValid</definition>
        <argsstring>() const override</argsstring>
        <name>isValid</name>
        <qualifiedname>QuantLib::CompositeQuote::isValid</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_quote_1a9a340a974b8403b9385867b62bb8ae2d">isValid</reimplements>
        <briefdescription>
<para>returns true if the <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> holds a valid value </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quotes/compositequote.hpp" line="51" column="14" bodyfile="ql/quotes/compositequote.hpp" bodystart="88" bodyend="91"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_composite_quote_1ad97f7716ef291933d38535814ab536ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::CompositeQuote&lt; BinaryFunction &gt;::CompositeQuote</definition>
        <argsstring>(Handle&lt; Quote &gt; element1, Handle&lt; Quote &gt; element2, const BinaryFunction &amp;f)</argsstring>
        <name>CompositeQuote</name>
        <qualifiedname>QuantLib::CompositeQuote::CompositeQuote</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
          <declname>element1</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
          <declname>element2</declname>
        </param>
        <param>
          <type>const BinaryFunction &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quotes/compositequote.hpp" line="42" column="9" bodyfile="ql/quotes/compositequote.hpp" bodystart="73" bodyend="79"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>market element whose value depends on two other market element </para>
    </briefdescription>
    <detaileddescription>
<para><xrefsect id="test_1_test000162"><xreftitle>Test</xreftitle><xrefdescription><para>the correctness of the returned values is tested by checking them against numerical calculations. </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::CompositeQuote&lt; BinaryFunction &gt;</label>
        <link refid="class_quant_lib_1_1_composite_quote"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::Quote</label>
        <link refid="class_quant_lib_1_1_quote"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::CompositeQuote&lt; BinaryFunction &gt;</label>
        <link refid="class_quant_lib_1_1_composite_quote"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::Quote</label>
        <link refid="class_quant_lib_1_1_quote"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/quotes/compositequote.hpp" line="40" column="5" bodyfile="ql/quotes/compositequote.hpp" bodystart="40" bodyend="60"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_composite_quote_1ad97f7716ef291933d38535814ab536ae" prot="public" virt="non-virtual"><scope>QuantLib::CompositeQuote</scope><name>CompositeQuote</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::CompositeQuote</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_composite_quote_1a30d1558011b4ed1d46c22a5fefc09c8d" prot="private" virt="non-virtual"><scope>QuantLib::CompositeQuote</scope><name>element1_</name></member>
      <member refid="class_quant_lib_1_1_composite_quote_1ac6dd53f1d3c2f4dd628c8d754bbeb1b3" prot="private" virt="non-virtual"><scope>QuantLib::CompositeQuote</scope><name>element2_</name></member>
      <member refid="class_quant_lib_1_1_composite_quote_1a90bea5dfdd2ddc8aa8fbfed41b76e2a5" prot="private" virt="non-virtual"><scope>QuantLib::CompositeQuote</scope><name>f_</name></member>
      <member refid="class_quant_lib_1_1_composite_quote_1ad862f91acb53fdd40b62b42a1fb60361" prot="public" virt="virtual"><scope>QuantLib::CompositeQuote</scope><name>isValid</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::CompositeQuote</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::CompositeQuote</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::CompositeQuote</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Quote::"><scope>QuantLib::CompositeQuote</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Quote::"><scope>QuantLib::CompositeQuote</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::CompositeQuote</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::CompositeQuote</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::CompositeQuote</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Quote::"><scope>QuantLib::CompositeQuote</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Quote::"><scope>QuantLib::CompositeQuote</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::CompositeQuote</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::CompositeQuote</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::CompositeQuote</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::CompositeQuote</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_composite_quote_1acdcd33cbc27ed80a32156dd550b35804" prot="public" virt="virtual"><scope>QuantLib::CompositeQuote</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_composite_quote_1a8d2ee293350e4f394d60781476ad7f1b" prot="public" virt="virtual"><scope>QuantLib::CompositeQuote</scope><name>value</name></member>
      <member refid="class_quant_lib_1_1_composite_quote_1a3a73707fe49c7b9e1fa66556505b5a3e" prot="public" virt="non-virtual"><scope>QuantLib::CompositeQuote</scope><name>value1</name></member>
      <member refid="class_quant_lib_1_1_composite_quote_1a8f6801d7cac7714843930d178e79b379" prot="public" virt="non-virtual"><scope>QuantLib::CompositeQuote</scope><name>value2</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::CompositeQuote</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::CompositeQuote</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_quote_1a0433957cb1683b2ca329ef56bd741143" prot="public" virt="non-virtual"><scope>QuantLib::CompositeQuote</scope><name>~Quote</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
