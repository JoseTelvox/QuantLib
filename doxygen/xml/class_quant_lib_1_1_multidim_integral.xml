<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_multidim_integral" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::MultidimIntegral</compoundname>
    <derivedcompoundref refid="class_quant_lib_1_1_integration_base_3_01_multidim_integral_01_4" prot="public" virt="non-virtual">QuantLib::IntegrationBase&lt; MultidimIntegral &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_integration_base_3_01_multidim_integral_01_4" prot="public" virt="non-virtual">QuantLib::IntegrationBase&lt; MultidimIntegral &gt;</derivedcompoundref>
    <includes refid="multidimintegrator_8hpp" local="no">multidimintegrator.hpp</includes>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_multidim_integral_1aca2549c02315e1b62df5c0aada459e58" prot="private" static="yes" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>const Size QuantLib::MultidimIntegral::maxDimensions_</definition>
        <argsstring></argsstring>
        <name>maxDimensions_</name>
        <qualifiedname>QuantLib::MultidimIntegral::maxDimensions_</qualifiedname>
        <initializer>= 15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimintegrator.hpp" line="60" column="27" bodyfile="ql/experimental/math/multidimintegrator.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_multidim_integral_1a684244cdb5e373e327c567d3e6012235" prot="private" static="no" mutable="no">
        <type>const std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_integrator" kindref="compound">Integrator</ref> &gt; &gt;</type>
        <definition>const std::vector&lt;ext::shared_ptr&lt;Integrator&gt; &gt; QuantLib::MultidimIntegral::integrators_</definition>
        <argsstring></argsstring>
        <name>integrators_</name>
        <qualifiedname>QuantLib::MultidimIntegral::integrators_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimintegrator.hpp" line="85" column="27" bodyfile="ql/experimental/math/multidimintegrator.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_multidim_integral_1a418cae0638750116e5dc75d0b401d5e9" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(const std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;)&gt; &amp;, const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;, const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;) &gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;Real ( const std::function&lt;Real (const std::vector&lt;Real&gt;&amp;)&gt;&amp;, const std::vector&lt;Real&gt;&amp;, const std::vector&lt;Real&gt;&amp;) &gt; &gt; QuantLib::MultidimIntegral::integrationLevelEntries_</definition>
        <argsstring></argsstring>
        <name>integrationLevelEntries_</name>
        <qualifiedname>QuantLib::MultidimIntegral::integrationLevelEntries_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimintegrator.hpp" line="105" column="13" bodyfile="ql/experimental/math/multidimintegrator.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_multidim_integral_1ad469de214517b9b1efe167e8a59fb26c" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::MultidimIntegral::varBuffer_</definition>
        <argsstring></argsstring>
        <name>varBuffer_</name>
        <qualifiedname>QuantLib::MultidimIntegral::varBuffer_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimintegrator.hpp" line="110" column="29" bodyfile="ql/experimental/math/multidimintegrator.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_multidim_integral_1a3ecf40ccffcf71b3cc6cb6c8be998ea6" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MultidimIntegral::MultidimIntegral</definition>
        <argsstring>(const std::vector&lt; ext::shared_ptr&lt; Integrator &gt; &gt; &amp;integrators)</argsstring>
        <name>MultidimIntegral</name>
        <qualifiedname>QuantLib::MultidimIntegral::MultidimIntegral</qualifiedname>
        <param>
          <type>const std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_integrator" kindref="compound">Integrator</ref> &gt; &gt; &amp;</type>
          <declname>integrators</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimintegrator.hpp" line="41" column="18" bodyfile="ql/experimental/math/multidimintegrator.cpp" bodystart="24" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multidim_integral_1aebe7fdad01f1ee10730a3376abb898a5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::MultidimIntegral::operator()</definition>
        <argsstring>(const std::function&lt; Real(const std::vector&lt; Real &gt; &amp;)&gt; &amp;f, const std::vector&lt; Real &gt; &amp;a, const std::vector&lt; Real &gt; &amp;b) const</argsstring>
        <name>operator()</name>
        <qualifiedname>QuantLib::MultidimIntegral::operator()</qualifiedname>
        <param>
          <type>const std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>f is the integrand function; a and b are the lower and upper integration limit domain for each dimension. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimintegrator.hpp" line="48" column="14" bodyfile="ql/experimental/math/multidimintegrator.hpp" bodystart="48" bodyend="56"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_multidim_integral_1ad911f32980daab108872f79dd485020e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
            <declname>depth</declname>
            <defname>depth</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void QuantLib::MultidimIntegral::spawnFcts</definition>
        <argsstring>() const</argsstring>
        <name>spawnFcts</name>
        <qualifiedname>QuantLib::MultidimIntegral::spawnFcts</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimintegrator.hpp" line="70" column="14" bodyfile="ql/experimental/math/multidimintegrator.hpp" bodystart="157" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multidim_integral_1a7161656d32c226a55e26136de01c735f" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>T_N</declname>
            <defname>T_N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::MultidimIntegral::vectorBinder</definition>
        <argsstring>(const std::function&lt; Real(const std::vector&lt; Real &gt; &amp;)&gt; &amp;f, Real z, const std::vector&lt; Real &gt; &amp;a, const std::vector&lt; Real &gt; &amp;b) const</argsstring>
        <name>vectorBinder</name>
        <qualifiedname>QuantLib::MultidimIntegral::vectorBinder</qualifiedname>
        <param>
          <type>const std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimintegrator.hpp" line="73" column="14" bodyfile="ql/experimental/math/multidimintegrator.hpp" bodystart="146" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multidim_integral_1a2f94fcdb85a4537296235d5ebca37add" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>nT</declname>
            <defname>nT</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::MultidimIntegral::integrate</definition>
        <argsstring>(const std::function&lt; Real(const std::vector&lt; Real &gt; &amp;)&gt; &amp;f, const std::vector&lt; Real &gt; &amp;a, const std::vector&lt; Real &gt; &amp;b) const</argsstring>
        <name>integrate</name>
        <qualifiedname>QuantLib::MultidimIntegral::integrate</qualifiedname>
        <param>
          <type>const std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimintegrator.hpp" line="80" column="14" bodyfile="ql/experimental/math/multidimintegrator.hpp" bodystart="134" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multidim_integral_1a85284ec01952d9edc934d7ec0ffc7d5d" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::MultidimIntegral::vectorBinder</definition>
        <argsstring>(const std::function&lt; Real(const std::vector&lt; Real &gt; &amp;)&gt; &amp;f, Real z, const std::vector&lt; Real &gt; &amp;a, const std::vector&lt; Real &gt; &amp;b) const</argsstring>
        <name>vectorBinder</name>
        <qualifiedname>QuantLib::MultidimIntegral::vectorBinder</qualifiedname>
        <param>
          <type>const std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimintegrator.hpp" line="116" column="5" bodyfile="ql/experimental/math/multidimintegrator.hpp" bodystart="116" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multidim_integral_1a6bb5f6386b0023ba690152e912ddc67b" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void QuantLib::MultidimIntegral::spawnFcts</definition>
        <argsstring>() const</argsstring>
        <name>spawnFcts</name>
        <qualifiedname>QuantLib::MultidimIntegral::spawnFcts</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimintegrator.hpp" line="127" column="5" bodyfile="ql/experimental/math/multidimintegrator.hpp" bodystart="127" bodyend="131"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Integrates a vector or scalar function of vector domain. </para>
    </briefdescription>
    <detaileddescription>
<para>Uses a collection of arbitrary 1D integrators along each of the dimensions. A template recursion along dimensions avoids calling depth test or virtual functions.<simplesect kind="par"><title></title><para>This class generalizes to an arbitrary number of dimensions the functionality in class <ref refid="class_quant_lib_1_1_two_dimensional_integral" kindref="compound">TwoDimensionalIntegral</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QuantLib::IntegrationBase&lt; MultidimIntegral &gt;</label>
        <link refid="class_quant_lib_1_1_integration_base_3_01_multidim_integral_01_4"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::MultidimIntegral</label>
        <link refid="class_quant_lib_1_1_multidim_integral"/>
      </node>
    </inheritancegraph>
    <location file="ql/experimental/math/multidimintegrator.hpp" line="39" column="5" bodyfile="ql/experimental/math/multidimintegrator.hpp" bodystart="39" bodyend="112"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_multidim_integral_1a2f94fcdb85a4537296235d5ebca37add" prot="private" virt="non-virtual"><scope>QuantLib::MultidimIntegral</scope><name>integrate</name></member>
      <member refid="class_quant_lib_1_1_multidim_integral_1a418cae0638750116e5dc75d0b401d5e9" prot="private" virt="non-virtual"><scope>QuantLib::MultidimIntegral</scope><name>integrationLevelEntries_</name></member>
      <member refid="class_quant_lib_1_1_multidim_integral_1a684244cdb5e373e327c567d3e6012235" prot="private" virt="non-virtual"><scope>QuantLib::MultidimIntegral</scope><name>integrators_</name></member>
      <member refid="class_quant_lib_1_1_multidim_integral_1aca2549c02315e1b62df5c0aada459e58" prot="private" virt="non-virtual"><scope>QuantLib::MultidimIntegral</scope><name>maxDimensions_</name></member>
      <member refid="class_quant_lib_1_1_multidim_integral_1a3ecf40ccffcf71b3cc6cb6c8be998ea6" prot="public" virt="non-virtual"><scope>QuantLib::MultidimIntegral</scope><name>MultidimIntegral</name></member>
      <member refid="class_quant_lib_1_1_multidim_integral_1aebe7fdad01f1ee10730a3376abb898a5" prot="public" virt="non-virtual"><scope>QuantLib::MultidimIntegral</scope><name>operator()</name></member>
      <member refid="class_quant_lib_1_1_multidim_integral_1ad911f32980daab108872f79dd485020e" prot="private" virt="non-virtual"><scope>QuantLib::MultidimIntegral</scope><name>spawnFcts</name></member>
      <member refid="class_quant_lib_1_1_multidim_integral_1a6bb5f6386b0023ba690152e912ddc67b" prot="private" virt="non-virtual"><scope>QuantLib::MultidimIntegral</scope><name>spawnFcts</name></member>
      <member refid="class_quant_lib_1_1_multidim_integral_1ad469de214517b9b1efe167e8a59fb26c" prot="private" virt="non-virtual"><scope>QuantLib::MultidimIntegral</scope><name>varBuffer_</name></member>
      <member refid="class_quant_lib_1_1_multidim_integral_1a7161656d32c226a55e26136de01c735f" prot="private" virt="non-virtual"><scope>QuantLib::MultidimIntegral</scope><name>vectorBinder</name></member>
      <member refid="class_quant_lib_1_1_multidim_integral_1a85284ec01952d9edc934d7ec0ffc7d5d" prot="private" virt="non-virtual"><scope>QuantLib::MultidimIntegral</scope><name>vectorBinder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
