<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_time_series" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::TimeSeries</compoundname>
    <includes refid="timeseries_8hpp" local="no">timeseries.hpp</includes>
    <innerclass refid="struct_quant_lib_1_1_time_series_1_1reverse" prot="public">QuantLib::TimeSeries::reverse</innerclass>
    <innerclass refid="struct_quant_lib_1_1_time_series_1_1reverse_3_01container_00_01std_1_1bidirectional__iterator__tag_01_4" prot="public">QuantLib::TimeSeries::reverse&lt; container, std::bidirectional_iterator_tag &gt;</innerclass>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type>class Container</type>
        <defval>std::map&lt;<ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>, T&gt;</defval>
      </param>
    </templateparamlist>
    <sectiondef kind="user-defined">
      <header>Iterators</header>
      <memberdef kind="typedef" id="class_quant_lib_1_1_time_series_1a132e920df739f7e355491bfc8a00258c" prot="public" static="no">
        <type>Container::const_iterator</type>
        <definition>typedef Container::const_iterator QuantLib::TimeSeries&lt; T, Container &gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <qualifiedname>QuantLib::TimeSeries::const_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="110" column="52" bodyfile="ql/timeseries.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_time_series_1acbc0ef3294657b2a961a9b71d202302d" prot="public" static="no">
        <type>const_iterator::iterator_category</type>
        <definition>typedef const_iterator::iterator_category QuantLib::TimeSeries&lt; T, Container &gt;::iterator_category</definition>
        <argsstring></argsstring>
        <name>iterator_category</name>
        <qualifiedname>QuantLib::TimeSeries::iterator_category</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="111" column="60" bodyfile="ql/timeseries.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_time_series_1aee5b4ee58d1273aa3b2c7be252daea11" prot="public" static="no">
        <type>std::conditional_t&lt; std::is_same_v&lt; iterator_category, std::bidirectional_iterator_tag &gt;||std::is_base_of_v&lt; std::bidirectional_iterator_tag, iterator_category &gt;, std::bidirectional_iterator_tag, std::input_iterator_tag &gt;</type>
        <definition>typedef std::conditional_t&lt; std::is_same_v&lt;iterator_category, std::bidirectional_iterator_tag&gt; || std::is_base_of_v&lt;std::bidirectional_iterator_tag, iterator_category&gt;, std::bidirectional_iterator_tag, std::input_iterator_tag&gt; QuantLib::TimeSeries&lt; T, Container &gt;::enable_reverse</definition>
        <argsstring></argsstring>
        <name>enable_reverse</name>
        <qualifiedname>QuantLib::TimeSeries::enable_reverse</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="150" column="2" bodyfile="ql/timeseries.hpp" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_time_series_1ab48e48ce62b95ae6435d49e91ecb5e71" prot="public" static="no">
        <type><ref refid="struct_quant_lib_1_1_time_series_1_1reverse" kindref="compound">reverse</ref>&lt; Container, enable_reverse &gt;::const_reverse_iterator</type>
        <definition>typedef reverse&lt;Container,enable_reverse&gt;::const_reverse_iterator QuantLib::TimeSeries&lt; T, Container &gt;::const_reverse_iterator</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <qualifiedname>QuantLib::TimeSeries::const_reverse_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="154" column="56" bodyfile="ql/timeseries.hpp" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_time_series_1ab980e93afc9dc91d543923cde97b911e" prot="private" static="no">
        <type>Container::value_type</type>
        <definition>typedef Container::value_type QuantLib::TimeSeries&lt; T, Container &gt;::container_value_type</definition>
        <argsstring></argsstring>
        <name>container_value_type</name>
        <qualifiedname>QuantLib::TimeSeries::container_value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="171" column="48" bodyfile="ql/timeseries.hpp" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_time_series_1a0411778c7618c0b1fc1f277d438fef32" prot="private" static="no">
        <type>std::function&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>(const container_value_type &amp;)&gt;</type>
        <definition>typedef std::function&lt;Date(const container_value_type&amp;)&gt; QuantLib::TimeSeries&lt; T, Container &gt;::projection_time</definition>
        <argsstring></argsstring>
        <name>projection_time</name>
        <qualifiedname>QuantLib::TimeSeries::projection_time</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="173" column="63" bodyfile="ql/timeseries.hpp" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_time_series_1a73574599976519ce89064e3ae1ce94b2" prot="private" static="no">
        <type>std::function&lt; T(const container_value_type &amp;)&gt;</type>
        <definition>typedef std::function&lt;T(const container_value_type&amp;)&gt; QuantLib::TimeSeries&lt; T, Container &gt;::projection_value</definition>
        <argsstring></argsstring>
        <name>projection_value</name>
        <qualifiedname>QuantLib::TimeSeries::projection_value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="175" column="62" bodyfile="ql/timeseries.hpp" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_time_series_1ab66178347b65cc12c6c2abcead868590" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>TimeSeries&lt; T, C &gt;::const_iterator QuantLib::TimeSeries&lt; T, C &gt;::cbegin</definition>
        <argsstring>() const</argsstring>
        <name>cbegin</name>
        <qualifiedname>QuantLib::TimeSeries::cbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="156" column="24" bodyfile="ql/timeseries.hpp" bodystart="223" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_time_series_1aedf2d860092272a6e767837e9fee9755" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>TimeSeries&lt; T, C &gt;::const_iterator QuantLib::TimeSeries&lt; T, C &gt;::cend</definition>
        <argsstring>() const</argsstring>
        <name>cend</name>
        <qualifiedname>QuantLib::TimeSeries::cend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="157" column="24" bodyfile="ql/timeseries.hpp" bodystart="229" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_time_series_1a9b3b984a1d2c7e71972b2352767aaeca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator QuantLib::TimeSeries&lt; T, Container &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <qualifiedname>QuantLib::TimeSeries::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="158" column="24" bodyfile="ql/timeseries.hpp" bodystart="158" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_time_series_1a0af5f50f633f3816c7c971984bd29877" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator QuantLib::TimeSeries&lt; T, Container &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <qualifiedname>QuantLib::TimeSeries::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="159" column="24" bodyfile="ql/timeseries.hpp" bodystart="159" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_time_series_1ab76eb18aceb34ca6f937d944b478273c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator QuantLib::TimeSeries&lt; T, Container &gt;::crbegin</definition>
        <argsstring>() const</argsstring>
        <name>crbegin</name>
        <qualifiedname>QuantLib::TimeSeries::crbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="160" column="32" bodyfile="ql/timeseries.hpp" bodystart="160" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_time_series_1a187158c3d954a475e72b9e751eb7b4e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator QuantLib::TimeSeries&lt; T, Container &gt;::crend</definition>
        <argsstring>() const</argsstring>
        <name>crend</name>
        <qualifiedname>QuantLib::TimeSeries::crend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="163" column="32" bodyfile="ql/timeseries.hpp" bodystart="163" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_time_series_1a8a1cbac2b8809e429843dec91db57d38" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator QuantLib::TimeSeries&lt; T, Container &gt;::rbegin</definition>
        <argsstring>() const</argsstring>
        <name>rbegin</name>
        <qualifiedname>QuantLib::TimeSeries::rbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="166" column="32" bodyfile="ql/timeseries.hpp" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_time_series_1a872e940a9c73992629c3fc5d20239b12" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator QuantLib::TimeSeries&lt; T, Container &gt;::rend</definition>
        <argsstring>() const</argsstring>
        <name>rend</name>
        <qualifiedname>QuantLib::TimeSeries::rend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="167" column="32" bodyfile="ql/timeseries.hpp" bodystart="167" bodyend="167"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Inspectors</header>
      <memberdef kind="function" id="class_quant_lib_1_1_time_series_1a8501a8b76ea88902fcbb9cf27d3aa123" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::TimeSeries&lt; T, C &gt;::firstDate</definition>
        <argsstring>() const</argsstring>
        <name>firstDate</name>
        <qualifiedname>QuantLib::TimeSeries::firstDate</qualifiedname>
        <briefdescription>
<para>returns the first date for which a historical datum exists </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="85" column="14" bodyfile="ql/timeseries.hpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_time_series_1a1b7762e648ae7c165d3294ba57db3fe1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::TimeSeries&lt; T, C &gt;::lastDate</definition>
        <argsstring>() const</argsstring>
        <name>lastDate</name>
        <qualifiedname>QuantLib::TimeSeries::lastDate</qualifiedname>
        <briefdescription>
<para>returns the last date for which a historical datum exists </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="87" column="14" bodyfile="ql/timeseries.hpp" bodystart="206" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_time_series_1a0380ca5637429f82b730fb79a9d85c5d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::TimeSeries&lt; T, C &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>QuantLib::TimeSeries::size</qualifiedname>
        <briefdescription>
<para>returns the number of historical data including null ones </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="89" column="14" bodyfile="ql/timeseries.hpp" bodystart="212" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_time_series_1aa519a0dbb610f060fd756154c84e76be" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::TimeSeries&lt; T, C &gt;::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>QuantLib::TimeSeries::empty</qualifiedname>
        <briefdescription>
<para>returns whether the series contains any data </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="91" column="14" bodyfile="ql/timeseries.hpp" bodystart="217" bodyend="219"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Historical data access</header>
      <memberdef kind="function" id="class_quant_lib_1_1_time_series_1a46724f5e865f2b4eb6643d5474730b25" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T QuantLib::TimeSeries&lt; T, Container &gt;::operator[]</definition>
        <argsstring>(const Date &amp;d) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>QuantLib::TimeSeries::operator[]</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>returns the (possibly null) datum corresponding to the given date </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="96" column="11" bodyfile="ql/timeseries.hpp" bodystart="96" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_time_series_1ad161baf8c381c7db35821e79d67baa67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; QuantLib::TimeSeries&lt; T, Container &gt;::operator[]</definition>
        <argsstring>(const Date &amp;d)</argsstring>
        <name>operator[]</name>
        <qualifiedname>QuantLib::TimeSeries::operator[]</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="102" column="11" bodyfile="ql/timeseries.hpp" bodystart="102" bodyend="105"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Utilities</header>
      <memberdef kind="function" id="class_quant_lib_1_1_time_series_1a9244b64f86da0c0fc73d188b7b5b8e70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>TimeSeries&lt; T, C &gt;::const_iterator QuantLib::TimeSeries&lt; T, C &gt;::find</definition>
        <argsstring>(const Date &amp;)</argsstring>
        <name>find</name>
        <qualifiedname>QuantLib::TimeSeries::find</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="180" column="24" bodyfile="ql/timeseries.hpp" bodystart="235" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_time_series_1a7c5215aaa83afd85fe03bca731315a13" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt;</type>
        <definition>std::vector&lt; Date &gt; QuantLib::TimeSeries&lt; T, C &gt;::dates</definition>
        <argsstring>() const</argsstring>
        <name>dates</name>
        <qualifiedname>QuantLib::TimeSeries::dates</qualifiedname>
        <briefdescription>
<para>returns the dates for which historical data exist </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="182" column="21" bodyfile="ql/timeseries.hpp" bodystart="245" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_time_series_1aae720186c1887c686759024814ee7e92" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; QuantLib::TimeSeries&lt; T, C &gt;::values</definition>
        <argsstring>() const</argsstring>
        <name>values</name>
        <qualifiedname>QuantLib::TimeSeries::values</qualifiedname>
        <briefdescription>
<para>returns the historical data </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="184" column="21" bodyfile="ql/timeseries.hpp" bodystart="254" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_time_series_1a9f84c0503bbdecca70702bd887334295" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        <definition>static const Date &amp; QuantLib::TimeSeries&lt; T, Container &gt;::get_time</definition>
        <argsstring>(const container_value_type &amp;v)</argsstring>
        <name>get_time</name>
        <qualifiedname>QuantLib::TimeSeries::get_time</qualifiedname>
        <param>
          <type>const container_value_type &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="188" column="27" bodyfile="ql/timeseries.hpp" bodystart="188" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_time_series_1af9cdc4b6bbd80dac84e6f181a3c000ca" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>static const T &amp; QuantLib::TimeSeries&lt; T, Container &gt;::get_value</definition>
        <argsstring>(const container_value_type &amp;v)</argsstring>
        <name>get_value</name>
        <qualifiedname>QuantLib::TimeSeries::get_value</qualifiedname>
        <param>
          <type>const container_value_type &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="191" column="24" bodyfile="ql/timeseries.hpp" bodystart="191" bodyend="193"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_time_series_1acaa33473e357c0a90b169ffad584ac3f" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>typedef Date QuantLib::TimeSeries&lt; T, Container &gt;::key_type</definition>
        <argsstring></argsstring>
        <name>key_type</name>
        <qualifiedname>QuantLib::TimeSeries::key_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="53" column="22" bodyfile="ql/timeseries.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_time_series_1ab574b51ff60885f215c2fbfd4f0502c1" prot="public" static="no">
        <type>T</type>
        <definition>typedef T QuantLib::TimeSeries&lt; T, Container &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>QuantLib::TimeSeries::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="54" column="19" bodyfile="ql/timeseries.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_time_series_1ae30b079f18b3287e4d98a4e8f62e56f1" prot="private" static="no" mutable="yes">
        <type>Container</type>
        <definition>Container QuantLib::TimeSeries&lt; T, Container &gt;::values_</definition>
        <argsstring></argsstring>
        <name>values_</name>
        <qualifiedname>QuantLib::TimeSeries::values_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="56" column="27" bodyfile="ql/timeseries.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_time_series_1a40a6967df97d5387c28225ebd20a9e22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::TimeSeries&lt; T, Container &gt;::TimeSeries</definition>
        <argsstring>()=default</argsstring>
        <name>TimeSeries</name>
        <qualifiedname>QuantLib::TimeSeries::TimeSeries</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="struct_quant_lib_1_1_default" kindref="compound">Default</ref> constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="59" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_time_series_1aace74aef41bdc9e2a9795beb57081de6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DateIterator</type>
          </param>
          <param>
            <type>class ValueIterator</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>QuantLib::TimeSeries&lt; T, Container &gt;::TimeSeries</definition>
        <argsstring>(DateIterator dBegin, DateIterator dEnd, ValueIterator vBegin)</argsstring>
        <name>TimeSeries</name>
        <qualifiedname>QuantLib::TimeSeries::TimeSeries</qualifiedname>
        <param>
          <type>DateIterator</type>
          <declname>dBegin</declname>
        </param>
        <param>
          <type>DateIterator</type>
          <declname>dEnd</declname>
        </param>
        <param>
          <type>ValueIterator</type>
          <declname>vBegin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This constructor initializes the history with a set of values passed as two sequences, the first containing dates and the second containing corresponding values. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="65" column="9" bodyfile="ql/timeseries.hpp" bodystart="65" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_time_series_1a45b4afbbbb48fed68a7ca68cede47315" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ValueIterator</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>QuantLib::TimeSeries&lt; T, Container &gt;::TimeSeries</definition>
        <argsstring>(const Date &amp;firstDate, ValueIterator begin, ValueIterator end)</argsstring>
        <name>TimeSeries</name>
        <qualifiedname>QuantLib::TimeSeries::TimeSeries</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>firstDate</declname>
        </param>
        <param>
          <type>ValueIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>ValueIterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This constructor initializes the history with a set of values. Such values are assigned to a corresponding number of consecutive dates starting from <bold><emphasis>firstDate</emphasis></bold> included. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/timeseries.hpp" line="76" column="9" bodyfile="ql/timeseries.hpp" bodystart="76" bodyend="81"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Container for historical data. </para>
    </briefdescription>
    <detaileddescription>
<para>This class acts as a generic repository for a set of historical data. Any single datum can be accessed through its date, while sets of consecutive data can be accessed through iterators.</para>
<para><simplesect kind="pre"><para>The <computeroutput>Container</computeroutput> type must satisfy the requirements set by the C++ standard for associative containers. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="ql/timeseries.hpp" line="51" column="5" bodyfile="ql/timeseries.hpp" bodystart="51" bodyend="194"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_time_series_1a9b3b984a1d2c7e71972b2352767aaeca" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>begin</name></member>
      <member refid="class_quant_lib_1_1_time_series_1ab66178347b65cc12c6c2abcead868590" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>cbegin</name></member>
      <member refid="class_quant_lib_1_1_time_series_1aedf2d860092272a6e767837e9fee9755" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>cend</name></member>
      <member refid="class_quant_lib_1_1_time_series_1a132e920df739f7e355491bfc8a00258c" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>const_iterator</name></member>
      <member refid="class_quant_lib_1_1_time_series_1ab48e48ce62b95ae6435d49e91ecb5e71" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>const_reverse_iterator</name></member>
      <member refid="class_quant_lib_1_1_time_series_1ab980e93afc9dc91d543923cde97b911e" prot="private" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>container_value_type</name></member>
      <member refid="class_quant_lib_1_1_time_series_1ab76eb18aceb34ca6f937d944b478273c" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>crbegin</name></member>
      <member refid="class_quant_lib_1_1_time_series_1a187158c3d954a475e72b9e751eb7b4e0" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>crend</name></member>
      <member refid="class_quant_lib_1_1_time_series_1a7c5215aaa83afd85fe03bca731315a13" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>dates</name></member>
      <member refid="class_quant_lib_1_1_time_series_1aa519a0dbb610f060fd756154c84e76be" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>empty</name></member>
      <member refid="class_quant_lib_1_1_time_series_1aee5b4ee58d1273aa3b2c7be252daea11" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>enable_reverse</name></member>
      <member refid="class_quant_lib_1_1_time_series_1a0af5f50f633f3816c7c971984bd29877" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>end</name></member>
      <member refid="class_quant_lib_1_1_time_series_1a9244b64f86da0c0fc73d188b7b5b8e70" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>find</name></member>
      <member refid="class_quant_lib_1_1_time_series_1a8501a8b76ea88902fcbb9cf27d3aa123" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>firstDate</name></member>
      <member refid="class_quant_lib_1_1_time_series_1a9f84c0503bbdecca70702bd887334295" prot="private" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>get_time</name></member>
      <member refid="class_quant_lib_1_1_time_series_1af9cdc4b6bbd80dac84e6f181a3c000ca" prot="private" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>get_value</name></member>
      <member refid="class_quant_lib_1_1_time_series_1acbc0ef3294657b2a961a9b71d202302d" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>iterator_category</name></member>
      <member refid="class_quant_lib_1_1_time_series_1acaa33473e357c0a90b169ffad584ac3f" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>key_type</name></member>
      <member refid="class_quant_lib_1_1_time_series_1a1b7762e648ae7c165d3294ba57db3fe1" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>lastDate</name></member>
      <member refid="class_quant_lib_1_1_time_series_1a46724f5e865f2b4eb6643d5474730b25" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>operator[]</name></member>
      <member refid="class_quant_lib_1_1_time_series_1ad161baf8c381c7db35821e79d67baa67" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>operator[]</name></member>
      <member refid="class_quant_lib_1_1_time_series_1a0411778c7618c0b1fc1f277d438fef32" prot="private" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>projection_time</name></member>
      <member refid="class_quant_lib_1_1_time_series_1a73574599976519ce89064e3ae1ce94b2" prot="private" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>projection_value</name></member>
      <member refid="class_quant_lib_1_1_time_series_1a8a1cbac2b8809e429843dec91db57d38" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>rbegin</name></member>
      <member refid="class_quant_lib_1_1_time_series_1a872e940a9c73992629c3fc5d20239b12" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>rend</name></member>
      <member refid="class_quant_lib_1_1_time_series_1a0380ca5637429f82b730fb79a9d85c5d" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>size</name></member>
      <member refid="class_quant_lib_1_1_time_series_1a40a6967df97d5387c28225ebd20a9e22" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>TimeSeries</name></member>
      <member refid="class_quant_lib_1_1_time_series_1aace74aef41bdc9e2a9795beb57081de6" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>TimeSeries</name></member>
      <member refid="class_quant_lib_1_1_time_series_1a45b4afbbbb48fed68a7ca68cede47315" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>TimeSeries</name></member>
      <member refid="class_quant_lib_1_1_time_series_1ab574b51ff60885f215c2fbfd4f0502c1" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>value_type</name></member>
      <member refid="class_quant_lib_1_1_time_series_1aae720186c1887c686759024814ee7e92" prot="public" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>values</name></member>
      <member refid="class_quant_lib_1_1_time_series_1ae30b079f18b3287e4d98a4e8f62e56f1" prot="private" virt="non-virtual"><scope>QuantLib::TimeSeries</scope><name>values_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
