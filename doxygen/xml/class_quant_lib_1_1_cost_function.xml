<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_cost_function" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>QuantLib::CostFunction</compoundname>
    <derivedcompoundref refid="class_quant_lib_1_1_andreasen_huge_cost_function" prot="public" virt="non-virtual">QuantLib::AndreasenHugeCostFunction</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_calibrated_model_1_1_calibration_function" prot="public" virt="non-virtual">QuantLib::CalibratedModel::CalibrationFunction</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_combined_cost_function" prot="public" virt="non-virtual">QuantLib::CombinedCostFunction</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_fitted_bond_discount_curve_1_1_fitting_method_1_1_fitting_cost" prot="public" virt="non-virtual">QuantLib::FittedBondDiscountCurve::FittingMethod::FittingCost</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_frobenius_cost_function" prot="public" virt="non-virtual">QuantLib::FrobeniusCostFunction</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_least_square_function" prot="public" virt="non-virtual">QuantLib::LeastSquareFunction</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_penalty_function" prot="public" virt="non-virtual">QuantLib::PenaltyFunction&lt; Curve &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_projected_cost_function" prot="public" virt="non-virtual">QuantLib::ProjectedCostFunction</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_simple_cost_function" prot="public" virt="non-virtual">QuantLib::SimpleCostFunction&lt; ValuesFn &gt;</derivedcompoundref>
    <includes refid="costfunction_8hpp" local="no">costfunction.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_cost_function_1a04929e863b85bc26f50ad9052ba7ee73" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual QuantLib::CostFunction::~CostFunction</definition>
        <argsstring>()=default</argsstring>
        <name>~CostFunction</name>
        <qualifiedname>QuantLib::CostFunction::~CostFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/costfunction.hpp" line="36" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cost_function_1a2255742e3e05477d773cdf3705411661" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>virtual Real QuantLib::CostFunction::value</definition>
        <argsstring>(const Array &amp;x) const</argsstring>
        <name>value</name>
        <qualifiedname>QuantLib::CostFunction::value</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_calibrated_model_1_1_calibration_function_1acdc3e848f5f9505bfb6b948514ed4c9e">value</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_fitted_bond_discount_curve_1_1_fitting_method_1_1_fitting_cost_1aae76e55013efe5bc9d8ef1895e6541b4">value</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_frobenius_cost_function_1a7cb47cf2c965c590008263ce0f8d8190">value</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_least_square_function_1ab2c54321e0fa6f2b028141977a53f424">value</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_penalty_function_1a25213140950838939fd7b8b91b6af5d6">value</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_projected_cost_function_1ac1f4603a8a5afc64af1300e4f716aa16">value</reimplementedby>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>method to overload to compute the cost function value in x </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/costfunction.hpp" line="38" column="22" bodyfile="ql/math/optimization/costfunction.hpp" bodystart="38" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cost_function_1ab43da17891b724c8352c01c2478d04db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>virtual Array QuantLib::CostFunction::values</definition>
        <argsstring>(const Array &amp;x) const =0</argsstring>
        <name>values</name>
        <qualifiedname>QuantLib::CostFunction::values</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_andreasen_huge_cost_function_1a47eecac070954efce4df529dfaedf471">values</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_calibrated_model_1_1_calibration_function_1ad42f7ec30f20588760c5c5b6239fae28">values</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_combined_cost_function_1ad9737114733b1ee3e524824270e9560c">values</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_fitted_bond_discount_curve_1_1_fitting_method_1_1_fitting_cost_1a186c2cebc7b0dfa4c217d7bac1d2789e">values</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_frobenius_cost_function_1a1d60641faf02e17493da9d62ed16f040">values</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_least_square_function_1a70aa6d35e25b5e7f906a9858c8aaad08">values</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_penalty_function_1a0376aee7f18f0769c343b495253d2d6b">values</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_projected_cost_function_1a2a78484efcaf9917ba2aba9a5d67fa0f">values</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_simple_cost_function_1af7ffd6da8c332de98ab4df7e8936ad72">values</reimplementedby>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>method to overload to compute the cost function values in x </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/costfunction.hpp" line="45" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cost_function_1aad44fa61459514a8e55208d50716698b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void QuantLib::CostFunction::gradient</definition>
        <argsstring>(Array &amp;grad, const Array &amp;x) const</argsstring>
        <name>gradient</name>
        <qualifiedname>QuantLib::CostFunction::gradient</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_least_square_function_1a6c60d9bfb4ac745d5112b2e1b0bc1734">gradient</reimplementedby>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>grad</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>method to overload to compute grad_f, the first derivative of </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/costfunction.hpp" line="49" column="22" bodyfile="ql/math/optimization/costfunction.hpp" bodystart="49" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cost_function_1ae0c8902d6ce2e535237ae4370956d161" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>virtual Real QuantLib::CostFunction::valueAndGradient</definition>
        <argsstring>(Array &amp;grad, const Array &amp;x) const</argsstring>
        <name>valueAndGradient</name>
        <qualifiedname>QuantLib::CostFunction::valueAndGradient</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_least_square_function_1a0b073f44832f3fbd62e6fc64ffdd6c46">valueAndGradient</reimplementedby>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>grad</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>method to overload to compute grad_f, the first derivative of </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/costfunction.hpp" line="64" column="22" bodyfile="ql/math/optimization/costfunction.hpp" bodystart="64" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cost_function_1a5bf2d8163ed5dea7ec811377e2835eca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void QuantLib::CostFunction::jacobian</definition>
        <argsstring>(Matrix &amp;jac, const Array &amp;x) const</argsstring>
        <name>jacobian</name>
        <qualifiedname>QuantLib::CostFunction::jacobian</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>jac</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>method to overload to compute J_f, the jacobian of </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/costfunction.hpp" line="72" column="22" bodyfile="ql/math/optimization/costfunction.hpp" bodystart="72" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cost_function_1a1aa00768b27a3446404b3029660c2e68" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>virtual Array QuantLib::CostFunction::valuesAndJacobian</definition>
        <argsstring>(Matrix &amp;jac, const Array &amp;x) const</argsstring>
        <name>valuesAndJacobian</name>
        <qualifiedname>QuantLib::CostFunction::valuesAndJacobian</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>jac</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>method to overload to compute J_f, the jacobian of </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/costfunction.hpp" line="89" column="23" bodyfile="ql/math/optimization/costfunction.hpp" bodystart="89" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cost_function_1a0dc9070b6d79cf91aef8ba48e2808263" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>virtual Real QuantLib::CostFunction::finiteDifferenceEpsilon</definition>
        <argsstring>() const</argsstring>
        <name>finiteDifferenceEpsilon</name>
        <qualifiedname>QuantLib::CostFunction::finiteDifferenceEpsilon</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_calibrated_model_1_1_calibration_function_1a3193ba8645a98f248a336970218c2684">finiteDifferenceEpsilon</reimplementedby>
        <briefdescription>
<para><ref refid="struct_quant_lib_1_1_default" kindref="compound">Default</ref> epsilon for finite difference method : </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/costfunction.hpp" line="96" column="22" bodyfile="ql/math/optimization/costfunction.hpp" bodystart="96" bodyend="96"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Cost function abstract class for optimization problem. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QuantLib::AndreasenHugeCostFunction</label>
        <link refid="class_quant_lib_1_1_andreasen_huge_cost_function"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::CalibratedModel::CalibrationFunction</label>
        <link refid="class_quant_lib_1_1_calibrated_model_1_1_calibration_function"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::CombinedCostFunction</label>
        <link refid="class_quant_lib_1_1_combined_cost_function"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::CostFunction</label>
        <link refid="class_quant_lib_1_1_cost_function"/>
      </node>
      <node id="5">
        <label>QuantLib::FittedBondDiscountCurve::FittingMethod::FittingCost</label>
        <link refid="class_quant_lib_1_1_fitted_bond_discount_curve_1_1_fitting_method_1_1_fitting_cost"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::FrobeniusCostFunction</label>
        <link refid="class_quant_lib_1_1_frobenius_cost_function"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::LeastSquareFunction</label>
        <link refid="class_quant_lib_1_1_least_square_function"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QuantLib::PenaltyFunction&lt; Curve &gt;</label>
        <link refid="class_quant_lib_1_1_penalty_function"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>QuantLib::ProjectedCostFunction</label>
        <link refid="class_quant_lib_1_1_projected_cost_function"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>QuantLib::SimpleCostFunction&lt; ValuesFn &gt;</label>
        <link refid="class_quant_lib_1_1_simple_cost_function"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="ql/math/optimization/costfunction.hpp" line="34" column="5" bodyfile="ql/math/optimization/costfunction.hpp" bodystart="34" bodyend="97"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_cost_function_1a0dc9070b6d79cf91aef8ba48e2808263" prot="public" virt="virtual"><scope>QuantLib::CostFunction</scope><name>finiteDifferenceEpsilon</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1aad44fa61459514a8e55208d50716698b" prot="public" virt="virtual"><scope>QuantLib::CostFunction</scope><name>gradient</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a5bf2d8163ed5dea7ec811377e2835eca" prot="public" virt="virtual"><scope>QuantLib::CostFunction</scope><name>jacobian</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a2255742e3e05477d773cdf3705411661" prot="public" virt="virtual"><scope>QuantLib::CostFunction</scope><name>value</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1ae0c8902d6ce2e535237ae4370956d161" prot="public" virt="virtual"><scope>QuantLib::CostFunction</scope><name>valueAndGradient</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1ab43da17891b724c8352c01c2478d04db" prot="public" virt="pure-virtual"><scope>QuantLib::CostFunction</scope><name>values</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a1aa00768b27a3446404b3029660c2e68" prot="public" virt="virtual"><scope>QuantLib::CostFunction</scope><name>valuesAndJacobian</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a04929e863b85bc26f50ad9052ba7ee73" prot="public" virt="virtual"><scope>QuantLib::CostFunction</scope><name>~CostFunction</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
