<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_projection" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::Projection</compoundname>
    <derivedcompoundref refid="class_quant_lib_1_1_projected_cost_function" prot="public" virt="non-virtual">QuantLib::ProjectedCostFunction</derivedcompoundref>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_projection_1a029121abce200b4f3281ab7f66f5d0d7" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::Projection::numberOfFreeParameters_</definition>
        <argsstring></argsstring>
        <name>numberOfFreeParameters_</name>
        <qualifiedname>QuantLib::Projection::numberOfFreeParameters_</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/projection.hpp" line="49" column="14" bodyfile="ql/math/optimization/projection.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_projection_1a1e957452efd8ff7a65e51909a0bcb584" prot="protected" static="no" mutable="no">
        <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>const Array QuantLib::Projection::fixedParameters_</definition>
        <argsstring></argsstring>
        <name>fixedParameters_</name>
        <qualifiedname>QuantLib::Projection::fixedParameters_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/projection.hpp" line="50" column="21" bodyfile="ql/math/optimization/projection.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_projection_1a4cd8b09b3e1d23d25477eaa6dba04e84" prot="protected" static="no" mutable="yes">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Projection::actualParameters_</definition>
        <argsstring></argsstring>
        <name>actualParameters_</name>
        <qualifiedname>QuantLib::Projection::actualParameters_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/projection.hpp" line="51" column="23" bodyfile="ql/math/optimization/projection.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_projection_1af1c0d7e2a8a06f456451f7747f23c480" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; bool &gt;</type>
        <definition>std::vector&lt;bool&gt; QuantLib::Projection::fixParameters_</definition>
        <argsstring></argsstring>
        <name>fixParameters_</name>
        <qualifiedname>QuantLib::Projection::fixParameters_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/projection.hpp" line="52" column="21" bodyfile="ql/math/optimization/projection.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_projection_1a7d889fbae994ca705eda9b5c1a3a520d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Projection::Projection</definition>
        <argsstring>(const Array &amp;parameterValues, std::vector&lt; bool &gt; fixParameters=std::vector&lt; bool &gt;())</argsstring>
        <name>Projection</name>
        <qualifiedname>QuantLib::Projection::Projection</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>parameterValues</declname>
        </param>
        <param>
          <type>std::vector&lt; bool &gt;</type>
          <declname>fixParameters</declname>
          <defval>std::vector&lt; bool &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/projection.hpp" line="35" column="9" bodyfile="ql/math/optimization/projection.cpp" bodystart="27" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_projection_1af30a26dd58c5a706bc8974856792ef40" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Projection::project</definition>
        <argsstring>(const Array &amp;parameters) const</argsstring>
        <name>project</name>
        <qualifiedname>QuantLib::Projection::project</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>returns the subset of free parameters corresponding </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/projection.hpp" line="40" column="23" bodyfile="ql/math/optimization/projection.cpp" bodystart="54" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_projection_1acf2fff03971f0704c856aedac032747c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Projection::include</definition>
        <argsstring>(const Array &amp;projectedParameters) const</argsstring>
        <name>include</name>
        <qualifiedname>QuantLib::Projection::include</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>projectedParameters</declname>
        </param>
        <briefdescription>
<para>returns whole set of parameters corresponding to the set </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/projection.hpp" line="44" column="23" bodyfile="ql/math/optimization/projection.cpp" bodystart="67" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_projection_1a2c546565be24111cf3cd6adbcad88761" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual QuantLib::Projection::~Projection</definition>
        <argsstring>()=default</argsstring>
        <name>~Projection</name>
        <qualifiedname>QuantLib::Projection::~Projection</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/projection.hpp" line="45" column="17"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_projection_1aaccb4b6bdba000a3f7ecb7505ac351ef" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::Projection::mapFreeParameters</definition>
        <argsstring>(const Array &amp;parameterValues) const</argsstring>
        <name>mapFreeParameters</name>
        <qualifiedname>QuantLib::Projection::mapFreeParameters</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>parameterValues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/projection.hpp" line="48" column="14" bodyfile="ql/math/optimization/projection.cpp" bodystart="43" bodyend="52"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QuantLib::ProjectedCostFunction</label>
        <link refid="class_quant_lib_1_1_projected_cost_function"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::Projection</label>
        <link refid="class_quant_lib_1_1_projection"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>QuantLib::Array</label>
        <link refid="class_quant_lib_1_1_array"/>
      </node>
      <node id="1">
        <label>QuantLib::Projection</label>
        <link refid="class_quant_lib_1_1_projection"/>
        <childnode refid="2" relation="usage">
          <edgelabel>actualParameters_</edgelabel>
          <edgelabel>fixedParameters_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/math/optimization/projection.hpp" line="33" column="5" bodyfile="ql/math/optimization/projection.hpp" bodystart="33" bodyend="53"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_projection_1a4cd8b09b3e1d23d25477eaa6dba04e84" prot="protected" virt="non-virtual"><scope>QuantLib::Projection</scope><name>actualParameters_</name></member>
      <member refid="class_quant_lib_1_1_projection_1a1e957452efd8ff7a65e51909a0bcb584" prot="protected" virt="non-virtual"><scope>QuantLib::Projection</scope><name>fixedParameters_</name></member>
      <member refid="class_quant_lib_1_1_projection_1af1c0d7e2a8a06f456451f7747f23c480" prot="protected" virt="non-virtual"><scope>QuantLib::Projection</scope><name>fixParameters_</name></member>
      <member refid="class_quant_lib_1_1_projection_1acf2fff03971f0704c856aedac032747c" prot="public" virt="virtual"><scope>QuantLib::Projection</scope><name>include</name></member>
      <member refid="class_quant_lib_1_1_projection_1aaccb4b6bdba000a3f7ecb7505ac351ef" prot="protected" virt="non-virtual"><scope>QuantLib::Projection</scope><name>mapFreeParameters</name></member>
      <member refid="class_quant_lib_1_1_projection_1a029121abce200b4f3281ab7f66f5d0d7" prot="protected" virt="non-virtual"><scope>QuantLib::Projection</scope><name>numberOfFreeParameters_</name></member>
      <member refid="class_quant_lib_1_1_projection_1af30a26dd58c5a706bc8974856792ef40" prot="public" virt="virtual"><scope>QuantLib::Projection</scope><name>project</name></member>
      <member refid="class_quant_lib_1_1_projection_1a7d889fbae994ca705eda9b5c1a3a520d" prot="public" virt="non-virtual"><scope>QuantLib::Projection</scope><name>Projection</name></member>
      <member refid="class_quant_lib_1_1_projection_1a2c546565be24111cf3cd6adbcad88761" prot="public" virt="virtual"><scope>QuantLib::Projection</scope><name>~Projection</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
