<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_implied_std_dev_quote" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::ImpliedStdDevQuote</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_quote" prot="public" virt="non-virtual">QuantLib::Quote</basecompoundref>
    <basecompoundref refid="class_quant_lib_1_1_lazy_object" prot="public" virt="non-virtual">QuantLib::LazyObject</basecompoundref>
    <includes refid="impliedstddevquote_8hpp" local="no">impliedstddevquote.hpp</includes>
    <sectiondef kind="user-defined">
      <header>Quote interface</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_implied_std_dev_quote_1ab348b9ac00a9aee85b5d41ef0661d519" prot="protected" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ImpliedStdDevQuote::impliedStdev_</definition>
        <argsstring></argsstring>
        <name>impliedStdev_</name>
        <qualifiedname>QuantLib::ImpliedStdDevQuote::impliedStdev_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quotes/impliedstddevquote.hpp" line="52" column="22" bodyfile="ql/quotes/impliedstddevquote.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_implied_std_dev_quote_1a22bc4fc0a5dba129d5ad211a0409a757" prot="protected" static="no" mutable="no">
        <type>Option::Type</type>
        <definition>Option::Type QuantLib::ImpliedStdDevQuote::optionType_</definition>
        <argsstring></argsstring>
        <name>optionType_</name>
        <qualifiedname>QuantLib::ImpliedStdDevQuote::optionType_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quotes/impliedstddevquote.hpp" line="53" column="22" bodyfile="ql/quotes/impliedstddevquote.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_implied_std_dev_quote_1a4eb759d3e580c4a2911e023777b21dba" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ImpliedStdDevQuote::strike_</definition>
        <argsstring></argsstring>
        <name>strike_</name>
        <qualifiedname>QuantLib::ImpliedStdDevQuote::strike_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quotes/impliedstddevquote.hpp" line="54" column="14" bodyfile="ql/quotes/impliedstddevquote.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_implied_std_dev_quote_1acfed90e4c6074254193e2f933e0e309c" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ImpliedStdDevQuote::accuracy_</definition>
        <argsstring></argsstring>
        <name>accuracy_</name>
        <qualifiedname>QuantLib::ImpliedStdDevQuote::accuracy_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quotes/impliedstddevquote.hpp" line="55" column="14" bodyfile="ql/quotes/impliedstddevquote.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_implied_std_dev_quote_1aa4908c33fb1a4d17a6215bbecaf66725" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref></type>
        <definition>Natural QuantLib::ImpliedStdDevQuote::maxIter_</definition>
        <argsstring></argsstring>
        <name>maxIter_</name>
        <qualifiedname>QuantLib::ImpliedStdDevQuote::maxIter_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quotes/impliedstddevquote.hpp" line="56" column="17" bodyfile="ql/quotes/impliedstddevquote.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_implied_std_dev_quote_1a09519b40d67da6c8a455d24eac5e932e" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
        <definition>Handle&lt;Quote&gt; QuantLib::ImpliedStdDevQuote::forward_</definition>
        <argsstring></argsstring>
        <name>forward_</name>
        <qualifiedname>QuantLib::ImpliedStdDevQuote::forward_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quotes/impliedstddevquote.hpp" line="57" column="16" bodyfile="ql/quotes/impliedstddevquote.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_implied_std_dev_quote_1ad018a451d470d3442ce7d9f170219c6c" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
        <definition>Handle&lt;Quote&gt; QuantLib::ImpliedStdDevQuote::price_</definition>
        <argsstring></argsstring>
        <name>price_</name>
        <qualifiedname>QuantLib::ImpliedStdDevQuote::price_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quotes/impliedstddevquote.hpp" line="58" column="16" bodyfile="ql/quotes/impliedstddevquote.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_implied_std_dev_quote_1acf202bebfe9f30cf9b7fa214860f514a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ImpliedStdDevQuote::value</definition>
        <argsstring>() const override</argsstring>
        <name>value</name>
        <qualifiedname>QuantLib::ImpliedStdDevQuote::value</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_quote_1a25f93d1c25434ae28f20f9416b497ccb">value</reimplements>
        <briefdescription>
<para>returns the current value </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quotes/impliedstddevquote.hpp" line="47" column="14" bodyfile="ql/quotes/impliedstddevquote.cpp" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_implied_std_dev_quote_1a78bfc0471486606d03c3238f81672694" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool QuantLib::ImpliedStdDevQuote::isValid</definition>
        <argsstring>() const override</argsstring>
        <name>isValid</name>
        <qualifiedname>QuantLib::ImpliedStdDevQuote::isValid</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_quote_1a9a340a974b8403b9385867b62bb8ae2d">isValid</reimplements>
        <briefdescription>
<para>returns true if the <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> holds a valid value </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quotes/impliedstddevquote.hpp" line="48" column="14" bodyfile="ql/quotes/impliedstddevquote.cpp" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_implied_std_dev_quote_1ac44b057a3e83a5b213ce26f09254cec7" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::ImpliedStdDevQuote::performCalculations</definition>
        <argsstring>() const override</argsstring>
        <name>performCalculations</name>
        <qualifiedname>QuantLib::ImpliedStdDevQuote::performCalculations</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_lazy_object_1aafa5583a3743d9f93fa40da5b62e1ff8">performCalculations</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must implement any calculations which must be (re)done in order to calculate the desired results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quotes/impliedstddevquote.hpp" line="51" column="14" bodyfile="ql/quotes/impliedstddevquote.cpp" bodystart="50" bodyend="64"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_implied_std_dev_quote_1a34189b05949b6531c5c63923016a5d65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::ImpliedStdDevQuote::ImpliedStdDevQuote</definition>
        <argsstring>(Option::Type optionType, Handle&lt; Quote &gt; forward, Handle&lt; Quote &gt; price, Real strike, Real guess, Real accuracy=1.0e-6, Natural maxIter=100)</argsstring>
        <name>ImpliedStdDevQuote</name>
        <qualifiedname>QuantLib::ImpliedStdDevQuote::ImpliedStdDevQuote</qualifiedname>
        <param>
          <type>Option::Type</type>
          <declname>optionType</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
          <declname>price</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>guess</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.0e-6</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref></type>
          <declname>maxIter</declname>
          <defval>100</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quotes/impliedstddevquote.hpp" line="38" column="9" bodyfile="ql/quotes/impliedstddevquote.cpp" bodystart="27" bodyend="38"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>quote for the implied standard deviation of an underlying </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::ImpliedStdDevQuote</label>
        <link refid="class_quant_lib_1_1_implied_std_dev_quote"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::Quote</label>
        <link refid="class_quant_lib_1_1_quote"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>QuantLib::Handle&lt; QuantLib::Quote &gt;</label>
        <link refid="class_quant_lib_1_1_handle"/>
      </node>
      <node id="1">
        <label>QuantLib::ImpliedStdDevQuote</label>
        <link refid="class_quant_lib_1_1_implied_std_dev_quote"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>forward_</edgelabel>
          <edgelabel>price_</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::Quote</label>
        <link refid="class_quant_lib_1_1_quote"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/quotes/impliedstddevquote.hpp" line="35" column="5" bodyfile="ql/quotes/impliedstddevquote.hpp" bodystart="36" bodyend="59"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_implied_std_dev_quote_1acfed90e4c6074254193e2f933e0e309c" prot="protected" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>accuracy_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a02070ea7442d30625992c1711030d4b8" prot="protected" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>alwaysForward_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a17c9433135a259e4776baec66204a484" prot="public" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>alwaysForwardNotifications</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a5244c7f83592375a0ea9048296435fd1" prot="protected" virt="virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a58b4986a80efa18634483a92c121e26e" prot="protected" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>calculated_</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_implied_std_dev_quote_1a09519b40d67da6c8a455d24eac5e932e" prot="protected" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>forward_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1afac6ee19c3107c453e1347dd8000e023" prot="public" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>forwardFirstNotificationOnly</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7157f41e83f2c5d924f5c5bafda04d1d" prot="public" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>freeze</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7bb721fe00c6854e602758aba629ab77" prot="protected" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>frozen_</name></member>
      <member refid="class_quant_lib_1_1_implied_std_dev_quote_1a34189b05949b6531c5c63923016a5d65" prot="public" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>ImpliedStdDevQuote</name></member>
      <member refid="class_quant_lib_1_1_implied_std_dev_quote_1ab348b9ac00a9aee85b5d41ef0661d519" prot="protected" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>impliedStdev_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a0a7c5d42815a4e16ee2158e24dbfc748" prot="public" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>isCalculated</name></member>
      <member refid="class_quant_lib_1_1_implied_std_dev_quote_1a78bfc0471486606d03c3238f81672694" prot="public" virt="virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>isValid</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a26f18f4ff7faaaebd8eae50e064b493e" prot="public" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>LazyObject</name></member>
      <member refid="class_quant_lib_1_1_implied_std_dev_quote_1aa4908c33fb1a4d17a6215bbecaf66725" prot="protected" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>maxIter_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Quote::"><scope>QuantLib::ImpliedStdDevQuote</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Quote::"><scope>QuantLib::ImpliedStdDevQuote</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::ImpliedStdDevQuote</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::ImpliedStdDevQuote</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Quote::"><scope>QuantLib::ImpliedStdDevQuote</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::QuantLib::Observer::"><scope>QuantLib::ImpliedStdDevQuote</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_implied_std_dev_quote_1a22bc4fc0a5dba129d5ad211a0409a757" prot="protected" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>optionType_</name></member>
      <member refid="class_quant_lib_1_1_implied_std_dev_quote_1ac44b057a3e83a5b213ce26f09254cec7" prot="protected" virt="virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>performCalculations</name></member>
      <member refid="class_quant_lib_1_1_implied_std_dev_quote_1ad018a451d470d3442ce7d9f170219c6c" prot="protected" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>price_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a70c9b24e50132408d8d9ce4f6674662a" prot="public" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>recalculate</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_implied_std_dev_quote_1a4eb759d3e580c4a2911e023777b21dba" prot="protected" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>strike_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a2e0e4786666453024b9d4e0761f2770b" prot="public" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>unfreeze</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1adee2bf49be5c4c78736be293321a856d" prot="public" virt="virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_implied_std_dev_quote_1acf202bebfe9f30cf9b7fa214860f514a" prot="public" virt="virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>value</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a9d719c43bb627177a90d7d12324a2d6e" prot="public" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>~LazyObject</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_quote_1a0433957cb1683b2ca329ef56bd741143" prot="public" virt="non-virtual"><scope>QuantLib::ImpliedStdDevQuote</scope><name>~Quote</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
