<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="struct_quant_lib_1_1_gaussian_copula_policy" kind="struct" language="C++" prot="public">
    <compoundname>QuantLib::GaussianCopulaPolicy</compoundname>
    <includes refid="gaussiancopulapolicy_8hpp" local="no">gaussiancopulapolicy.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_quant_lib_1_1_gaussian_copula_policy_1ae3927e9d97e3fffc5eca587372623f1f" prot="public" static="no">
        <type>int</type>
        <definition>typedef int QuantLib::GaussianCopulaPolicy::initTraits</definition>
        <argsstring></argsstring>
        <name>initTraits</name>
        <qualifiedname>QuantLib::GaussianCopulaPolicy::initTraits</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/gaussiancopulapolicy.hpp" line="37" column="21" bodyfile="ql/experimental/math/gaussiancopulapolicy.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="struct_quant_lib_1_1_gaussian_copula_policy_1a4327e0fa87ecf92413d8aa85d53e80ae" prot="private" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::GaussianCopulaPolicy::numFactors_</definition>
        <argsstring></argsstring>
        <name>numFactors_</name>
        <qualifiedname>QuantLib::GaussianCopulaPolicy::numFactors_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/gaussiancopulapolicy.hpp" line="118" column="22" bodyfile="ql/experimental/math/gaussiancopulapolicy.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="struct_quant_lib_1_1_gaussian_copula_policy_1a2eae780a310da029889afc043c719a3a" prot="private" static="yes" mutable="no">
        <type>const <ref refid="class_quant_lib_1_1_normal_distribution" kindref="compound">NormalDistribution</ref></type>
        <definition>const NormalDistribution QuantLib::GaussianCopulaPolicy::density_</definition>
        <argsstring></argsstring>
        <name>density_</name>
        <qualifiedname>QuantLib::GaussianCopulaPolicy::density_</qualifiedname>
        <initializer>= 
        <ref refid="class_quant_lib_1_1_normal_distribution" kindref="compound">NormalDistribution</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/gaussiancopulapolicy.hpp" line="120" column="41" bodyfile="ql/experimental/math/gaussiancopulapolicy.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_quant_lib_1_1_gaussian_copula_policy_1a50d3c34506e37bf2093c92728f0a2969" prot="private" static="yes" mutable="no">
        <type>const <ref refid="class_quant_lib_1_1_cumulative_normal_distribution" kindref="compound">CumulativeNormalDistribution</ref></type>
        <definition>const CumulativeNormalDistribution QuantLib::GaussianCopulaPolicy::cumulative_</definition>
        <argsstring></argsstring>
        <name>cumulative_</name>
        <qualifiedname>QuantLib::GaussianCopulaPolicy::cumulative_</qualifiedname>
        <initializer>= 
        <ref refid="class_quant_lib_1_1_cumulative_normal_distribution" kindref="compound">CumulativeNormalDistribution</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/gaussiancopulapolicy.hpp" line="121" column="51" bodyfile="ql/experimental/math/gaussiancopulapolicy.hpp" bodystart="121" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_quant_lib_1_1_gaussian_copula_policy_1af9a1a3f060fa0d73b3a9258c27a8460f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::GaussianCopulaPolicy::GaussianCopulaPolicy</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; Real &gt; &gt; &amp;factorWeights=std::vector&lt; std::vector&lt; Real &gt; &gt;(), const initTraits &amp;dummy=int())</argsstring>
        <name>GaussianCopulaPolicy</name>
        <qualifiedname>QuantLib::GaussianCopulaPolicy::GaussianCopulaPolicy</qualifiedname>
        <param>
          <type>const std::vector&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt; &amp;</type>
          <declname>factorWeights</declname>
          <defval>std::vector&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt;()</defval>
        </param>
        <param>
          <type>const initTraits &amp;</type>
          <declname>dummy</declname>
          <defval>int()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/gaussiancopulapolicy.hpp" line="39" column="18" bodyfile="ql/experimental/math/gaussiancopulapolicy.hpp" bodystart="39" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_gaussian_copula_policy_1a044e460c6ab9e15f909deab23e04012d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::GaussianCopulaPolicy::numFactors</definition>
        <argsstring>() const</argsstring>
        <name>numFactors</name>
        <qualifiedname>QuantLib::GaussianCopulaPolicy::numFactors</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of independent random factors. This is the only methos that ould stop the class from being static, it is needed for the MC generator construction. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/gaussiancopulapolicy.hpp" line="59" column="14" bodyfile="ql/experimental/math/gaussiancopulapolicy.hpp" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_gaussian_copula_policy_1ad50f36b2782c3e1a13ca83688dfe0352" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>initTraits</type>
        <definition>initTraits QuantLib::GaussianCopulaPolicy::getInitTraits</definition>
        <argsstring>() const</argsstring>
        <name>getInitTraits</name>
        <qualifiedname>QuantLib::GaussianCopulaPolicy::getInitTraits</qualifiedname>
        <briefdescription>
<para>returns a copy of the initialization arguments </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/gaussiancopulapolicy.hpp" line="64" column="20" bodyfile="ql/experimental/math/gaussiancopulapolicy.hpp" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_gaussian_copula_policy_1a9d04803f25003f8441dcd7a243bb14ea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::GaussianCopulaPolicy::cumulativeY</definition>
        <argsstring>(Real val, Size iVariable) const</argsstring>
        <name>cumulativeY</name>
        <qualifiedname>QuantLib::GaussianCopulaPolicy::cumulativeY</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iVariable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cumulative probability of a given latent variable The iVariable parameter is the index of the requested variable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/gaussiancopulapolicy.hpp" line="71" column="21" bodyfile="ql/experimental/math/gaussiancopulapolicy.hpp" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_gaussian_copula_policy_1a845aea5e9cf6bdec7b65a6242be72701" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::GaussianCopulaPolicy::cumulativeZ</definition>
        <argsstring>(Real z) const</argsstring>
        <name>cumulativeZ</name>
        <qualifiedname>QuantLib::GaussianCopulaPolicy::cumulativeZ</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Cumulative probability of the idiosyncratic factors (all the same) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/gaussiancopulapolicy.hpp" line="75" column="21" bodyfile="ql/experimental/math/gaussiancopulapolicy.hpp" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_gaussian_copula_policy_1a98d3338e4fc27da80cdaf69289cb7063" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::GaussianCopulaPolicy::density</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;m) const</argsstring>
        <name>density</name>
        <qualifiedname>QuantLib::GaussianCopulaPolicy::density</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> density of a given realization of values of the systemic factors (remember they are independent). In the normal case, since they all follow the same law it is just a trivial product of the same density. Intended to be used in numerical integration of an arbitrary function depending on those values. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/gaussiancopulapolicy.hpp" line="85" column="21" bodyfile="ql/experimental/math/gaussiancopulapolicy.hpp" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_gaussian_copula_policy_1a205c08aa2c60549b48ab76299b9ee419" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GaussianCopulaPolicy::inverseCumulativeY</definition>
        <argsstring>(Probability p, Size iVariable) const</argsstring>
        <name>inverseCumulativeY</name>
        <qualifiedname>QuantLib::GaussianCopulaPolicy::inverseCumulativeY</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iVariable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the inverse of the cumulative distribution of the (modelled) latent variable (as indexed by iVariable). The normal stability avoids the convolution of the factors&apos; distributions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/gaussiancopulapolicy.hpp" line="93" column="14" bodyfile="ql/experimental/math/gaussiancopulapolicy.hpp" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_gaussian_copula_policy_1a124d8889226d248917b448b8a6bed501" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GaussianCopulaPolicy::inverseCumulativeZ</definition>
        <argsstring>(Probability p) const</argsstring>
        <name>inverseCumulativeZ</name>
        <qualifiedname>QuantLib::GaussianCopulaPolicy::inverseCumulativeZ</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the inverse of the cumulative distribution of the idiosyncratic factor (identically distributed for all latent variables) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/gaussiancopulapolicy.hpp" line="99" column="14" bodyfile="ql/experimental/math/gaussiancopulapolicy.hpp" bodystart="99" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_gaussian_copula_policy_1a0b9953c857f26a2196f801dfe0e95398" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GaussianCopulaPolicy::inverseCumulativeDensity</definition>
        <argsstring>(Probability p, Size iFactor) const</argsstring>
        <name>inverseCumulativeDensity</name>
        <qualifiedname>QuantLib::GaussianCopulaPolicy::inverseCumulativeDensity</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the inverse of the cumulative distribution of the systemic factor iFactor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/gaussiancopulapolicy.hpp" line="105" column="14" bodyfile="ql/experimental/math/gaussiancopulapolicy.hpp" bodystart="105" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_gaussian_copula_policy_1a60f16a0b2fc61d417fbad88340de7dba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GaussianCopulaPolicy::allFactorCumulInverter</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;probs) const</argsstring>
        <name>allFactorCumulInverter</name>
        <qualifiedname>QuantLib::GaussianCopulaPolicy::allFactorCumulInverter</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>probs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/gaussiancopulapolicy.hpp" line="110" column="21" bodyfile="ql/experimental/math/gaussiancopulapolicy.hpp" bodystart="110" bodyend="116"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Gaussian Latent Model&apos;s copula policy. Its simplicity is a result of the convolution stability of the Gaussian distribution. </para>
    </detaileddescription>
    <location file="ql/experimental/math/gaussiancopulapolicy.hpp" line="35" column="5" bodyfile="ql/experimental/math/gaussiancopulapolicy.hpp" bodystart="35" bodyend="122"/>
    <listofallmembers>
      <member refid="struct_quant_lib_1_1_gaussian_copula_policy_1a60f16a0b2fc61d417fbad88340de7dba" prot="public" virt="non-virtual"><scope>QuantLib::GaussianCopulaPolicy</scope><name>allFactorCumulInverter</name></member>
      <member refid="struct_quant_lib_1_1_gaussian_copula_policy_1a50d3c34506e37bf2093c92728f0a2969" prot="private" virt="non-virtual"><scope>QuantLib::GaussianCopulaPolicy</scope><name>cumulative_</name></member>
      <member refid="struct_quant_lib_1_1_gaussian_copula_policy_1a9d04803f25003f8441dcd7a243bb14ea" prot="public" virt="non-virtual"><scope>QuantLib::GaussianCopulaPolicy</scope><name>cumulativeY</name></member>
      <member refid="struct_quant_lib_1_1_gaussian_copula_policy_1a845aea5e9cf6bdec7b65a6242be72701" prot="public" virt="non-virtual"><scope>QuantLib::GaussianCopulaPolicy</scope><name>cumulativeZ</name></member>
      <member refid="struct_quant_lib_1_1_gaussian_copula_policy_1a98d3338e4fc27da80cdaf69289cb7063" prot="public" virt="non-virtual"><scope>QuantLib::GaussianCopulaPolicy</scope><name>density</name></member>
      <member refid="struct_quant_lib_1_1_gaussian_copula_policy_1a2eae780a310da029889afc043c719a3a" prot="private" virt="non-virtual"><scope>QuantLib::GaussianCopulaPolicy</scope><name>density_</name></member>
      <member refid="struct_quant_lib_1_1_gaussian_copula_policy_1af9a1a3f060fa0d73b3a9258c27a8460f" prot="public" virt="non-virtual"><scope>QuantLib::GaussianCopulaPolicy</scope><name>GaussianCopulaPolicy</name></member>
      <member refid="struct_quant_lib_1_1_gaussian_copula_policy_1ad50f36b2782c3e1a13ca83688dfe0352" prot="public" virt="non-virtual"><scope>QuantLib::GaussianCopulaPolicy</scope><name>getInitTraits</name></member>
      <member refid="struct_quant_lib_1_1_gaussian_copula_policy_1ae3927e9d97e3fffc5eca587372623f1f" prot="public" virt="non-virtual"><scope>QuantLib::GaussianCopulaPolicy</scope><name>initTraits</name></member>
      <member refid="struct_quant_lib_1_1_gaussian_copula_policy_1a0b9953c857f26a2196f801dfe0e95398" prot="public" virt="non-virtual"><scope>QuantLib::GaussianCopulaPolicy</scope><name>inverseCumulativeDensity</name></member>
      <member refid="struct_quant_lib_1_1_gaussian_copula_policy_1a205c08aa2c60549b48ab76299b9ee419" prot="public" virt="non-virtual"><scope>QuantLib::GaussianCopulaPolicy</scope><name>inverseCumulativeY</name></member>
      <member refid="struct_quant_lib_1_1_gaussian_copula_policy_1a124d8889226d248917b448b8a6bed501" prot="public" virt="non-virtual"><scope>QuantLib::GaussianCopulaPolicy</scope><name>inverseCumulativeZ</name></member>
      <member refid="struct_quant_lib_1_1_gaussian_copula_policy_1a044e460c6ab9e15f909deab23e04012d" prot="public" virt="non-virtual"><scope>QuantLib::GaussianCopulaPolicy</scope><name>numFactors</name></member>
      <member refid="struct_quant_lib_1_1_gaussian_copula_policy_1a4327e0fa87ecf92413d8aa85d53e80ae" prot="private" virt="non-virtual"><scope>QuantLib::GaussianCopulaPolicy</scope><name>numFactors_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
