<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_sampler_gaussian" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::SamplerGaussian</compoundname>
    <includes refid="hybridsimulatedannealingfunctors_8hpp" local="no">hybridsimulatedannealingfunctors.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_sampler_gaussian_1acd66982739e09530c056f68bb0e12437" prot="private" static="no" mutable="no">
        <type>std::mt19937</type>
        <definition>std::mt19937 QuantLib::SamplerGaussian::generator_</definition>
        <argsstring></argsstring>
        <name>generator_</name>
        <qualifiedname>QuantLib::SamplerGaussian::generator_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="77" column="22" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_sampler_gaussian_1aaeaa1354e4145d64ba0fe86a7503b227" prot="private" static="no" mutable="no">
        <type>std::normal_distribution&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::normal_distribution&lt;Real&gt; QuantLib::SamplerGaussian::distribution_</definition>
        <argsstring></argsstring>
        <name>distribution_</name>
        <qualifiedname>QuantLib::SamplerGaussian::distribution_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="78" column="34" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_sampler_gaussian_1a3c979a3374794886d1428202a0adc1a3" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::SamplerGaussian::SamplerGaussian</definition>
        <argsstring>(unsigned long seed=SeedGenerator::instance().get())</argsstring>
        <name>SamplerGaussian</name>
        <qualifiedname>QuantLib::SamplerGaussian::SamplerGaussian</qualifiedname>
        <param>
          <type>unsigned long</type>
          <declname>seed</declname>
          <defval><ref refid="class_quant_lib_1_1_singleton_1ac412b7766b32f56372a3e966c5f3f386" kindref="member">SeedGenerator::instance</ref>().get()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="67" column="18" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="67" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_sampler_gaussian_1ab72458d927768c7fb81c3f5911991fb6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::SamplerGaussian::operator()</definition>
        <argsstring>(Array &amp;newPoint, const Array &amp;currentPoint, const Array &amp;temp)</argsstring>
        <name>operator()</name>
        <qualifiedname>QuantLib::SamplerGaussian::operator()</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>newPoint</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>currentPoint</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="70" column="14" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="70" bodyend="75"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Gaussian Sampler. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="struct_quant_lib_1_1_sample" kindref="compound">Sample</ref> from normal distribution. This means that the parameter space must have support on the whole real line. </para>
    </detaileddescription>
    <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="64" column="5" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="65" bodyend="79"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_sampler_gaussian_1aaeaa1354e4145d64ba0fe86a7503b227" prot="private" virt="non-virtual"><scope>QuantLib::SamplerGaussian</scope><name>distribution_</name></member>
      <member refid="class_quant_lib_1_1_sampler_gaussian_1acd66982739e09530c056f68bb0e12437" prot="private" virt="non-virtual"><scope>QuantLib::SamplerGaussian</scope><name>generator_</name></member>
      <member refid="class_quant_lib_1_1_sampler_gaussian_1ab72458d927768c7fb81c3f5911991fb6" prot="public" virt="non-virtual"><scope>QuantLib::SamplerGaussian</scope><name>operator()</name></member>
      <member refid="class_quant_lib_1_1_sampler_gaussian_1a3c979a3374794886d1428202a0adc1a3" prot="public" virt="non-virtual"><scope>QuantLib::SamplerGaussian</scope><name>SamplerGaussian</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
