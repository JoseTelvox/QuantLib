<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_iterative_bootstrap" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::IterativeBootstrap</compoundname>
    <includes refid="iterativebootstrap_8hpp" local="no">iterativebootstrap.hpp</includes>
    <templateparamlist>
      <param>
        <type>class Curve</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_iterative_bootstrap_1a47a57b0effc60cf63de5e518b1db8821" prot="private" static="no">
        <type>Curve::traits_type</type>
        <definition>typedef Curve::traits_type QuantLib::IterativeBootstrap&lt; Curve &gt;::Traits</definition>
        <argsstring></argsstring>
        <name>Traits</name>
        <qualifiedname>QuantLib::IterativeBootstrap::Traits</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="79" column="45" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_iterative_bootstrap_1a7abd774560f08575a035354c650a5053" prot="private" static="no">
        <type>Curve::interpolator_type</type>
        <definition>typedef Curve::interpolator_type QuantLib::IterativeBootstrap&lt; Curve &gt;::Interpolator</definition>
        <argsstring></argsstring>
        <name>Interpolator</name>
        <qualifiedname>QuantLib::IterativeBootstrap::Interpolator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="80" column="51" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_iterative_bootstrap_1a86f62c0f70c357513d1966db0aac8ab9" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::IterativeBootstrap&lt; Curve &gt;::accuracy_</definition>
        <argsstring></argsstring>
        <name>accuracy_</name>
        <qualifiedname>QuantLib::IterativeBootstrap::accuracy_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="108" column="14" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_iterative_bootstrap_1a0d954b789ecebae00b74c0f60e3efd5c" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::IterativeBootstrap&lt; Curve &gt;::minValue_</definition>
        <argsstring></argsstring>
        <name>minValue_</name>
        <qualifiedname>QuantLib::IterativeBootstrap::minValue_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="109" column="14" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_iterative_bootstrap_1ac6b5be64add81179e1c113d97b414ec5" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::IterativeBootstrap&lt; Curve &gt;::maxValue_</definition>
        <argsstring></argsstring>
        <name>maxValue_</name>
        <qualifiedname>QuantLib::IterativeBootstrap::maxValue_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="109" column="24" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_iterative_bootstrap_1a04dc23d9d26758703990e2d44ab3f78c" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::IterativeBootstrap&lt; Curve &gt;::maxAttempts_</definition>
        <argsstring></argsstring>
        <name>maxAttempts_</name>
        <qualifiedname>QuantLib::IterativeBootstrap::maxAttempts_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="110" column="14" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_iterative_bootstrap_1a914024045572de3b071d1e24797ecef4" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::IterativeBootstrap&lt; Curve &gt;::maxFactor_</definition>
        <argsstring></argsstring>
        <name>maxFactor_</name>
        <qualifiedname>QuantLib::IterativeBootstrap::maxFactor_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="111" column="14" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_iterative_bootstrap_1a36b778b45e659e9297bcdabaf39387a2" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::IterativeBootstrap&lt; Curve &gt;::minFactor_</definition>
        <argsstring></argsstring>
        <name>minFactor_</name>
        <qualifiedname>QuantLib::IterativeBootstrap::minFactor_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="112" column="14" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_iterative_bootstrap_1a07761d8c370ad9f6f6045060150962d9" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::IterativeBootstrap&lt; Curve &gt;::dontThrow_</definition>
        <argsstring></argsstring>
        <name>dontThrow_</name>
        <qualifiedname>QuantLib::IterativeBootstrap::dontThrow_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="113" column="14" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_iterative_bootstrap_1aac3ae51438a85669b6aa276edf99b5c5" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::IterativeBootstrap&lt; Curve &gt;::dontThrowSteps_</definition>
        <argsstring></argsstring>
        <name>dontThrowSteps_</name>
        <qualifiedname>QuantLib::IterativeBootstrap::dontThrowSteps_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="114" column="14" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_iterative_bootstrap_1a17b6814754b9efe2ff776065e4a37ba3" prot="private" static="no" mutable="no">
        <type>Curve *</type>
        <definition>Curve* QuantLib::IterativeBootstrap&lt; Curve &gt;::ts_</definition>
        <argsstring></argsstring>
        <name>ts_</name>
        <qualifiedname>QuantLib::IterativeBootstrap::ts_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="115" column="15" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_iterative_bootstrap_1a59705100c5ae12752c652ccbd81d72db" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::IterativeBootstrap&lt; Curve &gt;::n_</definition>
        <argsstring></argsstring>
        <name>n_</name>
        <qualifiedname>QuantLib::IterativeBootstrap::n_</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="116" column="14" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_iterative_bootstrap_1a1441947f3ace2cc5a4278c4bbbf002fd" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_brent" kindref="compound">Brent</ref></type>
        <definition>Brent QuantLib::IterativeBootstrap&lt; Curve &gt;::firstSolver_</definition>
        <argsstring></argsstring>
        <name>firstSolver_</name>
        <qualifiedname>QuantLib::IterativeBootstrap::firstSolver_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="117" column="15" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_iterative_bootstrap_1aebf796e0a0e9693c2bf38da95e6b37f8" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_finite_difference_newton_safe" kindref="compound">FiniteDifferenceNewtonSafe</ref></type>
        <definition>FiniteDifferenceNewtonSafe QuantLib::IterativeBootstrap&lt; Curve &gt;::solver_</definition>
        <argsstring></argsstring>
        <name>solver_</name>
        <qualifiedname>QuantLib::IterativeBootstrap::solver_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="118" column="36" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_iterative_bootstrap_1a8cffe57f53e9b3a2d841d085da6da1ab" prot="private" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool QuantLib::IterativeBootstrap&lt; Curve &gt;::initialized_</definition>
        <argsstring></argsstring>
        <name>initialized_</name>
        <qualifiedname>QuantLib::IterativeBootstrap::initialized_</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="119" column="22" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_iterative_bootstrap_1a3b6024d5177336ad7ebd5b9081f33d9e" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::IterativeBootstrap&lt; Curve &gt;::validCurve_</definition>
        <argsstring></argsstring>
        <name>validCurve_</name>
        <qualifiedname>QuantLib::IterativeBootstrap::validCurve_</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="119" column="36" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_iterative_bootstrap_1a30a41eb6689bd374085ab2d189333d45" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::IterativeBootstrap&lt; Curve &gt;::loopRequired_</definition>
        <argsstring></argsstring>
        <name>loopRequired_</name>
        <qualifiedname>QuantLib::IterativeBootstrap::loopRequired_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="119" column="49" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_iterative_bootstrap_1aa47a9569186f504708a61521f3901fa1" prot="private" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::IterativeBootstrap&lt; Curve &gt;::firstAliveHelper_</definition>
        <argsstring></argsstring>
        <name>firstAliveHelper_</name>
        <qualifiedname>QuantLib::IterativeBootstrap::firstAliveHelper_</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="120" column="22" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_iterative_bootstrap_1a3dd515f8470dd479bc192d646e05b1de" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::IterativeBootstrap&lt; Curve &gt;::alive_</definition>
        <argsstring></argsstring>
        <name>alive_</name>
        <qualifiedname>QuantLib::IterativeBootstrap::alive_</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="120" column="41" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_iterative_bootstrap_1af80b85a7a86a32978fcd462a0cf8a18d" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::IterativeBootstrap&lt; Curve &gt;::previousData_</definition>
        <argsstring></argsstring>
        <name>previousData_</name>
        <qualifiedname>QuantLib::IterativeBootstrap::previousData_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="121" column="29" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_iterative_bootstrap_1aabd061276193f29db5aa167d821eba25" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_bootstrap_error" kindref="compound">BootstrapError</ref>&lt; Curve &gt; &gt; &gt;</type>
        <definition>std::vector&lt;ext::shared_ptr&lt;BootstrapError&lt;Curve&gt; &gt; &gt; QuantLib::IterativeBootstrap&lt; Curve &gt;::errors_</definition>
        <argsstring></argsstring>
        <name>errors_</name>
        <qualifiedname>QuantLib::IterativeBootstrap::errors_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="122" column="29" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="122" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_iterative_bootstrap_1a6d29c10c94ce98b5daf368d9d21b1520" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::IterativeBootstrap&lt; Curve &gt;::IterativeBootstrap</definition>
        <argsstring>(Real accuracy=Null&lt; Real &gt;(), Real minValue=Null&lt; Real &gt;(), Real maxValue=Null&lt; Real &gt;(), Size maxAttempts=1, Real maxFactor=2.0, Real minFactor=2.0, bool dontThrow=false, Size dontThrowSteps=10, Size maxEvaluations=MAX_FUNCTION_EVALUATIONS)</argsstring>
        <name>IterativeBootstrap</name>
        <qualifiedname>QuantLib::IterativeBootstrap::IterativeBootstrap</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval><ref refid="class_quant_lib_1_1_null" kindref="compound">Null</ref>&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>minValue</declname>
          <defval><ref refid="class_quant_lib_1_1_null" kindref="compound">Null</ref>&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>maxValue</declname>
          <defval><ref refid="class_quant_lib_1_1_null" kindref="compound">Null</ref>&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxAttempts</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>maxFactor</declname>
          <defval>2.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>minFactor</declname>
          <defval>2.0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>dontThrow</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>dontThrowSteps</declname>
          <defval>10</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxEvaluations</declname>
          <defval>MAX_FUNCTION_EVALUATIONS</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>accuracy</parametername>
</parameternamelist>
<parameterdescription>
<para>Accuracy for the bootstrap stopping criterion. If it is set to <computeroutput>Null&lt;Real&gt;()</computeroutput>, its value is taken from the termstructure&apos;s accuracy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Allow to override the initial minimum value coming from traits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Allow to override the initial maximum value coming from traits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxAttempts</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of attempts on each iteration. A number greater than 1 implies retries. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxFactor</parametername>
</parameternamelist>
<parameterdescription>
<para>Factor for max value retry on each iteration if there is a failure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minFactor</parametername>
</parameternamelist>
<parameterdescription>
<para>Factor for min value retry on each iteration if there is a failure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dontThrow</parametername>
</parameternamelist>
<parameterdescription>
<para>If set to <computeroutput>true</computeroutput>, the bootstrap doesn&apos;t throw and returns a <emphasis>fall back</emphasis> result. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dontThrowSteps</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>dontThrow</computeroutput> is <computeroutput>true</computeroutput>, this gives the number of steps to use when searching for a fallback curve pillar value that gives the minimum bootstrap helper error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="95" column="9" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="129" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_iterative_bootstrap_1a2724559e93565d5031c688c85a15c863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::IterativeBootstrap&lt; Curve &gt;::setup</definition>
        <argsstring>(Curve *ts)</argsstring>
        <name>setup</name>
        <qualifiedname>QuantLib::IterativeBootstrap::setup</qualifiedname>
        <param>
          <type>Curve *</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="104" column="14" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="148" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_iterative_bootstrap_1addb11c502dd0a8087168a7b8287d3349" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::IterativeBootstrap&lt; Curve &gt;::calculate</definition>
        <argsstring>() const</argsstring>
        <name>calculate</name>
        <qualifiedname>QuantLib::IterativeBootstrap::calculate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="105" column="14" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="233" bodyend="390"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_iterative_bootstrap_1a3ba5982fc5ae0b47235530807a0fc6f5" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::IterativeBootstrap&lt; Curve &gt;::initialize</definition>
        <argsstring>() const</argsstring>
        <name>initialize</name>
        <qualifiedname>QuantLib::IterativeBootstrap::initialize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/iterativebootstrap.hpp" line="107" column="14" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="160" bodyend="230"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Universal piecewise-term-structure boostrapper. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ql/termstructures/iterativebootstrap.hpp" line="78" column="5" bodyfile="ql/termstructures/iterativebootstrap.hpp" bodystart="78" bodyend="123"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1a86f62c0f70c357513d1966db0aac8ab9" prot="private" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>accuracy_</name></member>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1a3dd515f8470dd479bc192d646e05b1de" prot="private" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>alive_</name></member>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1addb11c502dd0a8087168a7b8287d3349" prot="public" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1a07761d8c370ad9f6f6045060150962d9" prot="private" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>dontThrow_</name></member>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1aac3ae51438a85669b6aa276edf99b5c5" prot="private" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>dontThrowSteps_</name></member>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1aabd061276193f29db5aa167d821eba25" prot="private" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>errors_</name></member>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1aa47a9569186f504708a61521f3901fa1" prot="private" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>firstAliveHelper_</name></member>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1a1441947f3ace2cc5a4278c4bbbf002fd" prot="private" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>firstSolver_</name></member>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1a3ba5982fc5ae0b47235530807a0fc6f5" prot="private" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>initialize</name></member>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1a8cffe57f53e9b3a2d841d085da6da1ab" prot="private" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>initialized_</name></member>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1a7abd774560f08575a035354c650a5053" prot="private" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>Interpolator</name></member>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1a6d29c10c94ce98b5daf368d9d21b1520" prot="public" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>IterativeBootstrap</name></member>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1a30a41eb6689bd374085ab2d189333d45" prot="private" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>loopRequired_</name></member>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1a04dc23d9d26758703990e2d44ab3f78c" prot="private" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>maxAttempts_</name></member>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1a914024045572de3b071d1e24797ecef4" prot="private" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>maxFactor_</name></member>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1ac6b5be64add81179e1c113d97b414ec5" prot="private" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>maxValue_</name></member>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1a36b778b45e659e9297bcdabaf39387a2" prot="private" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>minFactor_</name></member>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1a0d954b789ecebae00b74c0f60e3efd5c" prot="private" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>minValue_</name></member>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1a59705100c5ae12752c652ccbd81d72db" prot="private" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>n_</name></member>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1af80b85a7a86a32978fcd462a0cf8a18d" prot="private" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>previousData_</name></member>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1a2724559e93565d5031c688c85a15c863" prot="public" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>setup</name></member>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1aebf796e0a0e9693c2bf38da95e6b37f8" prot="private" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>solver_</name></member>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1a47a57b0effc60cf63de5e518b1db8821" prot="private" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>Traits</name></member>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1a17b6814754b9efe2ff776065e4a37ba3" prot="private" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>ts_</name></member>
      <member refid="class_quant_lib_1_1_iterative_bootstrap_1a3b6024d5177336ad7ebd5b9081f33d9e" prot="private" virt="non-virtual"><scope>QuantLib::IterativeBootstrap</scope><name>validCurve_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
