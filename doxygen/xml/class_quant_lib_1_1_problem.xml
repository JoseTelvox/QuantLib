<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_problem" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::Problem</compoundname>
    <includes refid="problem_8hpp" local="no">problem.hpp</includes>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_problem_1af790262ae3c8d7121ed9e884c4a7271f" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_cost_function" kindref="compound">CostFunction</ref> &amp;</type>
        <definition>CostFunction&amp; QuantLib::Problem::costFunction_</definition>
        <argsstring></argsstring>
        <name>costFunction_</name>
        <qualifiedname>QuantLib::Problem::costFunction_</qualifiedname>
        <briefdescription>
<para>Unconstrained cost function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/problem.hpp" line="104" column="22" bodyfile="ql/math/optimization/problem.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_problem_1a2ae89edcc1e61bf0612c8527a4a1eb75" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_constraint" kindref="compound">Constraint</ref> &amp;</type>
        <definition>Constraint&amp; QuantLib::Problem::constraint_</definition>
        <argsstring></argsstring>
        <name>constraint_</name>
        <qualifiedname>QuantLib::Problem::constraint_</qualifiedname>
        <briefdescription>
<para><ref refid="class_quant_lib_1_1_constraint" kindref="compound">Constraint</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/problem.hpp" line="106" column="20" bodyfile="ql/math/optimization/problem.hpp" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_problem_1ace01321a38a18334347a0d43fe0efc8f" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Problem::currentValue_</definition>
        <argsstring></argsstring>
        <name>currentValue_</name>
        <qualifiedname>QuantLib::Problem::currentValue_</qualifiedname>
        <briefdescription>
<para>current value of the local minimum </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/problem.hpp" line="108" column="15" bodyfile="ql/math/optimization/problem.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_problem_1a509c0fee7cb17c33acf1a10a37b480f4" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Problem::functionValue_</definition>
        <argsstring></argsstring>
        <name>functionValue_</name>
        <qualifiedname>QuantLib::Problem::functionValue_</qualifiedname>
        <briefdescription>
<para>function and gradient norm values at the currentValue_ (i.e. the last step) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/problem.hpp" line="110" column="14" bodyfile="ql/math/optimization/problem.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_problem_1a3c10e6fc6eccd9affe0ed8e148147689" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Problem::squaredNorm_</definition>
        <argsstring></argsstring>
        <name>squaredNorm_</name>
        <qualifiedname>QuantLib::Problem::squaredNorm_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/problem.hpp" line="110" column="29" bodyfile="ql/math/optimization/problem.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_problem_1acbcf03cddd43ae759dddfa9be617406a" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
        <definition>Integer QuantLib::Problem::functionEvaluation_</definition>
        <argsstring></argsstring>
        <name>functionEvaluation_</name>
        <qualifiedname>QuantLib::Problem::functionEvaluation_</qualifiedname>
        <briefdescription>
<para>number of evaluation of cost function and its gradient </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/problem.hpp" line="112" column="17" bodyfile="ql/math/optimization/problem.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_problem_1a573827810a2ddf62f261aea81eb2c05b" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
        <definition>Integer QuantLib::Problem::gradientEvaluation_</definition>
        <argsstring></argsstring>
        <name>gradientEvaluation_</name>
        <qualifiedname>QuantLib::Problem::gradientEvaluation_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/problem.hpp" line="112" column="37" bodyfile="ql/math/optimization/problem.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_problem_1a6ba1fc8b74b428bbf605b3b510d57241" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Problem::Problem</definition>
        <argsstring>(CostFunction &amp;costFunction, Constraint &amp;constraint, Array initialValue=Array())</argsstring>
        <name>Problem</name>
        <qualifiedname>QuantLib::Problem::Problem</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_cost_function" kindref="compound">CostFunction</ref> &amp;</type>
          <declname>costFunction</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_constraint" kindref="compound">Constraint</ref> &amp;</type>
          <declname>constraint</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
          <declname>initialValue</declname>
          <defval><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref>()</defval>
        </param>
        <briefdescription>
<para>default constructor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/problem.hpp" line="45" column="9" bodyfile="ql/math/optimization/problem.hpp" bodystart="45" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_problem_1ac9763612c0ce7b60e95848fb85f6fd10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::Problem::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <qualifiedname>QuantLib::Problem::reset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>it does not reset the current minumum to any initial value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/problem.hpp" line="53" column="14" bodyfile="ql/math/optimization/problem.hpp" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_problem_1a06691dbed20d8c317b45b47f3321d04e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Problem::value</definition>
        <argsstring>(const Array &amp;x)</argsstring>
        <name>value</name>
        <qualifiedname>QuantLib::Problem::value</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>call cost function computation and increment evaluation counter </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/problem.hpp" line="56" column="14" bodyfile="ql/math/optimization/problem.hpp" bodystart="116" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_problem_1a4d3f0fb89e572041529c478052ee7134" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Problem::values</definition>
        <argsstring>(const Array &amp;x)</argsstring>
        <name>values</name>
        <qualifiedname>QuantLib::Problem::values</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>call cost values computation and increment evaluation counter </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/problem.hpp" line="59" column="15" bodyfile="ql/math/optimization/problem.hpp" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_problem_1aed3db5086e880909533f0eb4b8b5afee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::Problem::gradient</definition>
        <argsstring>(Array &amp;grad_f, const Array &amp;x)</argsstring>
        <name>gradient</name>
        <qualifiedname>QuantLib::Problem::gradient</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>grad_f</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>call cost function gradient computation and increment </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/problem.hpp" line="63" column="14" bodyfile="ql/math/optimization/problem.hpp" bodystart="126" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_problem_1a1ac8451a09160be7e32299a24b3e4c2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Problem::valueAndGradient</definition>
        <argsstring>(Array &amp;grad_f, const Array &amp;x)</argsstring>
        <name>valueAndGradient</name>
        <qualifiedname>QuantLib::Problem::valueAndGradient</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>grad_f</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>call cost function computation and it gradient </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/problem.hpp" line="67" column="14" bodyfile="ql/math/optimization/problem.hpp" bodystart="132" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_problem_1ab90ae6d903720764c228867c5b16a722" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_constraint" kindref="compound">Constraint</ref> &amp;</type>
        <definition>Constraint &amp; QuantLib::Problem::constraint</definition>
        <argsstring>() const</argsstring>
        <name>constraint</name>
        <qualifiedname>QuantLib::Problem::constraint</qualifiedname>
        <briefdescription>
<para><ref refid="class_quant_lib_1_1_constraint" kindref="compound">Constraint</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/problem.hpp" line="71" column="20" bodyfile="ql/math/optimization/problem.hpp" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_problem_1ae210f12d80584d34a704857a479195a5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_cost_function" kindref="compound">CostFunction</ref> &amp;</type>
        <definition>CostFunction &amp; QuantLib::Problem::costFunction</definition>
        <argsstring>() const</argsstring>
        <name>costFunction</name>
        <qualifiedname>QuantLib::Problem::costFunction</qualifiedname>
        <briefdescription>
<para>Cost function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/problem.hpp" line="74" column="22" bodyfile="ql/math/optimization/problem.hpp" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_problem_1a6146f8ac7e49cfebca680aeee0434fc0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::Problem::setCurrentValue</definition>
        <argsstring>(Array currentValue)</argsstring>
        <name>setCurrentValue</name>
        <qualifiedname>QuantLib::Problem::setCurrentValue</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
          <declname>currentValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/problem.hpp" line="76" column="14" bodyfile="ql/math/optimization/problem.hpp" bodystart="76" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_problem_1add687259b50c4200297f8b5c0b78a806" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        <definition>const Array &amp; QuantLib::Problem::currentValue</definition>
        <argsstring>() const</argsstring>
        <name>currentValue</name>
        <qualifiedname>QuantLib::Problem::currentValue</qualifiedname>
        <briefdescription>
<para>current value of the local minimum </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/problem.hpp" line="81" column="21" bodyfile="ql/math/optimization/problem.hpp" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_problem_1a5fbe610cf6f8fdbab84eb1cbbc7f5335" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::Problem::setFunctionValue</definition>
        <argsstring>(Real functionValue)</argsstring>
        <name>setFunctionValue</name>
        <qualifiedname>QuantLib::Problem::setFunctionValue</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>functionValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/problem.hpp" line="83" column="14" bodyfile="ql/math/optimization/problem.hpp" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_problem_1a8a6ff903be5f655af590daa41aeebc44" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Problem::functionValue</definition>
        <argsstring>() const</argsstring>
        <name>functionValue</name>
        <qualifiedname>QuantLib::Problem::functionValue</qualifiedname>
        <briefdescription>
<para>value of cost function </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/problem.hpp" line="88" column="14" bodyfile="ql/math/optimization/problem.hpp" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_problem_1ab99cad78c21ff18d1b9d6394e6294adb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::Problem::setGradientNormValue</definition>
        <argsstring>(Real squaredNorm)</argsstring>
        <name>setGradientNormValue</name>
        <qualifiedname>QuantLib::Problem::setGradientNormValue</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>squaredNorm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/problem.hpp" line="90" column="14" bodyfile="ql/math/optimization/problem.hpp" bodystart="90" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_problem_1af89199317bfec08958947d8ef5d426dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Problem::gradientNormValue</definition>
        <argsstring>() const</argsstring>
        <name>gradientNormValue</name>
        <qualifiedname>QuantLib::Problem::gradientNormValue</qualifiedname>
        <briefdescription>
<para>value of cost function gradient norm </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/problem.hpp" line="94" column="14" bodyfile="ql/math/optimization/problem.hpp" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_problem_1a4ea2f5f84ced427ebb79df8cffd05094" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
        <definition>Integer QuantLib::Problem::functionEvaluation</definition>
        <argsstring>() const</argsstring>
        <name>functionEvaluation</name>
        <qualifiedname>QuantLib::Problem::functionEvaluation</qualifiedname>
        <briefdescription>
<para>number of evaluation of cost function </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/problem.hpp" line="97" column="17" bodyfile="ql/math/optimization/problem.hpp" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_problem_1a9870c5a7d89b9c33c9042b3fc30ffc40" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
        <definition>Integer QuantLib::Problem::gradientEvaluation</definition>
        <argsstring>() const</argsstring>
        <name>gradientEvaluation</name>
        <qualifiedname>QuantLib::Problem::gradientEvaluation</qualifiedname>
        <briefdescription>
<para>number of evaluation of cost function gradient </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/problem.hpp" line="100" column="17" bodyfile="ql/math/optimization/problem.hpp" bodystart="100" bodyend="100"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Constrained optimization problem. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="warning"><para>The passed <ref refid="class_quant_lib_1_1_cost_function" kindref="compound">CostFunction</ref> and <ref refid="class_quant_lib_1_1_constraint" kindref="compound">Constraint</ref> instances are stored by reference. The user of this class must make sure that they are not destroyed before the <ref refid="class_quant_lib_1_1_problem" kindref="compound">Problem</ref> instance. </para>
</simplesect>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="4">
        <label>QuantLib::Array</label>
        <link refid="class_quant_lib_1_1_array"/>
      </node>
      <node id="3">
        <label>QuantLib::Constraint</label>
        <link refid="class_quant_lib_1_1_constraint"/>
      </node>
      <node id="2">
        <label>QuantLib::CostFunction</label>
        <link refid="class_quant_lib_1_1_cost_function"/>
      </node>
      <node id="1">
        <label>QuantLib::Problem</label>
        <link refid="class_quant_lib_1_1_problem"/>
        <childnode refid="2" relation="usage">
          <edgelabel>costFunction_</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>constraint_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>currentValue_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/math/optimization/problem.hpp" line="42" column="5" bodyfile="ql/math/optimization/problem.hpp" bodystart="42" bodyend="113"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_problem_1ab90ae6d903720764c228867c5b16a722" prot="public" virt="non-virtual"><scope>QuantLib::Problem</scope><name>constraint</name></member>
      <member refid="class_quant_lib_1_1_problem_1a2ae89edcc1e61bf0612c8527a4a1eb75" prot="protected" virt="non-virtual"><scope>QuantLib::Problem</scope><name>constraint_</name></member>
      <member refid="class_quant_lib_1_1_problem_1ae210f12d80584d34a704857a479195a5" prot="public" virt="non-virtual"><scope>QuantLib::Problem</scope><name>costFunction</name></member>
      <member refid="class_quant_lib_1_1_problem_1af790262ae3c8d7121ed9e884c4a7271f" prot="protected" virt="non-virtual"><scope>QuantLib::Problem</scope><name>costFunction_</name></member>
      <member refid="class_quant_lib_1_1_problem_1add687259b50c4200297f8b5c0b78a806" prot="public" virt="non-virtual"><scope>QuantLib::Problem</scope><name>currentValue</name></member>
      <member refid="class_quant_lib_1_1_problem_1ace01321a38a18334347a0d43fe0efc8f" prot="protected" virt="non-virtual"><scope>QuantLib::Problem</scope><name>currentValue_</name></member>
      <member refid="class_quant_lib_1_1_problem_1a4ea2f5f84ced427ebb79df8cffd05094" prot="public" virt="non-virtual"><scope>QuantLib::Problem</scope><name>functionEvaluation</name></member>
      <member refid="class_quant_lib_1_1_problem_1acbcf03cddd43ae759dddfa9be617406a" prot="protected" virt="non-virtual"><scope>QuantLib::Problem</scope><name>functionEvaluation_</name></member>
      <member refid="class_quant_lib_1_1_problem_1a8a6ff903be5f655af590daa41aeebc44" prot="public" virt="non-virtual"><scope>QuantLib::Problem</scope><name>functionValue</name></member>
      <member refid="class_quant_lib_1_1_problem_1a509c0fee7cb17c33acf1a10a37b480f4" prot="protected" virt="non-virtual"><scope>QuantLib::Problem</scope><name>functionValue_</name></member>
      <member refid="class_quant_lib_1_1_problem_1aed3db5086e880909533f0eb4b8b5afee" prot="public" virt="non-virtual"><scope>QuantLib::Problem</scope><name>gradient</name></member>
      <member refid="class_quant_lib_1_1_problem_1a9870c5a7d89b9c33c9042b3fc30ffc40" prot="public" virt="non-virtual"><scope>QuantLib::Problem</scope><name>gradientEvaluation</name></member>
      <member refid="class_quant_lib_1_1_problem_1a573827810a2ddf62f261aea81eb2c05b" prot="protected" virt="non-virtual"><scope>QuantLib::Problem</scope><name>gradientEvaluation_</name></member>
      <member refid="class_quant_lib_1_1_problem_1af89199317bfec08958947d8ef5d426dd" prot="public" virt="non-virtual"><scope>QuantLib::Problem</scope><name>gradientNormValue</name></member>
      <member refid="class_quant_lib_1_1_problem_1a6ba1fc8b74b428bbf605b3b510d57241" prot="public" virt="non-virtual"><scope>QuantLib::Problem</scope><name>Problem</name></member>
      <member refid="class_quant_lib_1_1_problem_1ac9763612c0ce7b60e95848fb85f6fd10" prot="public" virt="non-virtual"><scope>QuantLib::Problem</scope><name>reset</name></member>
      <member refid="class_quant_lib_1_1_problem_1a6146f8ac7e49cfebca680aeee0434fc0" prot="public" virt="non-virtual"><scope>QuantLib::Problem</scope><name>setCurrentValue</name></member>
      <member refid="class_quant_lib_1_1_problem_1a5fbe610cf6f8fdbab84eb1cbbc7f5335" prot="public" virt="non-virtual"><scope>QuantLib::Problem</scope><name>setFunctionValue</name></member>
      <member refid="class_quant_lib_1_1_problem_1ab99cad78c21ff18d1b9d6394e6294adb" prot="public" virt="non-virtual"><scope>QuantLib::Problem</scope><name>setGradientNormValue</name></member>
      <member refid="class_quant_lib_1_1_problem_1a3c10e6fc6eccd9affe0ed8e148147689" prot="protected" virt="non-virtual"><scope>QuantLib::Problem</scope><name>squaredNorm_</name></member>
      <member refid="class_quant_lib_1_1_problem_1a06691dbed20d8c317b45b47f3321d04e" prot="public" virt="non-virtual"><scope>QuantLib::Problem</scope><name>value</name></member>
      <member refid="class_quant_lib_1_1_problem_1a1ac8451a09160be7e32299a24b3e4c2d" prot="public" virt="non-virtual"><scope>QuantLib::Problem</scope><name>valueAndGradient</name></member>
      <member refid="class_quant_lib_1_1_problem_1a4d3f0fb89e572041529c478052ee7134" prot="public" virt="non-virtual"><scope>QuantLib::Problem</scope><name>values</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
