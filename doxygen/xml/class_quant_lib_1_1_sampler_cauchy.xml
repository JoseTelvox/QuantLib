<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_sampler_cauchy" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::SamplerCauchy</compoundname>
    <includes refid="hybridsimulatedannealingfunctors_8hpp" local="no">hybridsimulatedannealingfunctors.hpp</includes>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_sampler_cauchy_1a737fd5335e2b9cfc83cbf95e37da5380" prot="protected" static="no" mutable="no">
        <type>std::mt19937</type>
        <definition>std::mt19937 QuantLib::SamplerCauchy::generator_</definition>
        <argsstring></argsstring>
        <name>generator_</name>
        <qualifiedname>QuantLib::SamplerCauchy::generator_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="168" column="22" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_sampler_cauchy_1ac656b9a72076b863113c45e2a3fc4fbb" prot="protected" static="no" mutable="no">
        <type>std::cauchy_distribution&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::cauchy_distribution&lt;Real&gt; QuantLib::SamplerCauchy::distribution_</definition>
        <argsstring></argsstring>
        <name>distribution_</name>
        <qualifiedname>QuantLib::SamplerCauchy::distribution_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="169" column="34" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="169" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_sampler_cauchy_1a293c2b05741feb786881af6c67bc63d3" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::SamplerCauchy::SamplerCauchy</definition>
        <argsstring>(unsigned long seed=SeedGenerator::instance().get())</argsstring>
        <name>SamplerCauchy</name>
        <qualifiedname>QuantLib::SamplerCauchy::SamplerCauchy</qualifiedname>
        <param>
          <type>unsigned long</type>
          <declname>seed</declname>
          <defval><ref refid="class_quant_lib_1_1_singleton_1ac412b7766b32f56372a3e966c5f3f386" kindref="member">SeedGenerator::instance</ref>().get()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="158" column="18" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="158" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_sampler_cauchy_1aa600126838abe9228a8e8673fff8a53e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::SamplerCauchy::operator()</definition>
        <argsstring>(Array &amp;newPoint, const Array &amp;currentPoint, const Array &amp;temp)</argsstring>
        <name>operator()</name>
        <qualifiedname>QuantLib::SamplerCauchy::operator()</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>newPoint</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>currentPoint</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="161" column="14" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="161" bodyend="166"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Cauchy Sampler. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="struct_quant_lib_1_1_sample" kindref="compound">Sample</ref> from cauchy distribution. This means that the parameter space must have support on the positive whole real line. For lower dimensions it could be faster than the Gaussian sampler, specially when combined with the Cauchy temperature. </para>
    </detaileddescription>
    <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="155" column="5" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="156" bodyend="170"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_sampler_cauchy_1ac656b9a72076b863113c45e2a3fc4fbb" prot="protected" virt="non-virtual"><scope>QuantLib::SamplerCauchy</scope><name>distribution_</name></member>
      <member refid="class_quant_lib_1_1_sampler_cauchy_1a737fd5335e2b9cfc83cbf95e37da5380" prot="protected" virt="non-virtual"><scope>QuantLib::SamplerCauchy</scope><name>generator_</name></member>
      <member refid="class_quant_lib_1_1_sampler_cauchy_1aa600126838abe9228a8e8673fff8a53e" prot="public" virt="non-virtual"><scope>QuantLib::SamplerCauchy</scope><name>operator()</name></member>
      <member refid="class_quant_lib_1_1_sampler_cauchy_1a293c2b05741feb786881af6c67bc63d3" prot="public" virt="non-virtual"><scope>QuantLib::SamplerCauchy</scope><name>SamplerCauchy</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
