<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_kernel_interpolation2_d" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::KernelInterpolation2D</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_interpolation2_d" prot="public" virt="non-virtual">QuantLib::Interpolation2D</basecompoundref>
    <includes refid="kernelinterpolation2d_8hpp" local="no">kernelinterpolation2d.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_kernel_interpolation2_d_1a19816f2a8f31c24d94e721d2ca5c3767" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I1</type>
          </param>
          <param>
            <type>class I2</type>
          </param>
          <param>
            <type>class M</type>
          </param>
          <param>
            <type>class Kernel</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>QuantLib::KernelInterpolation2D::KernelInterpolation2D</definition>
        <argsstring>(const I1 &amp;xBegin, const I1 &amp;xEnd, const I2 &amp;yBegin, const I2 &amp;yEnd, const M &amp;zData, const Kernel &amp;kernel)</argsstring>
        <name>KernelInterpolation2D</name>
        <qualifiedname>QuantLib::KernelInterpolation2D::KernelInterpolation2D</qualifiedname>
        <param>
          <type>const I1 &amp;</type>
          <declname>xBegin</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>xEnd</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>yBegin</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>yEnd</declname>
        </param>
        <param>
          <type>const M &amp;</type>
          <declname>zData</declname>
        </param>
        <param>
          <type>const Kernel &amp;</type>
          <declname>kernel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>the <formula id="28">$ x $</formula> values must be sorted. </para>
</simplesect>
<simplesect kind="pre"><para>kernel needs a <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> operator()(Real x) implementation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/kernelinterpolation2d.hpp" line="201" column="9" bodyfile="ql/math/interpolations/kernelinterpolation2d.hpp" bodystart="201" bodyend="211"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Implementation of the 2D kernel interpolation approach, which can be found in &quot;Foreign Exchange Risk&quot; by Hakala, Wystup page 256.</para>
<para>The kernel in the implementation is kept general, although a Gaussian is considered in the cited text.</para>
<para><simplesect kind="warning"><para>See the <ref refid="class_quant_lib_1_1_interpolation" kindref="compound">Interpolation</ref> class for information about the required lifetime of the underlying data. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>QuantLib::Extrapolator</label>
        <link refid="class_quant_lib_1_1_extrapolator"/>
      </node>
      <node id="2">
        <label>QuantLib::Interpolation2D</label>
        <link refid="class_quant_lib_1_1_interpolation2_d"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::KernelInterpolation2D</label>
        <link refid="class_quant_lib_1_1_kernel_interpolation2_d"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>QuantLib::Extrapolator</label>
        <link refid="class_quant_lib_1_1_extrapolator"/>
      </node>
      <node id="2">
        <label>QuantLib::Interpolation2D</label>
        <link refid="class_quant_lib_1_1_interpolation2_d"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::KernelInterpolation2D</label>
        <link refid="class_quant_lib_1_1_kernel_interpolation2_d"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/math/interpolations/kernelinterpolation2d.hpp" line="195" column="5" bodyfile="ql/math/interpolations/kernelinterpolation2d.hpp" bodystart="195" bodyend="212"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_extrapolator_1ab3936a9b5b5c163d3e511437c16c1d9e" prot="public" virt="non-virtual"><scope>QuantLib::KernelInterpolation2D</scope><name>allowsExtrapolation</name></member>
      <member refid="class_quant_lib_1_1_interpolation2_d_1a5328e52aca77d07eebb1efce48b5d51a" prot="protected" virt="non-virtual"><scope>QuantLib::KernelInterpolation2D</scope><name>checkRange</name></member>
      <member refid="class_quant_lib_1_1_extrapolator_1a6af69387d5cae0fe84d6a0c858406218" prot="public" virt="non-virtual"><scope>QuantLib::KernelInterpolation2D</scope><name>disableExtrapolation</name></member>
      <member refid="class_quant_lib_1_1_extrapolator_1a5f7b5650a44d6c63095bc739470c8bfb" prot="public" virt="non-virtual"><scope>QuantLib::KernelInterpolation2D</scope><name>enableExtrapolation</name></member>
      <member refid="class_quant_lib_1_1_extrapolator_1af1c3adaccdfaf07d3d07edaa234444f7" prot="public" virt="non-virtual"><scope>QuantLib::KernelInterpolation2D</scope><name>Extrapolator</name></member>
      <member refid="class_quant_lib_1_1_interpolation2_d_1a47e0080e981293519763e5dc46b83dfc" prot="protected" virt="non-virtual"><scope>QuantLib::KernelInterpolation2D</scope><name>impl_</name></member>
      <member refid="class_quant_lib_1_1_interpolation2_d_1af2ab18d1a014d3e4669c2c5e8d4b6cbd" prot="public" virt="non-virtual"><scope>QuantLib::KernelInterpolation2D</scope><name>Interpolation2D</name></member>
      <member refid="class_quant_lib_1_1_interpolation2_d_1a79eeed1d394f3030da83d37c6617b5dd" prot="public" virt="non-virtual"><scope>QuantLib::KernelInterpolation2D</scope><name>isInRange</name></member>
      <member refid="class_quant_lib_1_1_kernel_interpolation2_d_1a19816f2a8f31c24d94e721d2ca5c3767" prot="public" virt="non-virtual"><scope>QuantLib::KernelInterpolation2D</scope><name>KernelInterpolation2D</name></member>
      <member refid="class_quant_lib_1_1_interpolation2_d_1ac9014ca99e2fc46c8742223cae7babfb" prot="public" virt="non-virtual"><scope>QuantLib::KernelInterpolation2D</scope><name>locateX</name></member>
      <member refid="class_quant_lib_1_1_interpolation2_d_1a7a23b0918c51775980971f907f73e489" prot="public" virt="non-virtual"><scope>QuantLib::KernelInterpolation2D</scope><name>locateY</name></member>
      <member refid="class_quant_lib_1_1_interpolation2_d_1a4661f0e052434ab5023bf05dabb46a30" prot="public" virt="non-virtual"><scope>QuantLib::KernelInterpolation2D</scope><name>operator()</name></member>
      <member refid="class_quant_lib_1_1_interpolation2_d_1a79f3d2af850e00ffceb395c874692e7b" prot="public" virt="non-virtual"><scope>QuantLib::KernelInterpolation2D</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_interpolation2_d_1a2f51a1d59e505579da70d1fd4504135c" prot="public" virt="non-virtual"><scope>QuantLib::KernelInterpolation2D</scope><name>xMax</name></member>
      <member refid="class_quant_lib_1_1_interpolation2_d_1af7f2a8633f38c72922274adb3d9c3a30" prot="public" virt="non-virtual"><scope>QuantLib::KernelInterpolation2D</scope><name>xMin</name></member>
      <member refid="class_quant_lib_1_1_interpolation2_d_1a5d82739a85c70e4d4de818eec849ca5b" prot="public" virt="non-virtual"><scope>QuantLib::KernelInterpolation2D</scope><name>xValues</name></member>
      <member refid="class_quant_lib_1_1_interpolation2_d_1a48e404a4615bb99f1ca91fcfb37af0c1" prot="public" virt="non-virtual"><scope>QuantLib::KernelInterpolation2D</scope><name>yMax</name></member>
      <member refid="class_quant_lib_1_1_interpolation2_d_1ae3ea343091f7b5ac767e23dae3af968f" prot="public" virt="non-virtual"><scope>QuantLib::KernelInterpolation2D</scope><name>yMin</name></member>
      <member refid="class_quant_lib_1_1_interpolation2_d_1aa8dcc2169f8a3da1895ed0dbc882f4d5" prot="public" virt="non-virtual"><scope>QuantLib::KernelInterpolation2D</scope><name>yValues</name></member>
      <member refid="class_quant_lib_1_1_interpolation2_d_1a83d46e5677a8506b69827bcecc9cb96b" prot="public" virt="non-virtual"><scope>QuantLib::KernelInterpolation2D</scope><name>zData</name></member>
      <member refid="class_quant_lib_1_1_extrapolator_1af0ca0156436ffbce159183198eb27e2e" prot="public" virt="virtual"><scope>QuantLib::KernelInterpolation2D</scope><name>~Extrapolator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
