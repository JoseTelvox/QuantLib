<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="struct_quant_lib_1_1_bond_functions" kind="struct" language="C++" prot="public">
    <compoundname>QuantLib::BondFunctions</compoundname>
    <includes refid="bondfunctions_8hpp" local="no">bondfunctions.hpp</includes>
    <sectiondef kind="user-defined">
      <header>Date inspectors</header>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1ab4952ffa6817bd61d94944d98a0694e6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::BondFunctions::startDate</definition>
        <argsstring>(const Bond &amp;bond)</argsstring>
        <name>startDate</name>
        <qualifiedname>QuantLib::BondFunctions::startDate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="57" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="31" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a433b88af23f17124701e67232e5638d0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::BondFunctions::maturityDate</definition>
        <argsstring>(const Bond &amp;bond)</argsstring>
        <name>maturityDate</name>
        <qualifiedname>QuantLib::BondFunctions::maturityDate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="58" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="35" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a1dcad7e5a73589c16e78b94edbb8a7cd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::BondFunctions::isTradable</definition>
        <argsstring>(const Bond &amp;bond, Date settlementDate=Date())</argsstring>
        <name>isTradable</name>
        <qualifiedname>QuantLib::BondFunctions::isTradable</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="59" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="39" bodyend="45"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>CashFlow inspectors</header>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a8b938b9049c6391413271a1a778adb89" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Leg::const_reverse_iterator</type>
        <definition>Leg::const_reverse_iterator QuantLib::BondFunctions::previousCashFlow</definition>
        <argsstring>(const Bond &amp;bond, Date refDate=Date())</argsstring>
        <name>previousCashFlow</name>
        <qualifiedname>QuantLib::BondFunctions::previousCashFlow</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>refDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="66" column="9" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="48" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a030e8dc064ac3446b0e36b4a253e23d6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Leg::const_iterator</type>
        <definition>Leg::const_iterator QuantLib::BondFunctions::nextCashFlow</definition>
        <argsstring>(const Bond &amp;bond, Date refDate=Date())</argsstring>
        <name>nextCashFlow</name>
        <qualifiedname>QuantLib::BondFunctions::nextCashFlow</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>refDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="68" column="36" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="57" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a10532dbe20ad0a49dde24a03f0c289c2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::BondFunctions::previousCashFlowDate</definition>
        <argsstring>(const Bond &amp;bond, Date refDate=Date())</argsstring>
        <name>previousCashFlowDate</name>
        <qualifiedname>QuantLib::BondFunctions::previousCashFlowDate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>refDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="70" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="66" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a8713b3ebdc64fb52fd68faf3e5e6e954" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::BondFunctions::nextCashFlowDate</definition>
        <argsstring>(const Bond &amp;bond, Date refDate=Date())</argsstring>
        <name>nextCashFlowDate</name>
        <qualifiedname>QuantLib::BondFunctions::nextCashFlowDate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>refDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="72" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="75" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a9d9df0602995d689936cf0251a37bd55" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondFunctions::previousCashFlowAmount</definition>
        <argsstring>(const Bond &amp;bond, Date refDate=Date())</argsstring>
        <name>previousCashFlowAmount</name>
        <qualifiedname>QuantLib::BondFunctions::previousCashFlowAmount</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>refDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="74" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="84" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a5fe01795a581241ef9d5d7ceba10717a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondFunctions::nextCashFlowAmount</definition>
        <argsstring>(const Bond &amp;bond, Date refDate=Date())</argsstring>
        <name>nextCashFlowAmount</name>
        <qualifiedname>QuantLib::BondFunctions::nextCashFlowAmount</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>refDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="76" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="93" bodyend="100"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Coupon inspectors</header>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a20c3972a8e4ccbc35447d558222e810e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::BondFunctions::previousCouponRate</definition>
        <argsstring>(const Bond &amp;bond, Date settlementDate=Date())</argsstring>
        <name>previousCouponRate</name>
        <qualifiedname>QuantLib::BondFunctions::previousCouponRate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="82" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="102" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a22fd8e593ae79e6018e6ae48ca057645" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::BondFunctions::nextCouponRate</definition>
        <argsstring>(const Bond &amp;bond, Date settlementDate=Date())</argsstring>
        <name>nextCouponRate</name>
        <qualifiedname>QuantLib::BondFunctions::nextCouponRate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="84" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="111" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a68fb67bdb2b48609dbf94dc5958e441f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::BondFunctions::accrualStartDate</definition>
        <argsstring>(const Bond &amp;bond, Date settlementDate=Date())</argsstring>
        <name>accrualStartDate</name>
        <qualifiedname>QuantLib::BondFunctions::accrualStartDate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="86" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="120" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a2eee0762c1f31d7a6f7363759ceb3513" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::BondFunctions::accrualEndDate</definition>
        <argsstring>(const Bond &amp;bond, Date settlementDate=Date())</argsstring>
        <name>accrualEndDate</name>
        <qualifiedname>QuantLib::BondFunctions::accrualEndDate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="88" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="133" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1af2afc7af1fb024c5f55e53d2779d9be8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::BondFunctions::referencePeriodStart</definition>
        <argsstring>(const Bond &amp;bond, Date settlementDate=Date())</argsstring>
        <name>referencePeriodStart</name>
        <qualifiedname>QuantLib::BondFunctions::referencePeriodStart</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="90" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="146" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a221bb547a4bff2418981890946076acd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::BondFunctions::referencePeriodEnd</definition>
        <argsstring>(const Bond &amp;bond, Date settlementDate=Date())</argsstring>
        <name>referencePeriodEnd</name>
        <qualifiedname>QuantLib::BondFunctions::referencePeriodEnd</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="92" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="159" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1adb027e26dc833cf31a9fa1a32bdbaa0d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        <definition>Time QuantLib::BondFunctions::accrualPeriod</definition>
        <argsstring>(const Bond &amp;bond, Date settlementDate=Date())</argsstring>
        <name>accrualPeriod</name>
        <qualifiedname>QuantLib::BondFunctions::accrualPeriod</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="94" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="172" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1adee9f0380c30658e241d078c4f0a5d7b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date_1a2fbbbf87429ca9d86bde4e068eb028d6" kindref="member">Date::serial_type</ref></type>
        <definition>Date::serial_type QuantLib::BondFunctions::accrualDays</definition>
        <argsstring>(const Bond &amp;bond, Date settlementDate=Date())</argsstring>
        <name>accrualDays</name>
        <qualifiedname>QuantLib::BondFunctions::accrualDays</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="96" column="34" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="185" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1aa77bb16fe8882a930e52d9b9102b6c5c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        <definition>Time QuantLib::BondFunctions::accruedPeriod</definition>
        <argsstring>(const Bond &amp;bond, Date settlementDate=Date())</argsstring>
        <name>accruedPeriod</name>
        <qualifiedname>QuantLib::BondFunctions::accruedPeriod</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="98" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="198" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a7ff509e3497d318054fb0bb48463aec6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date_1a2fbbbf87429ca9d86bde4e068eb028d6" kindref="member">Date::serial_type</ref></type>
        <definition>Date::serial_type QuantLib::BondFunctions::accruedDays</definition>
        <argsstring>(const Bond &amp;bond, Date settlementDate=Date())</argsstring>
        <name>accruedDays</name>
        <qualifiedname>QuantLib::BondFunctions::accruedDays</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="100" column="34" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="211" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1ae3f205dfce987f3ad8b4ebe4c131d212" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondFunctions::accruedAmount</definition>
        <argsstring>(const Bond &amp;bond, Date settlementDate=Date())</argsstring>
        <name>accruedAmount</name>
        <qualifiedname>QuantLib::BondFunctions::accruedAmount</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="102" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="224" bodyend="235"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>YieldTermStructure functions</header>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a28f0e3825d57ef8ec08191d274271ea2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondFunctions::cleanPrice</definition>
        <argsstring>(const Bond &amp;bond, const YieldTermStructure &amp;discountCurve, Date settlementDate=Date())</argsstring>
        <name>cleanPrice</name>
        <qualifiedname>QuantLib::BondFunctions::cleanPrice</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &amp;</type>
          <declname>discountCurve</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="108" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="239" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1aa7a68b811cd3bd6aa8270ef860a4ea5b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondFunctions::dirtyPrice</definition>
        <argsstring>(const Bond &amp;bond, const YieldTermStructure &amp;discountCurve, Date settlementDate=Date())</argsstring>
        <name>dirtyPrice</name>
        <qualifiedname>QuantLib::BondFunctions::dirtyPrice</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &amp;</type>
          <declname>discountCurve</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="111" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="248" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1adac40b2683a727e0c470a3bbe7dede28" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondFunctions::bps</definition>
        <argsstring>(const Bond &amp;bond, const YieldTermStructure &amp;discountCurve, Date settlementDate=Date())</argsstring>
        <name>bps</name>
        <qualifiedname>QuantLib::BondFunctions::bps</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &amp;</type>
          <declname>discountCurve</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="114" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="265" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a860c7e88e5c6b60672b01d92df093434" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::BondFunctions::atmRate</definition>
        <argsstring>(const Bond &amp;bond, const YieldTermStructure &amp;discountCurve, Date settlementDate, Real cleanPrice)</argsstring>
        <name>atmRate</name>
        <qualifiedname>QuantLib::BondFunctions::atmRate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &amp;</type>
          <declname>discountCurve</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>cleanPrice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000118"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use the overload taking a <ref refid="class_quant_lib_1_1_bond_1_1_price" kindref="compound">Bond::Price</ref> argument instead. Deprecated in version 1.34. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="122" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="280" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a2782e55fd46485cc3259e33664acd386" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::BondFunctions::atmRate</definition>
        <argsstring>(const Bond &amp;bond, const YieldTermStructure &amp;discountCurve, Date settlementDate=Date(), Bond::Price price={})</argsstring>
        <name>atmRate</name>
        <qualifiedname>QuantLib::BondFunctions::atmRate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &amp;</type>
          <declname>discountCurve</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_bond_1_1_price" kindref="compound">Bond::Price</ref></type>
          <declname>price</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="126" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="287" bodyend="311"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Yield (a.k.a. Internal Rate of Return, i.e. IRR) functions</header>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a70fd273e274c0ee21b215a792928e96a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondFunctions::cleanPrice</definition>
        <argsstring>(const Bond &amp;bond, const InterestRate &amp;yield, Date settlementDate=Date())</argsstring>
        <name>cleanPrice</name>
        <qualifiedname>QuantLib::BondFunctions::cleanPrice</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_interest_rate" kindref="compound">InterestRate</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="134" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="313" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1af491e3014b73f45e343a340322100f95" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondFunctions::cleanPrice</definition>
        <argsstring>(const Bond &amp;bond, Rate yield, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date())</argsstring>
        <name>cleanPrice</name>
        <qualifiedname>QuantLib::BondFunctions::cleanPrice</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>yield</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="137" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="319" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a06d93ef4591c4c0127cc4d3eace22b98" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondFunctions::dirtyPrice</definition>
        <argsstring>(const Bond &amp;bond, const InterestRate &amp;yield, Date settlementDate=Date())</argsstring>
        <name>dirtyPrice</name>
        <qualifiedname>QuantLib::BondFunctions::dirtyPrice</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_interest_rate" kindref="compound">InterestRate</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="143" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="329" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1af48944da09ebe47f43805b20713fb211" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondFunctions::dirtyPrice</definition>
        <argsstring>(const Bond &amp;bond, Rate yield, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date())</argsstring>
        <name>dirtyPrice</name>
        <qualifiedname>QuantLib::BondFunctions::dirtyPrice</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>yield</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="146" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="345" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1abe3b480f52fd4874a0b2edaeb672f0d3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondFunctions::bps</definition>
        <argsstring>(const Bond &amp;bond, const InterestRate &amp;yield, Date settlementDate=Date())</argsstring>
        <name>bps</name>
        <qualifiedname>QuantLib::BondFunctions::bps</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_interest_rate" kindref="compound">InterestRate</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="152" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="355" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1add2f073faaaa677c28a1d625a80c14e0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondFunctions::bps</definition>
        <argsstring>(const Bond &amp;bond, Rate yield, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date())</argsstring>
        <name>bps</name>
        <qualifiedname>QuantLib::BondFunctions::bps</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>yield</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="155" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="370" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a2aba512137a2a145f62977c91c47c294" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::BondFunctions::yield</definition>
        <argsstring>(const Bond &amp;bond, Real price, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date(), Real accuracy=1.0e-10, Size maxIterations=100, Rate guess=0.05, Bond::Price::Type priceType=Bond::Price::Clean)</argsstring>
        <name>yield</name>
        <qualifiedname>QuantLib::BondFunctions::yield</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>price</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.0e-10</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxIterations</declname>
          <defval>100</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>guess</declname>
          <defval>0.05</defval>
        </param>
        <param>
          <type>Bond::Price::Type</type>
          <declname>priceType</declname>
          <defval>Bond::Price::Clean</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000119"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use the overload taking a <ref refid="class_quant_lib_1_1_bond_1_1_price" kindref="compound">Bond::Price</ref> argument instead. Deprecated in version 1.34. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="165" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="380" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1ad5fbc824a330116e41f4b751ae148f04" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::BondFunctions::yield</definition>
        <argsstring>(const Bond &amp;bond, Bond::Price price, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date(), Real accuracy=1.0e-10, Size maxIterations=100, Rate guess=0.05)</argsstring>
        <name>yield</name>
        <qualifiedname>QuantLib::BondFunctions::yield</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_bond_1_1_price" kindref="compound">Bond::Price</ref></type>
          <declname>price</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.0e-10</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxIterations</declname>
          <defval>100</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>guess</declname>
          <defval>0.05</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="175" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="394" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1af30645b47d340cbb5ecba3f3e988fcbc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Solver</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>static Rate QuantLib::BondFunctions::yield</definition>
        <argsstring>(const Solver &amp;solver, const Bond &amp;bond, Real price, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date(), Real accuracy=1.0e-10, Rate guess=0.05, Bond::Price::Type priceType=Bond::Price::Clean)</argsstring>
        <name>yield</name>
        <qualifiedname>QuantLib::BondFunctions::yield</qualifiedname>
        <param>
          <type>const Solver &amp;</type>
          <declname>solver</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>price</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.0e-10</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>guess</declname>
          <defval>0.05</defval>
        </param>
        <param>
          <type>Bond::Price::Type</type>
          <declname>priceType</declname>
          <defval>Bond::Price::Clean</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000120"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use the overload taking a <ref refid="class_quant_lib_1_1_bond_1_1_price" kindref="compound">Bond::Price</ref> argument instead. Deprecated in version 1.34. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="189" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.hpp" bodystart="189" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a9b464740ad00beb61b59a2b7aec7d465" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Solver</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>static Rate QuantLib::BondFunctions::yield</definition>
        <argsstring>(const Solver &amp;solver, const Bond &amp;bond, Bond::Price price, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date(), Real accuracy=1.0e-10, Rate guess=0.05)</argsstring>
        <name>yield</name>
        <qualifiedname>QuantLib::BondFunctions::yield</qualifiedname>
        <param>
          <type>const Solver &amp;</type>
          <declname>solver</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_bond_1_1_price" kindref="compound">Bond::Price</ref></type>
          <declname>price</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.0e-10</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>guess</declname>
          <defval>0.05</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="203" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.hpp" bodystart="203" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a265b7563cc7e2f3ae4308e472006a9d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        <definition>Time QuantLib::BondFunctions::duration</definition>
        <argsstring>(const Bond &amp;bond, const InterestRate &amp;yield, Duration::Type type=Duration::Modified, Date settlementDate=Date())</argsstring>
        <name>duration</name>
        <qualifiedname>QuantLib::BondFunctions::duration</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_interest_rate" kindref="compound">InterestRate</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type>Duration::Type</type>
          <declname>type</declname>
          <defval>Duration::Modified</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="231" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="410" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a8cf6c5dcf905abe72dc70e90583f4f9a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        <definition>Time QuantLib::BondFunctions::duration</definition>
        <argsstring>(const Bond &amp;bond, Rate yield, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, Duration::Type type=Duration::Modified, Date settlementDate=Date())</argsstring>
        <name>duration</name>
        <qualifiedname>QuantLib::BondFunctions::duration</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>yield</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type>Duration::Type</type>
          <declname>type</declname>
          <defval>Duration::Modified</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="235" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="426" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1adfe3ac8ffa00209c7d87047c0e618830" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondFunctions::convexity</definition>
        <argsstring>(const Bond &amp;bond, const InterestRate &amp;yield, Date settlementDate=Date())</argsstring>
        <name>convexity</name>
        <qualifiedname>QuantLib::BondFunctions::convexity</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_interest_rate" kindref="compound">InterestRate</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="242" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="437" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a99d9c0b5f6c44b3c9aa225fca1664651" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondFunctions::convexity</definition>
        <argsstring>(const Bond &amp;bond, Rate yield, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date())</argsstring>
        <name>convexity</name>
        <qualifiedname>QuantLib::BondFunctions::convexity</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>yield</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="245" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="451" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1ac2ca3317e541e59fff93506533540c85" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondFunctions::basisPointValue</definition>
        <argsstring>(const Bond &amp;bond, const InterestRate &amp;yield, Date settlementDate=Date())</argsstring>
        <name>basisPointValue</name>
        <qualifiedname>QuantLib::BondFunctions::basisPointValue</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_interest_rate" kindref="compound">InterestRate</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="251" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="461" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a64a11439bd414d1ecf4651483febcba3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondFunctions::basisPointValue</definition>
        <argsstring>(const Bond &amp;bond, Rate yield, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date())</argsstring>
        <name>basisPointValue</name>
        <qualifiedname>QuantLib::BondFunctions::basisPointValue</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>yield</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="254" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="475" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1af3988d4831e3a4be87081fbc63da4bb4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondFunctions::yieldValueBasisPoint</definition>
        <argsstring>(const Bond &amp;bond, const InterestRate &amp;yield, Date settlementDate=Date())</argsstring>
        <name>yieldValueBasisPoint</name>
        <qualifiedname>QuantLib::BondFunctions::yieldValueBasisPoint</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_interest_rate" kindref="compound">InterestRate</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="260" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="485" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a420a5f6b1cf8b091b76bb69b6c6f0510" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondFunctions::yieldValueBasisPoint</definition>
        <argsstring>(const Bond &amp;bond, Rate yield, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date())</argsstring>
        <name>yieldValueBasisPoint</name>
        <qualifiedname>QuantLib::BondFunctions::yieldValueBasisPoint</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>yield</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="263" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="499" bodyend="507"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Z-spread functions</header>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a4b694b5085632f011e6ffeef56c19918" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondFunctions::cleanPrice</definition>
        <argsstring>(const Bond &amp;bond, const ext::shared_ptr&lt; YieldTermStructure &gt; &amp;discount, Spread zSpread, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date())</argsstring>
        <name>cleanPrice</name>
        <qualifiedname>QuantLib::BondFunctions::cleanPrice</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
          <declname>discount</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref></type>
          <declname>zSpread</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="273" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="509" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1aa2d20234a719d8a640fe6d914beabaa2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondFunctions::dirtyPrice</definition>
        <argsstring>(const Bond &amp;bond, const ext::shared_ptr&lt; YieldTermStructure &gt; &amp;discount, Spread zSpread, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date())</argsstring>
        <name>dirtyPrice</name>
        <qualifiedname>QuantLib::BondFunctions::dirtyPrice</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
          <declname>discount</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref></type>
          <declname>zSpread</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="280" column="21" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="522" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a5a3f4cab52d0acb15690510b384adf32" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref></type>
        <definition>Spread QuantLib::BondFunctions::zSpread</definition>
        <argsstring>(const Bond &amp;bond, Real cleanPrice, const ext::shared_ptr&lt; YieldTermStructure &gt; &amp;, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date(), Real accuracy=1.0e-10, Size maxIterations=100, Rate guess=0.0)</argsstring>
        <name>zSpread</name>
        <qualifiedname>QuantLib::BondFunctions::zSpread</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>cleanPrice</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
          <defname>d</defname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.0e-10</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxIterations</declname>
          <defval>100</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>guess</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000121"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use the overload taking a <ref refid="class_quant_lib_1_1_bond_1_1_price" kindref="compound">Bond::Price</ref> argument instead. Deprecated in version 1.34. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="291" column="23" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="543" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_bond_functions_1a33a624e60a0f86b0ed7d54ddea306bf2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref></type>
        <definition>Spread QuantLib::BondFunctions::zSpread</definition>
        <argsstring>(const Bond &amp;bond, Bond::Price price, const ext::shared_ptr&lt; YieldTermStructure &gt; &amp;, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date(), Real accuracy=1.0e-10, Size maxIterations=100, Rate guess=0.0)</argsstring>
        <name>zSpread</name>
        <qualifiedname>QuantLib::BondFunctions::zSpread</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_bond_1_1_price" kindref="compound">Bond::Price</ref></type>
          <declname>price</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
          <defname>d</defname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.0e-10</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxIterations</declname>
          <defval>100</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>guess</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/bond/bondfunctions.hpp" line="301" column="23" bodyfile="ql/pricingengines/bond/bondfunctions.cpp" bodystart="557" bodyend="586"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para><ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> adapters of <ref refid="class_quant_lib_1_1_cash_flows" kindref="compound">CashFlows</ref> functions. </para>
    </briefdescription>
    <detaileddescription>
<para>See <ref refid="class_quant_lib_1_1_cash_flows" kindref="compound">CashFlows</ref> for functions&apos; documentation.</para>
<para>These adapters calls into <ref refid="class_quant_lib_1_1_cash_flows" kindref="compound">CashFlows</ref> functions passing as input the <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> cashflows, the dirty price (i.e. npv) calculated from clean price, the bond settlement date (unless another date is given), zero ex-dividend days, and excluding any cashflow on the settlement date.</para>
<para>Prices are always clean, as per market convention. </para>
    </detaileddescription>
    <location file="ql/pricingengines/bond/bondfunctions.hpp" line="54" column="5" bodyfile="ql/pricingengines/bond/bondfunctions.hpp" bodystart="54" bodyend="313"/>
    <listofallmembers>
      <member refid="struct_quant_lib_1_1_bond_functions_1adee9f0380c30658e241d078c4f0a5d7b" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>accrualDays</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a2eee0762c1f31d7a6f7363759ceb3513" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>accrualEndDate</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1adb027e26dc833cf31a9fa1a32bdbaa0d" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>accrualPeriod</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a68fb67bdb2b48609dbf94dc5958e441f" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>accrualStartDate</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1ae3f205dfce987f3ad8b4ebe4c131d212" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>accruedAmount</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a7ff509e3497d318054fb0bb48463aec6" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>accruedDays</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1aa77bb16fe8882a930e52d9b9102b6c5c" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>accruedPeriod</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a860c7e88e5c6b60672b01d92df093434" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>atmRate</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a2782e55fd46485cc3259e33664acd386" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>atmRate</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1ac2ca3317e541e59fff93506533540c85" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>basisPointValue</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a64a11439bd414d1ecf4651483febcba3" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>basisPointValue</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1adac40b2683a727e0c470a3bbe7dede28" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>bps</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1abe3b480f52fd4874a0b2edaeb672f0d3" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>bps</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1add2f073faaaa677c28a1d625a80c14e0" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>bps</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a28f0e3825d57ef8ec08191d274271ea2" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>cleanPrice</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a70fd273e274c0ee21b215a792928e96a" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>cleanPrice</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1af491e3014b73f45e343a340322100f95" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>cleanPrice</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a4b694b5085632f011e6ffeef56c19918" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>cleanPrice</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1adfe3ac8ffa00209c7d87047c0e618830" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>convexity</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a99d9c0b5f6c44b3c9aa225fca1664651" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>convexity</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1aa7a68b811cd3bd6aa8270ef860a4ea5b" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>dirtyPrice</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a06d93ef4591c4c0127cc4d3eace22b98" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>dirtyPrice</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1af48944da09ebe47f43805b20713fb211" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>dirtyPrice</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1aa2d20234a719d8a640fe6d914beabaa2" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>dirtyPrice</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a265b7563cc7e2f3ae4308e472006a9d5" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>duration</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a8cf6c5dcf905abe72dc70e90583f4f9a" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>duration</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a1dcad7e5a73589c16e78b94edbb8a7cd" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>isTradable</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a433b88af23f17124701e67232e5638d0" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>maturityDate</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a030e8dc064ac3446b0e36b4a253e23d6" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>nextCashFlow</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a5fe01795a581241ef9d5d7ceba10717a" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>nextCashFlowAmount</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a8713b3ebdc64fb52fd68faf3e5e6e954" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>nextCashFlowDate</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a22fd8e593ae79e6018e6ae48ca057645" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>nextCouponRate</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a8b938b9049c6391413271a1a778adb89" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>previousCashFlow</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a9d9df0602995d689936cf0251a37bd55" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>previousCashFlowAmount</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a10532dbe20ad0a49dde24a03f0c289c2" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>previousCashFlowDate</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a20c3972a8e4ccbc35447d558222e810e" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>previousCouponRate</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a221bb547a4bff2418981890946076acd" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>referencePeriodEnd</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1af2afc7af1fb024c5f55e53d2779d9be8" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>referencePeriodStart</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1ab4952ffa6817bd61d94944d98a0694e6" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>startDate</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a2aba512137a2a145f62977c91c47c294" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>yield</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1ad5fbc824a330116e41f4b751ae148f04" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>yield</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1af30645b47d340cbb5ecba3f3e988fcbc" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>yield</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a9b464740ad00beb61b59a2b7aec7d465" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>yield</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1af3988d4831e3a4be87081fbc63da4bb4" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>yieldValueBasisPoint</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a420a5f6b1cf8b091b76bb69b6c6f0510" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>yieldValueBasisPoint</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a5a3f4cab52d0acb15690510b384adf32" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>zSpread</name></member>
      <member refid="struct_quant_lib_1_1_bond_functions_1a33a624e60a0f86b0ed7d54ddea306bf2" prot="public" virt="non-virtual"><scope>QuantLib::BondFunctions</scope><name>zSpread</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
