<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_tree" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::Tree</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_curiously_recurring_template" prot="public" virt="non-virtual">QuantLib::CuriouslyRecurringTemplate&lt; T &gt;</basecompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_binomial_tree" prot="public" virt="non-virtual">QuantLib::BinomialTree&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_extended_binomial_tree" prot="public" virt="non-virtual">QuantLib::ExtendedBinomialTree&lt; T &gt;</derivedcompoundref>
    <includes refid="tree_8hpp" local="no">tree.hpp</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_tree_1ada556ac6e582b5a346bfa063753e0b34" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::Tree&lt; T &gt;::columns_</definition>
        <argsstring></argsstring>
        <name>columns_</name>
        <qualifiedname>QuantLib::Tree::columns_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/lattices/tree.hpp" line="56" column="14" bodyfile="ql/methods/lattices/tree.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_tree_1a50c9a44fb22df3c7d5916a8ff80d79b9" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Tree&lt; T &gt;::Tree</definition>
        <argsstring>(Size columns)</argsstring>
        <name>Tree</name>
        <qualifiedname>QuantLib::Tree::Tree</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>columns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/lattices/tree.hpp" line="53" column="18" bodyfile="ql/methods/lattices/tree.hpp" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_tree_1ad67606506e0773cb697aa0826dd953b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::Tree&lt; T &gt;::columns</definition>
        <argsstring>() const</argsstring>
        <name>columns</name>
        <qualifiedname>QuantLib::Tree::columns</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/lattices/tree.hpp" line="54" column="14" bodyfile="ql/methods/lattices/tree.hpp" bodystart="54" bodyend="54"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Tree approximating a single-factor diffusion </para>
    </briefdescription>
    <detaileddescription>
<para>Derived classes must implement the following interface: <programlisting><codeline><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>underlying(<ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>i,<sp/><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>size(<ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>descendant(<ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>i,<sp/><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>index,<sp/><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>branch)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>probability(<ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>i,<sp/><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>index,<sp/><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>branch)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
</programlisting> and provide a public enumeration <programlisting><codeline><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>branches<sp/>=<sp/>N<sp/>};</highlight></codeline>
</programlisting> where N is a suitable constant (2 for binomial, 3 for trinomial...) </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>QuantLib::BinomialTree&lt; T &gt;</label>
        <link refid="class_quant_lib_1_1_binomial_tree"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::CuriouslyRecurringTemplate&lt; T &gt;</label>
        <link refid="class_quant_lib_1_1_curiously_recurring_template"/>
      </node>
      <node id="4">
        <label>QuantLib::EqualJumpsBinomialTree&lt; T &gt;</label>
        <link refid="class_quant_lib_1_1_equal_jumps_binomial_tree"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::EqualProbabilitiesBinomialTree&lt; T &gt;</label>
        <link refid="class_quant_lib_1_1_equal_probabilities_binomial_tree"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::ExtendedBinomialTree&lt; T &gt;</label>
        <link refid="class_quant_lib_1_1_extended_binomial_tree"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::ExtendedEqualJumpsBinomialTree&lt; T &gt;</label>
        <link refid="class_quant_lib_1_1_extended_equal_jumps_binomial_tree"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QuantLib::ExtendedEqualProbabilitiesBinomialTree&lt; T &gt;</label>
        <link refid="class_quant_lib_1_1_extended_equal_probabilities_binomial_tree"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::Tree&lt; T &gt;</label>
        <link refid="class_quant_lib_1_1_tree"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>QuantLib::CuriouslyRecurringTemplate&lt; T &gt;</label>
        <link refid="class_quant_lib_1_1_curiously_recurring_template"/>
      </node>
      <node id="1">
        <label>QuantLib::Tree&lt; T &gt;</label>
        <link refid="class_quant_lib_1_1_tree"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/methods/lattices/tree.hpp" line="51" column="5" bodyfile="ql/methods/lattices/tree.hpp" bodystart="51" bodyend="57"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_tree_1ad67606506e0773cb697aa0826dd953b2" prot="public" virt="non-virtual"><scope>QuantLib::Tree</scope><name>columns</name></member>
      <member refid="class_quant_lib_1_1_tree_1ada556ac6e582b5a346bfa063753e0b34" prot="private" virt="non-virtual"><scope>QuantLib::Tree</scope><name>columns_</name></member>
      <member refid="class_quant_lib_1_1_curiously_recurring_template_1ac51e69d7c3e616686e8777fcabebf954" prot="protected" virt="non-virtual"><scope>QuantLib::Tree</scope><name>CuriouslyRecurringTemplate</name></member>
      <member refid="class_quant_lib_1_1_curiously_recurring_template_1a72c11590c74c9d0085fd43f17cdfe96e" prot="protected" virt="non-virtual"><scope>QuantLib::Tree</scope><name>impl</name></member>
      <member refid="class_quant_lib_1_1_curiously_recurring_template_1a9efaa4c38bfca1e148ed265a809ed220" prot="protected" virt="non-virtual"><scope>QuantLib::Tree</scope><name>impl</name></member>
      <member refid="class_quant_lib_1_1_tree_1a50c9a44fb22df3c7d5916a8ff80d79b9" prot="public" virt="non-virtual"><scope>QuantLib::Tree</scope><name>Tree</name></member>
      <member refid="class_quant_lib_1_1_curiously_recurring_template_1ae22b4353d3c05a5aad5f5b8769392b05" prot="protected" virt="non-virtual"><scope>QuantLib::Tree</scope><name>~CuriouslyRecurringTemplate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
