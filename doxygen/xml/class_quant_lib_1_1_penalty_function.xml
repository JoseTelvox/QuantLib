<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_penalty_function" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::PenaltyFunction</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_cost_function" prot="public" virt="non-virtual">QuantLib::CostFunction</basecompoundref>
    <templateparamlist>
      <param>
        <type>class Curve</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_penalty_function_1aa766391ac5a7043bf59522fc32bb8876" prot="private" static="no">
        <type>Curve::traits_type</type>
        <definition>typedef Curve::traits_type QuantLib::PenaltyFunction&lt; Curve &gt;::Traits</definition>
        <argsstring></argsstring>
        <name>Traits</name>
        <qualifiedname>QuantLib::PenaltyFunction::Traits</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/localbootstrap.hpp" line="41" column="45" bodyfile="ql/termstructures/localbootstrap.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_penalty_function_1a08bb159474ade0f955951369be0c7a9e" prot="private" static="no">
        <type>Traits::helper</type>
        <definition>typedef Traits::helper QuantLib::PenaltyFunction&lt; Curve &gt;::helper</definition>
        <argsstring></argsstring>
        <name>helper</name>
        <qualifiedname>QuantLib::PenaltyFunction::helper</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/localbootstrap.hpp" line="42" column="41" bodyfile="ql/termstructures/localbootstrap.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_penalty_function_1a3dc8698f642956e7ff4411bc955cc943" prot="private" static="no">
        <type>std::vector&lt; ext::shared_ptr&lt; helper &gt; &gt;::const_iterator</type>
        <definition>typedef std::vector&lt;ext::shared_ptr&lt;helper&gt;&gt;::const_iterator QuantLib::PenaltyFunction&lt; Curve &gt;::helper_iterator</definition>
        <argsstring></argsstring>
        <name>helper_iterator</name>
        <qualifiedname>QuantLib::PenaltyFunction::helper_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/localbootstrap.hpp" line="45" column="63" bodyfile="ql/termstructures/localbootstrap.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_penalty_function_1ad6981ba548f5504693cf51bd7f04e60e" prot="private" static="no" mutable="no">
        <type>Curve *</type>
        <definition>Curve* QuantLib::PenaltyFunction&lt; Curve &gt;::curve_</definition>
        <argsstring></argsstring>
        <name>curve_</name>
        <qualifiedname>QuantLib::PenaltyFunction::curve_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/localbootstrap.hpp" line="59" column="15" bodyfile="ql/termstructures/localbootstrap.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_penalty_function_1a13d2bc68d31e89f205c2c43549b945b2" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::PenaltyFunction&lt; Curve &gt;::initialIndex_</definition>
        <argsstring></argsstring>
        <name>initialIndex_</name>
        <qualifiedname>QuantLib::PenaltyFunction::initialIndex_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/localbootstrap.hpp" line="60" column="14" bodyfile="ql/termstructures/localbootstrap.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_penalty_function_1a44305ecf4388a86c2bb36a59a7441f1f" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::PenaltyFunction&lt; Curve &gt;::localisation_</definition>
        <argsstring></argsstring>
        <name>localisation_</name>
        <qualifiedname>QuantLib::PenaltyFunction::localisation_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/localbootstrap.hpp" line="61" column="14" bodyfile="ql/termstructures/localbootstrap.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_penalty_function_1a92b4e30ed9ad1c3c6883e5bfbfe33e08" prot="private" static="no" mutable="no">
        <type>helper_iterator</type>
        <definition>helper_iterator QuantLib::PenaltyFunction&lt; Curve &gt;::rateHelpersStart_</definition>
        <argsstring></argsstring>
        <name>rateHelpersStart_</name>
        <qualifiedname>QuantLib::PenaltyFunction::rateHelpersStart_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/localbootstrap.hpp" line="62" column="25" bodyfile="ql/termstructures/localbootstrap.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_penalty_function_1ab95974f6885bb45ce9ec5949f2557c0b" prot="private" static="no" mutable="no">
        <type>helper_iterator</type>
        <definition>helper_iterator QuantLib::PenaltyFunction&lt; Curve &gt;::rateHelpersEnd_</definition>
        <argsstring></argsstring>
        <name>rateHelpersEnd_</name>
        <qualifiedname>QuantLib::PenaltyFunction::rateHelpersEnd_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/localbootstrap.hpp" line="63" column="25" bodyfile="ql/termstructures/localbootstrap.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_penalty_function_1a918346e4653699d0ff61b43a7f84186f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::PenaltyFunction&lt; Curve &gt;::PenaltyFunction</definition>
        <argsstring>(Curve *curve, Size initialIndex, helper_iterator rateHelpersStart, helper_iterator rateHelpersEnd)</argsstring>
        <name>PenaltyFunction</name>
        <qualifiedname>QuantLib::PenaltyFunction::PenaltyFunction</qualifiedname>
        <param>
          <type>Curve *</type>
          <declname>curve</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>initialIndex</declname>
        </param>
        <param>
          <type>helper_iterator</type>
          <declname>rateHelpersStart</declname>
        </param>
        <param>
          <type>helper_iterator</type>
          <declname>rateHelpersEnd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/localbootstrap.hpp" line="47" column="9" bodyfile="ql/termstructures/localbootstrap.hpp" bodystart="47" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_penalty_function_1a25213140950838939fd7b8b91b6af5d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::PenaltyFunction&lt; Curve &gt;::value</definition>
        <argsstring>(const Array &amp;x) const override</argsstring>
        <name>value</name>
        <qualifiedname>QuantLib::PenaltyFunction::value</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_cost_function_1a2255742e3e05477d773cdf3705411661">value</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>method to overload to compute the cost function value in x </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/localbootstrap.hpp" line="55" column="14" bodyfile="ql/termstructures/localbootstrap.hpp" bodystart="252" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_penalty_function_1a0376aee7f18f0769c343b495253d2d6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::PenaltyFunction&lt; Curve &gt;::values</definition>
        <argsstring>(const Array &amp;x) const override</argsstring>
        <name>values</name>
        <qualifiedname>QuantLib::PenaltyFunction::values</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_cost_function_1ab43da17891b724c8352c01c2478d04db">values</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>method to overload to compute the cost function values in x </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/localbootstrap.hpp" line="56" column="15" bodyfile="ql/termstructures/localbootstrap.hpp" bodystart="274" bodyend="295"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QuantLib::CostFunction</label>
        <link refid="class_quant_lib_1_1_cost_function"/>
      </node>
      <node id="1">
        <label>QuantLib::PenaltyFunction&lt; Curve &gt;</label>
        <link refid="class_quant_lib_1_1_penalty_function"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>QuantLib::CostFunction</label>
        <link refid="class_quant_lib_1_1_cost_function"/>
      </node>
      <node id="1">
        <label>QuantLib::PenaltyFunction&lt; Curve &gt;</label>
        <link refid="class_quant_lib_1_1_penalty_function"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/termstructures/localbootstrap.hpp" line="40" column="5" bodyfile="ql/termstructures/localbootstrap.hpp" bodystart="40" bodyend="64"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_penalty_function_1ad6981ba548f5504693cf51bd7f04e60e" prot="private" virt="non-virtual"><scope>QuantLib::PenaltyFunction</scope><name>curve_</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a0dc9070b6d79cf91aef8ba48e2808263" prot="public" virt="virtual"><scope>QuantLib::PenaltyFunction</scope><name>finiteDifferenceEpsilon</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1aad44fa61459514a8e55208d50716698b" prot="public" virt="virtual"><scope>QuantLib::PenaltyFunction</scope><name>gradient</name></member>
      <member refid="class_quant_lib_1_1_penalty_function_1a08bb159474ade0f955951369be0c7a9e" prot="private" virt="non-virtual"><scope>QuantLib::PenaltyFunction</scope><name>helper</name></member>
      <member refid="class_quant_lib_1_1_penalty_function_1a3dc8698f642956e7ff4411bc955cc943" prot="private" virt="non-virtual"><scope>QuantLib::PenaltyFunction</scope><name>helper_iterator</name></member>
      <member refid="class_quant_lib_1_1_penalty_function_1a13d2bc68d31e89f205c2c43549b945b2" prot="private" virt="non-virtual"><scope>QuantLib::PenaltyFunction</scope><name>initialIndex_</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a5bf2d8163ed5dea7ec811377e2835eca" prot="public" virt="virtual"><scope>QuantLib::PenaltyFunction</scope><name>jacobian</name></member>
      <member refid="class_quant_lib_1_1_penalty_function_1a44305ecf4388a86c2bb36a59a7441f1f" prot="private" virt="non-virtual"><scope>QuantLib::PenaltyFunction</scope><name>localisation_</name></member>
      <member refid="class_quant_lib_1_1_penalty_function_1a918346e4653699d0ff61b43a7f84186f" prot="public" virt="non-virtual"><scope>QuantLib::PenaltyFunction</scope><name>PenaltyFunction</name></member>
      <member refid="class_quant_lib_1_1_penalty_function_1ab95974f6885bb45ce9ec5949f2557c0b" prot="private" virt="non-virtual"><scope>QuantLib::PenaltyFunction</scope><name>rateHelpersEnd_</name></member>
      <member refid="class_quant_lib_1_1_penalty_function_1a92b4e30ed9ad1c3c6883e5bfbfe33e08" prot="private" virt="non-virtual"><scope>QuantLib::PenaltyFunction</scope><name>rateHelpersStart_</name></member>
      <member refid="class_quant_lib_1_1_penalty_function_1aa766391ac5a7043bf59522fc32bb8876" prot="private" virt="non-virtual"><scope>QuantLib::PenaltyFunction</scope><name>Traits</name></member>
      <member refid="class_quant_lib_1_1_penalty_function_1a25213140950838939fd7b8b91b6af5d6" prot="public" virt="virtual"><scope>QuantLib::PenaltyFunction</scope><name>value</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1ae0c8902d6ce2e535237ae4370956d161" prot="public" virt="virtual"><scope>QuantLib::PenaltyFunction</scope><name>valueAndGradient</name></member>
      <member refid="class_quant_lib_1_1_penalty_function_1a0376aee7f18f0769c343b495253d2d6b" prot="public" virt="virtual"><scope>QuantLib::PenaltyFunction</scope><name>values</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a1aa00768b27a3446404b3029660c2e68" prot="public" virt="virtual"><scope>QuantLib::PenaltyFunction</scope><name>valuesAndJacobian</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a04929e863b85bc26f50ad9052ba7ee73" prot="public" virt="virtual"><scope>QuantLib::PenaltyFunction</scope><name>~CostFunction</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
