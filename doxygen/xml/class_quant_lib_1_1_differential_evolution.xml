<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_differential_evolution" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::DifferentialEvolution</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_optimization_method" prot="public" virt="non-virtual">QuantLib::OptimizationMethod</basecompoundref>
    <includes refid="differentialevolution_8hpp" local="no">differentialevolution.hpp</includes>
    <innerclass refid="struct_quant_lib_1_1_differential_evolution_1_1_candidate" prot="public">QuantLib::DifferentialEvolution::Candidate</innerclass>
    <innerclass refid="class_quant_lib_1_1_differential_evolution_1_1_configuration" prot="public">QuantLib::DifferentialEvolution::Configuration</innerclass>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_quant_lib_1_1_differential_evolution_1a7cccd9c9a7330c719c07e41c976758ec" prot="public" static="no" strong="no">
        <type></type>
        <name>Strategy</name>
        <qualifiedname>QuantLib::DifferentialEvolution::Strategy</qualifiedname>
        <enumvalue id="class_quant_lib_1_1_differential_evolution_1a7cccd9c9a7330c719c07e41c976758eca31fc3c0e7e110a20c0bd257b153573b8" prot="public">
          <name>Rand1Standard</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_differential_evolution_1a7cccd9c9a7330c719c07e41c976758eca8a456e680ebc3fd779c565bb1aa23a6f" prot="public">
          <name>BestMemberWithJitter</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_differential_evolution_1a7cccd9c9a7330c719c07e41c976758eca969fe92e81402d5d57a0fb54487deb9c" prot="public">
          <name>CurrentToBest2Diffs</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_differential_evolution_1a7cccd9c9a7330c719c07e41c976758eca179d6df23898495b356f0e81e74d9416" prot="public">
          <name>Rand1DiffWithPerVectorDither</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_differential_evolution_1a7cccd9c9a7330c719c07e41c976758eca4b3f57054bc6c84b1a7dc18ebe2c7e6b" prot="public">
          <name>Rand1DiffWithDither</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_differential_evolution_1a7cccd9c9a7330c719c07e41c976758ecaafbcac73a7a11a540554b69113104662" prot="public">
          <name>EitherOrWithOptimalRecombination</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_differential_evolution_1a7cccd9c9a7330c719c07e41c976758eca3839f487db9008308eee67cf2edbc45d" prot="public">
          <name>Rand1SelfadaptiveWithRotation</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/differentialevolution.hpp" line="61" column="9" bodyfile="ql/math/optimization/differentialevolution.hpp" bodystart="61" bodyend="69"/>
      </memberdef>
      <memberdef kind="enum" id="class_quant_lib_1_1_differential_evolution_1ad3262f1ddf364f74718675c7aef3898e" prot="public" static="no" strong="no">
        <type></type>
        <name>CrossoverType</name>
        <qualifiedname>QuantLib::DifferentialEvolution::CrossoverType</qualifiedname>
        <enumvalue id="class_quant_lib_1_1_differential_evolution_1ad3262f1ddf364f74718675c7aef3898eae067a7dfab51f2d3a93cd7f938eaa2b3" prot="public">
          <name>Normal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_differential_evolution_1ad3262f1ddf364f74718675c7aef3898ea9c961c81fdd4732ab559e3957df11f95" prot="public">
          <name>Binomial</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_differential_evolution_1ad3262f1ddf364f74718675c7aef3898eacf184b9af466f654abf5a078575b328b" prot="public">
          <name>Exponential</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/differentialevolution.hpp" line="70" column="9" bodyfile="ql/math/optimization/differentialevolution.hpp" bodystart="70" bodyend="74"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_differential_evolution_1abbeb2a94738cb7861f0ae74cd1ac45d7" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_differential_evolution_1_1_configuration" kindref="compound">Configuration</ref></type>
        <definition>Configuration QuantLib::DifferentialEvolution::configuration_</definition>
        <argsstring></argsstring>
        <name>configuration_</name>
        <qualifiedname>QuantLib::DifferentialEvolution::configuration_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/differentialevolution.hpp" line="173" column="23" bodyfile="ql/math/optimization/differentialevolution.hpp" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_differential_evolution_1a815c80dc76a309531afc26bd40a562c2" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::DifferentialEvolution::upperBound_</definition>
        <argsstring></argsstring>
        <name>upperBound_</name>
        <qualifiedname>QuantLib::DifferentialEvolution::upperBound_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/differentialevolution.hpp" line="174" column="15" bodyfile="ql/math/optimization/differentialevolution.hpp" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_differential_evolution_1ae440ac56fae99fc08a32a3ec36e59f04" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::DifferentialEvolution::lowerBound_</definition>
        <argsstring></argsstring>
        <name>lowerBound_</name>
        <qualifiedname>QuantLib::DifferentialEvolution::lowerBound_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/differentialevolution.hpp" line="174" column="27" bodyfile="ql/math/optimization/differentialevolution.hpp" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_differential_evolution_1a567a4a25d24f18f328ececf050b6f9b5" prot="private" static="no" mutable="yes">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::DifferentialEvolution::currGenSizeWeights_</definition>
        <argsstring></argsstring>
        <name>currGenSizeWeights_</name>
        <qualifiedname>QuantLib::DifferentialEvolution::currGenSizeWeights_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/differentialevolution.hpp" line="175" column="23" bodyfile="ql/math/optimization/differentialevolution.hpp" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_differential_evolution_1ab016326beb5967faf26b5335eee60f6b" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::DifferentialEvolution::currGenCrossover_</definition>
        <argsstring></argsstring>
        <name>currGenCrossover_</name>
        <qualifiedname>QuantLib::DifferentialEvolution::currGenCrossover_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/differentialevolution.hpp" line="175" column="43" bodyfile="ql/math/optimization/differentialevolution.hpp" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_differential_evolution_1a429c77ec5f14e89896bd8c53f553efc3" prot="private" static="no" mutable="no">
        <type><ref refid="struct_quant_lib_1_1_differential_evolution_1_1_candidate" kindref="compound">Candidate</ref></type>
        <definition>Candidate QuantLib::DifferentialEvolution::bestMemberEver_</definition>
        <argsstring></argsstring>
        <name>bestMemberEver_</name>
        <qualifiedname>QuantLib::DifferentialEvolution::bestMemberEver_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/differentialevolution.hpp" line="176" column="19" bodyfile="ql/math/optimization/differentialevolution.hpp" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_differential_evolution_1ae8ea91f8ce0c5ac178c26c5d94721468" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_mersenne_twister_uniform_rng" kindref="compound">MersenneTwisterUniformRng</ref></type>
        <definition>MersenneTwisterUniformRng QuantLib::DifferentialEvolution::rng_</definition>
        <argsstring></argsstring>
        <name>rng_</name>
        <qualifiedname>QuantLib::DifferentialEvolution::rng_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/differentialevolution.hpp" line="177" column="35" bodyfile="ql/math/optimization/differentialevolution.hpp" bodystart="177" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_differential_evolution_1a9e86dd7c0d258fd861c7fe78d3b864ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::DifferentialEvolution::DifferentialEvolution</definition>
        <argsstring>(const Configuration &amp;configuration=Configuration())</argsstring>
        <name>DifferentialEvolution</name>
        <qualifiedname>QuantLib::DifferentialEvolution::DifferentialEvolution</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_differential_evolution_1_1_configuration" kindref="compound">Configuration</ref> &amp;</type>
          <declname>configuration</declname>
          <defval><ref refid="class_quant_lib_1_1_differential_evolution_1_1_configuration" kindref="compound">Configuration</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/differentialevolution.hpp" line="163" column="9" bodyfile="ql/math/optimization/differentialevolution.hpp" bodystart="163" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_differential_evolution_1aec279754b47ec3fcf91c4ab3c126147b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>EndCriteria::Type</type>
        <definition>EndCriteria::Type QuantLib::DifferentialEvolution::minimize</definition>
        <argsstring>(Problem &amp;p, const EndCriteria &amp;endCriteria) override</argsstring>
        <name>minimize</name>
        <qualifiedname>QuantLib::DifferentialEvolution::minimize</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_optimization_method_1a28097ae73d0d2a310938f51b72a48348">minimize</reimplements>
        <param>
          <type><ref refid="class_quant_lib_1_1_problem" kindref="compound">Problem</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref> &amp;</type>
          <declname>endCriteria</declname>
        </param>
        <briefdescription>
<para>minimize the optimization problem P </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/differentialevolution.hpp" line="166" column="27" bodyfile="ql/math/optimization/differentialevolution.cpp" bodystart="47" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_differential_evolution_1ac5b72f710aa7072d0f2c047ebcae6822" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_differential_evolution_1_1_configuration" kindref="compound">Configuration</ref> &amp;</type>
        <definition>const Configuration &amp; QuantLib::DifferentialEvolution::configuration</definition>
        <argsstring>() const</argsstring>
        <name>configuration</name>
        <qualifiedname>QuantLib::DifferentialEvolution::configuration</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/differentialevolution.hpp" line="168" column="29" bodyfile="ql/math/optimization/differentialevolution.hpp" bodystart="168" bodyend="170"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_differential_evolution_1ac68fced7bca87944a51f624154504b16" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::DifferentialEvolution::fillInitialPopulation</definition>
        <argsstring>(std::vector&lt; Candidate &gt; &amp;population, const Problem &amp;p) const</argsstring>
        <name>fillInitialPopulation</name>
        <qualifiedname>QuantLib::DifferentialEvolution::fillInitialPopulation</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="struct_quant_lib_1_1_differential_evolution_1_1_candidate" kindref="compound">Candidate</ref> &gt; &amp;</type>
          <declname>population</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_problem" kindref="compound">Problem</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/differentialevolution.hpp" line="179" column="14" bodyfile="ql/math/optimization/differentialevolution.cpp" bodystart="378" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_differential_evolution_1a06db3b320c94876bede02c6a0141587b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::DifferentialEvolution::getCrossoverMask</definition>
        <argsstring>(std::vector&lt; Array &gt; &amp;crossoverMask, std::vector&lt; Array &gt; &amp;invCrossoverMask, const Array &amp;mutationProbabilities) const</argsstring>
        <name>getCrossoverMask</name>
        <qualifiedname>QuantLib::DifferentialEvolution::getCrossoverMask</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>crossoverMask</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>invCrossoverMask</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>mutationProbabilities</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/differentialevolution.hpp" line="182" column="14" bodyfile="ql/math/optimization/differentialevolution.cpp" bodystart="308" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_differential_evolution_1a951b3de9d5133c58591162942a6a5626" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::DifferentialEvolution::getMutationProbabilities</definition>
        <argsstring>(const std::vector&lt; Candidate &gt; &amp;population) const</argsstring>
        <name>getMutationProbabilities</name>
        <qualifiedname>QuantLib::DifferentialEvolution::getMutationProbabilities</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="struct_quant_lib_1_1_differential_evolution_1_1_candidate" kindref="compound">Candidate</ref> &gt; &amp;</type>
          <declname>population</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/differentialevolution.hpp" line="186" column="15" bodyfile="ql/math/optimization/differentialevolution.cpp" bodystart="323" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_differential_evolution_1aa3ae9228a5b612dc01ae0678fe446200" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::DifferentialEvolution::adaptSizeWeights</definition>
        <argsstring>() const</argsstring>
        <name>adaptSizeWeights</name>
        <qualifiedname>QuantLib::DifferentialEvolution::adaptSizeWeights</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/differentialevolution.hpp" line="189" column="14" bodyfile="ql/math/optimization/differentialevolution.cpp" bodystart="356" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_differential_evolution_1ae9d1300c0b58ad15fbcc1d78f8747025" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::DifferentialEvolution::adaptCrossover</definition>
        <argsstring>() const</argsstring>
        <name>adaptCrossover</name>
        <qualifiedname>QuantLib::DifferentialEvolution::adaptCrossover</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/differentialevolution.hpp" line="191" column="14" bodyfile="ql/math/optimization/differentialevolution.cpp" bodystart="370" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_differential_evolution_1a87a4519dfb59c5967b5c5bf146c5cc7a" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::DifferentialEvolution::calculateNextGeneration</definition>
        <argsstring>(std::vector&lt; Candidate &gt; &amp;population, Problem &amp;costFunction) const</argsstring>
        <name>calculateNextGeneration</name>
        <qualifiedname>QuantLib::DifferentialEvolution::calculateNextGeneration</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="struct_quant_lib_1_1_differential_evolution_1_1_candidate" kindref="compound">Candidate</ref> &gt; &amp;</type>
          <declname>population</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_problem" kindref="compound">Problem</ref> &amp;</type>
          <declname>costFunction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/differentialevolution.hpp" line="193" column="14" bodyfile="ql/math/optimization/differentialevolution.cpp" bodystart="109" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_differential_evolution_1a6bffc3e0923ec3dd561e4766b718e586" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::DifferentialEvolution::rotateArray</definition>
        <argsstring>(Array inputArray) const</argsstring>
        <name>rotateArray</name>
        <qualifiedname>QuantLib::DifferentialEvolution::rotateArray</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
          <declname>inputArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/differentialevolution.hpp" line="196" column="15" bodyfile="ql/math/optimization/differentialevolution.cpp" bodystart="351" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_differential_evolution_1a00c75407e103f05bbc353e4d4408c87f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::DifferentialEvolution::crossover</definition>
        <argsstring>(const std::vector&lt; Candidate &gt; &amp;oldPopulation, std::vector&lt; Candidate &gt; &amp;population, const std::vector&lt; Candidate &gt; &amp;mutantPopulation, const std::vector&lt; Candidate &gt; &amp;mirrorPopulation, Problem &amp;costFunction) const</argsstring>
        <name>crossover</name>
        <qualifiedname>QuantLib::DifferentialEvolution::crossover</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="struct_quant_lib_1_1_differential_evolution_1_1_candidate" kindref="compound">Candidate</ref> &gt; &amp;</type>
          <declname>oldPopulation</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="struct_quant_lib_1_1_differential_evolution_1_1_candidate" kindref="compound">Candidate</ref> &gt; &amp;</type>
          <declname>population</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="struct_quant_lib_1_1_differential_evolution_1_1_candidate" kindref="compound">Candidate</ref> &gt; &amp;</type>
          <declname>mutantPopulation</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="struct_quant_lib_1_1_differential_evolution_1_1_candidate" kindref="compound">Candidate</ref> &gt; &amp;</type>
          <declname>mirrorPopulation</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_problem" kindref="compound">Problem</ref> &amp;</type>
          <declname>costFunction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/differentialevolution.hpp" line="198" column="14" bodyfile="ql/math/optimization/differentialevolution.cpp" bodystart="259" bodyend="306"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Differential Evolution configuration object. </para>
    </briefdescription>
    <detaileddescription>
<para>The algorithm and strategy names are taken from here:</para>
<para>Price, K., Storn, R., 1997. Differential Evolution - A Simple and Efficient Heuristic for Global Optimization over Continuous Spaces. Journal of Global Optimization, Kluwer Academic Publishers, 1997, Vol. 11, pp. 341 - 359.</para>
<para>There are seven basic strategies for creating mutant population currently implemented. Three basic crossover types are also available.</para>
<para>Future development: 1) base element type to be extracted 2) L differences to be used instead of fixed number 3) various weights distributions for the differences (dither etc.) 4) printFullInfo parameter usage to track the algorithm</para>
<para><simplesect kind="warning"><para>This was reported to fail tests on Mac OS X 10.8.4. OptimizationMethod using Differential Evolution algorithm </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::DifferentialEvolution</label>
        <link refid="class_quant_lib_1_1_differential_evolution"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::OptimizationMethod</label>
        <link refid="class_quant_lib_1_1_optimization_method"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::DifferentialEvolution</label>
        <link refid="class_quant_lib_1_1_differential_evolution"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::OptimizationMethod</label>
        <link refid="class_quant_lib_1_1_optimization_method"/>
      </node>
    </collaborationgraph>
    <location file="ql/math/optimization/differentialevolution.hpp" line="59" column="5" bodyfile="ql/math/optimization/differentialevolution.hpp" bodystart="59" bodyend="203"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_differential_evolution_1ae9d1300c0b58ad15fbcc1d78f8747025" prot="private" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>adaptCrossover</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1aa3ae9228a5b612dc01ae0678fe446200" prot="private" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>adaptSizeWeights</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1a429c77ec5f14e89896bd8c53f553efc3" prot="private" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>bestMemberEver_</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1a7cccd9c9a7330c719c07e41c976758eca8a456e680ebc3fd779c565bb1aa23a6f" prot="public" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>BestMemberWithJitter</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1ad3262f1ddf364f74718675c7aef3898ea9c961c81fdd4732ab559e3957df11f95" prot="public" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>Binomial</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1a87a4519dfb59c5967b5c5bf146c5cc7a" prot="private" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>calculateNextGeneration</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1ac5b72f710aa7072d0f2c047ebcae6822" prot="public" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>configuration</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1abbeb2a94738cb7861f0ae74cd1ac45d7" prot="private" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>configuration_</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1a00c75407e103f05bbc353e4d4408c87f" prot="private" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>crossover</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1ad3262f1ddf364f74718675c7aef3898e" prot="public" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>CrossoverType</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1a7cccd9c9a7330c719c07e41c976758eca969fe92e81402d5d57a0fb54487deb9c" prot="public" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>CurrentToBest2Diffs</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1ab016326beb5967faf26b5335eee60f6b" prot="private" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>currGenCrossover_</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1a567a4a25d24f18f328ececf050b6f9b5" prot="private" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>currGenSizeWeights_</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1a9e86dd7c0d258fd861c7fe78d3b864ea" prot="public" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>DifferentialEvolution</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1a7cccd9c9a7330c719c07e41c976758ecaafbcac73a7a11a540554b69113104662" prot="public" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>EitherOrWithOptimalRecombination</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1ad3262f1ddf364f74718675c7aef3898eacf184b9af466f654abf5a078575b328b" prot="public" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>Exponential</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1ac68fced7bca87944a51f624154504b16" prot="private" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>fillInitialPopulation</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1a06db3b320c94876bede02c6a0141587b" prot="private" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>getCrossoverMask</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1a951b3de9d5133c58591162942a6a5626" prot="private" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>getMutationProbabilities</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1ae440ac56fae99fc08a32a3ec36e59f04" prot="private" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>lowerBound_</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1aec279754b47ec3fcf91c4ab3c126147b" prot="public" virt="virtual"><scope>QuantLib::DifferentialEvolution</scope><name>minimize</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1ad3262f1ddf364f74718675c7aef3898eae067a7dfab51f2d3a93cd7f938eaa2b3" prot="public" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>Normal</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1a7cccd9c9a7330c719c07e41c976758eca4b3f57054bc6c84b1a7dc18ebe2c7e6b" prot="public" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>Rand1DiffWithDither</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1a7cccd9c9a7330c719c07e41c976758eca179d6df23898495b356f0e81e74d9416" prot="public" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>Rand1DiffWithPerVectorDither</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1a7cccd9c9a7330c719c07e41c976758eca3839f487db9008308eee67cf2edbc45d" prot="public" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>Rand1SelfadaptiveWithRotation</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1a7cccd9c9a7330c719c07e41c976758eca31fc3c0e7e110a20c0bd257b153573b8" prot="public" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>Rand1Standard</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1ae8ea91f8ce0c5ac178c26c5d94721468" prot="private" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>rng_</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1a6bffc3e0923ec3dd561e4766b718e586" prot="private" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>rotateArray</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1a7cccd9c9a7330c719c07e41c976758ec" prot="public" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>Strategy</name></member>
      <member refid="class_quant_lib_1_1_differential_evolution_1a815c80dc76a309531afc26bd40a562c2" prot="private" virt="non-virtual"><scope>QuantLib::DifferentialEvolution</scope><name>upperBound_</name></member>
      <member refid="class_quant_lib_1_1_optimization_method_1a2e9a51f0954eaf649d075d565d43938c" prot="public" virt="virtual"><scope>QuantLib::DifferentialEvolution</scope><name>~OptimizationMethod</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
