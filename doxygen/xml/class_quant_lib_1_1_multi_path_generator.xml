<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_multi_path_generator" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::MultiPathGenerator</compoundname>
    <includes refid="multipathgenerator_8hpp" local="no">multipathgenerator.hpp</includes>
    <templateparamlist>
      <param>
        <type>class GSG</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_multi_path_generator_1a0d7c562c7c98e48ee682df7448c36408" prot="public" static="no">
        <type><ref refid="struct_quant_lib_1_1_sample" kindref="compound">Sample</ref>&lt; <ref refid="class_quant_lib_1_1_multi_path" kindref="compound">MultiPath</ref> &gt;</type>
        <definition>typedef Sample&lt;MultiPath&gt; QuantLib::MultiPathGenerator&lt; GSG &gt;::sample_type</definition>
        <argsstring></argsstring>
        <name>sample_type</name>
        <qualifiedname>QuantLib::MultiPathGenerator::sample_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/multipathgenerator.hpp" line="53" column="24" bodyfile="ql/methods/montecarlo/multipathgenerator.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_multi_path_generator_1a9eb2e661d0e361ab204aab2205165e0c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::MultiPathGenerator&lt; GSG &gt;::brownianBridge_</definition>
        <argsstring></argsstring>
        <name>brownianBridge_</name>
        <qualifiedname>QuantLib::MultiPathGenerator::brownianBridge_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/multipathgenerator.hpp" line="62" column="14" bodyfile="ql/methods/montecarlo/multipathgenerator.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_multi_path_generator_1a0765e88eecee7aeed4cc1e4df69679b0" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_stochastic_process" kindref="compound">StochasticProcess</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;StochasticProcess&gt; QuantLib::MultiPathGenerator&lt; GSG &gt;::process_</definition>
        <argsstring></argsstring>
        <name>process_</name>
        <qualifiedname>QuantLib::MultiPathGenerator::process_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/multipathgenerator.hpp" line="63" column="25" bodyfile="ql/methods/montecarlo/multipathgenerator.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_multi_path_generator_1a99a5e54b668ace2575bdabe19ba86bde" prot="private" static="no" mutable="no">
        <type>GSG</type>
        <definition>GSG QuantLib::MultiPathGenerator&lt; GSG &gt;::generator_</definition>
        <argsstring></argsstring>
        <name>generator_</name>
        <qualifiedname>QuantLib::MultiPathGenerator::generator_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/multipathgenerator.hpp" line="64" column="13" bodyfile="ql/methods/montecarlo/multipathgenerator.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_multi_path_generator_1a9e2ab91ef7914ea4f32fe3928170816e" prot="private" static="no" mutable="yes">
        <type><ref refid="struct_quant_lib_1_1_sample" kindref="compound">sample_type</ref></type>
        <definition>sample_type QuantLib::MultiPathGenerator&lt; GSG &gt;::next_</definition>
        <argsstring></argsstring>
        <name>next_</name>
        <qualifiedname>QuantLib::MultiPathGenerator::next_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/multipathgenerator.hpp" line="65" column="29" bodyfile="ql/methods/montecarlo/multipathgenerator.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_multi_path_generator_1a4597dc9cf35c4cc670cbd8905bc13c9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MultiPathGenerator&lt; GSG &gt;::MultiPathGenerator</definition>
        <argsstring>(const ext::shared_ptr&lt; StochasticProcess &gt; &amp;, const TimeGrid &amp;, GSG generator, bool brownianBridge=false)</argsstring>
        <name>MultiPathGenerator</name>
        <qualifiedname>QuantLib::MultiPathGenerator::MultiPathGenerator</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_stochastic_process" kindref="compound">StochasticProcess</ref> &gt; &amp;</type>
          <defname>process</defname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_time_grid" kindref="compound">TimeGrid</ref> &amp;</type>
          <defname>times</defname>
        </param>
        <param>
          <type>GSG</type>
          <declname>generator</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>brownianBridge</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/multipathgenerator.hpp" line="54" column="9" bodyfile="ql/methods/montecarlo/multipathgenerator.hpp" bodystart="72" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multi_path_generator_1a53191fe8887501dfed59887b1f08c7f8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="struct_quant_lib_1_1_sample" kindref="compound">sample_type</ref> &amp;</type>
        <definition>const MultiPathGenerator&lt; GSG &gt;::sample_type &amp; QuantLib::MultiPathGenerator&lt; GSG &gt;::next</definition>
        <argsstring>() const</argsstring>
        <name>next</name>
        <qualifiedname>QuantLib::MultiPathGenerator::next</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/multipathgenerator.hpp" line="58" column="27" bodyfile="ql/methods/montecarlo/multipathgenerator.hpp" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multi_path_generator_1a74f69739b303c529158f87e9903da010" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="struct_quant_lib_1_1_sample" kindref="compound">sample_type</ref> &amp;</type>
        <definition>const MultiPathGenerator&lt; GSG &gt;::sample_type &amp; QuantLib::MultiPathGenerator&lt; GSG &gt;::antithetic</definition>
        <argsstring>() const</argsstring>
        <name>antithetic</name>
        <qualifiedname>QuantLib::MultiPathGenerator::antithetic</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/multipathgenerator.hpp" line="59" column="27" bodyfile="ql/methods/montecarlo/multipathgenerator.hpp" bodystart="98" bodyend="100"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_multi_path_generator_1a5d071c62f2d39987a2b84a61ee23ae56" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="struct_quant_lib_1_1_sample" kindref="compound">sample_type</ref> &amp;</type>
        <definition>const MultiPathGenerator&lt; GSG &gt;::sample_type &amp; QuantLib::MultiPathGenerator&lt; GSG &gt;::next</definition>
        <argsstring>(bool antithetic) const</argsstring>
        <name>next</name>
        <qualifiedname>QuantLib::MultiPathGenerator::next</qualifiedname>
        <param>
          <type>bool</type>
          <declname>antithetic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/multipathgenerator.hpp" line="61" column="27" bodyfile="ql/methods/montecarlo/multipathgenerator.hpp" bodystart="104" bodyend="151"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Generates a multipath from a random number generator. </para>
    </briefdescription>
    <detaileddescription>
<para>RSG is a sample generator which returns a random sequence. It must have the minimal interface: <programlisting><codeline><highlight class="normal">RSG<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Sample&lt;Array&gt;<sp/>next();</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><xrefsect id="test_1_test000084"><xreftitle>Test</xreftitle><xrefdescription><para>the generated paths are checked against cached results </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <location file="ql/methods/montecarlo/multipathgenerator.hpp" line="51" column="5" bodyfile="ql/methods/montecarlo/multipathgenerator.hpp" bodystart="51" bodyend="66"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_multi_path_generator_1a74f69739b303c529158f87e9903da010" prot="public" virt="non-virtual"><scope>QuantLib::MultiPathGenerator</scope><name>antithetic</name></member>
      <member refid="class_quant_lib_1_1_multi_path_generator_1a9eb2e661d0e361ab204aab2205165e0c" prot="private" virt="non-virtual"><scope>QuantLib::MultiPathGenerator</scope><name>brownianBridge_</name></member>
      <member refid="class_quant_lib_1_1_multi_path_generator_1a99a5e54b668ace2575bdabe19ba86bde" prot="private" virt="non-virtual"><scope>QuantLib::MultiPathGenerator</scope><name>generator_</name></member>
      <member refid="class_quant_lib_1_1_multi_path_generator_1a4597dc9cf35c4cc670cbd8905bc13c9b" prot="public" virt="non-virtual"><scope>QuantLib::MultiPathGenerator</scope><name>MultiPathGenerator</name></member>
      <member refid="class_quant_lib_1_1_multi_path_generator_1a53191fe8887501dfed59887b1f08c7f8" prot="public" virt="non-virtual"><scope>QuantLib::MultiPathGenerator</scope><name>next</name></member>
      <member refid="class_quant_lib_1_1_multi_path_generator_1a5d071c62f2d39987a2b84a61ee23ae56" prot="private" virt="non-virtual"><scope>QuantLib::MultiPathGenerator</scope><name>next</name></member>
      <member refid="class_quant_lib_1_1_multi_path_generator_1a9e2ab91ef7914ea4f32fe3928170816e" prot="private" virt="non-virtual"><scope>QuantLib::MultiPathGenerator</scope><name>next_</name></member>
      <member refid="class_quant_lib_1_1_multi_path_generator_1a0765e88eecee7aeed4cc1e4df69679b0" prot="private" virt="non-virtual"><scope>QuantLib::MultiPathGenerator</scope><name>process_</name></member>
      <member refid="class_quant_lib_1_1_multi_path_generator_1a0d7c562c7c98e48ee682df7448c36408" prot="public" virt="non-virtual"><scope>QuantLib::MultiPathGenerator</scope><name>sample_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
