<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_m_t_brownian_generator" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::MTBrownianGenerator</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_brownian_generator" prot="public" virt="non-virtual">QuantLib::BrownianGenerator</basecompoundref>
    <includes refid="mtbrowniangenerator_8hpp" local="no">mtbrowniangenerator.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_m_t_brownian_generator_1aaceec87c3deebf11da719118990153fd" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MTBrownianGenerator::factors_</definition>
        <argsstring></argsstring>
        <name>factors_</name>
        <qualifiedname>QuantLib::MTBrownianGenerator::factors_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/browniangenerators/mtbrowniangenerator.hpp" line="56" column="14" bodyfile="ql/models/marketmodels/browniangenerators/mtbrowniangenerator.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_m_t_brownian_generator_1aae3f3210017af19da95d40c87569b313" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MTBrownianGenerator::steps_</definition>
        <argsstring></argsstring>
        <name>steps_</name>
        <qualifiedname>QuantLib::MTBrownianGenerator::steps_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/browniangenerators/mtbrowniangenerator.hpp" line="56" column="23" bodyfile="ql/models/marketmodels/browniangenerators/mtbrowniangenerator.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_m_t_brownian_generator_1a5da6db56e204844de8409c4b1ddf7152" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MTBrownianGenerator::lastStep_</definition>
        <argsstring></argsstring>
        <name>lastStep_</name>
        <qualifiedname>QuantLib::MTBrownianGenerator::lastStep_</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/browniangenerators/mtbrowniangenerator.hpp" line="57" column="14" bodyfile="ql/models/marketmodels/browniangenerators/mtbrowniangenerator.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_m_t_brownian_generator_1af92c6c96b7ab293f6b0032e2aa63432f" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_random_sequence_generator" kindref="compound">RandomSequenceGenerator</ref>&lt; <ref refid="class_quant_lib_1_1_mersenne_twister_uniform_rng" kindref="compound">MersenneTwisterUniformRng</ref> &gt;</type>
        <definition>RandomSequenceGenerator&lt;MersenneTwisterUniformRng&gt; QuantLib::MTBrownianGenerator::generator_</definition>
        <argsstring></argsstring>
        <name>generator_</name>
        <qualifiedname>QuantLib::MTBrownianGenerator::generator_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/browniangenerators/mtbrowniangenerator.hpp" line="58" column="33" bodyfile="ql/models/marketmodels/browniangenerators/mtbrowniangenerator.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_m_t_brownian_generator_1a57e425da54f2c7469659872081c3e322" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_inverse_cumulative_normal" kindref="compound">InverseCumulativeNormal</ref></type>
        <definition>InverseCumulativeNormal QuantLib::MTBrownianGenerator::inverseCumulative_</definition>
        <argsstring></argsstring>
        <name>inverseCumulative_</name>
        <qualifiedname>QuantLib::MTBrownianGenerator::inverseCumulative_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/browniangenerators/mtbrowniangenerator.hpp" line="59" column="33" bodyfile="ql/models/marketmodels/browniangenerators/mtbrowniangenerator.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_m_t_brownian_generator_1a44cae3b803209353c89497abb1a40edc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MTBrownianGenerator::MTBrownianGenerator</definition>
        <argsstring>(Size factors, Size steps, unsigned long seed=0)</argsstring>
        <name>MTBrownianGenerator</name>
        <qualifiedname>QuantLib::MTBrownianGenerator::MTBrownianGenerator</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>factors</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>steps</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>seed</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/browniangenerators/mtbrowniangenerator.hpp" line="45" column="9" bodyfile="ql/models/marketmodels/browniangenerators/mtbrowniangenerator.cpp" bodystart="25" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_m_t_brownian_generator_1a7a263c5897f6d9e3c4c293584e9d67ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::MTBrownianGenerator::nextStep</definition>
        <argsstring>(std::vector&lt; Real &gt; &amp;) override</argsstring>
        <name>nextStep</name>
        <qualifiedname>QuantLib::MTBrownianGenerator::nextStep</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_brownian_generator_1a842244bbd52359fd5007913f6020e824">nextStep</reimplements>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <defname>output</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/browniangenerators/mtbrowniangenerator.hpp" line="49" column="14" bodyfile="ql/models/marketmodels/browniangenerators/mtbrowniangenerator.cpp" bodystart="29" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_m_t_brownian_generator_1a8ab726046c5e8e4763ed3cb9ca22f7f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::MTBrownianGenerator::nextPath</definition>
        <argsstring>() override</argsstring>
        <name>nextPath</name>
        <qualifiedname>QuantLib::MTBrownianGenerator::nextPath</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_brownian_generator_1a62358f7b805d9d0d1ad01f796160967c">nextPath</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/browniangenerators/mtbrowniangenerator.hpp" line="50" column="14" bodyfile="ql/models/marketmodels/browniangenerators/mtbrowniangenerator.cpp" bodystart="45" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_m_t_brownian_generator_1a14353cf17a0daadbdad36afcd41a44fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MTBrownianGenerator::numberOfFactors</definition>
        <argsstring>() const override</argsstring>
        <name>numberOfFactors</name>
        <qualifiedname>QuantLib::MTBrownianGenerator::numberOfFactors</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_brownian_generator_1a23afc86a3b9d547b41a0943c505c35b7">numberOfFactors</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/browniangenerators/mtbrowniangenerator.hpp" line="52" column="14" bodyfile="ql/models/marketmodels/browniangenerators/mtbrowniangenerator.cpp" bodystart="54" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_m_t_brownian_generator_1aeaf35e67a7fc53715f60f993810cac67" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MTBrownianGenerator::numberOfSteps</definition>
        <argsstring>() const override</argsstring>
        <name>numberOfSteps</name>
        <qualifiedname>QuantLib::MTBrownianGenerator::numberOfSteps</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_brownian_generator_1a9253ff5fc4e0097e9534329c5885eabc">numberOfSteps</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/browniangenerators/mtbrowniangenerator.hpp" line="53" column="14" bodyfile="ql/models/marketmodels/browniangenerators/mtbrowniangenerator.cpp" bodystart="56" bodyend="56"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Mersenne-twister Brownian generator for market-model simulations. </para>
    </briefdescription>
    <detaileddescription>
<para>Incremental Brownian generator using a Mersenne-twister uniform generator and inverse-cumulative Gaussian method.</para>
<para><simplesect kind="note"><para>At this time, generation of the underlying uniform sequence is eager, while its transformation into Gaussian variates is lazy. Further optimization might be possible by using the Mersenne twister directly instead of a <ref refid="class_quant_lib_1_1_random_sequence_generator" kindref="compound">RandomSequenceGenerator</ref>; however, it is not clear how much of a difference this would make when compared to the inverse-cumulative Gaussian calculation. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QuantLib::BrownianGenerator</label>
        <link refid="class_quant_lib_1_1_brownian_generator"/>
      </node>
      <node id="1">
        <label>QuantLib::MTBrownianGenerator</label>
        <link refid="class_quant_lib_1_1_m_t_brownian_generator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>QuantLib::BrownianGenerator</label>
        <link refid="class_quant_lib_1_1_brownian_generator"/>
      </node>
      <node id="1">
        <label>QuantLib::MTBrownianGenerator</label>
        <link refid="class_quant_lib_1_1_m_t_brownian_generator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/models/marketmodels/browniangenerators/mtbrowniangenerator.hpp" line="43" column="5" bodyfile="ql/models/marketmodels/browniangenerators/mtbrowniangenerator.hpp" bodystart="43" bodyend="60"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_m_t_brownian_generator_1aaceec87c3deebf11da719118990153fd" prot="private" virt="non-virtual"><scope>QuantLib::MTBrownianGenerator</scope><name>factors_</name></member>
      <member refid="class_quant_lib_1_1_m_t_brownian_generator_1af92c6c96b7ab293f6b0032e2aa63432f" prot="private" virt="non-virtual"><scope>QuantLib::MTBrownianGenerator</scope><name>generator_</name></member>
      <member refid="class_quant_lib_1_1_m_t_brownian_generator_1a57e425da54f2c7469659872081c3e322" prot="private" virt="non-virtual"><scope>QuantLib::MTBrownianGenerator</scope><name>inverseCumulative_</name></member>
      <member refid="class_quant_lib_1_1_m_t_brownian_generator_1a5da6db56e204844de8409c4b1ddf7152" prot="private" virt="non-virtual"><scope>QuantLib::MTBrownianGenerator</scope><name>lastStep_</name></member>
      <member refid="class_quant_lib_1_1_m_t_brownian_generator_1a44cae3b803209353c89497abb1a40edc" prot="public" virt="non-virtual"><scope>QuantLib::MTBrownianGenerator</scope><name>MTBrownianGenerator</name></member>
      <member refid="class_quant_lib_1_1_m_t_brownian_generator_1a8ab726046c5e8e4763ed3cb9ca22f7f1" prot="public" virt="virtual"><scope>QuantLib::MTBrownianGenerator</scope><name>nextPath</name></member>
      <member refid="class_quant_lib_1_1_m_t_brownian_generator_1a7a263c5897f6d9e3c4c293584e9d67ff" prot="public" virt="virtual"><scope>QuantLib::MTBrownianGenerator</scope><name>nextStep</name></member>
      <member refid="class_quant_lib_1_1_m_t_brownian_generator_1a14353cf17a0daadbdad36afcd41a44fe" prot="public" virt="virtual"><scope>QuantLib::MTBrownianGenerator</scope><name>numberOfFactors</name></member>
      <member refid="class_quant_lib_1_1_m_t_brownian_generator_1aeaf35e67a7fc53715f60f993810cac67" prot="public" virt="virtual"><scope>QuantLib::MTBrownianGenerator</scope><name>numberOfSteps</name></member>
      <member refid="class_quant_lib_1_1_m_t_brownian_generator_1aae3f3210017af19da95d40c87569b313" prot="private" virt="non-virtual"><scope>QuantLib::MTBrownianGenerator</scope><name>steps_</name></member>
      <member refid="class_quant_lib_1_1_brownian_generator_1aea035588bfc1191fed09ff90b6eb2223" prot="public" virt="virtual"><scope>QuantLib::MTBrownianGenerator</scope><name>~BrownianGenerator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
