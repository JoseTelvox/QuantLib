<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_vanna_volga_double_barrier_engine" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::VannaVolgaDoubleBarrierEngine</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_generic_engine" prot="public" virt="non-virtual">QuantLib::GenericEngine&lt; DoubleBarrierOption::arguments, DoubleBarrierOption::results &gt;</basecompoundref>
    <includes refid="vannavolgadoublebarrierengine_8hpp" local="no">vannavolgadoublebarrierengine.hpp</includes>
    <templateparamlist>
      <param>
        <type>class DoubleBarrierEngine</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_vanna_volga_double_barrier_engine_1a06c659f554535b6e6e55d5b070a01b86" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_delta_vol_quote" kindref="compound">DeltaVolQuote</ref> &gt;</type>
        <definition>const Handle&lt;DeltaVolQuote&gt; QuantLib::VannaVolgaDoubleBarrierEngine&lt; DoubleBarrierEngine &gt;::atmVol_</definition>
        <argsstring></argsstring>
        <name>atmVol_</name>
        <qualifiedname>QuantLib::VannaVolgaDoubleBarrierEngine::atmVol_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" line="407" column="25" bodyfile="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_vanna_volga_double_barrier_engine_1ad5adfc90994612d712979a54b2c78336" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_delta_vol_quote" kindref="compound">DeltaVolQuote</ref> &gt;</type>
        <definition>const Handle&lt;DeltaVolQuote&gt; QuantLib::VannaVolgaDoubleBarrierEngine&lt; DoubleBarrierEngine &gt;::vol25Put_</definition>
        <argsstring></argsstring>
        <name>vol25Put_</name>
        <qualifiedname>QuantLib::VannaVolgaDoubleBarrierEngine::vol25Put_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" line="408" column="25" bodyfile="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_vanna_volga_double_barrier_engine_1a5cc9a8cafa243d82307f520af64c0ac1" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_delta_vol_quote" kindref="compound">DeltaVolQuote</ref> &gt;</type>
        <definition>const Handle&lt;DeltaVolQuote&gt; QuantLib::VannaVolgaDoubleBarrierEngine&lt; DoubleBarrierEngine &gt;::vol25Call_</definition>
        <argsstring></argsstring>
        <name>vol25Call_</name>
        <qualifiedname>QuantLib::VannaVolgaDoubleBarrierEngine::vol25Call_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" line="409" column="25" bodyfile="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_vanna_volga_double_barrier_engine_1a707d17c27cc927c677775f85d7598abc" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        <definition>const Time QuantLib::VannaVolgaDoubleBarrierEngine&lt; DoubleBarrierEngine &gt;::T_</definition>
        <argsstring></argsstring>
        <name>T_</name>
        <qualifiedname>QuantLib::VannaVolgaDoubleBarrierEngine::T_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" line="410" column="23" bodyfile="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_vanna_volga_double_barrier_engine_1a3e252e8a118d79cb5c5faa06976b07f2" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
        <definition>const Handle&lt;Quote&gt; QuantLib::VannaVolgaDoubleBarrierEngine&lt; DoubleBarrierEngine &gt;::spotFX_</definition>
        <argsstring></argsstring>
        <name>spotFX_</name>
        <qualifiedname>QuantLib::VannaVolgaDoubleBarrierEngine::spotFX_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" line="411" column="25" bodyfile="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_vanna_volga_double_barrier_engine_1a46b4a9ff8c7385a0fd6dab3c3996159b" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt;</type>
        <definition>const Handle&lt;YieldTermStructure&gt; QuantLib::VannaVolgaDoubleBarrierEngine&lt; DoubleBarrierEngine &gt;::domesticTS_</definition>
        <argsstring></argsstring>
        <name>domesticTS_</name>
        <qualifiedname>QuantLib::VannaVolgaDoubleBarrierEngine::domesticTS_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" line="412" column="25" bodyfile="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" bodystart="412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_vanna_volga_double_barrier_engine_1a68195449d1e6c50bc01d17498b564a9d" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt;</type>
        <definition>const Handle&lt;YieldTermStructure&gt; QuantLib::VannaVolgaDoubleBarrierEngine&lt; DoubleBarrierEngine &gt;::foreignTS_</definition>
        <argsstring></argsstring>
        <name>foreignTS_</name>
        <qualifiedname>QuantLib::VannaVolgaDoubleBarrierEngine::foreignTS_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" line="413" column="25" bodyfile="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_vanna_volga_double_barrier_engine_1a6383280e6ac9a5e4b346998b40462ea4" prot="private" static="no" mutable="no">
        <type>const bool</type>
        <definition>const bool QuantLib::VannaVolgaDoubleBarrierEngine&lt; DoubleBarrierEngine &gt;::adaptVanDelta_</definition>
        <argsstring></argsstring>
        <name>adaptVanDelta_</name>
        <qualifiedname>QuantLib::VannaVolgaDoubleBarrierEngine::adaptVanDelta_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" line="414" column="23" bodyfile="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_vanna_volga_double_barrier_engine_1a9397ce8c4f9d1ebee0fb9bbd918e625a" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::VannaVolgaDoubleBarrierEngine&lt; DoubleBarrierEngine &gt;::bsPriceWithSmile_</definition>
        <argsstring></argsstring>
        <name>bsPriceWithSmile_</name>
        <qualifiedname>QuantLib::VannaVolgaDoubleBarrierEngine::bsPriceWithSmile_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" line="415" column="23" bodyfile="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" bodystart="415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_vanna_volga_double_barrier_engine_1a529ea30ee386fe2f98d1fe58fb4d013e" prot="private" static="no" mutable="no">
        <type>const int</type>
        <definition>const int QuantLib::VannaVolgaDoubleBarrierEngine&lt; DoubleBarrierEngine &gt;::series_</definition>
        <argsstring></argsstring>
        <name>series_</name>
        <qualifiedname>QuantLib::VannaVolgaDoubleBarrierEngine::series_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" line="416" column="22" bodyfile="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" bodystart="416" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_vanna_volga_double_barrier_engine_1aa8ff39da1ace5c0f5889bb873d151a00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::VannaVolgaDoubleBarrierEngine&lt; DoubleBarrierEngine &gt;::VannaVolgaDoubleBarrierEngine</definition>
        <argsstring>(Handle&lt; DeltaVolQuote &gt; atmVol, Handle&lt; DeltaVolQuote &gt; vol25Put, Handle&lt; DeltaVolQuote &gt; vol25Call, Handle&lt; Quote &gt; spotFX, Handle&lt; YieldTermStructure &gt; domesticTS, Handle&lt; YieldTermStructure &gt; foreignTS, const bool adaptVanDelta=false, const Real bsPriceWithSmile=0.0, int series=5)</argsstring>
        <name>VannaVolgaDoubleBarrierEngine</name>
        <qualifiedname>QuantLib::VannaVolgaDoubleBarrierEngine::VannaVolgaDoubleBarrierEngine</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_delta_vol_quote" kindref="compound">DeltaVolQuote</ref> &gt;</type>
          <declname>atmVol</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_delta_vol_quote" kindref="compound">DeltaVolQuote</ref> &gt;</type>
          <declname>vol25Put</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_delta_vol_quote" kindref="compound">DeltaVolQuote</ref> &gt;</type>
          <declname>vol25Call</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
          <declname>spotFX</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt;</type>
          <declname>domesticTS</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt;</type>
          <declname>foreignTS</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>adaptVanDelta</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>bsPriceWithSmile</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>series</declname>
          <defval>5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" line="53" column="12" bodyfile="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" bodystart="53" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_vanna_volga_double_barrier_engine_1acdb2f7c3b56d609e99669fb10c1049cc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::VannaVolgaDoubleBarrierEngine&lt; DoubleBarrierEngine &gt;::calculate</definition>
        <argsstring>() const override</argsstring>
        <name>calculate</name>
        <qualifiedname>QuantLib::VannaVolgaDoubleBarrierEngine::calculate</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_pricing_engine_1ad2be11cff80d9792f0cc8231711fcb06">calculate</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" line="88" column="19" bodyfile="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" bodystart="88" bodyend="403"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Vanna Volga double-barrier option engine. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QuantLib::GenericEngine&lt; DoubleBarrierOption::arguments, DoubleBarrierOption::results &gt;</label>
        <link refid="class_quant_lib_1_1_generic_engine"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="3">
        <label>QuantLib::PricingEngine</label>
        <link refid="class_quant_lib_1_1_pricing_engine"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::VannaVolgaDoubleBarrierEngine&lt; DoubleBarrierEngine &gt;</label>
        <link refid="class_quant_lib_1_1_vanna_volga_double_barrier_engine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7">
        <label>OneAssetOption::arguments</label>
      </node>
      <node id="6">
        <label>QuantLib::DoubleBarrierOption::arguments</label>
        <link refid="class_quant_lib_1_1_double_barrier_option_1_1arguments"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::GenericEngine&lt; DoubleBarrierOption::arguments, DoubleBarrierOption::results &gt;</label>
        <link refid="class_quant_lib_1_1_generic_engine"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>arguments_</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="3">
        <label>QuantLib::PricingEngine</label>
        <link refid="class_quant_lib_1_1_pricing_engine"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::VannaVolgaDoubleBarrierEngine&lt; DoubleBarrierEngine &gt;</label>
        <link refid="class_quant_lib_1_1_vanna_volga_double_barrier_engine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" line="48" column="7" bodyfile="ql/experimental/barrieroption/vannavolgadoublebarrierengine.hpp" bodystart="50" bodyend="417"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_vanna_volga_double_barrier_engine_1a6383280e6ac9a5e4b346998b40462ea4" prot="private" virt="non-virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>adaptVanDelta_</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1ad2371cdbafa1989afb0e4733b1212c0d" prot="protected" virt="non-virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>arguments_</name></member>
      <member refid="class_quant_lib_1_1_vanna_volga_double_barrier_engine_1a06c659f554535b6e6e55d5b070a01b86" prot="private" virt="non-virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>atmVol_</name></member>
      <member refid="class_quant_lib_1_1_vanna_volga_double_barrier_engine_1a9397ce8c4f9d1ebee0fb9bbd918e625a" prot="private" virt="non-virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>bsPriceWithSmile_</name></member>
      <member refid="class_quant_lib_1_1_vanna_volga_double_barrier_engine_1acdb2f7c3b56d609e99669fb10c1049cc" prot="public" virt="virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_vanna_volga_double_barrier_engine_1a46b4a9ff8c7385a0fd6dab3c3996159b" prot="private" virt="non-virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>domesticTS_</name></member>
      <member refid="class_quant_lib_1_1_vanna_volga_double_barrier_engine_1a68195449d1e6c50bc01d17498b564a9d" prot="private" virt="non-virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>foreignTS_</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1ad9c6e8dc65ca072d5e6e17640d74db3e" prot="public" virt="virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>getArguments</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1aea8272ef6e5e0ea1cffadfed0454fa88" prot="public" virt="virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>getResults</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1a81c5390ba1e713e57ca87d5f841d37f2" prot="public" virt="virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>reset</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1a41281f2ea4990dbce90be1f9f2e231f6" prot="protected" virt="non-virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>results_</name></member>
      <member refid="class_quant_lib_1_1_vanna_volga_double_barrier_engine_1a529ea30ee386fe2f98d1fe58fb4d013e" prot="private" virt="non-virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>series_</name></member>
      <member refid="class_quant_lib_1_1_vanna_volga_double_barrier_engine_1a3e252e8a118d79cb5c5faa06976b07f2" prot="private" virt="non-virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>spotFX_</name></member>
      <member refid="class_quant_lib_1_1_vanna_volga_double_barrier_engine_1a707d17c27cc927c677775f85d7598abc" prot="private" virt="non-virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>T_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1aaf5ef54d9e1abf8b1b50b48804edf3dc" prot="public" virt="virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_vanna_volga_double_barrier_engine_1aa8ff39da1ace5c0f5889bb873d151a00" prot="public" virt="non-virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>VannaVolgaDoubleBarrierEngine</name></member>
      <member refid="class_quant_lib_1_1_vanna_volga_double_barrier_engine_1a5cc9a8cafa243d82307f520af64c0ac1" prot="private" virt="non-virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>vol25Call_</name></member>
      <member refid="class_quant_lib_1_1_vanna_volga_double_barrier_engine_1ad5adfc90994612d712979a54b2c78336" prot="private" virt="non-virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>vol25Put_</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_pricing_engine_1a66b279a54578cd7e60d402e5147eb526" prot="public" virt="non-virtual"><scope>QuantLib::VannaVolgaDoubleBarrierEngine</scope><name>~PricingEngine</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
