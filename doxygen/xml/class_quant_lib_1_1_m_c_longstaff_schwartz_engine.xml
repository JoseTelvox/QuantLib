<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>QuantLib::MCLongstaffSchwartzEngine</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_generic_engine" prot="public" virt="non-virtual">QuantLib::GenericEngine&lt; ArgumentsType, ResultsType &gt;</basecompoundref>
    <basecompoundref refid="class_quant_lib_1_1_mc_simulation" prot="public" virt="non-virtual">QuantLib::McSimulation&lt; MC, RNG, Statistics &gt;</basecompoundref>
    <includes refid="mclongstaffschwartzengine_8hpp" local="no">mclongstaffschwartzengine.hpp</includes>
    <templateparamlist>
      <param>
        <type>class <ref refid="class_quant_lib_1_1_generic_engine" kindref="compound">GenericEngine</ref></type>
      </param>
      <param>
        <type>template&lt; class &gt; class</type>
        <declname>MC</declname>
        <defname>MC</defname>
      </param>
      <param>
        <type>class RNG</type>
      </param>
      <param>
        <type>class S</type>
        <defval><ref refid="namespace_quant_lib_1ae2e788da35d2b866040a03b96227ee6e" kindref="member">Statistics</ref></defval>
      </param>
      <param>
        <type>class RNG_Calibration</type>
        <defval>RNG</defval>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a157905232837fe4dbf40cf82b327bf62" prot="public" static="no">
        <type>MC&lt; RNG &gt;::path_type</type>
        <definition>typedef MC&lt;RNG&gt;::path_type QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::path_type</definition>
        <argsstring></argsstring>
        <name>path_type</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::path_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="52" column="41" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a6cf875fef1598284e3d61407b2e187c8" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_mc_simulation" kindref="compound">McSimulation</ref>&lt; MC, RNG, S &gt;::stats_type</type>
        <definition>typedef McSimulation&lt;MC,RNG,S&gt;::stats_type QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::stats_type</definition>
        <argsstring></argsstring>
        <name>stats_type</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::stats_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="54" column="13" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1aa41c5f6592d62b2172fbbae3e347efc8" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_mc_simulation" kindref="compound">McSimulation</ref>&lt; MC, RNG, S &gt;::path_pricer_type</type>
        <definition>typedef McSimulation&lt;MC,RNG,S&gt;::path_pricer_type QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::path_pricer_type</definition>
        <argsstring></argsstring>
        <name>path_pricer_type</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::path_pricer_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="56" column="13" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1afdb50cd2453fa33138cbb042b2656cd4" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_mc_simulation" kindref="compound">McSimulation</ref>&lt; MC, RNG, S &gt;::path_generator_type</type>
        <definition>typedef McSimulation&lt;MC,RNG,S&gt;::path_generator_type QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::path_generator_type</definition>
        <argsstring></argsstring>
        <name>path_generator_type</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::path_generator_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="58" column="13" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a58db30679d696da1f3c83df671441943" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_mc_simulation" kindref="compound">McSimulation</ref>&lt; MC, RNG_Calibration, S &gt;::path_generator_type</type>
        <definition>typedef McSimulation&lt;MC,RNG_Calibration,S&gt;::path_generator_type QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::path_generator_type_calibration</definition>
        <argsstring></argsstring>
        <name>path_generator_type_calibration</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::path_generator_type_calibration</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="61" column="17" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1ac49b014d6a8d095af1f78eb0df10282d" prot="protected" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_stochastic_process" kindref="compound">StochasticProcess</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;StochasticProcess&gt; QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::process_</definition>
        <argsstring></argsstring>
        <name>process_</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::process_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="97" column="25" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a46845271d81aebb9359cff86125469a5" prot="protected" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>const Size QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::timeSteps_</definition>
        <argsstring></argsstring>
        <name>timeSteps_</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::timeSteps_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="98" column="20" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a78c1a6a0b3b7021abe297aafcdddd22d" prot="protected" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>const Size QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::timeStepsPerYear_</definition>
        <argsstring></argsstring>
        <name>timeStepsPerYear_</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::timeStepsPerYear_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="99" column="20" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a0005f50a2f3a52b03c53493718ae7b02" prot="protected" static="no" mutable="no">
        <type>const bool</type>
        <definition>const bool QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::brownianBridge_</definition>
        <argsstring></argsstring>
        <name>brownianBridge_</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::brownianBridge_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="100" column="20" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a7b8fba774172052f2e7ec1021290cf4d" prot="protected" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>const Size QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::requiredSamples_</definition>
        <argsstring></argsstring>
        <name>requiredSamples_</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::requiredSamples_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="101" column="20" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a5810cda4fb9f4e8db1928fd258c3408d" prot="protected" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::requiredTolerance_</definition>
        <argsstring></argsstring>
        <name>requiredTolerance_</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::requiredTolerance_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="102" column="20" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1ac14e0be821d43e80061ccb880383c900" prot="protected" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>const Size QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::maxSamples_</definition>
        <argsstring></argsstring>
        <name>maxSamples_</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::maxSamples_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="103" column="20" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a2ccf00acb22b66f92393934522e6b9c6" prot="protected" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
        <definition>const BigNatural QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::seed_</definition>
        <argsstring></argsstring>
        <name>seed_</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::seed_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="104" column="26" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a57bf770a4a28c3e0861ecd24c7703f60" prot="protected" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>const Size QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::nCalibrationSamples_</definition>
        <argsstring></argsstring>
        <name>nCalibrationSamples_</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::nCalibrationSamples_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="105" column="20" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1aa94b92d13b45bcb80845c4d9e515c3f7" prot="protected" static="no" mutable="no">
        <type>const bool</type>
        <definition>const bool QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::brownianBridgeCalibration_</definition>
        <argsstring></argsstring>
        <name>brownianBridgeCalibration_</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::brownianBridgeCalibration_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="106" column="20" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a77d67cd9317a31cee16750a66108966f" prot="protected" static="no" mutable="no">
        <type>const bool</type>
        <definition>const bool QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::antitheticVariateCalibration_</definition>
        <argsstring></argsstring>
        <name>antitheticVariateCalibration_</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::antitheticVariateCalibration_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="107" column="20" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a4ddbfc2637cb8a8d0dfa0f023d613bf0" prot="protected" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
        <definition>const BigNatural QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::seedCalibration_</definition>
        <argsstring></argsstring>
        <name>seedCalibration_</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::seedCalibration_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="108" column="26" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a6544a081b9eb8951b06c2518eaa915a9" prot="protected" static="no" mutable="yes">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_longstaff_schwartz_path_pricer" kindref="compound">LongstaffSchwartzPathPricer</ref>&lt; path_type &gt; &gt;</type>
        <definition>ext::shared_ptr&lt;LongstaffSchwartzPathPricer&lt;path_type&gt; &gt; QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::pathPricer_</definition>
        <argsstring></argsstring>
        <name>pathPricer_</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::pathPricer_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="111" column="13" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a62e3712ee1431819cb50fd7b373e90e2" prot="protected" static="no" mutable="yes">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_monte_carlo_model" kindref="compound">MonteCarloModel</ref>&lt; MC, RNG_Calibration, S &gt; &gt;</type>
        <definition>ext::shared_ptr&lt;MonteCarloModel&lt;MC, RNG_Calibration, S&gt; &gt; QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::mcModelCalibration_</definition>
        <argsstring></argsstring>
        <name>mcModelCalibration_</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::mcModelCalibration_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="113" column="13" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1aa19e446f2b23b29e6b892bcd365a6ec0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::MCLongstaffSchwartzEngine</definition>
        <argsstring>(ext::shared_ptr&lt; StochasticProcess &gt; process, Size timeSteps, Size timeStepsPerYear, bool brownianBridge, bool antitheticVariate, bool controlVariate, Size requiredSamples, Real requiredTolerance, Size maxSamples, BigNatural seed, Size nCalibrationSamples=Null&lt; Size &gt;(), ext::optional&lt; bool &gt; brownianBridgeCalibration=ext::nullopt, ext::optional&lt; bool &gt; antitheticVariateCalibration=ext::nullopt, BigNatural seedCalibration=Null&lt; Size &gt;())</argsstring>
        <name>MCLongstaffSchwartzEngine</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::MCLongstaffSchwartzEngine</qualifiedname>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_stochastic_process" kindref="compound">StochasticProcess</ref> &gt;</type>
          <declname>process</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>timeSteps</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>timeStepsPerYear</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>brownianBridge</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>antitheticVariate</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>controlVariate</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>requiredSamples</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>requiredTolerance</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxSamples</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>nCalibrationSamples</declname>
          <defval><ref refid="class_quant_lib_1_1_null" kindref="compound">Null</ref>&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt;()</defval>
        </param>
        <param>
          <type>ext::optional&lt; bool &gt;</type>
          <declname>brownianBridgeCalibration</declname>
          <defval>ext::nullopt</defval>
        </param>
        <param>
          <type>ext::optional&lt; bool &gt;</type>
          <declname>antitheticVariateCalibration</declname>
          <defval>ext::nullopt</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
          <declname>seedCalibration</declname>
          <defval><ref refid="class_quant_lib_1_1_null" kindref="compound">Null</ref>&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the parameters brownianBridge and antitheticVariate are not given they are chosen to be identical to the respective parameters for pricing; the seed for calibration is chosen to be zero if the pricing seed is zero and otherwise as the pricing seed plus some offset to avoid identical paths in calibration and pricing; note however that this has no effect for low discrepancy RNGs usually, it is therefore recommended to use pseudo random generators for the calibration phase always (and possibly quasi monte carlo in the subsequent pricing). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="72" column="9" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="123" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a77ecde352af08860470c4bf6853225ad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::calculate</definition>
        <argsstring>() const override</argsstring>
        <name>calculate</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::calculate</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_pricing_engine_1ad2be11cff80d9792f0cc8231711fcb06">calculate</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="87" column="14" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="179" bodyend="210"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a35dd247e422f003eca4582e7bc908bb9" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_longstaff_schwartz_path_pricer" kindref="compound">LongstaffSchwartzPathPricer</ref>&lt; path_type &gt; &gt;</type>
        <definition>virtual ext::shared_ptr&lt; LongstaffSchwartzPathPricer&lt; path_type &gt; &gt; QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::lsmPathPricer</definition>
        <argsstring>() const =0</argsstring>
        <name>lsmPathPricer</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::lsmPathPricer</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_m_c_american_basket_engine_1acf99b0a7327d7fbdb84bedbf5868a30a">lsmPathPricer</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_m_c_american_engine_1aac84b1adf239dca465bd98c7a2234b14">lsmPathPricer</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="91" column="52"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a2e1e35599cb9ec91f3ffa8d49d869eff" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_time_grid" kindref="compound">TimeGrid</ref></type>
        <definition>TimeGrid QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::timeGrid</definition>
        <argsstring>() const override</argsstring>
        <name>timeGrid</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::timeGrid</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_mc_simulation_1a5b5c524a5e54a4f91ce6a6d6537e7ee3">timeGrid</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="93" column="18" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="216" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1aadaa6d56aad9a5ea6fdaa950d3b0e9c3" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_path_pricer" kindref="compound">path_pricer_type</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; typename MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::path_pricer_type &gt; QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::pathPricer</definition>
        <argsstring>() const override</argsstring>
        <name>pathPricer</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::pathPricer</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_mc_simulation_1a0e142b20adbf77779877d3603f9fa9b5">pathPricer</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="94" column="25" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="170" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a8d279f09223d2fa043d2a7ea0d3cf484" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_multi_path_generator" kindref="compound">path_generator_type</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; typename MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::path_generator_type &gt; QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;::pathGenerator</definition>
        <argsstring>() const override</argsstring>
        <name>pathGenerator</name>
        <qualifiedname>QuantLib::MCLongstaffSchwartzEngine::pathGenerator</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_mc_simulation_1a9618deed5bf4bdba261c1d68bebc3a6f">pathGenerator</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="95" column="25" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="247" bodyend="256"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Longstaff-Schwarz Monte Carlo engine for early exercise options. </para>
    </briefdescription>
    <detaileddescription>
<para>References:</para>
<para>Francis Longstaff, Eduardo Schwartz, 2001. Valuing American Options by Simulation: A Simple Least-Squares Approach, The Review of Financial Studies, Volume 14, No. 1, 113-147</para>
<para><xrefsect id="test_1_test000132"><xreftitle>Test</xreftitle><xrefdescription><para>the correctness of the returned value is tested by reproducing results available in web/literature </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QuantLib::GenericEngine&lt; ArgumentsType, ResultsType &gt;</label>
        <link refid="class_quant_lib_1_1_generic_engine"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;</label>
        <link refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::McSimulation&lt; MC, RNG, Statistics &gt;</label>
        <link refid="class_quant_lib_1_1_mc_simulation"/>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="3">
        <label>QuantLib::PricingEngine</label>
        <link refid="class_quant_lib_1_1_pricing_engine"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>QuantLib::GenericEngine&lt; ArgumentsType, ResultsType &gt;</label>
        <link refid="class_quant_lib_1_1_generic_engine"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;</label>
        <link refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::McSimulation&lt; MC, RNG, Statistics &gt;</label>
        <link refid="class_quant_lib_1_1_mc_simulation"/>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="3">
        <label>QuantLib::PricingEngine</label>
        <link refid="class_quant_lib_1_1_pricing_engine"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/pricingengines/mclongstaffschwartzengine.hpp" line="49" column="5" bodyfile="ql/pricingengines/mclongstaffschwartzengine.hpp" bodystart="50" bodyend="114"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_mc_simulation_1a06f6de1952807cb9e689619d3f48450d" prot="protected" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>antitheticVariate_</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a77d67cd9317a31cee16750a66108966f" prot="protected" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>antitheticVariateCalibration_</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1ad2371cdbafa1989afb0e4733b1212c0d" prot="protected" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>arguments_</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a0005f50a2f3a52b03c53493718ae7b02" prot="protected" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>brownianBridge_</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1aa94b92d13b45bcb80845c4d9e515c3f7" prot="protected" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>brownianBridgeCalibration_</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a77ecde352af08860470c4bf6853225ad" prot="public" virt="virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1af5ccf2e30a050c14f9e30965855b4993" prot="public" virt="non-virtual" ambiguityscope="QuantLib::McSimulation&lt; MC, RNG, Statistics &gt;::"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a81f0b6c250bc8a1ba246faa3b7bbe70f" prot="protected" virt="virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>controlPathGenerator</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1ae3b7f6e12eaf228b5c65f70a721eb729" prot="protected" virt="virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>controlPathPricer</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1ad835a3988a983d55494f911f53b78408" prot="protected" virt="virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>controlPricingEngine</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a0c55429fb2a2d840cd8d358a5973cc40" prot="protected" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>controlVariate_</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a503ac4db5fa01aa75596c6b42d9d5832" prot="protected" virt="virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>controlVariateValue</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1aa74e7e1891852e5c96da544b87af083c" prot="public" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>errorEstimate</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1ad9c6e8dc65ca072d5e6e17640d74db3e" prot="public" virt="virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>getArguments</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1aea8272ef6e5e0ea1cffadfed0454fa88" prot="public" virt="virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>getResults</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a35dd247e422f003eca4582e7bc908bb9" prot="protected" virt="pure-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>lsmPathPricer</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1ae21c92c6196d56c6a889389268ef2075" prot="protected" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>maxError</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a10d5e5d85cc108ab976899890055e061" prot="protected" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>maxError</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1ac14e0be821d43e80061ccb880383c900" prot="protected" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>maxSamples_</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1aa19e446f2b23b29e6b892bcd365a6ec0" prot="public" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>MCLongstaffSchwartzEngine</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1afbdbf4a8ce56b1b6060c49ac91b1f55a" prot="protected" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>mcModel_</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a62e3712ee1431819cb50fd7b373e90e2" prot="protected" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>mcModelCalibration_</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a3242253b8262657e78739463a077c1d6" prot="protected" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>McSimulation</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a57bf770a4a28c3e0861ecd24c7703f60" prot="protected" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>nCalibrationSamples_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1afdb50cd2453fa33138cbb042b2656cd4" prot="public" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>path_generator_type</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a58db30679d696da1f3c83df671441943" prot="public" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>path_generator_type_calibration</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1aa41c5f6592d62b2172fbbae3e347efc8" prot="public" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>path_pricer_type</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a157905232837fe4dbf40cf82b327bf62" prot="public" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>path_type</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a8d279f09223d2fa043d2a7ea0d3cf484" prot="protected" virt="virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>pathGenerator</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1aadaa6d56aad9a5ea6fdaa950d3b0e9c3" prot="protected" virt="virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>pathPricer</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a6544a081b9eb8951b06c2518eaa915a9" prot="protected" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>pathPricer_</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1ac49b014d6a8d095af1f78eb0df10282d" prot="protected" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>process_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a7b8fba774172052f2e7ec1021290cf4d" prot="protected" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>requiredSamples_</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a5810cda4fb9f4e8db1928fd258c3408d" prot="protected" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>requiredTolerance_</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1a81c5390ba1e713e57ca87d5f841d37f2" prot="public" virt="virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>reset</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a5c793e8d12a221aec4c60f022d34eb81" prot="public" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>result_type</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1a41281f2ea4990dbce90be1f9f2e231f6" prot="protected" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>results_</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1aada0200a7fb38c4bc94bbcb49464d35b" prot="public" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>sampleAccumulator</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a2ccf00acb22b66f92393934522e6b9c6" prot="protected" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>seed_</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a4ddbfc2637cb8a8d0dfa0f023d613bf0" prot="protected" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>seedCalibration_</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a6cf875fef1598284e3d61407b2e187c8" prot="public" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>stats_type</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a2e1e35599cb9ec91f3ffa8d49d869eff" prot="protected" virt="virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>timeGrid</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a46845271d81aebb9359cff86125469a5" prot="protected" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>timeSteps_</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a78c1a6a0b3b7021abe297aafcdddd22d" prot="protected" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>timeStepsPerYear_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1aaf5ef54d9e1abf8b1b50b48804edf3dc" prot="public" virt="virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a1c903a9dd586755f55377b522d99ac16" prot="public" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>value</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a06e9db2fbd3d80e6358e8494f4b6b6ea" prot="public" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>valueWithSamples</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a11624b5e53889858d9189f85e27d653d" prot="public" virt="virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>~McSimulation</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_pricing_engine_1a66b279a54578cd7e60d402e5147eb526" prot="public" virt="non-virtual"><scope>QuantLib::MCLongstaffSchwartzEngine</scope><name>~PricingEngine</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
