<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_monte_carlo_model" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::MonteCarloModel</compoundname>
    <includes refid="montecarlomodel_8hpp" local="no">montecarlomodel.hpp</includes>
    <templateparamlist>
      <param>
        <type>template&lt; class &gt; class</type>
        <declname>MC</declname>
        <defname>MC</defname>
      </param>
      <param>
        <type>class RNG</type>
      </param>
      <param>
        <type>class S</type>
        <defval><ref refid="namespace_quant_lib_1ae2e788da35d2b866040a03b96227ee6e" kindref="member">Statistics</ref></defval>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_monte_carlo_model_1a92ce33d88326bcabd267ff8ac3af900d" prot="public" static="no">
        <type>MC&lt; RNG &gt;</type>
        <definition>typedef MC&lt;RNG&gt; QuantLib::MonteCarloModel&lt; MC, RNG, S &gt;::mc_traits</definition>
        <argsstring></argsstring>
        <name>mc_traits</name>
        <qualifiedname>QuantLib::MonteCarloModel::mc_traits</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/montecarlomodel.hpp" line="54" column="20" bodyfile="ql/methods/montecarlo/montecarlomodel.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_monte_carlo_model_1a579ccc45d77f63dc300d23ce7a1ee104" prot="public" static="no">
        <type>RNG</type>
        <definition>typedef RNG QuantLib::MonteCarloModel&lt; MC, RNG, S &gt;::rng_traits</definition>
        <argsstring></argsstring>
        <name>rng_traits</name>
        <qualifiedname>QuantLib::MonteCarloModel::rng_traits</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/montecarlomodel.hpp" line="55" column="21" bodyfile="ql/methods/montecarlo/montecarlomodel.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_monte_carlo_model_1ac27d0631cb6781f833c944b227115348" prot="public" static="no">
        <type>MC&lt; RNG &gt;::path_generator_type</type>
        <definition>typedef MC&lt;RNG&gt;::path_generator_type QuantLib::MonteCarloModel&lt; MC, RNG, S &gt;::path_generator_type</definition>
        <argsstring></argsstring>
        <name>path_generator_type</name>
        <qualifiedname>QuantLib::MonteCarloModel::path_generator_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/montecarlomodel.hpp" line="56" column="51" bodyfile="ql/methods/montecarlo/montecarlomodel.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_monte_carlo_model_1a225d7fe853bc4c76fca6463d6bec4ae2" prot="public" static="no">
        <type>MC&lt; RNG &gt;::path_pricer_type</type>
        <definition>typedef MC&lt;RNG&gt;::path_pricer_type QuantLib::MonteCarloModel&lt; MC, RNG, S &gt;::path_pricer_type</definition>
        <argsstring></argsstring>
        <name>path_pricer_type</name>
        <qualifiedname>QuantLib::MonteCarloModel::path_pricer_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/montecarlomodel.hpp" line="57" column="48" bodyfile="ql/methods/montecarlo/montecarlomodel.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_monte_carlo_model_1a55dd8f1dd588c237e0076f44d60eb19f" prot="public" static="no">
        <type><ref refid="struct_quant_lib_1_1_sample" kindref="compound">path_generator_type::sample_type</ref></type>
        <definition>typedef path_generator_type::sample_type QuantLib::MonteCarloModel&lt; MC, RNG, S &gt;::sample_type</definition>
        <argsstring></argsstring>
        <name>sample_type</name>
        <qualifiedname>QuantLib::MonteCarloModel::sample_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/montecarlomodel.hpp" line="58" column="59" bodyfile="ql/methods/montecarlo/montecarlomodel.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_monte_carlo_model_1a1583c7c3ebba7c59ee98b21d28041d02" prot="public" static="no">
        <type>path_pricer_type::result_type</type>
        <definition>typedef path_pricer_type::result_type QuantLib::MonteCarloModel&lt; MC, RNG, S &gt;::result_type</definition>
        <argsstring></argsstring>
        <name>result_type</name>
        <qualifiedname>QuantLib::MonteCarloModel::result_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/montecarlomodel.hpp" line="59" column="56" bodyfile="ql/methods/montecarlo/montecarlomodel.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_monte_carlo_model_1a172eea08b331744d040dee0d80bedd97" prot="public" static="no">
        <type>S</type>
        <definition>typedef S QuantLib::MonteCarloModel&lt; MC, RNG, S &gt;::stats_type</definition>
        <argsstring></argsstring>
        <name>stats_type</name>
        <qualifiedname>QuantLib::MonteCarloModel::stats_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/montecarlomodel.hpp" line="60" column="19" bodyfile="ql/methods/montecarlo/montecarlomodel.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_monte_carlo_model_1a72bd8f082fca6fcb6cfdc5755a6d0f0c" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; path_generator_type &gt;</type>
        <definition>ext::shared_ptr&lt;path_generator_type&gt; QuantLib::MonteCarloModel&lt; MC, RNG, S &gt;::pathGenerator_</definition>
        <argsstring></argsstring>
        <name>pathGenerator_</name>
        <qualifiedname>QuantLib::MonteCarloModel::pathGenerator_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/montecarlomodel.hpp" line="80" column="25" bodyfile="ql/methods/montecarlo/montecarlomodel.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_monte_carlo_model_1ae72b025cb1c1afd50d354a7de3d3cddd" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; path_pricer_type &gt;</type>
        <definition>ext::shared_ptr&lt;path_pricer_type&gt; QuantLib::MonteCarloModel&lt; MC, RNG, S &gt;::pathPricer_</definition>
        <argsstring></argsstring>
        <name>pathPricer_</name>
        <qualifiedname>QuantLib::MonteCarloModel::pathPricer_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/montecarlomodel.hpp" line="81" column="25" bodyfile="ql/methods/montecarlo/montecarlomodel.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_monte_carlo_model_1ac8b68a663c2367e746ad4a428165b45c" prot="private" static="no" mutable="no">
        <type>stats_type</type>
        <definition>stats_type QuantLib::MonteCarloModel&lt; MC, RNG, S &gt;::sampleAccumulator_</definition>
        <argsstring></argsstring>
        <name>sampleAccumulator_</name>
        <qualifiedname>QuantLib::MonteCarloModel::sampleAccumulator_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/montecarlomodel.hpp" line="82" column="20" bodyfile="ql/methods/montecarlo/montecarlomodel.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_monte_carlo_model_1a21ef041924ea761b621d6a23fea33646" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::MonteCarloModel&lt; MC, RNG, S &gt;::isAntitheticVariate_</definition>
        <argsstring></argsstring>
        <name>isAntitheticVariate_</name>
        <qualifiedname>QuantLib::MonteCarloModel::isAntitheticVariate_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/montecarlomodel.hpp" line="83" column="14" bodyfile="ql/methods/montecarlo/montecarlomodel.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_monte_carlo_model_1a55bcc232e3345d8bd3888aafcb58729e" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; path_pricer_type &gt;</type>
        <definition>ext::shared_ptr&lt;path_pricer_type&gt; QuantLib::MonteCarloModel&lt; MC, RNG, S &gt;::cvPathPricer_</definition>
        <argsstring></argsstring>
        <name>cvPathPricer_</name>
        <qualifiedname>QuantLib::MonteCarloModel::cvPathPricer_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/montecarlomodel.hpp" line="84" column="25" bodyfile="ql/methods/montecarlo/montecarlomodel.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_monte_carlo_model_1ac6312dd584e4677834413ad4e726ea30" prot="private" static="no" mutable="no">
        <type>result_type</type>
        <definition>result_type QuantLib::MonteCarloModel&lt; MC, RNG, S &gt;::cvOptionValue_</definition>
        <argsstring></argsstring>
        <name>cvOptionValue_</name>
        <qualifiedname>QuantLib::MonteCarloModel::cvOptionValue_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/montecarlomodel.hpp" line="85" column="21" bodyfile="ql/methods/montecarlo/montecarlomodel.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_monte_carlo_model_1a010a1106d3a08b880859ffc2615c2c58" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::MonteCarloModel&lt; MC, RNG, S &gt;::isControlVariate_</definition>
        <argsstring></argsstring>
        <name>isControlVariate_</name>
        <qualifiedname>QuantLib::MonteCarloModel::isControlVariate_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/montecarlomodel.hpp" line="86" column="14" bodyfile="ql/methods/montecarlo/montecarlomodel.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_monte_carlo_model_1aab358d0f63521b9b8c8a0910b967c560" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; path_generator_type &gt;</type>
        <definition>ext::shared_ptr&lt;path_generator_type&gt; QuantLib::MonteCarloModel&lt; MC, RNG, S &gt;::cvPathGenerator_</definition>
        <argsstring></argsstring>
        <name>cvPathGenerator_</name>
        <qualifiedname>QuantLib::MonteCarloModel::cvPathGenerator_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/montecarlomodel.hpp" line="87" column="25" bodyfile="ql/methods/montecarlo/montecarlomodel.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_monte_carlo_model_1a1d46ad1be4100f2b9f550d15598f9e67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MonteCarloModel&lt; MC, RNG, S &gt;::MonteCarloModel</definition>
        <argsstring>(ext::shared_ptr&lt; path_generator_type &gt; pathGenerator, ext::shared_ptr&lt; path_pricer_type &gt; pathPricer, stats_type sampleAccumulator, bool antitheticVariate, ext::shared_ptr&lt; path_pricer_type &gt; cvPathPricer=ext::shared_ptr&lt; path_pricer_type &gt;(), result_type cvOptionValue=result_type(), ext::shared_ptr&lt; path_generator_type &gt; cvPathGenerator=ext::shared_ptr&lt; path_generator_type &gt;())</argsstring>
        <name>MonteCarloModel</name>
        <qualifiedname>QuantLib::MonteCarloModel::MonteCarloModel</qualifiedname>
        <param>
          <type>ext::shared_ptr&lt; path_generator_type &gt;</type>
          <declname>pathGenerator</declname>
        </param>
        <param>
          <type>ext::shared_ptr&lt; path_pricer_type &gt;</type>
          <declname>pathPricer</declname>
        </param>
        <param>
          <type>stats_type</type>
          <declname>sampleAccumulator</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>antitheticVariate</declname>
        </param>
        <param>
          <type>ext::shared_ptr&lt; path_pricer_type &gt;</type>
          <declname>cvPathPricer</declname>
          <defval>ext::shared_ptr&lt; path_pricer_type &gt;()</defval>
        </param>
        <param>
          <type>result_type</type>
          <declname>cvOptionValue</declname>
          <defval>result_type()</defval>
        </param>
        <param>
          <type>ext::shared_ptr&lt; path_generator_type &gt;</type>
          <declname>cvPathGenerator</declname>
          <defval>ext::shared_ptr&lt; path_generator_type &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/montecarlomodel.hpp" line="62" column="9" bodyfile="ql/methods/montecarlo/montecarlomodel.hpp" bodystart="62" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_monte_carlo_model_1abb64cf862e5da399f8b3786e0c9e3603" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::MonteCarloModel&lt; MC, RNG, S &gt;::addSamples</definition>
        <argsstring>(Size samples)</argsstring>
        <name>addSamples</name>
        <qualifiedname>QuantLib::MonteCarloModel::addSamples</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>samples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/montecarlomodel.hpp" line="77" column="14" bodyfile="ql/methods/montecarlo/montecarlomodel.hpp" bodystart="92" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_monte_carlo_model_1a03a62d685d4f83d7ecc4f2709d86145e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const stats_type &amp;</type>
        <definition>const MonteCarloModel&lt; MC, RNG, S &gt;::stats_type &amp; QuantLib::MonteCarloModel&lt; MC, RNG, S &gt;::sampleAccumulator</definition>
        <argsstring>() const</argsstring>
        <name>sampleAccumulator</name>
        <qualifiedname>QuantLib::MonteCarloModel::sampleAccumulator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/montecarlomodel.hpp" line="78" column="26" bodyfile="ql/methods/montecarlo/montecarlomodel.hpp" bodystart="129" bodyend="131"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>General-purpose Monte Carlo model for path samples. </para>
    </briefdescription>
    <detaileddescription>
<para>The template arguments of this class correspond to available policies for the particular model to be instantiated<mdash/>i.e., whether it is single- or multi-asset, or whether it should use pseudo-random or low-discrepancy numbers for path generation. Such decisions are grouped in trait classes so as to be orthogonal<mdash/>see <ref refid="mctraits_8hpp" kindref="compound">mctraits.hpp</ref> for examples.</para>
<para>The constructor accepts two safe references, i.e. two smart pointers, one to a path generator and the other to a path pricer. In case of control variate technique the user should provide the additional control option, namely the option path pricer and the option value. </para>
    </detaileddescription>
    <location file="ql/methods/montecarlo/montecarlomodel.hpp" line="52" column="5" bodyfile="ql/methods/montecarlo/montecarlomodel.hpp" bodystart="52" bodyend="88"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_monte_carlo_model_1abb64cf862e5da399f8b3786e0c9e3603" prot="public" virt="non-virtual"><scope>QuantLib::MonteCarloModel</scope><name>addSamples</name></member>
      <member refid="class_quant_lib_1_1_monte_carlo_model_1ac6312dd584e4677834413ad4e726ea30" prot="private" virt="non-virtual"><scope>QuantLib::MonteCarloModel</scope><name>cvOptionValue_</name></member>
      <member refid="class_quant_lib_1_1_monte_carlo_model_1aab358d0f63521b9b8c8a0910b967c560" prot="private" virt="non-virtual"><scope>QuantLib::MonteCarloModel</scope><name>cvPathGenerator_</name></member>
      <member refid="class_quant_lib_1_1_monte_carlo_model_1a55bcc232e3345d8bd3888aafcb58729e" prot="private" virt="non-virtual"><scope>QuantLib::MonteCarloModel</scope><name>cvPathPricer_</name></member>
      <member refid="class_quant_lib_1_1_monte_carlo_model_1a21ef041924ea761b621d6a23fea33646" prot="private" virt="non-virtual"><scope>QuantLib::MonteCarloModel</scope><name>isAntitheticVariate_</name></member>
      <member refid="class_quant_lib_1_1_monte_carlo_model_1a010a1106d3a08b880859ffc2615c2c58" prot="private" virt="non-virtual"><scope>QuantLib::MonteCarloModel</scope><name>isControlVariate_</name></member>
      <member refid="class_quant_lib_1_1_monte_carlo_model_1a92ce33d88326bcabd267ff8ac3af900d" prot="public" virt="non-virtual"><scope>QuantLib::MonteCarloModel</scope><name>mc_traits</name></member>
      <member refid="class_quant_lib_1_1_monte_carlo_model_1a1d46ad1be4100f2b9f550d15598f9e67" prot="public" virt="non-virtual"><scope>QuantLib::MonteCarloModel</scope><name>MonteCarloModel</name></member>
      <member refid="class_quant_lib_1_1_monte_carlo_model_1ac27d0631cb6781f833c944b227115348" prot="public" virt="non-virtual"><scope>QuantLib::MonteCarloModel</scope><name>path_generator_type</name></member>
      <member refid="class_quant_lib_1_1_monte_carlo_model_1a225d7fe853bc4c76fca6463d6bec4ae2" prot="public" virt="non-virtual"><scope>QuantLib::MonteCarloModel</scope><name>path_pricer_type</name></member>
      <member refid="class_quant_lib_1_1_monte_carlo_model_1a72bd8f082fca6fcb6cfdc5755a6d0f0c" prot="private" virt="non-virtual"><scope>QuantLib::MonteCarloModel</scope><name>pathGenerator_</name></member>
      <member refid="class_quant_lib_1_1_monte_carlo_model_1ae72b025cb1c1afd50d354a7de3d3cddd" prot="private" virt="non-virtual"><scope>QuantLib::MonteCarloModel</scope><name>pathPricer_</name></member>
      <member refid="class_quant_lib_1_1_monte_carlo_model_1a1583c7c3ebba7c59ee98b21d28041d02" prot="public" virt="non-virtual"><scope>QuantLib::MonteCarloModel</scope><name>result_type</name></member>
      <member refid="class_quant_lib_1_1_monte_carlo_model_1a579ccc45d77f63dc300d23ce7a1ee104" prot="public" virt="non-virtual"><scope>QuantLib::MonteCarloModel</scope><name>rng_traits</name></member>
      <member refid="class_quant_lib_1_1_monte_carlo_model_1a55dd8f1dd588c237e0076f44d60eb19f" prot="public" virt="non-virtual"><scope>QuantLib::MonteCarloModel</scope><name>sample_type</name></member>
      <member refid="class_quant_lib_1_1_monte_carlo_model_1a03a62d685d4f83d7ecc4f2709d86145e" prot="public" virt="non-virtual"><scope>QuantLib::MonteCarloModel</scope><name>sampleAccumulator</name></member>
      <member refid="class_quant_lib_1_1_monte_carlo_model_1ac8b68a663c2367e746ad4a428165b45c" prot="private" virt="non-virtual"><scope>QuantLib::MonteCarloModel</scope><name>sampleAccumulator_</name></member>
      <member refid="class_quant_lib_1_1_monte_carlo_model_1a172eea08b331744d040dee0d80bedd97" prot="public" virt="non-virtual"><scope>QuantLib::MonteCarloModel</scope><name>stats_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
