<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_money" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::Money</compoundname>
    <includes refid="money_8hpp" local="no">money.hpp</includes>
    <innerclass refid="struct_quant_lib_1_1_money_1_1_base_currency_proxy" prot="private">QuantLib::Money::BaseCurrencyProxy</innerclass>
    <innerclass refid="struct_quant_lib_1_1_money_1_1_conversion_type_proxy" prot="private">QuantLib::Money::ConversionTypeProxy</innerclass>
    <innerclass refid="class_quant_lib_1_1_money_1_1_settings" prot="public">QuantLib::Money::Settings</innerclass>
    <sectiondef kind="user-defined">
      <header>Conversion settings</header>
      <description><para>These parameters are used for combining money amounts in different currencies </para>
</description>
      <memberdef kind="enum" id="class_quant_lib_1_1_money_1a75e80168c351faa50a134f31aa405d47" prot="public" static="no" strong="no">
        <type></type>
        <name>ConversionType</name>
        <qualifiedname>QuantLib::Money::ConversionType</qualifiedname>
        <enumvalue id="class_quant_lib_1_1_money_1a75e80168c351faa50a134f31aa405d47a8896dda4ad62defedac0c7ee518d5b9a" prot="public">
          <name>NoConversion</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>do not perform conversions </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_money_1a75e80168c351faa50a134f31aa405d47a038ff4c2a0e0f4461b71eb89e3ad2da9" prot="public">
          <name>BaseCurrencyConversion</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>convert both operands to the base currency before converting </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_money_1a75e80168c351faa50a134f31aa405d47aa19c406e6d9d045320e88a4c630b8fe3" prot="public">
          <name>AutomatedConversion</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>return the result in the currency of the first operand </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="71" column="9" bodyfile="ql/money.hpp" bodystart="71" bodyend="79"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_money_1a56de976fa9c16fc0a0ef65ec2fd8eab3" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" kindref="member">Decimal</ref></type>
        <definition>Decimal QuantLib::Money::value_</definition>
        <argsstring></argsstring>
        <name>value_</name>
        <qualifiedname>QuantLib::Money::value_</qualifiedname>
        <initializer>= 0.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="84" column="17" bodyfile="ql/money.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_money_1a3e1c81b983b220387d379b698024a571" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref></type>
        <definition>Currency QuantLib::Money::currency_</definition>
        <argsstring></argsstring>
        <name>currency_</name>
        <qualifiedname>QuantLib::Money::currency_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="85" column="18" bodyfile="ql/money.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Constructors</header>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1ab0e172725ce1cc9a5296098c0069a6ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Money::Money</definition>
        <argsstring>()=default</argsstring>
        <name>Money</name>
        <qualifiedname>QuantLib::Money::Money</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="42" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a3fabf1bfd743d66c69bf3a26d329adf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Money::Money</definition>
        <argsstring>(Currency currency, Decimal value)</argsstring>
        <name>Money</name>
        <qualifiedname>QuantLib::Money::Money</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref></type>
          <declname>currency</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" kindref="member">Decimal</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="43" column="9" bodyfile="ql/money.hpp" bodystart="167" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a68780dcf6c761fa8fcb942f7d116d7c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Money::Money</definition>
        <argsstring>(Decimal value, Currency currency)</argsstring>
        <name>Money</name>
        <qualifiedname>QuantLib::Money::Money</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" kindref="member">Decimal</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref></type>
          <declname>currency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="44" column="9" bodyfile="ql/money.hpp" bodystart="170" bodyend="171"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Inspectors</header>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1afe0011fbecbfaa4039bee8d7aeaf7dd3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref> &amp;</type>
        <definition>const Currency &amp; QuantLib::Money::currency</definition>
        <argsstring>() const</argsstring>
        <name>currency</name>
        <qualifiedname>QuantLib::Money::currency</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="48" column="24" bodyfile="ql/money.hpp" bodystart="173" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a9936f93014326efed225032620248d49" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" kindref="member">Decimal</ref></type>
        <definition>Decimal QuantLib::Money::value</definition>
        <argsstring>() const</argsstring>
        <name>value</name>
        <qualifiedname>QuantLib::Money::value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="49" column="17" bodyfile="ql/money.hpp" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1ab36d5fa038f6a8badae6d54c06eb1c77" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref></type>
        <definition>Money QuantLib::Money::rounded</definition>
        <argsstring>() const</argsstring>
        <name>rounded</name>
        <qualifiedname>QuantLib::Money::rounded</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="50" column="15" bodyfile="ql/money.hpp" bodystart="181" bodyend="183"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Money arithmetics</header>
      <description><para>See below for non-member functions and for settings which determine the behavior of the operators. </para>
</description>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1aadfdf54ee83ce853482ac170f0fffe66" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref></type>
        <definition>Money QuantLib::Money::operator+</definition>
        <argsstring>() const</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Money::operator+</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="58" column="15" bodyfile="ql/money.hpp" bodystart="185" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a6c5bab62f8c594494066b2d6f98a3d5b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref></type>
        <definition>Money QuantLib::Money::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Money::operator-</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="59" column="15" bodyfile="ql/money.hpp" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a1b7689bbf5601ac131b878035d1365b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        <definition>Money &amp; QuantLib::Money::operator+=</definition>
        <argsstring>(const Money &amp;)</argsstring>
        <name>operator+=</name>
        <qualifiedname>QuantLib::Money::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <defname>m</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="60" column="15" bodyfile="ql/money.cpp" bodystart="67" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1ab7499a3150aefbe19e75f97c6e797aa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        <definition>Money &amp; QuantLib::Money::operator-=</definition>
        <argsstring>(const Money &amp;)</argsstring>
        <name>operator-=</name>
        <qualifiedname>QuantLib::Money::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <defname>m</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="61" column="15" bodyfile="ql/money.cpp" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1ac83cdc96e119682d8ccc4803f5681051" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        <definition>Money &amp; QuantLib::Money::operator*=</definition>
        <argsstring>(Decimal)</argsstring>
        <name>operator*=</name>
        <qualifiedname>QuantLib::Money::operator*=</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" kindref="member">Decimal</ref></type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="62" column="15" bodyfile="ql/money.hpp" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a23d67d07d0e50564a603498aa5785f82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        <definition>Money &amp; QuantLib::Money::operator/=</definition>
        <argsstring>(Decimal)</argsstring>
        <name>operator/=</name>
        <qualifiedname>QuantLib::Money::operator/=</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" kindref="member">Decimal</ref></type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="63" column="15" bodyfile="ql/money.hpp" bodystart="198" bodyend="201"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="related">
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a1f495f020f64c7b177b9e1bc0f99139c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref></type>
        <definition>Money operator+</definition>
        <argsstring>(const Money &amp;, const Money &amp;)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Money::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="122" column="11" bodyfile="ql/money.hpp" bodystart="204" bodyend="208" declfile="ql/money.hpp" declline="122" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a4a130afeac5bc99d0a00e6005dd2fce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref></type>
        <definition>Money operator-</definition>
        <argsstring>(const Money &amp;, const Money &amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Money::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="124" column="11" bodyfile="ql/money.hpp" bodystart="210" bodyend="214" declfile="ql/money.hpp" declline="124" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a20f80bc20add19d64b899d4a21718fb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref></type>
        <definition>Money operator*</definition>
        <argsstring>(const Money &amp;, Decimal)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Money::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" kindref="member">Decimal</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="126" column="11" bodyfile="ql/money.hpp" bodystart="216" bodyend="220" declfile="ql/money.hpp" declline="126" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a5db337044220e3f8028bb303fc9d4f80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref></type>
        <definition>Money operator*</definition>
        <argsstring>(Decimal, const Money &amp;)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Money::operator*</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" kindref="member">Decimal</ref></type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="128" column="11" bodyfile="ql/money.hpp" bodystart="222" bodyend="224" declfile="ql/money.hpp" declline="128" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a91bb0ba24a70226c3a6dd585ffb15537" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref></type>
        <definition>Money operator/</definition>
        <argsstring>(const Money &amp;, Decimal)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::Money::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" kindref="member">Decimal</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="130" column="11" bodyfile="ql/money.hpp" bodystart="226" bodyend="230" declfile="ql/money.hpp" declline="130" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a31eae46b487ee5e972e0e598351edfa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" kindref="member">Decimal</ref></type>
        <definition>Decimal operator/</definition>
        <argsstring>(const Money &amp;, const Money &amp;)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::Money::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="132" column="13" bodyfile="ql/money.cpp" bodystart="90" bodyend="94" declfile="ql/money.hpp" declline="132" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a2f2e363600f64a5a2447cd706a4718fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Money &amp;, const Money &amp;)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::Money::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="135" column="10" bodyfile="ql/money.cpp" bodystart="96" bodyend="100" declfile="ql/money.hpp" declline="135" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a3097af686d116996f32c88433b488f51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Money &amp;, const Money &amp;)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::Money::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="137" column="10" bodyfile="ql/money.hpp" bodystart="232" bodyend="234" declfile="ql/money.hpp" declline="137" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a1dac0cd307438b7659c9af74bb50b4ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const Money &amp;, const Money &amp;)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>QuantLib::Money::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="139" column="5" bodyfile="ql/money.cpp" bodystart="102" bodyend="106" declfile="ql/money.hpp" declline="139" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a567e24d5625a08c9c0685a51df245cce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const Money &amp;, const Money &amp;)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>QuantLib::Money::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="141" column="5" bodyfile="ql/money.cpp" bodystart="108" bodyend="112" declfile="ql/money.hpp" declline="141" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1afcb0842cc75edc7a10019e72709a249e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const Money &amp;, const Money &amp;)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>QuantLib::Money::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="143" column="10" bodyfile="ql/money.hpp" bodystart="236" bodyend="238" declfile="ql/money.hpp" declline="143" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1af8258e94ec653301a5d6e7b68c85c24f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const Money &amp;, const Money &amp;)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>QuantLib::Money::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="145" column="10" bodyfile="ql/money.hpp" bodystart="240" bodyend="242" declfile="ql/money.hpp" declline="145" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a2a41991b16dc3c024a6e10d61a1ba47f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool close</definition>
        <argsstring>(const Money &amp;, const Money &amp;, Size n=42)</argsstring>
        <name>close</name>
        <qualifiedname>QuantLib::Money::close</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
          <defval>42</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="148" column="10" bodyfile="ql/money.cpp" bodystart="114" bodyend="118" declfile="ql/money.hpp" declline="148" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1ac5af9d7a914bb1d00f3beb1076228755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool close_enough</definition>
        <argsstring>(const Money &amp;, const Money &amp;, Size n=42)</argsstring>
        <name>close_enough</name>
        <qualifiedname>QuantLib::Money::close_enough</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
          <defval>42</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="150" column="10" bodyfile="ql/money.cpp" bodystart="120" bodyend="124" declfile="ql/money.hpp" declline="150" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1aab8bfd679e42b4d3393e3580188018aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref></type>
        <definition>Money operator*</definition>
        <argsstring>(Decimal, const Currency &amp;)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Money::operator*</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" kindref="member">Decimal</ref></type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="155" column="11" bodyfile="ql/money.hpp" bodystart="244" bodyend="246" declfile="ql/money.hpp" declline="155" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a2827c6a704bb2f426e5c49a826949304" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref></type>
        <definition>Money operator*</definition>
        <argsstring>(const Currency &amp;, Decimal)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Money::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" kindref="member">Decimal</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="157" column="11" bodyfile="ql/money.hpp" bodystart="248" bodyend="250" declfile="ql/money.hpp" declline="157" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a867d4d15a525b67992fceb19eaf832b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const Money &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::Money::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="162" column="5" bodyfile="ql/money.cpp" bodystart="126" bodyend="128" declfile="ql/money.hpp" declline="162" declcolumn="5"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>amount of cash </para>
    </briefdescription>
    <detaileddescription>
<para><xrefsect id="test_1_test000089"><xreftitle>Test</xreftitle><xrefdescription><para>money arithmetic is tested with and without currency conversions. </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <location file="ql/money.hpp" line="38" column="5" bodyfile="ql/money.hpp" bodystart="38" bodyend="99"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_money_1a75e80168c351faa50a134f31aa405d47aa19c406e6d9d045320e88a4c630b8fe3" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>AutomatedConversion</name></member>
      <member refid="class_quant_lib_1_1_money_1a75e80168c351faa50a134f31aa405d47a038ff4c2a0e0f4461b71eb89e3ad2da9" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>BaseCurrencyConversion</name></member>
      <member refid="class_quant_lib_1_1_money_1a2a41991b16dc3c024a6e10d61a1ba47f" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>close</name></member>
      <member refid="class_quant_lib_1_1_money_1ac5af9d7a914bb1d00f3beb1076228755" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>close_enough</name></member>
      <member refid="class_quant_lib_1_1_money_1a75e80168c351faa50a134f31aa405d47" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>ConversionType</name></member>
      <member refid="class_quant_lib_1_1_money_1afe0011fbecbfaa4039bee8d7aeaf7dd3" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>currency</name></member>
      <member refid="class_quant_lib_1_1_money_1a3e1c81b983b220387d379b698024a571" prot="private" virt="non-virtual"><scope>QuantLib::Money</scope><name>currency_</name></member>
      <member refid="class_quant_lib_1_1_money_1ab0e172725ce1cc9a5296098c0069a6ae" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>Money</name></member>
      <member refid="class_quant_lib_1_1_money_1a3fabf1bfd743d66c69bf3a26d329adf2" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>Money</name></member>
      <member refid="class_quant_lib_1_1_money_1a68780dcf6c761fa8fcb942f7d116d7c6" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>Money</name></member>
      <member refid="class_quant_lib_1_1_money_1a75e80168c351faa50a134f31aa405d47a8896dda4ad62defedac0c7ee518d5b9a" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>NoConversion</name></member>
      <member refid="class_quant_lib_1_1_money_1a3097af686d116996f32c88433b488f51" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>operator!=</name></member>
      <member refid="class_quant_lib_1_1_money_1a20f80bc20add19d64b899d4a21718fb6" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>operator*</name></member>
      <member refid="class_quant_lib_1_1_money_1a5db337044220e3f8028bb303fc9d4f80" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>operator*</name></member>
      <member refid="class_quant_lib_1_1_money_1aab8bfd679e42b4d3393e3580188018aa" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>operator*</name></member>
      <member refid="class_quant_lib_1_1_money_1a2827c6a704bb2f426e5c49a826949304" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>operator*</name></member>
      <member refid="class_quant_lib_1_1_money_1ac83cdc96e119682d8ccc4803f5681051" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>operator*=</name></member>
      <member refid="class_quant_lib_1_1_money_1aadfdf54ee83ce853482ac170f0fffe66" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>operator+</name></member>
      <member refid="class_quant_lib_1_1_money_1a1f495f020f64c7b177b9e1bc0f99139c" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>operator+</name></member>
      <member refid="class_quant_lib_1_1_money_1a1b7689bbf5601ac131b878035d1365b5" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>operator+=</name></member>
      <member refid="class_quant_lib_1_1_money_1a6c5bab62f8c594494066b2d6f98a3d5b" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>operator-</name></member>
      <member refid="class_quant_lib_1_1_money_1a4a130afeac5bc99d0a00e6005dd2fce0" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>operator-</name></member>
      <member refid="class_quant_lib_1_1_money_1ab7499a3150aefbe19e75f97c6e797aa1" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>operator-=</name></member>
      <member refid="class_quant_lib_1_1_money_1a91bb0ba24a70226c3a6dd585ffb15537" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>operator/</name></member>
      <member refid="class_quant_lib_1_1_money_1a31eae46b487ee5e972e0e598351edfa6" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>operator/</name></member>
      <member refid="class_quant_lib_1_1_money_1a23d67d07d0e50564a603498aa5785f82" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>operator/=</name></member>
      <member refid="class_quant_lib_1_1_money_1a1dac0cd307438b7659c9af74bb50b4ee" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>operator&lt;</name></member>
      <member refid="class_quant_lib_1_1_money_1a867d4d15a525b67992fceb19eaf832b0" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_quant_lib_1_1_money_1a567e24d5625a08c9c0685a51df245cce" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>operator&lt;=</name></member>
      <member refid="class_quant_lib_1_1_money_1a2f2e363600f64a5a2447cd706a4718fc" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>operator==</name></member>
      <member refid="class_quant_lib_1_1_money_1afcb0842cc75edc7a10019e72709a249e" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>operator&gt;</name></member>
      <member refid="class_quant_lib_1_1_money_1af8258e94ec653301a5d6e7b68c85c24f" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>operator&gt;=</name></member>
      <member refid="class_quant_lib_1_1_money_1ab36d5fa038f6a8badae6d54c06eb1c77" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>rounded</name></member>
      <member refid="class_quant_lib_1_1_money_1a9936f93014326efed225032620248d49" prot="public" virt="non-virtual"><scope>QuantLib::Money</scope><name>value</name></member>
      <member refid="class_quant_lib_1_1_money_1a56de976fa9c16fc0a0ef65ec2fd8eab3" prot="private" virt="non-virtual"><scope>QuantLib::Money</scope><name>value_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
