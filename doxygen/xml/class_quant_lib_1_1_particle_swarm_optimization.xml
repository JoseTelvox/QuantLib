<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_particle_swarm_optimization" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::ParticleSwarmOptimization</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_optimization_method" prot="public" virt="non-virtual">QuantLib::OptimizationMethod</basecompoundref>
    <includes refid="particleswarmoptimization_8hpp" local="no">particleswarmoptimization.hpp</includes>
    <innerclass refid="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia" prot="public">QuantLib::ParticleSwarmOptimization::Inertia</innerclass>
    <innerclass refid="class_quant_lib_1_1_particle_swarm_optimization_1_1_topology" prot="public">QuantLib::ParticleSwarmOptimization::Topology</innerclass>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1a50fc50b52b427405f71411cfb67e9744" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &gt;</type>
        <definition>std::vector&lt;Array&gt; QuantLib::ParticleSwarmOptimization::X_</definition>
        <argsstring></argsstring>
        <name>X_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::X_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="113" column="21" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1a80e5bf2b96f47fde8fdac619a6ce198d" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &gt;</type>
        <definition>std::vector&lt;Array&gt; QuantLib::ParticleSwarmOptimization::V_</definition>
        <argsstring></argsstring>
        <name>V_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::V_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="113" column="24" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1a4dfd1805dc59051687dd0bd130db5c76" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &gt;</type>
        <definition>std::vector&lt;Array&gt; QuantLib::ParticleSwarmOptimization::pBX_</definition>
        <argsstring></argsstring>
        <name>pBX_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::pBX_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="113" column="27" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1ac16a3d0f890fe0102b944ad22fb0542c" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &gt;</type>
        <definition>std::vector&lt;Array&gt; QuantLib::ParticleSwarmOptimization::gBX_</definition>
        <argsstring></argsstring>
        <name>gBX_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::gBX_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="113" column="32" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1afe8bae28450c11ad47d030897034f6c4" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::ParticleSwarmOptimization::pBF_</definition>
        <argsstring></argsstring>
        <name>pBF_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::pBF_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="114" column="15" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1a91d85495c6c9d7d99c85339a65f2e185" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::ParticleSwarmOptimization::gBF_</definition>
        <argsstring></argsstring>
        <name>gBF_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::gBF_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="114" column="20" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1aab9f26e992f827d4ebfae3a2dfa2f91a" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::ParticleSwarmOptimization::lX_</definition>
        <argsstring></argsstring>
        <name>lX_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::lX_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="115" column="15" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1a55156e112e0ae0a48bf29d21a83a675d" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::ParticleSwarmOptimization::uX_</definition>
        <argsstring></argsstring>
        <name>uX_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::uX_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="115" column="19" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1a5f33ffc27c102b93939394c1834eb58b" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::ParticleSwarmOptimization::M_</definition>
        <argsstring></argsstring>
        <name>M_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::M_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="116" column="14" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1ae01be191a04b3c2e124135f954840c3a" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::ParticleSwarmOptimization::N_</definition>
        <argsstring></argsstring>
        <name>N_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::N_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="116" column="17" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1ac811dc933f9442e7709137d8d1b478a1" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ParticleSwarmOptimization::c0_</definition>
        <argsstring></argsstring>
        <name>c0_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::c0_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="117" column="14" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1ab3ad9eb1fe1be767e3e1fd39878a4d1a" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ParticleSwarmOptimization::c1_</definition>
        <argsstring></argsstring>
        <name>c1_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::c1_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="117" column="18" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1abd6629fc13c38183188722919d1db96c" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ParticleSwarmOptimization::c2_</definition>
        <argsstring></argsstring>
        <name>c2_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::c2_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="117" column="22" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1ae22fec736573432632c6e521ba6257c5" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_mersenne_twister_uniform_rng" kindref="compound">MersenneTwisterUniformRng</ref></type>
        <definition>MersenneTwisterUniformRng QuantLib::ParticleSwarmOptimization::rng_</definition>
        <argsstring></argsstring>
        <name>rng_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::rng_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="118" column="35" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1af7f5efa0f0d61e18759576f02ea6d3c2" prot="protected" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_particle_swarm_optimization_1_1_topology" kindref="compound">Topology</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;Topology&gt; QuantLib::ParticleSwarmOptimization::topology_</definition>
        <argsstring></argsstring>
        <name>topology_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::topology_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="119" column="25" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1aa118573ec91ed5a15b4cbad1286baeb4" prot="protected" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia" kindref="compound">Inertia</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;Inertia&gt; QuantLib::ParticleSwarmOptimization::inertia_</definition>
        <argsstring></argsstring>
        <name>inertia_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::inertia_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="120" column="25" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_particle_swarm_optimization_1a7f9f887a74aa877acd6ada0862880299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::ParticleSwarmOptimization::ParticleSwarmOptimization</definition>
        <argsstring>(Size M, ext::shared_ptr&lt; Topology &gt; topology, ext::shared_ptr&lt; Inertia &gt; inertia, Real c1=2.05, Real c2=2.05, unsigned long seed=SeedGenerator::instance().get())</argsstring>
        <name>ParticleSwarmOptimization</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::ParticleSwarmOptimization</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>M</declname>
        </param>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_particle_swarm_optimization_1_1_topology" kindref="compound">Topology</ref> &gt;</type>
          <declname>topology</declname>
        </param>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia" kindref="compound">Inertia</ref> &gt;</type>
          <declname>inertia</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>c1</declname>
          <defval>2.05</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>c2</declname>
          <defval>2.05</defval>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>seed</declname>
          <defval><ref refid="class_quant_lib_1_1_singleton_1ac412b7766b32f56372a3e966c5f3f386" kindref="member">SeedGenerator::instance</ref>().get()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="96" column="9" bodyfile="ql/experimental/math/particleswarmoptimization.cpp" bodystart="28" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_particle_swarm_optimization_1a583e1460eb797e733739986948ac37b3" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::ParticleSwarmOptimization::ParticleSwarmOptimization</definition>
        <argsstring>(Size M, ext::shared_ptr&lt; Topology &gt; topology, ext::shared_ptr&lt; Inertia &gt; inertia, Real omega, Real c1, Real c2, unsigned long seed=SeedGenerator::instance().get())</argsstring>
        <name>ParticleSwarmOptimization</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::ParticleSwarmOptimization</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>M</declname>
        </param>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_particle_swarm_optimization_1_1_topology" kindref="compound">Topology</ref> &gt;</type>
          <declname>topology</declname>
        </param>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia" kindref="compound">Inertia</ref> &gt;</type>
          <declname>inertia</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>omega</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>c1</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>c2</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>seed</declname>
          <defval><ref refid="class_quant_lib_1_1_singleton_1ac412b7766b32f56372a3e966c5f3f386" kindref="member">SeedGenerator::instance</ref>().get()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="102" column="18" bodyfile="ql/experimental/math/particleswarmoptimization.cpp" bodystart="42" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_particle_swarm_optimization_1aa633ae9d61c70e30c1dfe6e222a07df9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::ParticleSwarmOptimization::startState</definition>
        <argsstring>(Problem &amp;P, const EndCriteria &amp;endCriteria)</argsstring>
        <name>startState</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::startState</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_problem" kindref="compound">Problem</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref> &amp;</type>
          <declname>endCriteria</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="109" column="14" bodyfile="ql/experimental/math/particleswarmoptimization.cpp" bodystart="52" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_particle_swarm_optimization_1a9639eb90822fc91ac0d97d3f6fa279d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>EndCriteria::Type</type>
        <definition>EndCriteria::Type QuantLib::ParticleSwarmOptimization::minimize</definition>
        <argsstring>(Problem &amp;P, const EndCriteria &amp;endCriteria) override</argsstring>
        <name>minimize</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::minimize</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_optimization_method_1a28097ae73d0d2a310938f51b72a48348">minimize</reimplements>
        <param>
          <type><ref refid="class_quant_lib_1_1_problem" kindref="compound">Problem</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref> &amp;</type>
          <declname>endCriteria</declname>
        </param>
        <briefdescription>
<para>minimize the optimization problem P </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="110" column="27" bodyfile="ql/experimental/math/particleswarmoptimization.cpp" bodystart="95" bodyend="177"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The process is as follows: M individuals are used to explore the N-dimensional parameter space: <formula id="119">$ X_{i}^k = (X_{i, 1}^k, X_{i, 2}^k, \ldots, X_{i, N}^k) $</formula> is the kth-iteration for the ith-individual.</para>
<para>X is updated via the rule   <formula id="158">\[X_{i, j}^{k+1} = X_{i, j}^k + V_{i, j}^{k+1}
\]</formula> with V being the &quot;velocity&quot; that updates the position:    <formula id="159">\[V_{i, j}^{k+1} = \chi\left(V_{i, j}^k + c_1 r_{i, j}^k (P_{i, j}^k - X_{i, j}^k)
+ c_2 R_{i, j}^k (G_{i, j}^k - X_{i, j}^k)\right)
\]</formula> where c are constants, r and R are uniformly distributed random numbers in the range [0, 1], and <formula id="160">$ P_{i, j} $</formula> is the personal best parameter set for individual i up to iteration k <formula id="161">$ G_{i, j} $</formula> is the global best parameter set for the swarm up to iteration k. <formula id="162">$ c_1 $</formula> is the self recognition coefficient <formula id="163">$ c_2 $</formula> is the social recognition coefficient</para>
<para>This version is known as the PSO with constriction factor (PSO-Co). PSO with inertia factor (PSO-In) updates the velocity according to:    <formula id="164">\[V_{i, j}^{k+1} = \omega V_{i, j}^k + \hat{c}_1 r_{i, j}^k (P_{i, j}^k - X_{i, j}^k)
+ \hat{c}_2 R_{i, j}^k (G_{i, j}^k - X_{i, j}^k)
\]</formula> and is accessible from PSO-Co by setting <formula id="165">$ \omega = \chi $</formula>, and <formula id="166">$ \hat{c}_{1,2} = \chi c_{1,2} $</formula>.</para>
<para>These two versions of PSO are normally referred to as canonical PSO.</para>
<para>Convergence of PSO-Co is improved if <formula id="167">$ \chi $</formula> is chosen as <formula id="168">$ \chi = \frac{2}{\vert 2-\phi-\sqrt{\phi^2 - 4\phi}\vert} $</formula>, with <formula id="169">$ \phi = c_1 + c_2 $</formula>. Stable convergence is achieved if <formula id="170">$ \phi &gt;= 4 $</formula>. Clerc and Kennedy recommend <formula id="171">$ c_1 = c_2 = 2.05 $</formula> and <formula id="172">$ \phi = 4.1 $</formula>.</para>
<para>Different topologies can be chosen for G, e.g. instead of it being the best of the swarm, it is the best of the nearest neighbours, or some other form.</para>
<para>In the canonical PSO, the inertia function is trivial. It is simply a constant (the inertia) multiplying the previous iteration&apos;s velocity. The value of the inertia constant determines the weight of a global search over local search. Like in the case of the topology, other possibilities for the inertia function are also possible, e.g. a function that interpolates between a high inertia at the beginning of the optimization (hence prioritizing a global search) and a low inertia towards the end of the optimization (hence prioritizing a local search).</para>
<para>The optimization stops either because the number of iterations has been reached or because the stationary function value limit has been reached. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QuantLib::OptimizationMethod</label>
        <link refid="class_quant_lib_1_1_optimization_method"/>
      </node>
      <node id="1">
        <label>QuantLib::ParticleSwarmOptimization</label>
        <link refid="class_quant_lib_1_1_particle_swarm_optimization"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>QuantLib::Array</label>
        <link refid="class_quant_lib_1_1_array"/>
      </node>
      <node id="4">
        <label>QuantLib::MersenneTwisterUniformRng</label>
        <link refid="class_quant_lib_1_1_mersenne_twister_uniform_rng"/>
      </node>
      <node id="2">
        <label>QuantLib::OptimizationMethod</label>
        <link refid="class_quant_lib_1_1_optimization_method"/>
      </node>
      <node id="1">
        <label>QuantLib::ParticleSwarmOptimization</label>
        <link refid="class_quant_lib_1_1_particle_swarm_optimization"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>gBF_</edgelabel>
          <edgelabel>lX_</edgelabel>
          <edgelabel>pBF_</edgelabel>
          <edgelabel>uX_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>rng_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/math/particleswarmoptimization.hpp" line="92" column="5" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="92" bodyend="121"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1ac811dc933f9442e7709137d8d1b478a1" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization</scope><name>c0_</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1ab3ad9eb1fe1be767e3e1fd39878a4d1a" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization</scope><name>c1_</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1abd6629fc13c38183188722919d1db96c" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization</scope><name>c2_</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1a91d85495c6c9d7d99c85339a65f2e185" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization</scope><name>gBF_</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1ac16a3d0f890fe0102b944ad22fb0542c" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization</scope><name>gBX_</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1aa118573ec91ed5a15b4cbad1286baeb4" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization</scope><name>inertia_</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1aab9f26e992f827d4ebfae3a2dfa2f91a" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization</scope><name>lX_</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1a5f33ffc27c102b93939394c1834eb58b" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization</scope><name>M_</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1a9639eb90822fc91ac0d97d3f6fa279d8" prot="public" virt="virtual"><scope>QuantLib::ParticleSwarmOptimization</scope><name>minimize</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1ae01be191a04b3c2e124135f954840c3a" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization</scope><name>N_</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1a7f9f887a74aa877acd6ada0862880299" prot="public" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization</scope><name>ParticleSwarmOptimization</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1a583e1460eb797e733739986948ac37b3" prot="public" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization</scope><name>ParticleSwarmOptimization</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1afe8bae28450c11ad47d030897034f6c4" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization</scope><name>pBF_</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1a4dfd1805dc59051687dd0bd130db5c76" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization</scope><name>pBX_</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1ae22fec736573432632c6e521ba6257c5" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization</scope><name>rng_</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1aa633ae9d61c70e30c1dfe6e222a07df9" prot="public" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization</scope><name>startState</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1af7f5efa0f0d61e18759576f02ea6d3c2" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization</scope><name>topology_</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1a55156e112e0ae0a48bf29d21a83a675d" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization</scope><name>uX_</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1a80e5bf2b96f47fde8fdac619a6ce198d" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization</scope><name>V_</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1a50fc50b52b427405f71411cfb67e9744" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization</scope><name>X_</name></member>
      <member refid="class_quant_lib_1_1_optimization_method_1a2e9a51f0954eaf649d075d565d43938c" prot="public" virt="virtual"><scope>QuantLib::ParticleSwarmOptimization</scope><name>~OptimizationMethod</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
