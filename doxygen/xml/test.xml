<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="test" kind="page">
    <compoundname>test</compoundname>
    <title>Test List</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><variablelist>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_matrix_1a7d1b1a85de60b3f593079112c9a7de80" kindref="member">pseudoSqrt</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000051"/><itemizedlist>
<listitem><para>the correctness of the results is tested by reproducing known good data.</para>
</listitem><listitem><para>the correctness of the results is tested by checking returned values against numerical calculations. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_actual_actual" kindref="compound">QuantLib::ActualActual</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000179"/>the correctness of the results is checked against known good values.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_american_margrabe_engine" kindref="compound">QuantLib::AnalyticAmericanMargrabeEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000119"/>the correctness of the returned value is tested by reproducing results available in literature.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_barrier_engine" kindref="compound">QuantLib::AnalyticBarrierEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000101"/>the correctness of the returned value is tested by reproducing results available in literature.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_binary_barrier_engine" kindref="compound">QuantLib::AnalyticBinaryBarrierEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000102"/><itemizedlist>
<listitem><para>the correctness of the returned value in case of cash-or-nothing at-expiry binary payoff is tested by reproducing results available in literature.</para>
</listitem><listitem><para>the correctness of the returned value in case of asset-or-nothing at-expiry binary payoff is tested by reproducing results available in literature. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_b_s_m_hull_white_engine" kindref="compound">QuantLib::AnalyticBSMHullWhiteEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000136"/>the correctness of the returned value is tested by reproducing results available in web/literature  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_cliquet_engine" kindref="compound">QuantLib::AnalyticCliquetEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000117"/><itemizedlist>
<listitem><para>the correctness of the returned value is tested by reproducing results available in literature.</para>
</listitem><listitem><para>the correctness of the returned greeks is tested by reproducing numerical derivatives. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_compound_option_engine" kindref="compound">QuantLib::AnalyticCompoundOptionEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000120"/>the correctness of the returned value is tested by reproducing results available in literature.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_continuous_fixed_lookback_engine" kindref="compound">QuantLib::AnalyticContinuousFixedLookbackEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000128"/>returned values are verified against results from literature  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_continuous_floating_lookback_engine" kindref="compound">QuantLib::AnalyticContinuousFloatingLookbackEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000129"/>returned values verified against results from literature  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_continuous_geometric_average_price_asian_engine" kindref="compound">QuantLib::AnalyticContinuousGeometricAveragePriceAsianEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000093"/><itemizedlist>
<listitem><para>the correctness of the returned value is tested by reproducing results available in literature, and results obtained using a discrete average approximation.</para>
</listitem><listitem><para>the correctness of the returned greeks is tested by reproducing numerical derivatives.</para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_continuous_geometric_average_price_asian_heston_engine" kindref="compound">QuantLib::AnalyticContinuousGeometricAveragePriceAsianHestonEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000004"/><itemizedlist>
<listitem><para>the correctness of the returned value is tested by reproducing results in Table 1 and Table 4 of the paper</para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_continuous_partial_fixed_lookback_engine" kindref="compound">QuantLib::AnalyticContinuousPartialFixedLookbackEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000130"/>returned values are verified against results from literature  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_continuous_partial_floating_lookback_engine" kindref="compound">QuantLib::AnalyticContinuousPartialFloatingLookbackEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000131"/>returned values verified against results from literature  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_digital_american_engine" kindref="compound">QuantLib::AnalyticDigitalAmericanEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000137"/><itemizedlist>
<listitem><para>the correctness of the returned value in case of cash-or-nothing at-hit digital payoff is tested by reproducing results available in literature.</para>
</listitem><listitem><para>the correctness of the returned value in case of asset-or-nothing at-hit digital payoff is tested by reproducing results available in literature.</para>
</listitem><listitem><para>the correctness of the returned value in case of cash-or-nothing at-expiry digital payoff is tested by reproducing results available in literature.</para>
</listitem><listitem><para>the correctness of the returned value in case of asset-or-nothing at-expiry digital payoff is tested by reproducing results available in literature.</para>
</listitem><listitem><para>the correctness of the returned greeks in case of cash-or-nothing at-hit digital payoff is tested by reproducing numerical derivatives. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_digital_american_k_o_engine" kindref="compound">QuantLib::AnalyticDigitalAmericanKOEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000138"/><itemizedlist>
<listitem><para>the correctness of the returned value in case of cash-or-nothing at-hit digital payoff is tested by reproducing results available in literature.</para>
</listitem><listitem><para>the correctness of the returned value in case of asset-or-nothing at-hit digital payoff is tested by reproducing results available in literature.</para>
</listitem><listitem><para>the correctness of the returned value in case of cash-or-nothing at-expiry digital payoff is tested by reproducing results available in literature.</para>
</listitem><listitem><para>the correctness of the returned value in case of asset-or-nothing at-expiry digital payoff is tested by reproducing results available in literature.</para>
</listitem><listitem><para>the correctness of the returned greeks in case of cash-or-nothing at-hit digital payoff is tested by reproducing numerical derivatives. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_engine" kindref="compound">QuantLib::AnalyticDiscreteGeometricAveragePriceAsianEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000094"/><itemizedlist>
<listitem><para>the correctness of the returned value is tested by reproducing results available in literature.</para>
</listitem><listitem><para>the correctness of the available greeks is tested against numerical calculations.</para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine" kindref="compound">QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000005"/><itemizedlist>
<listitem><para>the correctness of the returned value is tested by reproducing results in Tables 1, 2 and 3 of the paper</para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_discrete_geometric_average_strike_asian_engine" kindref="compound">QuantLib::AnalyticDiscreteGeometricAverageStrikeAsianEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000095"/><itemizedlist>
<listitem><para>the correctness of the returned value is tested by reproducing known good results.</para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_dividend_european_engine" kindref="compound">QuantLib::AnalyticDividendEuropeanEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000139"/>the correctness of the returned greeks is tested by reproducing numerical derivatives.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_double_barrier_binary_engine" kindref="compound">QuantLib::AnalyticDoubleBarrierBinaryEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000103"/><itemizedlist>
<listitem><para>the correctness of the returned value is tested by reproducing results available in literature. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_double_barrier_engine" kindref="compound">QuantLib::AnalyticDoubleBarrierEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000104"/>the correctness of the returned value is tested by reproducing results available in literature.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_european_engine" kindref="compound">QuantLib::AnalyticEuropeanEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000140"/><itemizedlist>
<listitem><para>the correctness of the returned value is tested by reproducing results available in literature.</para>
</listitem><listitem><para>the correctness of the returned greeks is tested by reproducing results available in literature.</para>
</listitem><listitem><para>the correctness of the returned greeks is tested by reproducing numerical derivatives.</para>
</listitem><listitem><para>the correctness of the returned implied volatility is tested by using it for reproducing the target value.</para>
</listitem><listitem><para>the implied-volatility calculation is tested by checking that it does not modify the option.</para>
</listitem><listitem><para>the correctness of the returned value in case of cash-or-nothing digital payoff is tested by reproducing results available in literature.</para>
</listitem><listitem><para>the correctness of the returned value in case of asset-or-nothing digital payoff is tested by reproducing results available in literature.</para>
</listitem><listitem><para>the correctness of the returned value in case of gap digital payoff is tested by reproducing results available in literature.</para>
</listitem><listitem><para>the correctness of the returned greeks in case of cash-or-nothing digital payoff is tested by reproducing numerical derivatives. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_european_margrabe_engine" kindref="compound">QuantLib::AnalyticEuropeanMargrabeEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000121"/>the correctness of the returned value is tested by reproducing results available in literature.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_h1_h_w_engine" kindref="compound">QuantLib::AnalyticH1HWEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000141"/>the correctness of the returned value is tested by reproducing results available in web/literature, testing against <ref refid="namespace_quant_lib" kindref="compound">QuantLib</ref>&apos;s analytic Heston, the Black-Scholes-Merton Hull-White engine and the finite difference Heston-Hull-White engine  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_heston_engine" kindref="compound">QuantLib::AnalyticHestonEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000142"/>the correctness of the returned value is tested by reproducing results available in web/literature and comparison with Black pricing.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_heston_forward_european_engine" kindref="compound">QuantLib::AnalyticHestonForwardEuropeanEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000010"/><itemizedlist>
<listitem><para>For tReset &gt; 0, price from the analytic pricer is compared to the MC priver for calls/puts at various moneynesses</para>
</listitem><listitem><para>For tReset ~ 0, price from the analytic pricer is compared to the Heston analytic vanilla pricer for various options </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_heston_hull_white_engine" kindref="compound">QuantLib::AnalyticHestonHullWhiteEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000143"/>the correctness of the returned value is tested by reproducing results available in web/literature, testing against <ref refid="namespace_quant_lib" kindref="compound">QuantLib</ref>&apos;s analytic Heston and Black-Scholes-Merton Hull-White engine  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_p_d_f_heston_engine" kindref="compound">QuantLib::AnalyticPDFHestonEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000144"/>the correctness of the returned value is tested by reproducing digital prices using call spreads and the <ref refid="class_quant_lib_1_1_analytic_heston_engine" kindref="compound">AnalyticHestonEngine</ref>. </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_performance_engine" kindref="compound">QuantLib::AnalyticPerformanceEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000118"/>the correctness of the returned greeks is tested by reproducing numerical derivatives.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine" kindref="compound">QuantLib::AnalyticTwoAssetBarrierEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000105"/>the correctness of the returned value is tested by reproducing results available in literature.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_array" kindref="compound">QuantLib::Array</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000031"/>construction of arrays is checked in a number of cases  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_barone_adesi_whaley_approximation_engine" kindref="compound">QuantLib::BaroneAdesiWhaleyApproximationEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000145"/>the correctness of the returned value is tested by reproducing results available in literature.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_bates_engine" kindref="compound">QuantLib::BatesEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000146"/>the correctness of the returned value is tested by reproducing results available in web/literature, testing against <ref refid="namespace_quant_lib" kindref="compound">QuantLib</ref>&apos;s jump diffusion engine and comparison with Black pricing.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_bates_model" kindref="compound">QuantLib::BatesModel</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000086"/>calibration is tested against known values.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_binomial_barrier_engine" kindref="compound">QuantLib::BinomialBarrierEngine&lt; T, D &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000106"/>the correctness of the returned values is tested by checking it against analytic european results.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_binomial_double_barrier_engine" kindref="compound">QuantLib::BinomialDoubleBarrierEngine&lt; T, D &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000006"/>the correctness of the returned values is tested by checking it against analytic results.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_binomial_vanilla_engine" kindref="compound">QuantLib::BinomialVanillaEngine&lt; T &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000147"/>the correctness of the returned values is tested by checking it against analytic results. </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_bisection" kindref="compound">QuantLib::Bisection</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000067"/>the correctness of the returned values is tested by checking them against known good results. </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_bivariate_cumulative_normal_distribution_dr78" kindref="compound">QuantLib::BivariateCumulativeNormalDistributionDr78</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000032"/>the correctness of the returned value is tested by checking it against known good results.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_bivariate_cumulative_normal_distribution_we04_d_p" kindref="compound">QuantLib::BivariateCumulativeNormalDistributionWe04DP</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000033"/>the correctness of the returned value is tested by checking it against known good results.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_bjerksund_stensland_approximation_engine" kindref="compound">QuantLib::BjerksundStenslandApproximationEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000148"/>the correctness of the returned value is tested by reproducing results available in literature.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_bond" kindref="compound">QuantLib::Bond</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000018"/><itemizedlist>
<listitem><para>price/yield calculations are cross-checked for consistency.</para>
</listitem><listitem><para>price/yield calculations are checked against known good values. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_brazil" kindref="compound">QuantLib::Brazil</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000171"/>the correctness of the returned results is tested against a list of known holidays.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_brent" kindref="compound">QuantLib::Brent</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000068"/>the correctness of the returned values is tested by checking them against known good results. </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_calendar" kindref="compound">QuantLib::Calendar</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000170"/>the methods for adding and removing holidays are tested by inspecting the calendar before and after their invocation.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_cap_floor" kindref="compound">QuantLib::CapFloor</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000023"/><itemizedlist>
<listitem><para>the correctness of the returned value is tested by checking that the price of a cap (resp. floor) decreases (resp. increases) with the strike rate.</para>
</listitem><listitem><para>the relationship between the values of caps, floors and the resulting collars is checked.</para>
</listitem><listitem><para>the put-call parity between the values of caps, floors and swaps is checked.</para>
</listitem><listitem><para>the correctness of the returned implied volatility is tested by using it for reproducing the target value.</para>
</listitem><listitem><para>the correctness of the returned value is tested by checking it against a known good value. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_choi_basket_engine" kindref="compound">QuantLib::ChoiBasketEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000110"/>the correctness of the returned value is tested by reproducing results available in literature.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_cms_rate_bond" kindref="compound">QuantLib::CmsRateBond</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000019"/>calculations are tested by checking results against cached values.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_composite_quote" kindref="compound">QuantLib::CompositeQuote&lt; BinaryFunction &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000162"/>the correctness of the returned values is tested by checking them against numerical calculations.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_convergence_statistics" kindref="compound">QuantLib::ConvergenceStatistics&lt; T, U &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000076"/>results are tested against known good values.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_c_o_s_heston_engine" kindref="compound">QuantLib::COSHestonEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000149"/>the correctness of the returned value is tested by reproducing results available in web/literature and comparison with Black pricing.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_covariance_decomposition" kindref="compound">QuantLib::CovarianceDecomposition</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000050"/>cross checked with getCovariance  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_cubic_interpolation" kindref="compound">QuantLib::CubicInterpolation</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000047"/>to be adapted from old ones. </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_cumulative_poisson_distribution" kindref="compound">QuantLib::CumulativePoissonDistribution</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000037"/>the correctness of the returned value is tested by checking it against known good results.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_date" kindref="compound">QuantLib::Date</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000178"/>self-consistency of dates, serial numbers, days of month, months, and weekdays is checked over the whole date range.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_deng_li_zhou_basket_engine" kindref="compound">QuantLib::DengLiZhouBasketEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000111"/>the correctness of the returned value is tested by reproducing results available in literature.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_derived_quote" kindref="compound">QuantLib::DerivedQuote&lt; UnaryFunction &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000163"/>the correctness of the returned values is tested by checking them against numerical calculations.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_digital_coupon" kindref="compound">QuantLib::DigitalCoupon</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000001"/><itemizedlist>
<listitem><para>the correctness of the returned value in case of Asset-or-nothing embedded option is tested by pricing the digital option with Cox-Rubinstein formula.</para>
</listitem><listitem><para>the correctness of the returned value in case of deep-in-the-money Asset-or-nothing embedded option is tested vs the expected values of coupon and option.</para>
</listitem><listitem><para>the correctness of the returned value in case of deep-out-of-the-money Asset-or-nothing embedded option is tested vs the expected values of coupon and option.</para>
</listitem><listitem><para>the correctness of the returned value in case of Cash-or-nothing embedded option is tested by pricing the digital option with Reiner-Rubinstein formula.</para>
</listitem><listitem><para>the correctness of the returned value in case of deep-in-the-money Cash-or-nothing embedded option is tested vs the expected values of coupon and option.</para>
</listitem><listitem><para>the correctness of the returned value in case of deep-out-of-the-money Cash-or-nothing embedded option is tested vs the expected values of coupon and option.</para>
</listitem><listitem><para>the correctness of the returned value is tested checking the correctness of the call-put parity relation.</para>
</listitem><listitem><para>the correctness of the returned value is tested by the relationship between prices in case of different replication types. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_d_plus_d_minus" kindref="compound">QuantLib::DPlusDMinus</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000081"/>the correctness of the returned values is tested by checking them against numerical calculations.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_d_zero" kindref="compound">QuantLib::DZero</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000082"/>the correctness of the returned values is tested by checking them against numerical calculations.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_exchange_rate" kindref="compound">QuantLib::ExchangeRate</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000003"/>application of direct and derived exchange rate is tested against calculations.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_exchange_rate_manager" kindref="compound">QuantLib::ExchangeRateManager</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000002"/>lookup of direct, triangulated, and derived exchange rates is tested.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_factorial" kindref="compound">QuantLib::Factorial</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000039"/>the correctness of the returned value is tested by checking it against numerical calculations.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_false_position" kindref="compound">QuantLib::FalsePosition</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000069"/>the correctness of the returned values is tested by checking them against known good results. </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_faure_rsg" kindref="compound">QuantLib::FaureRsg</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000057"/>the correctness of the returned values is tested by reproducing known good values.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_fd2d_black_scholes_vanilla_engine" kindref="compound">QuantLib::Fd2dBlackScholesVanillaEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000112"/>the correctness of the returned value is tested by reproducing results available in web/literature and comparison with Kirk approximation.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_fd_black_scholes_barrier_engine" kindref="compound">QuantLib::FdBlackScholesBarrierEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000107"/>the correctness of the returned value is tested by reproducing results available in web/literature and comparison with Black pricing.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_fd_black_scholes_vanilla_engine" kindref="compound">QuantLib::FdBlackScholesVanillaEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000150"/>the correctness of the returned value is tested by reproducing results available in web/literature and comparison with Black pricing.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_fd_c_i_r_vanilla_engine" kindref="compound">QuantLib::FdCIRVanillaEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000151"/>the engine has been tested to converge among different schemes.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_fd_heston_barrier_engine" kindref="compound">QuantLib::FdHestonBarrierEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000108"/>the correctness of the returned value is tested by reproducing results available in web/literature and comparison with Black pricing.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_fd_heston_hull_white_vanilla_engine" kindref="compound">QuantLib::FdHestonHullWhiteVanillaEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000152"/>the correctness of the returned value is tested by reproducing results available in web/literature and comparison with Black/Heston pricing.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_fd_heston_vanilla_engine" kindref="compound">QuantLib::FdHestonVanillaEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000153"/>the correctness of the returned value is tested by reproducing results available in web/literature and comparison with Black pricing.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_fdndim_black_scholes_vanilla_engine" kindref="compound">QuantLib::FdndimBlackScholesVanillaEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000113"/>the correctness of the returned value is tested by reproducing results available in web/literature and comparison with the PyFENG python package.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_f_f_t_vanilla_engine" kindref="compound">QuantLib::FFTVanillaEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000014"/>the correctness of the returned values is tested by comparison with Black Scholes pricing.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_f_f_t_variance_gamma_engine" kindref="compound">QuantLib::FFTVarianceGammaEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000015"/>the correctness of the returned values is tested by comparison with known good values and the analytic approach  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_filon_integral" kindref="compound">QuantLib::FilonIntegral</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000041"/>the correctness of the result is tested by checking it against known good values.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_finite_difference_newton_safe" kindref="compound">QuantLib::FiniteDifferenceNewtonSafe</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000070"/>the correctness of the returned values is tested by checking them against known good results. </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_fixed_rate_bond" kindref="compound">QuantLib::FixedRateBond</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000020"/>calculations are tested by checking results against cached values.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_floating_cat_bond" kindref="compound">QuantLib::FloatingCatBond</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000008"/>calculations are tested by checking results against cached values.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_floating_rate_bond" kindref="compound">QuantLib::FloatingRateBond</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000021"/>calculations are tested by checking results against cached values.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_forward_performance_vanilla_engine" kindref="compound">QuantLib::ForwardPerformanceVanillaEngine&lt; Engine &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000123"/><itemizedlist>
<listitem><para>the correctness of the returned value is tested by reproducing results available in literature.</para>
</listitem><listitem><para>the correctness of the returned greeks is tested by reproducing numerical derivatives. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_forward_spreaded_term_structure" kindref="compound">QuantLib::ForwardSpreadedTermStructure</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000164"/><itemizedlist>
<listitem><para>the correctness of the returned values is tested by checking them against numerical calculations.</para>
</listitem><listitem><para>observability against changes in the underlying term structure and in the added spread is checked. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_forward_vanilla_engine" kindref="compound">QuantLib::ForwardVanillaEngine&lt; Engine &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000122"/><itemizedlist>
<listitem><para>the correctness of the returned value is tested by reproducing results available in literature.</para>
</listitem><listitem><para>the correctness of the returned greeks is tested by reproducing numerical derivatives. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_gamma_function" kindref="compound">QuantLib::GammaFunction</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000034"/>the correctness of the returned value is tested by checking it against known good results.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_gaussian_quadrature" kindref="compound">QuantLib::GaussianQuadrature</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000042"/>the correctness of the result is tested by checking it against known good values.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_gauss_kronrod_adaptive" kindref="compound">QuantLib::GaussKronrodAdaptive</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000043"/>the correctness of the result is tested by checking it against known good values.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_general_linear_least_squares" kindref="compound">QuantLib::GeneralLinearLeastSquares</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000040"/>the correctness of the returned values is tested by checking their properties.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_generic_sequence_statistics" kindref="compound">QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000078"/>the correctness of the returned values is tested by checking them against numerical calculations.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_germany" kindref="compound">QuantLib::Germany</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000172"/>the correctness of the returned results is tested against a list of known holidays.  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1a505d64f84a4000847f8f04ee60398665" kindref="member">QuantLib::getCovariance</ref>  (DataIterator stdDevBegin, DataIterator stdDevEnd, const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;corr, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> tolerance=1.0e-12)</term></varlistentry>
<listitem><para><anchor id="test_1_test000049"/>tested on know values and cross checked with <ref refid="class_quant_lib_1_1_covariance_decomposition" kindref="compound">CovarianceDecomposition</ref>  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_halley" kindref="compound">QuantLib::Halley</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000071"/>the correctness of the returned values is tested by checking them against known good results. </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_halton_rsg" kindref="compound">QuantLib::HaltonRsg</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000058"/><itemizedlist>
<listitem><para>the correctness of the returned values is tested by reproducing known good values.</para>
</listitem><listitem><para>the correctness of the returned values is tested by checking their discrepancy against known good values. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_heston_model" kindref="compound">QuantLib::HestonModel</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000087"/>calibration is tested against known good values.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_hull_white" kindref="compound">QuantLib::HullWhite</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000088"/>calibration results are tested against cached values </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_implied_term_structure" kindref="compound">QuantLib::ImpliedTermStructure</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000165"/><itemizedlist>
<listitem><para>the correctness of the returned values is tested by checking them against numerical calculations.</para>
</listitem><listitem><para>observability against changes in the underlying term structure is checked. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_instrument" kindref="compound">QuantLib::Instrument</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000017"/>observability of class instances is checked.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_interest_rate" kindref="compound">QuantLib::InterestRate</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000027"/>Converted rates are checked against known good results  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_interval_price" kindref="compound">QuantLib::IntervalPrice</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000092"/>Inspectors, Modifiers, and Helper functions are tested.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_inverse_cumulative_poisson" kindref="compound">QuantLib::InverseCumulativePoisson</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000038"/>the correctness of the returned value is tested by checking it against known good results.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_italy" kindref="compound">QuantLib::Italy</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000173"/>the correctness of the returned results is tested against a list of known holidays.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_joint_calendar" kindref="compound">QuantLib::JointCalendar</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000174"/>the correctness of the returned results is tested by reproducing the calculations.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_jump_diffusion_engine" kindref="compound">QuantLib::JumpDiffusionEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000154"/><itemizedlist>
<listitem><para>the correctness of the returned value is tested by reproducing results available in literature.</para>
</listitem><listitem><para>the correctness of the returned greeks is tested by reproducing numerical derivatives. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_ju_quadratic_approximation_engine" kindref="compound">QuantLib::JuQuadraticApproximationEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000155"/>the correctness of the returned value is tested by reproducing results available in literature.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_kirk_engine" kindref="compound">QuantLib::KirkEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000114"/>the correctness of the returned value is tested by reproducing results available in literature.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_lfm_hull_white_parameterization" kindref="compound">QuantLib::LfmHullWhiteParameterization</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000028"/>the correctness is tested by Monte-Carlo reproduction of caplet &amp; ratchet npvs and comparison with Black pricing.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_libor_forward_model" kindref="compound">QuantLib::LiborForwardModel</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000030"/>the correctness is tested using Monte-Carlo Simulation to reproduce swaption npvs, model calibration and exact cap pricing  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_libor_forward_model_process" kindref="compound">QuantLib::LiborForwardModelProcess</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000029"/>the correctness is tested by Monte-Carlo reproduction of caplet &amp; ratchet NPVs and comparison with Black pricing. </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_longstaff_schwartz_multi_path_pricer" kindref="compound">QuantLib::LongstaffSchwartzMultiPathPricer</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000011"/>the correctness of the returned value is tested by reproducing results available in web/literature  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_longstaff_schwartz_path_pricer" kindref="compound">QuantLib::LongstaffSchwartzPathPricer&lt; PathType &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000083"/>the correctness of the returned value is tested by reproducing results available in web/literature  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_m_c_american_engine" kindref="compound">QuantLib::MCAmericanEngine&lt; RNG, S, RNG_Calibration &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000156"/>the correctness of the returned value is tested by reproducing results available in web/literature  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_m_c_barrier_engine" kindref="compound">QuantLib::MCBarrierEngine&lt; RNG, S &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000109"/>the correctness of the returned value is tested by reproducing results available in literature.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_m_c_digital_engine" kindref="compound">QuantLib::MCDigitalEngine&lt; RNG, S &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000157"/>the correctness of the returned value in case of cash-or-nothing at-hit digital payoff is tested by reproducing known good results.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_m_c_discrete_arithmetic_a_p_engine" kindref="compound">QuantLib::MCDiscreteArithmeticAPEngine&lt; RNG, S &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000096"/>the correctness of the returned value is tested by reproducing results available in literature.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_m_c_discrete_arithmetic_a_p_heston_engine" kindref="compound">QuantLib::MCDiscreteArithmeticAPHestonEngine&lt; RNG, S, P &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000097"/>the correctness of the returned value is tested by reproducing results available in literature.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_m_c_discrete_geometric_a_p_engine" kindref="compound">QuantLib::MCDiscreteGeometricAPEngine&lt; RNG, S &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000098"/>the correctness of the returned value is tested by reproducing results available in literature.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_m_c_discrete_geometric_a_p_heston_engine" kindref="compound">QuantLib::MCDiscreteGeometricAPHestonEngine&lt; RNG, S, P &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000099"/>the correctness of the returned value is tested by reproducing results available in literature.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_m_c_european_basket_engine" kindref="compound">QuantLib::MCEuropeanBasketEngine&lt; RNG, S &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000115"/>the correctness of the returned value is tested by reproducing results available in literature.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_m_c_european_engine" kindref="compound">QuantLib::MCEuropeanEngine&lt; RNG, S &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000158"/>the correctness of the returned value is tested by checking it against analytic results.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_m_c_european_g_j_r_g_a_r_c_h_engine" kindref="compound">QuantLib::MCEuropeanGJRGARCHEngine&lt; RNG, S &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000159"/>the correctness of the returned value is tested by reproducing results available in web/literature  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_m_c_european_heston_engine" kindref="compound">QuantLib::MCEuropeanHestonEngine&lt; RNG, S, P &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000160"/>the correctness of the returned value is tested by reproducing results available in web/literature  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_m_c_forward_european_b_s_engine" kindref="compound">QuantLib::MCForwardEuropeanBSEngine&lt; RNG, S &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000124"/><itemizedlist>
<listitem><para>the correctness of the returned value is tested by comparing prices to the analytic pricer for a range of moneynesses </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_m_c_forward_european_heston_engine" kindref="compound">QuantLib::MCForwardEuropeanHestonEngine&lt; RNG, S, P &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000125"/><itemizedlist>
<listitem><para>Heston MC prices for a flat Heston process are compared to analytical BS prices with the same volatility for a range of moneynesses</para>
</listitem><listitem><para>Heston MC prices for a forward-starting option resetting at t=0 are compared to semi-analytical Heston prices for a range of moneynesses </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine" kindref="compound">QuantLib::MCLongstaffSchwartzEngine&lt; GenericEngine, MC, RNG, S, RNG_Calibration &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000132"/>the correctness of the returned value is tested by reproducing results available in web/literature  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_m_c_longstaff_schwartz_path_engine" kindref="compound">QuantLib::MCLongstaffSchwartzPathEngine&lt; GenericEngine, MC, RNG, S &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000012"/>the correctness of the returned value is tested by reproducing results available in web/literature  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_m_c_variance_swap_engine" kindref="compound">QuantLib::MCVarianceSwapEngine&lt; RNG, S &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000126"/>returned fair variances checked for consistency with implied volatility curve.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_mersenne_twister_uniform_rng" kindref="compound">QuantLib::MersenneTwisterUniformRng</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000059"/>the correctness of the returned values is tested by checking them against known good results.  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1a7b3f26a68fab37e12b876996fa6f97d6" kindref="member">QuantLib::midEquivalent</ref>  (const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> bid, const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> ask, const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> last, const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> close)</term></varlistentry>
<listitem><para><anchor id="test_1_test000090"/>different combinations are tested  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1a66e521fe74905cba90e87a2521b78b79" kindref="member">QuantLib::midSafe</ref>  (const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> bid, const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> ask)</term></varlistentry>
<listitem><para><anchor id="test_1_test000091"/>different combinations are tested  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_money" kindref="compound">QuantLib::Money</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000089"/>money arithmetic is tested with and without currency conversions.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_multi_cubic_spline" kindref="compound">QuantLib::MultiCubicSpline&lt; i &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000048"/>interpolated values are checked against the original function. </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_multi_path_generator" kindref="compound">QuantLib::MultiPathGenerator&lt; GSG &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000084"/>the generated paths are checked against cached results  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_newton" kindref="compound">QuantLib::Newton</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000072"/>the correctness of the returned values is tested by checking them against known good results. </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_newton_safe" kindref="compound">QuantLib::NewtonSafe</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000073"/>the correctness of the returned values is tested by checking them against known good results. </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_normal_distribution" kindref="compound">QuantLib::NormalDistribution</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000035"/>the correctness of the returned value is tested by checking it against numerical calculations. Cross-checks are also performed against the <ref refid="class_quant_lib_1_1_cumulative_normal_distribution" kindref="compound">CumulativeNormalDistribution</ref> and <ref refid="class_quant_lib_1_1_inverse_cumulative_normal" kindref="compound">InverseCumulativeNormal</ref> classes.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_path_generator" kindref="compound">QuantLib::PathGenerator&lt; GSG &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000085"/>the generated paths are checked against cached results  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_period" kindref="compound">QuantLib::Period</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000181"/>self-consistency of algebra is checked.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_piecewise_yield_curve" kindref="compound">QuantLib::PiecewiseYieldCurve&lt; Traits, Interpolator, Bootstrap &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000166"/><itemizedlist>
<listitem><para>the correctness of the returned values is tested by checking them against the original inputs.</para>
</listitem><listitem><para>the observability of the term structure is tested. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_poisson_distribution" kindref="compound">QuantLib::PoissonDistribution</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000036"/>the correctness of the returned value is tested by checking it against known good results.  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1a6dfe9a28285aa1a5dc46060795bf1e57" kindref="member">QuantLib::PoissonPseudoRandom</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000062"/>sequence generators are generated and tested by comparing samples against known good values.  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1a68b9aaf5f0c17983506b1a1db8575ab0" kindref="member">QuantLib::PseudoRandom</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000061"/>a sequence generator is generated and tested by comparing samples against known good values.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_quanto_engine" kindref="compound">QuantLib::QuantoEngine&lt; Instr, Engine &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000133"/><itemizedlist>
<listitem><para>the correctness of the returned value is tested by reproducing results available in literature.</para>
</listitem><listitem><para>the correctness of the returned greeks is tested by reproducing numerical derivatives. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_quote" kindref="compound">QuantLib::Quote</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000161"/>the observability of class instances is tested.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_randomized_l_d_s" kindref="compound">QuantLib::RandomizedLDS&lt; LDS, PRS &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000060"/>correct initialization is tested.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_replicating_variance_swap_engine" kindref="compound">QuantLib::ReplicatingVarianceSwapEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000127"/>returned variances verified against results from literature  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_ridder" kindref="compound">QuantLib::Ridder</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000074"/>the correctness of the returned values is tested by checking them against known good results. </para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1ac53b76df55c7fbcc29b2636c8c311662" kindref="member">QuantLib::RiskStatistics</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000077"/>the correctness of the returned values is tested by checking them against numerical calculations.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_rounding" kindref="compound">QuantLib::Rounding</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000066"/>the correctness of the returned values is tested by checking them against known good results.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_secant" kindref="compound">QuantLib::Secant</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000075"/>the correctness of the returned values is tested by checking them against known good results. </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_seed_generator" kindref="compound">QuantLib::SeedGenerator</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000063"/>correct initialization of the single instance is tested.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_segment_integral" kindref="compound">QuantLib::SegmentIntegral</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000044"/>the correctness of the result is tested by checking it against known good values.  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1a7563e2b2e11d54d5a55a58ae124c3349" kindref="member">QuantLib::SequenceStatistics</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000079"/>the correctness of the returned values is tested by checking them against numerical calculations.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_simple_day_counter" kindref="compound">QuantLib::SimpleDayCounter</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000180"/>the correctness of the results is checked against known good values.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_simpson_integral" kindref="compound">QuantLib::SimpsonIntegral</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000045"/>the correctness of the result is tested by checking it against known good values.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_sobol_rsg" kindref="compound">QuantLib::SobolRsg</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000064"/><itemizedlist>
<listitem><para>the correctness of the returned values is tested by reproducing known good values.</para>
</listitem><listitem><para>the correctness of the returned values is tested by checking their discrepancy against known good values. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1ae2e788da35d2b866040a03b96227ee6e" kindref="member">QuantLib::Statistics</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000080"/>the correctness of the returned values is tested by checking them against numerical calculations.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_stulz_engine" kindref="compound">QuantLib::StulzEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000116"/>the correctness of the returned value is tested by reproducing results available in literature.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_suo_wang_double_barrier_engine" kindref="compound">QuantLib::SuoWangDoubleBarrierEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000007"/>the correctness of the returned value is tested by reproducing results available in literature.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_s_v_d" kindref="compound">QuantLib::SVD</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000052"/>the correctness of the returned values is tested by checking their properties.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_svi_smile_section" kindref="compound">QuantLib::SviSmileSection</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000016"/>the correctness of the result is tested by checking it against known good values.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_swaption" kindref="compound">QuantLib::Swaption</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000025"/><itemizedlist>
<listitem><para>the correctness of the returned value is tested by checking that the price of a payer (resp. receiver) swaption decreases (resp. increases) with the strike.</para>
</listitem><listitem><para>the correctness of the returned value is tested by checking that the price of a payer (resp. receiver) swaption increases (resp. decreases) with the spread.</para>
</listitem><listitem><para>the correctness of the returned value is tested by checking it against that of a swaption on a swap with no spread and a correspondingly adjusted fixed rate.</para>
</listitem><listitem><para>the correctness of the returned value is tested by checking it against a known good value.</para>
</listitem><listitem><para>the correctness of the returned value of cash settled swaptions is tested by checking the modified annuity against a value calculated without using the <ref refid="class_quant_lib_1_1_swaption" kindref="compound">Swaption</ref> class.</para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_symmetric_schur_decomposition" kindref="compound">QuantLib::SymmetricSchurDecomposition</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000053"/>the correctness of the returned values is tested by checking their properties.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_t_a_r_g_e_t" kindref="compound">QuantLib::TARGET</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000175"/>the correctness of the returned results is tested against a list of known holidays.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_tqr_eigen_decomposition" kindref="compound">QuantLib::TqrEigenDecomposition</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000056"/>the correctness of the result is tested by checking it against known good values.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_trapezoid_integral" kindref="compound">QuantLib::TrapezoidIntegral&lt; IntegrationPolicy &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000046"/>the correctness of the result is tested by checking it against known good values.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_tree_swaption_engine" kindref="compound">QuantLib::TreeSwaptionEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000135"/>calculations are checked against cached results  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_tree_vanilla_swap_engine" kindref="compound">QuantLib::TreeVanillaSwapEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000134"/>calculations are checked against known good results  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1a573628be8b94717868e2c6a1058cd4d3" kindref="member">QuantLib::triangularAnglesParametrization</ref>  (const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;angles, <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> matrixSize, <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> rank)</term></varlistentry>
<listitem><para><anchor id="test_1_test000054"/><itemizedlist>
<listitem><para>the correctness of the results is tested by reproducing known good data.</para>
</listitem><listitem><para>the correctness of the results is tested by checking returned values against numerical calculations. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1af62ddda3dd7e71796de3b731df769228" kindref="member">QuantLib::triangularAnglesParametrizationRankThree</ref>  (<ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> alpha, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> t0, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> epsilon, <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> nbRows)</term></varlistentry>
<listitem><para><anchor id="test_1_test000055"/><itemizedlist>
<listitem><para>the correctness of the results is tested by reproducing known good data.</para>
</listitem><listitem><para>the correctness of the results is tested by checking returned values against numerical calculations. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_turnbull_wakeman_asian_engine" kindref="compound">QuantLib::TurnbullWakemanAsianEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000100"/><itemizedlist>
<listitem><para>the correctness of the returned value is tested by reproducing results in literature with flat as well as upward and downward sloping volatility term structures.</para>
</listitem><listitem><para>the pricing of trades with guaranteed exercise/OTM is also tested. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_ultimate_forward_term_structure" kindref="compound">QuantLib::UltimateForwardTermStructure</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000167"/><itemizedlist>
<listitem><para>the correctness of the returned zero rates is tested by checking them against reference values obtained from the official source.</para>
</listitem><listitem><para>extrapolated forward is validated.</para>
</listitem><listitem><para>rates on the cut-off point are checked against those implied by the base curve.</para>
</listitem><listitem><para>inspectors are tested against the base curve.</para>
</listitem><listitem><para>incorrect input for cut-off point should raise an exception.</para>
</listitem><listitem><para>observability against changes in the underlying term structure and the additional components is checked. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_united_kingdom" kindref="compound">QuantLib::UnitedKingdom</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000176"/>the correctness of the returned results is tested against a list of known holidays.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_united_states" kindref="compound">QuantLib::UnitedStates</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000177"/>the correctness of the returned results is tested against a list of known holidays.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_unit_of_measure_conversion_manager" kindref="compound">QuantLib::UnitOfMeasureConversionManager</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000009"/>lookup of direct unit of measure conversion is tested.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_vanilla_swap" kindref="compound">QuantLib::VanillaSwap</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000026"/><itemizedlist>
<listitem><para>the correctness of the returned value is tested by checking that the price of a swap paying the fair fixed rate is null.</para>
</listitem><listitem><para>the correctness of the returned value is tested by checking that the price of a swap receiving the fair floating-rate spread is null.</para>
</listitem><listitem><para>the correctness of the returned value is tested by checking that the price of a swap decreases with the paid fixed rate.</para>
</listitem><listitem><para>the correctness of the returned value is tested by checking that the price of a swap increases with the received floating-rate spread.</para>
</listitem><listitem><para>the correctness of the returned value is tested by checking it against a known good value. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_variance_gamma_engine" kindref="compound">QuantLib::VarianceGammaEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000013"/>the correctness of the returned values is tested by checking it against known good results.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_xoshiro256_star_star_uniform_rng" kindref="compound">QuantLib::Xoshiro256StarStarUniformRng</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000065"/>the correctness of the returned values is tested by checking them against the reference implementation in c.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">QuantLib::YieldTermStructure</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000169"/>observability against evaluation date changes is checked.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_yo_y_inflation_cap_floor" kindref="compound">QuantLib::YoYInflationCapFloor</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000024"/><itemizedlist>
<listitem><para>the relationship between the values of caps, floors and the resulting collars is checked.</para>
</listitem><listitem><para>the put-call parity between the values of caps, floors and swaps is checked.</para>
</listitem><listitem><para>the correctness of the returned value is tested by checking it against a known good value. </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_zero_coupon_bond" kindref="compound">QuantLib::ZeroCouponBond</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000022"/>calculations are tested by checking results against cached values.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_zero_spreaded_term_structure" kindref="compound">QuantLib::ZeroSpreadedTermStructure</ref>  </term></varlistentry>
<listitem><para><anchor id="test_1_test000168"/><itemizedlist>
<listitem><para>the correctness of the returned values is tested by checking them against numerical calculations.</para>
</listitem><listitem><para>observability against changes in the underlying term structure and in the added spread is checked. </para>
</listitem></itemizedlist>
</para>
</listitem>
</variablelist>
</para>
    </detaileddescription>
    <location file="test"/>
  </compounddef>
</doxygen>
