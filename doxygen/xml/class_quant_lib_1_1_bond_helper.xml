<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_bond_helper" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::BondHelper</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_bootstrap_helper" prot="public" virt="non-virtual">QuantLib::BootstrapHelper&lt; YieldTermStructure &gt;</basecompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_c_p_i_bond_helper" prot="public" virt="non-virtual">QuantLib::CPIBondHelper</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_fixed_rate_bond_helper" prot="public" virt="non-virtual">QuantLib::FixedRateBondHelper</derivedcompoundref>
    <includes refid="bondhelpers_8hpp" local="no">bondhelpers.hpp</includes>
    <sectiondef kind="user-defined">
      <header>Visitability</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_bond_helper_1a3559e1c44988201a6db024b6d56d9ccd" prot="protected" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;Bond&gt; QuantLib::BondHelper::bond_</definition>
        <argsstring></argsstring>
        <name>bond_</name>
        <qualifiedname>QuantLib::BondHelper::bond_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/yield/bondhelpers.hpp" line="68" column="25" bodyfile="ql/termstructures/yield/bondhelpers.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_bond_helper_1a38712f9d91812a3dbc86a8e5dcfbd2fa" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_relinkable_handle" kindref="compound">RelinkableHandle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt;</type>
        <definition>RelinkableHandle&lt;YieldTermStructure&gt; QuantLib::BondHelper::termStructureHandle_</definition>
        <argsstring></argsstring>
        <name>termStructureHandle_</name>
        <qualifiedname>QuantLib::BondHelper::termStructureHandle_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/yield/bondhelpers.hpp" line="69" column="26" bodyfile="ql/termstructures/yield/bondhelpers.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_bond_helper_1afae5c8101e0ceaa12dddcbd1f3f9a155" prot="protected" static="no" mutable="no">
        <type>Bond::Price::Type</type>
        <definition>Bond::Price::Type QuantLib::BondHelper::priceType_</definition>
        <argsstring></argsstring>
        <name>priceType_</name>
        <qualifiedname>QuantLib::BondHelper::priceType_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/yield/bondhelpers.hpp" line="70" column="27" bodyfile="ql/termstructures/yield/bondhelpers.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_helper_1a6b083b66fc3232dbf1c771632d6db757" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::BondHelper::accept</definition>
        <argsstring>(AcyclicVisitor &amp;) override</argsstring>
        <name>accept</name>
        <qualifiedname>QuantLib::BondHelper::accept</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_bootstrap_helper_1a972d69e74106276b0fe15239047746b9">accept</reimplements>
        <reimplementedby refid="class_quant_lib_1_1_c_p_i_bond_helper_1a4abbc5af499bcb250ecb45d96e58ab83">accept</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_fixed_rate_bond_helper_1ac9e62a5abf4989dca150dd5efa963eb5">accept</reimplementedby>
        <param>
          <type><ref refid="class_quant_lib_1_1_acyclic_visitor" kindref="compound">AcyclicVisitor</ref> &amp;</type>
          <defname>v</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/yield/bondhelpers.hpp" line="65" column="14" bodyfile="ql/termstructures/yield/bondhelpers.cpp" bodystart="72" bodyend="78"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>RateHelper interface</header>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_helper_1a7ed9e02e12db0c29d5952b5d67627e1b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondHelper::impliedQuote</definition>
        <argsstring>() const override</argsstring>
        <name>impliedQuote</name>
        <qualifiedname>QuantLib::BondHelper::impliedQuote</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_bootstrap_helper_1a6a29e23cead4e1b1bda334f1de80b17d">impliedQuote</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/yield/bondhelpers.hpp" line="54" column="14" bodyfile="ql/termstructures/yield/bondhelpers.cpp" bodystart="53" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_helper_1a6d9bd0aab464bc7b80e8cc5a837c1935" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::BondHelper::setTermStructure</definition>
        <argsstring>(YieldTermStructure *) override</argsstring>
        <name>setTermStructure</name>
        <qualifiedname>QuantLib::BondHelper::setTermStructure</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_bootstrap_helper_1a1f17a55318c87b85475f7a0ace4881fc">setTermStructure</reimplements>
        <param>
          <type><ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> *</type>
        </param>
        <briefdescription>
<para>sets the term structure to be used for pricing </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Being a pointer and not a shared_ptr, the term structure is not guaranteed to remain allocated for the whole life of the rate helper. It is responsibility of the programmer to ensure that the pointer remains valid. It is advised that this method is called only inside the term structure being bootstrapped, setting the pointer to <bold>this</bold>, i.e., the term structure itself. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/yield/bondhelpers.hpp" line="55" column="14" bodyfile="ql/termstructures/yield/bondhelpers.cpp" bodystart="44" bodyend="51"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Additional inspectors</header>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_helper_1aad79a298a117f5e8a565cd0f85055ffc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; Bond &gt; QuantLib::BondHelper::bond</definition>
        <argsstring>() const</argsstring>
        <name>bond</name>
        <qualifiedname>QuantLib::BondHelper::bond</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/yield/bondhelpers.hpp" line="59" column="25" bodyfile="ql/termstructures/yield/bondhelpers.hpp" bodystart="176" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_helper_1af862c24be8b1d33c017e0bd90c4f5355" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Bond::Price::Type</type>
        <definition>Bond::Price::Type QuantLib::BondHelper::priceType</definition>
        <argsstring>() const</argsstring>
        <name>priceType</name>
        <qualifiedname>QuantLib::BondHelper::priceType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/yield/bondhelpers.hpp" line="61" column="27" bodyfile="ql/termstructures/yield/bondhelpers.hpp" bodystart="180" bodyend="182"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_bond_helper_1aeb721bf561e99cb7bf9b374ea8b73f76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::BondHelper::BondHelper</definition>
        <argsstring>(const Handle&lt; Quote &gt; &amp;price, const ext::shared_ptr&lt; Bond &gt; &amp;bond, Bond::Price::Type priceType=Bond::Price::Clean)</argsstring>
        <name>BondHelper</name>
        <qualifiedname>QuantLib::BondHelper::BondHelper</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &amp;</type>
          <declname>price</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &gt; &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type>Bond::Price::Type</type>
          <declname>priceType</declname>
          <defval>Bond::Price::Clean</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Setting a pricing engine to the passed bond from external code will cause the bootstrap to fail or to give wrong results. It is advised to discard the bond after creating the helper, so that the helper has sole ownership of it. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/yield/bondhelpers.hpp" line="48" column="9" bodyfile="ql/termstructures/yield/bondhelpers.cpp" bodystart="30" bodyend="42"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para><ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> helper for curve bootstrap. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="warning"><para>This class assumes that the reference date does not change between calls of <ref refid="class_quant_lib_1_1_bond_helper_1a6d9bd0aab464bc7b80e8cc5a837c1935" kindref="member">setTermStructure()</ref>. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::BondHelper</label>
        <link refid="class_quant_lib_1_1_bond_helper"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::CPIBondHelper</label>
        <link refid="class_quant_lib_1_1_c_p_i_bond_helper"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::FixedRateBondHelper</label>
        <link refid="class_quant_lib_1_1_fixed_rate_bond_helper"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="3">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>RateHelper</label>
        <link refid="class_quant_lib_1_1_bootstrap_helper"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::BondHelper</label>
        <link refid="class_quant_lib_1_1_bond_helper"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>termStructureHandle_</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::Handle&lt; QuantLib::YieldTermStructure &gt;</label>
        <link refid="class_quant_lib_1_1_handle"/>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="3">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="5">
        <label>QuantLib::RelinkableHandle&lt; QuantLib::YieldTermStructure &gt;</label>
        <link refid="class_quant_lib_1_1_relinkable_handle"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>RateHelper</label>
        <link refid="class_quant_lib_1_1_bootstrap_helper"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/termstructures/yield/bondhelpers.hpp" line="40" column="5" bodyfile="ql/termstructures/yield/bondhelpers.hpp" bodystart="40" bodyend="71"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_bond_helper_1a6b083b66fc3232dbf1c771632d6db757" prot="public" virt="virtual"><scope>QuantLib::BondHelper</scope><name>accept</name></member>
      <member refid="class_quant_lib_1_1_bond_helper_1aad79a298a117f5e8a565cd0f85055ffc" prot="public" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>bond</name></member>
      <member refid="class_quant_lib_1_1_bond_helper_1a3559e1c44988201a6db024b6d56d9ccd" prot="protected" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>bond_</name></member>
      <member refid="class_quant_lib_1_1_bond_helper_1aeb721bf561e99cb7bf9b374ea8b73f76" prot="public" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>BondHelper</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a6e05e5d944839468441bca22c133d65a" prot="public" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>BootstrapHelper</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a30a010aae5e4cc54d38457de4aa39c7e" prot="public" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>BootstrapHelper</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a6e05e5d944839468441bca22c133d65a" prot="public" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>BootstrapHelper</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a30a010aae5e4cc54d38457de4aa39c7e" prot="public" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>BootstrapHelper</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::BondHelper</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a1ca284f9f4ade8b17be1f5c284b1cfb2" prot="public" virt="virtual"><scope>QuantLib::BondHelper</scope><name>earliestDate</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a1ca284f9f4ade8b17be1f5c284b1cfb2" prot="public" virt="virtual"><scope>QuantLib::BondHelper</scope><name>earliestDate</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a3f5c545866d04dc90e2c3aec44974e08" prot="protected" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>earliestDate_</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a3f5c545866d04dc90e2c3aec44974e08" prot="protected" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>earliestDate_</name></member>
      <member refid="class_quant_lib_1_1_bond_helper_1a7ed9e02e12db0c29d5952b5d67627e1b" prot="public" virt="virtual"><scope>QuantLib::BondHelper</scope><name>impliedQuote</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::BondHelper</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a7b21f7d30980757a9721ef13ad7979af" prot="public" virt="virtual"><scope>QuantLib::BondHelper</scope><name>latestDate</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a7b21f7d30980757a9721ef13ad7979af" prot="public" virt="virtual"><scope>QuantLib::BondHelper</scope><name>latestDate</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a73a413539e8d6a526e8cc29f928f976c" prot="protected" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>latestDate_</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a73a413539e8d6a526e8cc29f928f976c" prot="protected" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>latestDate_</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1afc339bcd0b9d3029c20dfacaac5adf52" prot="public" virt="virtual"><scope>QuantLib::BondHelper</scope><name>latestRelevantDate</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1afc339bcd0b9d3029c20dfacaac5adf52" prot="public" virt="virtual"><scope>QuantLib::BondHelper</scope><name>latestRelevantDate</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a06f481f14c2b2b0624f2e0f8967353b0" prot="protected" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>latestRelevantDate_</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a06f481f14c2b2b0624f2e0f8967353b0" prot="protected" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>latestRelevantDate_</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1ad74f6e8a3c4f734a83edacaeb6fe53e0" prot="public" virt="virtual"><scope>QuantLib::BondHelper</scope><name>maturityDate</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1ad74f6e8a3c4f734a83edacaeb6fe53e0" prot="public" virt="virtual"><scope>QuantLib::BondHelper</scope><name>maturityDate</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1aa79e8a482771bdf0656a7afa4c557118" prot="protected" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>maturityDate_</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1aa79e8a482771bdf0656a7afa4c557118" prot="protected" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>maturityDate_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::BondHelper</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::BondHelper</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::BondHelper</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::BondHelper</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::BondHelper</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a00496ecfac2fb317e435a6fe48c5c267" prot="public" virt="virtual"><scope>QuantLib::BondHelper</scope><name>pillarDate</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a00496ecfac2fb317e435a6fe48c5c267" prot="public" virt="virtual"><scope>QuantLib::BondHelper</scope><name>pillarDate</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1aa1aa18bed40139d0dae5e0df17968255" prot="protected" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>pillarDate_</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1aa1aa18bed40139d0dae5e0df17968255" prot="protected" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>pillarDate_</name></member>
      <member refid="class_quant_lib_1_1_bond_helper_1af862c24be8b1d33c017e0bd90c4f5355" prot="public" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>priceType</name></member>
      <member refid="class_quant_lib_1_1_bond_helper_1afae5c8101e0ceaa12dddcbd1f3f9a155" prot="protected" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>priceType_</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a9e9a17bde5f762d0f75305310a84ae4d" prot="public" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>quote</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a9e9a17bde5f762d0f75305310a84ae4d" prot="public" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>quote</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a8480a30335c8da30122287bf782bc4b3" prot="protected" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>quote_</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a8480a30335c8da30122287bf782bc4b3" prot="protected" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>quote_</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a9bd06175fab6b2b4326c36b7e0f18007" prot="public" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>quoteError</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a9bd06175fab6b2b4326c36b7e0f18007" prot="public" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>quoteError</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_bond_helper_1a6d9bd0aab464bc7b80e8cc5a837c1935" prot="public" virt="virtual"><scope>QuantLib::BondHelper</scope><name>setTermStructure</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a1f17a55318c87b85475f7a0ace4881fc" prot="public" virt="virtual" ambiguityscope="QuantLib::BootstrapHelper&lt; YieldTermStructure &gt;::"><scope>QuantLib::BondHelper</scope><name>setTermStructure</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a45322b36556492c6e52e1c64ebc8668e" prot="protected" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>termStructure_</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a45322b36556492c6e52e1c64ebc8668e" prot="protected" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>termStructure_</name></member>
      <member refid="class_quant_lib_1_1_bond_helper_1a38712f9d91812a3dbc86a8e5dcfbd2fa" prot="protected" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>termStructureHandle_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a29362a38767e0231afc9430c8039cf42" prot="public" virt="virtual"><scope>QuantLib::BondHelper</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a29362a38767e0231afc9430c8039cf42" prot="public" virt="virtual"><scope>QuantLib::BondHelper</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a950cc899a68be0a5f04119edd931bd1d" prot="public" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>~BootstrapHelper</name></member>
      <member refid="class_quant_lib_1_1_bootstrap_helper_1a950cc899a68be0a5f04119edd931bd1d" prot="public" virt="non-virtual"><scope>QuantLib::BondHelper</scope><name>~BootstrapHelper</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::BondHelper</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::BondHelper</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
