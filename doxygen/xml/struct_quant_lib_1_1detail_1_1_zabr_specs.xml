<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="struct_quant_lib_1_1detail_1_1_zabr_specs" kind="struct" language="C++" prot="public">
    <compoundname>QuantLib::detail::ZabrSpecs</compoundname>
    <templateparamlist>
      <param>
        <type>typename Evaluation</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_quant_lib_1_1detail_1_1_zabr_specs_1a2373448302f54d2637760f82f199f197" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_zabr_smile_section" kindref="compound">ZabrSmileSection</ref>&lt; Evaluation &gt;</type>
        <definition>typedef ZabrSmileSection&lt;Evaluation&gt; QuantLib::detail::ZabrSpecs&lt; Evaluation &gt;::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <qualifiedname>QuantLib::detail::ZabrSpecs::type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="109" column="30" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_zabr_specs_1af92fff7ef0878f1330ed51d3c59bef11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::detail::ZabrSpecs&lt; Evaluation &gt;::dimension</definition>
        <argsstring>()</argsstring>
        <name>dimension</name>
        <qualifiedname>QuantLib::detail::ZabrSpecs::dimension</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="36" column="10" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_zabr_specs_1a5240fad3f24ae2933391eb1c6f1d9178" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::detail::ZabrSpecs&lt; Evaluation &gt;::eps</definition>
        <argsstring>()</argsstring>
        <name>eps</name>
        <qualifiedname>QuantLib::detail::ZabrSpecs::eps</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="37" column="10" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_zabr_specs_1a330b76d85a1c2288fc1cf394e72584ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::detail::ZabrSpecs&lt; Evaluation &gt;::defaultValues</definition>
        <argsstring>(std::vector&lt; Real &gt; &amp;params, std::vector&lt; bool &gt; &amp;paramIsFixed, const Real &amp;forward, const Real expiryTime, const std::vector&lt; Real &gt; &amp;addParams)</argsstring>
        <name>defaultValues</name>
        <qualifiedname>QuantLib::detail::ZabrSpecs::defaultValues</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>std::vector&lt; bool &gt; &amp;</type>
          <declname>paramIsFixed</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>forward</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>expiryTime</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>addParams</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="38" column="10" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="38" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_zabr_specs_1affa6659e41adfc3911c2552b50773229" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::detail::ZabrSpecs&lt; Evaluation &gt;::guess</definition>
        <argsstring>(Array &amp;values, const std::vector&lt; bool &gt; &amp;paramIsFixed, const Real &amp;forward, const Real expiryTime, const std::vector&lt; Real &gt; &amp;r, const std::vector&lt; Real &gt; &amp;addParams)</argsstring>
        <name>guess</name>
        <qualifiedname>QuantLib::detail::ZabrSpecs::guess</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
          <declname>paramIsFixed</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>forward</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>expiryTime</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>addParams</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="55" column="10" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="55" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_zabr_specs_1a46197074e6be85fc4508aceaf3e644e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::detail::ZabrSpecs&lt; Evaluation &gt;::eps1</definition>
        <argsstring>()</argsstring>
        <name>eps1</name>
        <qualifiedname>QuantLib::detail::ZabrSpecs::eps1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="74" column="10" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_zabr_specs_1a9b209f66158d1f7ce17136e94c1e5b79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::detail::ZabrSpecs&lt; Evaluation &gt;::eps2</definition>
        <argsstring>()</argsstring>
        <name>eps2</name>
        <qualifiedname>QuantLib::detail::ZabrSpecs::eps2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="75" column="10" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_zabr_specs_1a748cdb26606adbc17a4a30ca78eb7e58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::detail::ZabrSpecs&lt; Evaluation &gt;::dilationFactor</definition>
        <argsstring>()</argsstring>
        <name>dilationFactor</name>
        <qualifiedname>QuantLib::detail::ZabrSpecs::dilationFactor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="76" column="10" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_zabr_specs_1a14b1712470fef356538543f4252748cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::detail::ZabrSpecs&lt; Evaluation &gt;::inverse</definition>
        <argsstring>(const Array &amp;y, const std::vector&lt; bool &gt; &amp;, const std::vector&lt; Real &gt; &amp;, const Real)</argsstring>
        <name>inverse</name>
        <qualifiedname>QuantLib::detail::ZabrSpecs::inverse</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="77" column="11" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="77" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_zabr_specs_1a2a8829cf1f93f73b2b57a960ac90ebc2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::detail::ZabrSpecs&lt; Evaluation &gt;::direct</definition>
        <argsstring>(const Array &amp;x, const std::vector&lt; bool &gt; &amp;, const std::vector&lt; Real &gt; &amp;, const Real)</argsstring>
        <name>direct</name>
        <qualifiedname>QuantLib::detail::ZabrSpecs::direct</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="88" column="11" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="88" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_zabr_specs_1a176205386ed4345672b56558e2fe2ce6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::detail::ZabrSpecs&lt; Evaluation &gt;::weight</definition>
        <argsstring>(const Real strike, const Real forward, const Real stdDev, const std::vector&lt; Real &gt; &amp;addParams)</argsstring>
        <name>weight</name>
        <qualifiedname>QuantLib::detail::ZabrSpecs::weight</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>stdDev</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>addParams</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="105" column="10" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_zabr_specs_1ab1051ae91e301d100e4fc2ea4992b130" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_zabr_smile_section" kindref="compound">type</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; type &gt; QuantLib::detail::ZabrSpecs&lt; Evaluation &gt;::instance</definition>
        <argsstring>(const Time t, const Real &amp;forward, const std::vector&lt; Real &gt; &amp;params, const std::vector&lt; Real &gt; &amp;addParams)</argsstring>
        <name>instance</name>
        <qualifiedname>QuantLib::detail::ZabrSpecs::instance</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>forward</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>addParams</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="110" column="21" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="110" bodyend="114"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="35" column="12" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="35" bodyend="115"/>
    <listofallmembers>
      <member refid="struct_quant_lib_1_1detail_1_1_zabr_specs_1a330b76d85a1c2288fc1cf394e72584ef" prot="public" virt="non-virtual"><scope>QuantLib::detail::ZabrSpecs</scope><name>defaultValues</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_zabr_specs_1a748cdb26606adbc17a4a30ca78eb7e58" prot="public" virt="non-virtual"><scope>QuantLib::detail::ZabrSpecs</scope><name>dilationFactor</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_zabr_specs_1af92fff7ef0878f1330ed51d3c59bef11" prot="public" virt="non-virtual"><scope>QuantLib::detail::ZabrSpecs</scope><name>dimension</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_zabr_specs_1a2a8829cf1f93f73b2b57a960ac90ebc2" prot="public" virt="non-virtual"><scope>QuantLib::detail::ZabrSpecs</scope><name>direct</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_zabr_specs_1a5240fad3f24ae2933391eb1c6f1d9178" prot="public" virt="non-virtual"><scope>QuantLib::detail::ZabrSpecs</scope><name>eps</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_zabr_specs_1a46197074e6be85fc4508aceaf3e644e6" prot="public" virt="non-virtual"><scope>QuantLib::detail::ZabrSpecs</scope><name>eps1</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_zabr_specs_1a9b209f66158d1f7ce17136e94c1e5b79" prot="public" virt="non-virtual"><scope>QuantLib::detail::ZabrSpecs</scope><name>eps2</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_zabr_specs_1affa6659e41adfc3911c2552b50773229" prot="public" virt="non-virtual"><scope>QuantLib::detail::ZabrSpecs</scope><name>guess</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_zabr_specs_1ab1051ae91e301d100e4fc2ea4992b130" prot="public" virt="non-virtual"><scope>QuantLib::detail::ZabrSpecs</scope><name>instance</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_zabr_specs_1a14b1712470fef356538543f4252748cd" prot="public" virt="non-virtual"><scope>QuantLib::detail::ZabrSpecs</scope><name>inverse</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_zabr_specs_1a2373448302f54d2637760f82f199f197" prot="public" virt="non-virtual"><scope>QuantLib::detail::ZabrSpecs</scope><name>type</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_zabr_specs_1a176205386ed4345672b56558e2fe2ce6" prot="public" virt="non-virtual"><scope>QuantLib::detail::ZabrSpecs</scope><name>weight</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
