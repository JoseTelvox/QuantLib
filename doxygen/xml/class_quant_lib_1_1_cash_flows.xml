<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_cash_flows" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::CashFlows</compoundname>
    <includes refid="cashflows_8hpp" local="no">cashflows.hpp</includes>
    <innerclass refid="class_quant_lib_1_1_cash_flows_1_1_irr_finder" prot="private">QuantLib::CashFlows::IrrFinder</innerclass>
    <sectiondef kind="user-defined">
      <header>Date functions</header>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a7ede1ef38f187ad5ecf6480ed45d4d4f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::CashFlows::startDate</definition>
        <argsstring>(const Leg &amp;leg)</argsstring>
        <name>startDate</name>
        <qualifiedname>QuantLib::CashFlows::startDate</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="77" column="21" bodyfile="ql/cashflows/cashflows.cpp" bodystart="38" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1acb27a694faf2aa28ad595f351cf3f16c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::CashFlows::maturityDate</definition>
        <argsstring>(const Leg &amp;leg)</argsstring>
        <name>maturityDate</name>
        <qualifiedname>QuantLib::CashFlows::maturityDate</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="78" column="21" bodyfile="ql/cashflows/cashflows.cpp" bodystart="52" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a277c32adc5b297bb720fcaf4112a186b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::CashFlows::isExpired</definition>
        <argsstring>(const Leg &amp;leg, bool includeSettlementDateFlows, Date settlementDate=Date())</argsstring>
        <name>isExpired</name>
        <qualifiedname>QuantLib::CashFlows::isExpired</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="79" column="21" bodyfile="ql/cashflows/cashflows.cpp" bodystart="66" bodyend="81"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>CashFlow functions</header>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1af9b58378d658ccae436e77de19639b93" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Leg::const_reverse_iterator</type>
        <definition>Leg::const_reverse_iterator QuantLib::CashFlows::previousCashFlow</definition>
        <argsstring>(const Leg &amp;leg, bool includeSettlementDateFlows, Date settlementDate=Date())</argsstring>
        <name>previousCashFlow</name>
        <qualifiedname>QuantLib::CashFlows::previousCashFlow</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>the last cashflow paying before or at the given date </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="88" column="9" bodyfile="ql/cashflows/cashflows.cpp" bodystart="84" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1afa7dce15f8c93c1b77e863e239f256eb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Leg::const_iterator</type>
        <definition>Leg::const_iterator QuantLib::CashFlows::nextCashFlow</definition>
        <argsstring>(const Leg &amp;leg, bool includeSettlementDateFlows, Date settlementDate=Date())</argsstring>
        <name>nextCashFlow</name>
        <qualifiedname>QuantLib::CashFlows::nextCashFlow</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>the first cashflow paying after the given date </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="93" column="9" bodyfile="ql/cashflows/cashflows.cpp" bodystart="102" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a2c38c32b8aa1c8f15b447420675f48b0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::CashFlows::previousCashFlowDate</definition>
        <argsstring>(const Leg &amp;leg, bool includeSettlementDateFlows, Date settlementDate=Date())</argsstring>
        <name>previousCashFlowDate</name>
        <qualifiedname>QuantLib::CashFlows::previousCashFlowDate</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="97" column="9" bodyfile="ql/cashflows/cashflows.cpp" bodystart="119" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a7903ee07fdcc719da731a85d8d21f070" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::CashFlows::nextCashFlowDate</definition>
        <argsstring>(const Leg &amp;leg, bool includeSettlementDateFlows, Date settlementDate=Date())</argsstring>
        <name>nextCashFlowDate</name>
        <qualifiedname>QuantLib::CashFlows::nextCashFlowDate</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="101" column="9" bodyfile="ql/cashflows/cashflows.cpp" bodystart="131" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1ae067857c64aad7fc5ccb4b9644b7f56f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CashFlows::previousCashFlowAmount</definition>
        <argsstring>(const Leg &amp;leg, bool includeSettlementDateFlows, Date settlementDate=Date())</argsstring>
        <name>previousCashFlowAmount</name>
        <qualifiedname>QuantLib::CashFlows::previousCashFlowAmount</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="105" column="9" bodyfile="ql/cashflows/cashflows.cpp" bodystart="143" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1abfa360cecb6270bb558732cbed409844" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CashFlows::nextCashFlowAmount</definition>
        <argsstring>(const Leg &amp;leg, bool includeSettlementDateFlows, Date settlementDate=Date())</argsstring>
        <name>nextCashFlowAmount</name>
        <qualifiedname>QuantLib::CashFlows::nextCashFlowAmount</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="109" column="9" bodyfile="ql/cashflows/cashflows.cpp" bodystart="159" bodyend="173"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Coupon inspectors</header>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1ab9b564e63f9715567daac2e7fd8b5dd1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::CashFlows::previousCouponRate</definition>
        <argsstring>(const Leg &amp;leg, bool includeSettlementDateFlows, Date settlementDate=Date())</argsstring>
        <name>previousCouponRate</name>
        <qualifiedname>QuantLib::CashFlows::previousCouponRate</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="117" column="9" bodyfile="ql/cashflows/cashflows.cpp" bodystart="215" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1aad74bc3729ee56a3ce860c689d9b0e38" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::CashFlows::nextCouponRate</definition>
        <argsstring>(const Leg &amp;leg, bool includeSettlementDateFlows, Date settlementDate=Date())</argsstring>
        <name>nextCouponRate</name>
        <qualifiedname>QuantLib::CashFlows::nextCouponRate</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="121" column="9" bodyfile="ql/cashflows/cashflows.cpp" bodystart="224" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a09bf977fe8977d2a6fbf4cfdee1af53c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CashFlows::nominal</definition>
        <argsstring>(const Leg &amp;leg, bool includeSettlementDateFlows, Date settlDate=Date())</argsstring>
        <name>nominal</name>
        <qualifiedname>QuantLib::CashFlows::nominal</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="126" column="9" bodyfile="ql/cashflows/cashflows.cpp" bodystart="232" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a9e538436ed27c36980e1fc5304262801" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::CashFlows::accrualStartDate</definition>
        <argsstring>(const Leg &amp;leg, bool includeSettlementDateFlows, Date settlDate=Date())</argsstring>
        <name>accrualStartDate</name>
        <qualifiedname>QuantLib::CashFlows::accrualStartDate</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="130" column="9" bodyfile="ql/cashflows/cashflows.cpp" bodystart="247" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a1f6beae183132ce3a0da018802a08630" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::CashFlows::accrualEndDate</definition>
        <argsstring>(const Leg &amp;leg, bool includeSettlementDateFlows, Date settlementDate=Date())</argsstring>
        <name>accrualEndDate</name>
        <qualifiedname>QuantLib::CashFlows::accrualEndDate</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="134" column="9" bodyfile="ql/cashflows/cashflows.cpp" bodystart="263" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1ae79940b99e28bb4a52113318ecbe6ba5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::CashFlows::referencePeriodStart</definition>
        <argsstring>(const Leg &amp;leg, bool includeSettlementDateFlows, Date settlDate=Date())</argsstring>
        <name>referencePeriodStart</name>
        <qualifiedname>QuantLib::CashFlows::referencePeriodStart</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="138" column="9" bodyfile="ql/cashflows/cashflows.cpp" bodystart="279" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a6d543b624f949434d9a829225dc4d071" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::CashFlows::referencePeriodEnd</definition>
        <argsstring>(const Leg &amp;leg, bool includeSettlementDateFlows, Date settlDate=Date())</argsstring>
        <name>referencePeriodEnd</name>
        <qualifiedname>QuantLib::CashFlows::referencePeriodEnd</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="142" column="9" bodyfile="ql/cashflows/cashflows.cpp" bodystart="295" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a4259a935f350056ff143b3070db03467" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        <definition>Time QuantLib::CashFlows::accrualPeriod</definition>
        <argsstring>(const Leg &amp;leg, bool includeSettlementDateFlows, Date settlementDate=Date())</argsstring>
        <name>accrualPeriod</name>
        <qualifiedname>QuantLib::CashFlows::accrualPeriod</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="146" column="9" bodyfile="ql/cashflows/cashflows.cpp" bodystart="311" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1ad0ba0d3b823238c84d62879f67476569" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date_1a2fbbbf87429ca9d86bde4e068eb028d6" kindref="member">Date::serial_type</ref></type>
        <definition>Date::serial_type QuantLib::CashFlows::accrualDays</definition>
        <argsstring>(const Leg &amp;leg, bool includeSettlementDateFlows, Date settlementDate=Date())</argsstring>
        <name>accrualDays</name>
        <qualifiedname>QuantLib::CashFlows::accrualDays</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="150" column="9" bodyfile="ql/cashflows/cashflows.cpp" bodystart="326" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a41e495f5aa3a20df38dc2829c559d7c2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        <definition>Time QuantLib::CashFlows::accruedPeriod</definition>
        <argsstring>(const Leg &amp;leg, bool includeSettlementDateFlows, Date settlementDate=Date())</argsstring>
        <name>accruedPeriod</name>
        <qualifiedname>QuantLib::CashFlows::accruedPeriod</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="154" column="9" bodyfile="ql/cashflows/cashflows.cpp" bodystart="341" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a65a14deb0b4bc168916edaf5c41defa0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date_1a2fbbbf87429ca9d86bde4e068eb028d6" kindref="member">Date::serial_type</ref></type>
        <definition>Date::serial_type QuantLib::CashFlows::accruedDays</definition>
        <argsstring>(const Leg &amp;leg, bool includeSettlementDateFlows, Date settlementDate=Date())</argsstring>
        <name>accruedDays</name>
        <qualifiedname>QuantLib::CashFlows::accruedDays</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="158" column="9" bodyfile="ql/cashflows/cashflows.cpp" bodystart="359" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a0dc332c86f3638dae1f581cf812b44f8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CashFlows::accruedAmount</definition>
        <argsstring>(const Leg &amp;leg, bool includeSettlementDateFlows, Date settlementDate=Date())</argsstring>
        <name>accruedAmount</name>
        <qualifiedname>QuantLib::CashFlows::accruedAmount</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="162" column="9" bodyfile="ql/cashflows/cashflows.cpp" bodystart="377" bodyend="394"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>YieldTermStructure functions</header>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1ac01b0e9915da82b959050a85f0573a32" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CashFlows::npv</definition>
        <argsstring>(const Leg &amp;leg, const YieldTermStructure &amp;discountCurve, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date())</argsstring>
        <name>npv</name>
        <qualifiedname>QuantLib::CashFlows::npv</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &amp;</type>
          <declname>discountCurve</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>npvDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>NPV of the cash flows. </para>
        </briefdescription>
        <detaileddescription>
<para>The NPV is the sum of the cash flows, each discounted according to the given term structure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="173" column="21" bodyfile="ql/cashflows/cashflows.cpp" bodystart="425" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a776ef7f8264224b4acaab4db0478cd3e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CashFlows::bps</definition>
        <argsstring>(const Leg &amp;leg, const YieldTermStructure &amp;discountCurve, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date())</argsstring>
        <name>bps</name>
        <qualifiedname>QuantLib::CashFlows::bps</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &amp;</type>
          <declname>discountCurve</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>npvDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>Basis-point sensitivity of the cash flows. </para>
        </briefdescription>
        <detaileddescription>
<para>The result is the change in NPV due to a uniform 1-basis-point change in the rate paid by the cash flows. The change for each coupon is discounted according to the given term structure. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="184" column="21" bodyfile="ql/cashflows/cashflows.cpp" bodystart="450" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a36b80612acd3907df2daddb32355024a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::pair&lt; Real, Real &gt; QuantLib::CashFlows::npvbps</definition>
        <argsstring>(const Leg &amp;leg, const YieldTermStructure &amp;discountCurve, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date())</argsstring>
        <name>npvbps</name>
        <qualifiedname>QuantLib::CashFlows::npvbps</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &amp;</type>
          <declname>discountCurve</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>npvDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>NPV and BPS of the cash flows. </para>
        </briefdescription>
        <detaileddescription>
<para>The NPV and BPS of the cash flows calculated together for performance reason </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="194" column="26" bodyfile="ql/cashflows/cashflows.cpp" bodystart="473" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1af0edc23afcfe034f7d9cb23b7cc69e57" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::CashFlows::atmRate</definition>
        <argsstring>(const Leg &amp;leg, const YieldTermStructure &amp;discountCurve, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date(), Real npv=Null&lt; Real &gt;())</argsstring>
        <name>atmRate</name>
        <qualifiedname>QuantLib::CashFlows::atmRate</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &amp;</type>
          <declname>discountCurve</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>npvDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>npv</declname>
          <defval><ref refid="class_quant_lib_1_1_null" kindref="compound">Null</ref>&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>At-the-money rate of the cash flows. </para>
        </briefdescription>
        <detaileddescription>
<para>The result is the fixed rate for which a fixed rate cash flow vector, equivalent to the input vector, has the required NPV according to the given term structure. If the required NPV is not given, the input cash flow vector&apos;s NPV is used instead. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="206" column="21" bodyfile="ql/cashflows/cashflows.cpp" bodystart="510" bodyend="552"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Yield (a.k.a. Internal Rate of Return, i.e. IRR) functions</header>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a64a1e341f38e3d7f93bb325426c1aeba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CashFlows::npv</definition>
        <argsstring>(const Leg &amp;leg, const InterestRate &amp;yield, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date())</argsstring>
        <name>npv</name>
        <qualifiedname>QuantLib::CashFlows::npv</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_interest_rate" kindref="compound">InterestRate</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>npvDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>NPV of the cash flows. </para>
        </briefdescription>
        <detaileddescription>
<para>The IRR is the interest rate at which the NPV of the cash flows equals the dirty price.</para>
<para>The NPV is the sum of the cash flows, each discounted according to the given constant interest rate. The result is affected by the choice of the interest-rate compounding and the relative frequency and day counter. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="225" column="21" bodyfile="ql/cashflows/cashflows.cpp" bodystart="812" bodyend="854"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a4d38ba2a3048c55a890509e8847cb7c0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CashFlows::npv</definition>
        <argsstring>(const Leg &amp;leg, Rate yield, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date())</argsstring>
        <name>npv</name>
        <qualifiedname>QuantLib::CashFlows::npv</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>yield</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>npvDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="230" column="21" bodyfile="ql/cashflows/cashflows.cpp" bodystart="856" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a4a5126e4b8da4aaafb2c501f84026846" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CashFlows::bps</definition>
        <argsstring>(const Leg &amp;leg, const InterestRate &amp;yield, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date())</argsstring>
        <name>bps</name>
        <qualifiedname>QuantLib::CashFlows::bps</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_interest_rate" kindref="compound">InterestRate</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>npvDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>Basis-point sensitivity of the cash flows. </para>
        </briefdescription>
        <detaileddescription>
<para>The result is the change in NPV due to a uniform 1-basis-point change in the rate paid by the cash flows. The change for each coupon is discounted according to the given constant interest rate. The result is affected by the choice of the interest-rate compounding and the relative frequency and day counter. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="246" column="21" bodyfile="ql/cashflows/cashflows.cpp" bodystart="869" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1ad6b2cfe32fd2de2ad32885537dd1e9d0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CashFlows::bps</definition>
        <argsstring>(const Leg &amp;leg, Rate yield, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date())</argsstring>
        <name>bps</name>
        <qualifiedname>QuantLib::CashFlows::bps</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>yield</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>npvDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="251" column="21" bodyfile="ql/cashflows/cashflows.cpp" bodystart="891" bodyend="902"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1adc93e9e6a163c8eace956efa1e80c679" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::CashFlows::yield</definition>
        <argsstring>(const Leg &amp;leg, Real npv, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date(), Real accuracy=1.0e-10, Size maxIterations=100, Rate guess=0.05)</argsstring>
        <name>yield</name>
        <qualifiedname>QuantLib::CashFlows::yield</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>npv</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>npvDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.0e-10</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxIterations</declname>
          <defval>100</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>guess</declname>
          <defval>0.05</defval>
        </param>
        <briefdescription>
<para>Implied internal rate of return. </para>
        </briefdescription>
        <detaileddescription>
<para>The function verifies the theoretical existence of an IRR and numerically establishes the IRR to the desired precision. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="264" column="21" bodyfile="ql/cashflows/cashflows.cpp" bodystart="904" bodyend="922"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a0d1cf2bfddc0536cc58d097899b9bcbc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Solver</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>static Rate QuantLib::CashFlows::yield</definition>
        <argsstring>(const Solver &amp;solver, const Leg &amp;leg, Real npv, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date(), Real accuracy=1.0e-10, Rate guess=0.05)</argsstring>
        <name>yield</name>
        <qualifiedname>QuantLib::CashFlows::yield</qualifiedname>
        <param>
          <type>const Solver &amp;</type>
          <declname>solver</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>npv</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>npvDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.0e-10</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>guess</declname>
          <defval>0.05</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="277" column="21" bodyfile="ql/cashflows/cashflows.hpp" bodystart="277" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a589b61017bd4d60e113041b31126eff0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        <definition>Time QuantLib::CashFlows::duration</definition>
        <argsstring>(const Leg &amp;leg, const InterestRate &amp;yield, Duration::Type type, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date())</argsstring>
        <name>duration</name>
        <qualifiedname>QuantLib::CashFlows::duration</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_interest_rate" kindref="compound">InterestRate</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type>Duration::Type</type>
          <declname>type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>npvDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>Cash-flow duration. </para>
        </briefdescription>
        <detaileddescription>
<para>The simple duration of a string of cash flows is defined as   <formula id="14">\[D_{\mathrm{simple}} = \frac{\sum t_i c_i B(t_i)}{\sum c_i B(t_i)}
\]</formula> where <formula id="15">$ c_i $</formula> is the amount of the <formula id="16">$ i $</formula>-th cash flow, <formula id="17">$ t_i $</formula> is its payment time, and <formula id="18">$ B(t_i) $</formula> is the corresponding discount according to the passed yield.</para>
<para>The modified duration is defined as   <formula id="19">\[D_{\mathrm{modified}} = -\frac{1}{P} \frac{\partial P}{\partial y}
\]</formula> where <formula id="0">$ P $</formula> is the present value of the cash flows according to the given IRR <formula id="20">$ y $</formula>.</para>
<para>The Macaulay duration is defined for a compounded IRR as    <formula id="21">\[D_{\mathrm{Macaulay}} = \left( 1 + \frac{y}{N} \right)
                        D_{\mathrm{modified}}
\]</formula> where <formula id="20">$ y $</formula> is the IRR and <formula id="4">$ N $</formula> is the number of cash flows per year. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="318" column="21" bodyfile="ql/cashflows/cashflows.cpp" bodystart="925" bodyend="957"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a2fb0b0d19c7248bfa8f685f154cc6ce0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        <definition>Time QuantLib::CashFlows::duration</definition>
        <argsstring>(const Leg &amp;leg, Rate yield, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, Duration::Type type, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date())</argsstring>
        <name>duration</name>
        <qualifiedname>QuantLib::CashFlows::duration</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>yield</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type>Duration::Type</type>
          <declname>type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>npvDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="324" column="21" bodyfile="ql/cashflows/cashflows.cpp" bodystart="959" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1af67ed24af5a5517cd47192899ee53837" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CashFlows::convexity</definition>
        <argsstring>(const Leg &amp;leg, const InterestRate &amp;yield, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date())</argsstring>
        <name>convexity</name>
        <qualifiedname>QuantLib::CashFlows::convexity</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_interest_rate" kindref="compound">InterestRate</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>npvDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>Cash-flow convexity. </para>
        </briefdescription>
        <detaileddescription>
<para>The convexity of a string of cash flows is defined as   <formula id="22">\[C = \frac{1}{P} \frac{\partial^2 P}{\partial y^2}
\]</formula> where <formula id="0">$ P $</formula> is the present value of the cash flows according to the given IRR <formula id="20">$ y $</formula>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="342" column="21" bodyfile="ql/cashflows/cashflows.cpp" bodystart="974" bodyend="1042"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a5a7642ddfa4d853b35874c1003a45ac6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CashFlows::convexity</definition>
        <argsstring>(const Leg &amp;leg, Rate yield, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date())</argsstring>
        <name>convexity</name>
        <qualifiedname>QuantLib::CashFlows::convexity</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>yield</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>npvDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="347" column="21" bodyfile="ql/cashflows/cashflows.cpp" bodystart="1045" bodyend="1056"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a56faa54b15f6e8f553864a74983bae84" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CashFlows::basisPointValue</definition>
        <argsstring>(const Leg &amp;leg, const InterestRate &amp;yield, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date())</argsstring>
        <name>basisPointValue</name>
        <qualifiedname>QuantLib::CashFlows::basisPointValue</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_interest_rate" kindref="compound">InterestRate</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>npvDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>Basis-point value. </para>
        </briefdescription>
        <detaileddescription>
<para>Obtained by setting dy = 0.0001 in the 2nd-order Taylor series expansion. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="360" column="21" bodyfile="ql/cashflows/cashflows.cpp" bodystart="1058" bodyend="1090"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1ace0c41eb0f02683b65db1792575494f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CashFlows::basisPointValue</definition>
        <argsstring>(const Leg &amp;leg, Rate yield, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date())</argsstring>
        <name>basisPointValue</name>
        <qualifiedname>QuantLib::CashFlows::basisPointValue</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>yield</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>npvDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="365" column="21" bodyfile="ql/cashflows/cashflows.cpp" bodystart="1092" bodyend="1103"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a6d383942f59f4014d31d5292eee017f8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CashFlows::yieldValueBasisPoint</definition>
        <argsstring>(const Leg &amp;leg, const InterestRate &amp;yield, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date())</argsstring>
        <name>yieldValueBasisPoint</name>
        <qualifiedname>QuantLib::CashFlows::yieldValueBasisPoint</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_interest_rate" kindref="compound">InterestRate</ref> &amp;</type>
          <declname>yield</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>npvDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>Yield value of a basis point. </para>
        </briefdescription>
        <detaileddescription>
<para>The yield value of a one basis point change in price is the derivative of the yield with respect to the price multiplied by 0.01 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="379" column="21" bodyfile="ql/cashflows/cashflows.cpp" bodystart="1105" bodyend="1129"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a6775ddbe980e65077ce1048e7f859159" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CashFlows::yieldValueBasisPoint</definition>
        <argsstring>(const Leg &amp;leg, Rate yield, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date())</argsstring>
        <name>yieldValueBasisPoint</name>
        <qualifiedname>QuantLib::CashFlows::yieldValueBasisPoint</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>yield</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>npvDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="384" column="21" bodyfile="ql/cashflows/cashflows.cpp" bodystart="1131" bodyend="1142"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Z-spread functions</header>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a3222a07dd654272a8214da9dd9a0d916" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CashFlows::npv</definition>
        <argsstring>(const Leg &amp;leg, const ext::shared_ptr&lt; YieldTermStructure &gt; &amp;discount, Spread zSpread, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date())</argsstring>
        <name>npv</name>
        <qualifiedname>QuantLib::CashFlows::npv</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
          <declname>discount</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref></type>
          <declname>zSpread</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>npvDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>NPV of the cash flows. </para>
        </briefdescription>
        <detaileddescription>
<para>For details on z-spread refer to: &quot;Credit Spreads Explained&quot;, Lehman Brothers European Fixed Income Research - March 2004, D. O&apos;Kane</para>
<para>The NPV is the sum of the cash flows, each discounted according to the z-spreaded term structure. The result is affected by the choice of the z-spread compounding and the relative frequency and day counter. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="406" column="21" bodyfile="ql/cashflows/cashflows.cpp" bodystart="1194" bodyend="1226"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a374eced8a3a8b0fcaeddf4b374139629" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref></type>
        <definition>Spread QuantLib::CashFlows::zSpread</definition>
        <argsstring>(const Leg &amp;leg, Real npv, const ext::shared_ptr&lt; YieldTermStructure &gt; &amp;, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date(), Real accuracy=1.0e-10, Size maxIterations=100, Rate guess=0.0)</argsstring>
        <name>zSpread</name>
        <qualifiedname>QuantLib::CashFlows::zSpread</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>npv</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
          <defname>discount</defname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>npvDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.0e-10</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxIterations</declname>
          <defval>100</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>guess</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>implied Z-spread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="416" column="23" bodyfile="ql/cashflows/cashflows.cpp" bodystart="1228" bodyend="1256"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1ad6f1d7c6df0dac69827b5d4269f4edf5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref></type>
        <definition>static Spread QuantLib::CashFlows::zSpread</definition>
        <argsstring>(const Leg &amp;leg, const ext::shared_ptr&lt; YieldTermStructure &gt; &amp;d, Real npv, const DayCounter &amp;dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date(), Real accuracy=1.0e-10, Size maxIterations=100, Rate guess=0.0)</argsstring>
        <name>zSpread</name>
        <qualifiedname>QuantLib::CashFlows::zSpread</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>npv</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>compounding</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeSettlementDateFlows</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>npvDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.0e-10</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxIterations</declname>
          <defval>100</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>guess</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use the other overload. Deprecated in version 1.35. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="432" column="23" bodyfile="ql/cashflows/cashflows.hpp" bodystart="432" bodyend="447"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a8d08b107e6ba2c87b39a5f1f475d91d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::CashFlows::CashFlows</definition>
        <argsstring>()=delete</argsstring>
        <name>CashFlows</name>
        <qualifiedname>QuantLib::CashFlows::CashFlows</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="68" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a626e16fe1a341528657c79071111e977" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::CashFlows::CashFlows</definition>
        <argsstring>(CashFlows &amp;&amp;)=delete</argsstring>
        <name>CashFlows</name>
        <qualifiedname>QuantLib::CashFlows::CashFlows</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_cash_flows" kindref="compound">CashFlows</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="69" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1ab6b4d5112d98e8de42ec013c180f186a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::CashFlows::CashFlows</definition>
        <argsstring>(const CashFlows &amp;)=delete</argsstring>
        <name>CashFlows</name>
        <qualifiedname>QuantLib::CashFlows::CashFlows</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_cash_flows" kindref="compound">CashFlows</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="70" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1aa7e2411c31a19ce90ecea70791ead873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_cash_flows" kindref="compound">CashFlows</ref> &amp;</type>
        <definition>CashFlows &amp; QuantLib::CashFlows::operator=</definition>
        <argsstring>(CashFlows &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>QuantLib::CashFlows::operator=</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_cash_flows" kindref="compound">CashFlows</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="71" column="19"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1a31a972b1de3ff49b28bd0aea63a1ff18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_cash_flows" kindref="compound">CashFlows</ref> &amp;</type>
        <definition>CashFlows &amp; QuantLib::CashFlows::operator=</definition>
        <argsstring>(const CashFlows &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>QuantLib::CashFlows::operator=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_cash_flows" kindref="compound">CashFlows</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="72" column="19"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cash_flows_1ac6f140cf96c6745cd1e9e613204c9e28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::CashFlows::~CashFlows</definition>
        <argsstring>()=default</argsstring>
        <name>~CashFlows</name>
        <qualifiedname>QuantLib::CashFlows::~CashFlows</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflows.hpp" line="73" column="9"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>cashflow-analysis functions </para>
    </briefdescription>
    <detaileddescription>
<para><xrefsect id="todo_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>add tests </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <location file="ql/cashflows/cashflows.hpp" line="41" column="5" bodyfile="ql/cashflows/cashflows.hpp" bodystart="41" bodyend="450"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_cash_flows_1ad0ba0d3b823238c84d62879f67476569" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>accrualDays</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a1f6beae183132ce3a0da018802a08630" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>accrualEndDate</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a4259a935f350056ff143b3070db03467" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>accrualPeriod</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a9e538436ed27c36980e1fc5304262801" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>accrualStartDate</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a0dc332c86f3638dae1f581cf812b44f8" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>accruedAmount</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a65a14deb0b4bc168916edaf5c41defa0" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>accruedDays</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a41e495f5aa3a20df38dc2829c559d7c2" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>accruedPeriod</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1af0edc23afcfe034f7d9cb23b7cc69e57" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>atmRate</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a56faa54b15f6e8f553864a74983bae84" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>basisPointValue</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1ace0c41eb0f02683b65db1792575494f4" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>basisPointValue</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a776ef7f8264224b4acaab4db0478cd3e" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>bps</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a4a5126e4b8da4aaafb2c501f84026846" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>bps</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1ad6b2cfe32fd2de2ad32885537dd1e9d0" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>bps</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a8d08b107e6ba2c87b39a5f1f475d91d9" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>CashFlows</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a626e16fe1a341528657c79071111e977" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>CashFlows</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1ab6b4d5112d98e8de42ec013c180f186a" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>CashFlows</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1af67ed24af5a5517cd47192899ee53837" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>convexity</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a5a7642ddfa4d853b35874c1003a45ac6" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>convexity</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a589b61017bd4d60e113041b31126eff0" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>duration</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a2fb0b0d19c7248bfa8f685f154cc6ce0" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>duration</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a277c32adc5b297bb720fcaf4112a186b" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>isExpired</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1acb27a694faf2aa28ad595f351cf3f16c" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>maturityDate</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1afa7dce15f8c93c1b77e863e239f256eb" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>nextCashFlow</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1abfa360cecb6270bb558732cbed409844" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>nextCashFlowAmount</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a7903ee07fdcc719da731a85d8d21f070" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>nextCashFlowDate</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1aad74bc3729ee56a3ce860c689d9b0e38" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>nextCouponRate</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a09bf977fe8977d2a6fbf4cfdee1af53c" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>nominal</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1ac01b0e9915da82b959050a85f0573a32" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>npv</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a64a1e341f38e3d7f93bb325426c1aeba" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>npv</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a4d38ba2a3048c55a890509e8847cb7c0" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>npv</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a3222a07dd654272a8214da9dd9a0d916" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>npv</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a36b80612acd3907df2daddb32355024a" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>npvbps</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1aa7e2411c31a19ce90ecea70791ead873" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a31a972b1de3ff49b28bd0aea63a1ff18" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1af9b58378d658ccae436e77de19639b93" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>previousCashFlow</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1ae067857c64aad7fc5ccb4b9644b7f56f" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>previousCashFlowAmount</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a2c38c32b8aa1c8f15b447420675f48b0" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>previousCashFlowDate</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1ab9b564e63f9715567daac2e7fd8b5dd1" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>previousCouponRate</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a6d543b624f949434d9a829225dc4d071" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>referencePeriodEnd</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1ae79940b99e28bb4a52113318ecbe6ba5" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>referencePeriodStart</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a7ede1ef38f187ad5ecf6480ed45d4d4f" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>startDate</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1adc93e9e6a163c8eace956efa1e80c679" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>yield</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a0d1cf2bfddc0536cc58d097899b9bcbc" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>yield</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a6d383942f59f4014d31d5292eee017f8" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>yieldValueBasisPoint</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a6775ddbe980e65077ce1048e7f859159" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>yieldValueBasisPoint</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1a374eced8a3a8b0fcaeddf4b374139629" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>zSpread</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1ad6f1d7c6df0dac69827b5d4269f4edf5" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>zSpread</name></member>
      <member refid="class_quant_lib_1_1_cash_flows_1ac6f140cf96c6745cd1e9e613204c9e28" prot="public" virt="non-virtual"><scope>QuantLib::CashFlows</scope><name>~CashFlows</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
