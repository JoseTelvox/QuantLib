<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_credit_default_swap" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::CreditDefaultSwap</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_instrument" prot="public" virt="non-virtual">QuantLib::Instrument</basecompoundref>
    <includes refid="creditdefaultswap_8hpp" local="no">creditdefaultswap.hpp</includes>
    <innerclass refid="class_quant_lib_1_1_credit_default_swap_1_1arguments" prot="public">QuantLib::CreditDefaultSwap::arguments</innerclass>
    <innerclass refid="class_quant_lib_1_1_credit_default_swap_1_1engine" prot="public">QuantLib::CreditDefaultSwap::engine</innerclass>
    <innerclass refid="class_quant_lib_1_1_credit_default_swap_1_1results" prot="public">QuantLib::CreditDefaultSwap::results</innerclass>
    <sectiondef kind="user-defined">
      <header>Instrument interface</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_credit_default_swap_1a93f59331d95a1559460df10c7329de08" prot="protected" static="no" mutable="no">
        <type>Protection::Side</type>
        <definition>Protection::Side QuantLib::CreditDefaultSwap::side_</definition>
        <argsstring></argsstring>
        <name>side_</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::side_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="283" column="26" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_credit_default_swap_1a5b6f22c3de7500120b8ee02ee9a5f941" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CreditDefaultSwap::notional_</definition>
        <argsstring></argsstring>
        <name>notional_</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::notional_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="284" column="14" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_credit_default_swap_1a9ea8d397847cfd35dc6d27349b92a53f" prot="protected" static="no" mutable="no">
        <type>ext::optional&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt;</type>
        <definition>ext::optional&lt;Rate&gt; QuantLib::CreditDefaultSwap::upfront_</definition>
        <argsstring></argsstring>
        <name>upfront_</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::upfront_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="285" column="23" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_credit_default_swap_1a8e2b506e77127912cf83b58d4b300077" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::CreditDefaultSwap::runningSpread_</definition>
        <argsstring></argsstring>
        <name>runningSpread_</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::runningSpread_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="286" column="14" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_credit_default_swap_1a749292ed6759a181b9983d115aa3c34e" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::CreditDefaultSwap::settlesAccrual_</definition>
        <argsstring></argsstring>
        <name>settlesAccrual_</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::settlesAccrual_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="287" column="14" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_credit_default_swap_1ad937e168c3542607ae91cc042b71e638" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::CreditDefaultSwap::paysAtDefaultTime_</definition>
        <argsstring></argsstring>
        <name>paysAtDefaultTime_</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::paysAtDefaultTime_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="287" column="30" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_credit_default_swap_1af1de1b99480c31000416d1ab25739b61" prot="protected" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_claim" kindref="compound">Claim</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;Claim&gt; QuantLib::CreditDefaultSwap::claim_</definition>
        <argsstring></argsstring>
        <name>claim_</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::claim_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="288" column="25" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="288" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_credit_default_swap_1a308242481975648a8186121c8ab54e30" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref></type>
        <definition>Leg QuantLib::CreditDefaultSwap::leg_</definition>
        <argsstring></argsstring>
        <name>leg_</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::leg_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="289" column="13" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_credit_default_swap_1a6ba6f047b2b29d19290f9e6f97c2df09" prot="protected" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_simple_cash_flow" kindref="compound">SimpleCashFlow</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;SimpleCashFlow&gt; QuantLib::CreditDefaultSwap::upfrontPayment_</definition>
        <argsstring></argsstring>
        <name>upfrontPayment_</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::upfrontPayment_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="290" column="25" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_credit_default_swap_1add7cf9e24b01464eea99f8e6a6f6b158" prot="protected" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_simple_cash_flow" kindref="compound">SimpleCashFlow</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;SimpleCashFlow&gt; QuantLib::CreditDefaultSwap::accrualRebate_</definition>
        <argsstring></argsstring>
        <name>accrualRebate_</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::accrualRebate_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="291" column="25" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_credit_default_swap_1aac6ec03e413ac3830f9cdb939b984671" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::CreditDefaultSwap::protectionStart_</definition>
        <argsstring></argsstring>
        <name>protectionStart_</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::protectionStart_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="292" column="14" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_credit_default_swap_1aa8fa19efd6c8ca534f30baf73b384c19" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::CreditDefaultSwap::tradeDate_</definition>
        <argsstring></argsstring>
        <name>tradeDate_</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::tradeDate_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="293" column="14" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_credit_default_swap_1a32cbea5584e57ca08e4d5d61fd25039d" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref></type>
        <definition>Natural QuantLib::CreditDefaultSwap::cashSettlementDays_</definition>
        <argsstring></argsstring>
        <name>cashSettlementDays_</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::cashSettlementDays_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="294" column="17" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_credit_default_swap_1ac8e9d92d65d48327f5f2a77ce97d5b90" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::CreditDefaultSwap::maturity_</definition>
        <argsstring></argsstring>
        <name>maturity_</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::maturity_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="295" column="14" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_credit_default_swap_1a6bd4739d35a021936c59e01a5fa9e48b" prot="protected" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::CreditDefaultSwap::fairUpfront_</definition>
        <argsstring></argsstring>
        <name>fairUpfront_</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::fairUpfront_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="297" column="22" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_credit_default_swap_1a8ec4a85a19b64543a8a81ddd4f4bb518" prot="protected" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::CreditDefaultSwap::fairSpread_</definition>
        <argsstring></argsstring>
        <name>fairSpread_</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::fairSpread_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="298" column="22" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_credit_default_swap_1a12454534cd77abeae26ab62bcada0fae" prot="protected" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CreditDefaultSwap::couponLegBPS_</definition>
        <argsstring></argsstring>
        <name>couponLegBPS_</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::couponLegBPS_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="299" column="22" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_credit_default_swap_1a661c3dc1e4ba8307fe0182e409d258c9" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CreditDefaultSwap::couponLegNPV_</definition>
        <argsstring></argsstring>
        <name>couponLegNPV_</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::couponLegNPV_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="299" column="36" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_credit_default_swap_1a7e0a02b4ceaeac917e65967933015527" prot="protected" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CreditDefaultSwap::upfrontBPS_</definition>
        <argsstring></argsstring>
        <name>upfrontBPS_</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::upfrontBPS_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="300" column="22" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_credit_default_swap_1a1d4f1db6a60a1a0ba077e743de52b9d7" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CreditDefaultSwap::upfrontNPV_</definition>
        <argsstring></argsstring>
        <name>upfrontNPV_</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::upfrontNPV_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="300" column="34" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_credit_default_swap_1af2f710c5dd6094a4049b4e74ba702dea" prot="protected" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CreditDefaultSwap::defaultLegNPV_</definition>
        <argsstring></argsstring>
        <name>defaultLegNPV_</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::defaultLegNPV_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="301" column="22" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_credit_default_swap_1a52dda7c57423f3a5da384b8cf4ef8b4e" prot="protected" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CreditDefaultSwap::accrualRebateNPV_</definition>
        <argsstring></argsstring>
        <name>accrualRebateNPV_</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::accrualRebateNPV_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="302" column="22" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1afb91ae4bc5ff8c6bff6d5b5fe4895624" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool QuantLib::CreditDefaultSwap::isExpired</definition>
        <argsstring>() const override</argsstring>
        <name>isExpired</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::isExpired</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_instrument_1a121a2a929b179900744a58272d46aefe">isExpired</reimplements>
        <briefdescription>
<para>returns whether the instrument might have value greater than zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="170" column="14" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="207" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1a563c1d0f57171a654f739dc45fd7088b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::CreditDefaultSwap::setupArguments</definition>
        <argsstring>(PricingEngine::arguments *) const override</argsstring>
        <name>setupArguments</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::setupArguments</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_instrument_1af7344eebc48a1a361386e5c5a90a8fcc">setupArguments</reimplements>
        <param>
          <type><ref refid="class_quant_lib_1_1_pricing_engine_1_1arguments" kindref="compound">PricingEngine::arguments</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When a derived argument structure is defined for an instrument, this method should be overridden to fill it. This is mandatory in case a pricing engine is used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="171" column="14" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="222" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1a53cb75af0223286edb1da28f31e90a35" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::CreditDefaultSwap::fetchResults</definition>
        <argsstring>(const PricingEngine::results *) const override</argsstring>
        <name>fetchResults</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::fetchResults</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_instrument_1aebe809131db2941325d037c031bbf41b">fetchResults</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_pricing_engine_1_1results" kindref="compound">PricingEngine::results</ref> *</type>
          <defname>r</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When a derived result structure is defined for an instrument, this method should be overridden to read from it. This is mandatory in case a pricing engine is used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="172" column="14" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="242" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1a2b09907de34836832eba08eda2e57526" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::CreditDefaultSwap::setupExpired</definition>
        <argsstring>() const override</argsstring>
        <name>setupExpired</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::setupExpired</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_instrument_1a73d90597fcd3ff52a8aed674393ab574">setupExpired</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must leave the instrument in a consistent state when the expiration condition is met. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="280" column="14" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="215" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1aae572d15be3b5fb78b4e1ceb3a08c24b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::CreditDefaultSwap::init</definition>
        <argsstring>(const Schedule &amp;schedule, BusinessDayConvention paymentConvention, const DayCounter &amp;dayCounter, const DayCounter &amp;lastPeriodDayCounter, bool rebatesAccrual, const Date &amp;upfrontDate=Date())</argsstring>
        <name>init</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::init</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_schedule" kindref="compound">Schedule</ref> &amp;</type>
          <declname>schedule</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881" kindref="member">BusinessDayConvention</ref></type>
          <declname>paymentConvention</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>lastPeriodDayCounter</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>rebatesAccrual</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>upfrontDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>Shared initialisation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="306" column="14" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="87" bodyend="176"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Constructors</header>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1a0aadbf6b822fae4c4f6f7bc8fd16568b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::CreditDefaultSwap::CreditDefaultSwap</definition>
        <argsstring>(Protection::Side side, Real notional, Rate spread, const Schedule &amp;schedule, BusinessDayConvention paymentConvention, const DayCounter &amp;dayCounter, bool settlesAccrual=true, bool paysAtDefaultTime=true, const Date &amp;protectionStart=Date(), ext::shared_ptr&lt; Claim &gt;=ext::shared_ptr&lt; Claim &gt;(), const DayCounter &amp;lastPeriodDayCounter=DayCounter(), bool rebatesAccrual=true, const Date &amp;tradeDate=Date(), Natural cashSettlementDays=3)</argsstring>
        <name>CreditDefaultSwap</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::CreditDefaultSwap</qualifiedname>
        <param>
          <type>Protection::Side</type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>notional</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>spread</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_schedule" kindref="compound">Schedule</ref> &amp;</type>
          <declname>schedule</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881" kindref="member">BusinessDayConvention</ref></type>
          <declname>paymentConvention</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>settlesAccrual</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>paysAtDefaultTime</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>protectionStart</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_claim" kindref="compound">Claim</ref> &gt;</type>
          <defname>claim</defname>
          <defval>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_claim" kindref="compound">Claim</ref> &gt;()</defval>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>lastPeriodDayCounter</declname>
          <defval><ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>rebatesAccrual</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>tradeDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref></type>
          <declname>cashSettlementDays</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
<para>CDS quoted as running-spread only. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>side</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the protection is bought or sold. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>notional</parametername>
</parameternamelist>
<parameterdescription>
<para>Notional value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spread</parametername>
</parameternamelist>
<parameterdescription>
<para>Running spread in fractional units. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>schedule</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_quant_lib_1_1_coupon" kindref="compound">Coupon</ref> schedule. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paymentConvention</parametername>
</parameternamelist>
<parameterdescription>
<para>Business-day convention for payment-date adjustment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dayCounter</parametername>
</parameternamelist>
<parameterdescription>
<para>Day-count convention for accrual. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>settlesAccrual</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not the accrued coupon is due in the event of a default. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paysAtDefaultTime</parametername>
</parameternamelist>
<parameterdescription>
<para>If set to true, any payments triggered by a default event are due at default time. If set to false, they are due at the end of the accrual period. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>protectionStart</parametername>
</parameternamelist>
<parameterdescription>
<para>The first date where a default event will trigger the contract. Before the CDS Big Bang 2009, this was typically trade date (T) + 1 calendar day. After the CDS Big Bang 2009, protection is typically effective immediately i.e. on trade date so this is what should be entered for protection start. Notice that there is no default lookback period and protection start here. In the way it determines the dirty amount it is more like the trade execution date. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lastPeriodDayCounter</parametername>
</parameternamelist>
<parameterdescription>
<para>Day-count convention for accrual in last period </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rebatesAccrual</parametername>
</parameternamelist>
<parameterdescription>
<para>The protection seller pays the accrued scheduled current coupon at the start of the contract. The rebate date is not provided but computed to be two days after protection start. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tradeDate</parametername>
</parameternamelist>
<parameterdescription>
<para>The contract&apos;s trade date. It will be used with the <computeroutput>cashSettlementDays</computeroutput> to determine the date on which the cash settlement amount is paid. If not given, the trade date is guessed from the protection start date and <computeroutput>schedule</computeroutput> date generation rule. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cashSettlementDays</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of business days from <computeroutput>tradeDate</computeroutput> to cash settlement date. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="99" column="9" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="39" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1aecc6210d07a85ea30d81db52e7fbc616" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::CreditDefaultSwap::CreditDefaultSwap</definition>
        <argsstring>(Protection::Side side, Real notional, Rate upfront, Rate spread, const Schedule &amp;schedule, BusinessDayConvention paymentConvention, const DayCounter &amp;dayCounter, bool settlesAccrual=true, bool paysAtDefaultTime=true, const Date &amp;protectionStart=Date(), const Date &amp;upfrontDate=Date(), ext::shared_ptr&lt; Claim &gt;=ext::shared_ptr&lt; Claim &gt;(), const DayCounter &amp;lastPeriodDayCounter=DayCounter(), bool rebatesAccrual=true, const Date &amp;tradeDate=Date(), Natural cashSettlementDays=3)</argsstring>
        <name>CreditDefaultSwap</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::CreditDefaultSwap</qualifiedname>
        <param>
          <type>Protection::Side</type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>notional</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>upfront</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>spread</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_schedule" kindref="compound">Schedule</ref> &amp;</type>
          <declname>schedule</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881" kindref="member">BusinessDayConvention</ref></type>
          <declname>paymentConvention</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>settlesAccrual</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>paysAtDefaultTime</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>protectionStart</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>upfrontDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_claim" kindref="compound">Claim</ref> &gt;</type>
          <defname>claim</defname>
          <defval>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_claim" kindref="compound">Claim</ref> &gt;()</defval>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>lastPeriodDayCounter</declname>
          <defval><ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>rebatesAccrual</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>tradeDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref></type>
          <declname>cashSettlementDays</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
<para>CDS quoted as upfront and running spread. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>side</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the protection is bought or sold. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>notional</parametername>
</parameternamelist>
<parameterdescription>
<para>Notional value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upfront</parametername>
</parameternamelist>
<parameterdescription>
<para>Upfront in fractional units. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spread</parametername>
</parameternamelist>
<parameterdescription>
<para>Running spread in fractional units. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>schedule</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_quant_lib_1_1_coupon" kindref="compound">Coupon</ref> schedule. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paymentConvention</parametername>
</parameternamelist>
<parameterdescription>
<para>Business-day convention for payment-date adjustment. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dayCounter</parametername>
</parameternamelist>
<parameterdescription>
<para>Day-count convention for accrual. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>settlesAccrual</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not the accrued coupon is due in the event of a default. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>paysAtDefaultTime</parametername>
</parameternamelist>
<parameterdescription>
<para>If set to true, any payments triggered by a default event are due at default time. If set to false, they are due at the end of the accrual period. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>protectionStart</parametername>
</parameternamelist>
<parameterdescription>
<para>The first date where a default event will trigger the contract. Before the CDS Big Bang 2009, this was typically trade date (T) + 1 calendar day. After the CDS Big Bang 2009, protection is typically effective immediately i.e. on trade date so this is what should be entered for protection start. Notice that there is no default lookback period and protection start here. In the way it determines the dirty amount it is more like the trade execution date. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upfrontDate</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_quant_lib_1_1_settlement" kindref="compound">Settlement</ref> date for the upfront and accrual rebate (if any) payments. Typically T+3, this is also the default value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lastPeriodDayCounter</parametername>
</parameternamelist>
<parameterdescription>
<para>Day-count convention for accrual in last period </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rebatesAccrual</parametername>
</parameternamelist>
<parameterdescription>
<para>The protection seller pays the accrued scheduled current coupon at the start of the contract. The rebate date is not provided but computed to be two days after protection start. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tradeDate</parametername>
</parameternamelist>
<parameterdescription>
<para>The contract&apos;s trade date. It will be used with the <computeroutput>cashSettlementDays</computeroutput> to determine the date on which the cash settlement amount is paid if <computeroutput>upfrontDate</computeroutput> is empty. If not given, the trade date is guessed from the protection start date and <computeroutput>schedule</computeroutput> date generation rule. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cashSettlementDays</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of business days from <computeroutput>tradeDate</computeroutput> to cash settlement date. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="151" column="9" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="62" bodyend="85"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Inspectors</header>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1af5cc96cb5ac01cded1e02120c07724f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Protection::Side</type>
        <definition>Protection::Side QuantLib::CreditDefaultSwap::side</definition>
        <argsstring>() const</argsstring>
        <name>side</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::side</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="176" column="26" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="178" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1a0b3fbbf9c09ea506c237a5aaa5ff172b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CreditDefaultSwap::notional</definition>
        <argsstring>() const</argsstring>
        <name>notional</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::notional</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="177" column="14" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="182" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1abe8e4f961ef60691e026ad9c294f716f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::CreditDefaultSwap::runningSpread</definition>
        <argsstring>() const</argsstring>
        <name>runningSpread</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::runningSpread</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="178" column="14" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="186" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1adbad916cc925be3e6cf4eb65a5d26925" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>ext::optional&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt;</type>
        <definition>ext::optional&lt; Rate &gt; QuantLib::CreditDefaultSwap::upfront</definition>
        <argsstring>() const</argsstring>
        <name>upfront</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::upfront</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="179" column="23" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="190" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1a97ae82c5e9c06c464845a49666d23fe5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::CreditDefaultSwap::settlesAccrual</definition>
        <argsstring>() const</argsstring>
        <name>settlesAccrual</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::settlesAccrual</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="180" column="14" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="194" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1a5d2c31f8561beed2e9481ce68118dd58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::CreditDefaultSwap::paysAtDefaultTime</definition>
        <argsstring>() const</argsstring>
        <name>paysAtDefaultTime</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::paysAtDefaultTime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="181" column="14" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="198" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1adf92fae87a74030521182a62db36f3dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
        <definition>const Leg &amp; QuantLib::CreditDefaultSwap::coupons</definition>
        <argsstring>() const</argsstring>
        <name>coupons</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::coupons</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="182" column="19" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="202" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1a36bc6bcc991990fba383a932d7ebc0b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        <definition>const Date &amp; QuantLib::CreditDefaultSwap::protectionStartDate</definition>
        <argsstring>() const</argsstring>
        <name>protectionStartDate</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::protectionStartDate</qualifiedname>
        <briefdescription>
<para>The first date for which defaults will trigger the contract. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="184" column="20" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="426" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1a068a2781ca3d7ddc6a0846abf00f3d34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        <definition>const Date &amp; QuantLib::CreditDefaultSwap::protectionEndDate</definition>
        <argsstring>() const</argsstring>
        <name>protectionEndDate</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::protectionEndDate</qualifiedname>
        <briefdescription>
<para>The last date for which defaults will trigger the contract. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="186" column="20" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="430" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1a70388367f7929c1032baba0cf8f6a9fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::CreditDefaultSwap::rebatesAccrual</definition>
        <argsstring>() const</argsstring>
        <name>rebatesAccrual</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::rebatesAccrual</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="187" column="14" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="187" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1a7ab34592651db3667f5befdc0daf40a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_simple_cash_flow" kindref="compound">SimpleCashFlow</ref> &gt; &amp;</type>
        <definition>const ext::shared_ptr&lt; SimpleCashFlow &gt; &amp; QuantLib::CreditDefaultSwap::upfrontPayment</definition>
        <argsstring>() const</argsstring>
        <name>upfrontPayment</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::upfrontPayment</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="188" column="31" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="435" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1a37fd3f28fce8d5e808d1373f4e5aa031" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_simple_cash_flow" kindref="compound">SimpleCashFlow</ref> &gt; &amp;</type>
        <definition>const ext::shared_ptr&lt; SimpleCashFlow &gt; &amp; QuantLib::CreditDefaultSwap::accrualRebate</definition>
        <argsstring>() const</argsstring>
        <name>accrualRebate</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::accrualRebate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="189" column="31" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="439" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1ae5bcac6b3798a150ec32036bf3695473" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        <definition>const Date &amp; QuantLib::CreditDefaultSwap::tradeDate</definition>
        <argsstring>() const</argsstring>
        <name>tradeDate</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::tradeDate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="190" column="20" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="443" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1acee7eab582ab6833ea666771d23be55f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref></type>
        <definition>Natural QuantLib::CreditDefaultSwap::cashSettlementDays</definition>
        <argsstring>() const</argsstring>
        <name>cashSettlementDays</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::cashSettlementDays</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="191" column="17" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="447" bodyend="449"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Results</header>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1a89cb25e2417a552e11311f64f8a8c519" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::CreditDefaultSwap::fairUpfront</definition>
        <argsstring>() const</argsstring>
        <name>fairUpfront</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::fairUpfront</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the upfront spread that, given the running spread and the quoted recovery rate, will make the instrument have an NPV of 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="199" column="14" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="259" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1a286e703f20753abeef1df56ff1e137e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::CreditDefaultSwap::fairSpread</definition>
        <argsstring>() const</argsstring>
        <name>fairSpread</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::fairSpread</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the running spread that, given the quoted recovery rate, will make the running-only CDS have an NPV of 0.</para>
<para><simplesect kind="note"><para>This calculation does not take any upfront into account, even if one was given. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="206" column="14" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="266" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1ac8bbe9f688902baeae0e8daa091c5e22" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CreditDefaultSwap::couponLegBPS</definition>
        <argsstring>() const</argsstring>
        <name>couponLegBPS</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::couponLegBPS</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the variation of the fixed-leg value given a one-basis-point change in the running spread. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="210" column="14" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="273" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1a9cdfe11243c2607ea01446f99cdca1a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CreditDefaultSwap::upfrontBPS</definition>
        <argsstring>() const</argsstring>
        <name>upfrontBPS</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::upfrontBPS</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="211" column="14" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="301" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1ac910d83bdb4a7585ee6d8a6d6c251cc3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CreditDefaultSwap::couponLegNPV</definition>
        <argsstring>() const</argsstring>
        <name>couponLegNPV</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::couponLegNPV</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="212" column="14" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="280" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1a4b62ede47862e87461350e5f83c6effb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CreditDefaultSwap::defaultLegNPV</definition>
        <argsstring>() const</argsstring>
        <name>defaultLegNPV</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::defaultLegNPV</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="213" column="14" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="287" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1a21f4757a490f4e98b900f807ae320b0b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CreditDefaultSwap::upfrontNPV</definition>
        <argsstring>() const</argsstring>
        <name>upfrontNPV</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::upfrontNPV</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="214" column="14" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="294" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1ae389ba61c472ffc5f594946697c9e994" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CreditDefaultSwap::accrualRebateNPV</definition>
        <argsstring>() const</argsstring>
        <name>accrualRebateNPV</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::accrualRebateNPV</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="215" column="14" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="308" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1a08d873d0f0d9e92df648483161192eef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::CreditDefaultSwap::impliedHazardRate</definition>
        <argsstring>(Real targetNPV, const Handle&lt; YieldTermStructure &gt; &amp;discountCurve, const DayCounter &amp;dayCounter, Real recoveryRate=0.4, Real accuracy=1.0e-8, PricingModel model=Midpoint) const</argsstring>
        <name>impliedHazardRate</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::impliedHazardRate</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>targetNPV</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
          <declname>discountCurve</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>recoveryRate</declname>
          <defval>0.4</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.0e-8</defval>
        </param>
        <param>
          <type>PricingModel</type>
          <declname>model</declname>
          <defval>Midpoint</defval>
        </param>
        <briefdescription>
<para>Implied hazard rate calculation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method performs the calculation with the instrument characteristics. It will coincide with the ISDA calculation if your object has the standard characteristics. Notably:<itemizedlist>
<listitem><para>The calendar should have no bank holidays, just weekends.</para>
</listitem><listitem><para>The yield curve should be LIBOR piecewise constant in fwd rates, with a discount factor of 1 on the calculation date, which coincides with the trade date.</para>
</listitem><listitem><para>Convention should be Following for yield curve and contract cashflows.</para>
</listitem><listitem><para>The CDS should pay accrued and mature on standard <ref refid="struct_quant_lib_1_1_i_m_m" kindref="compound">IMM</ref> dates, settle on trade date +1 and upfront settle on trade date +3. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="234" column="14" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="340" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_credit_default_swap_1a8466d6a49951c9e947c7c2071766c323" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::CreditDefaultSwap::conventionalSpread</definition>
        <argsstring>(Real conventionalRecovery, const Handle&lt; YieldTermStructure &gt; &amp;discountCurve, const DayCounter &amp;dayCounter, PricingModel model=Midpoint) const</argsstring>
        <name>conventionalSpread</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::conventionalSpread</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>conventionalRecovery</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
          <declname>discountCurve</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type>PricingModel</type>
          <declname>model</declname>
          <defval>Midpoint</defval>
        </param>
        <briefdescription>
<para>Conventional/standard upfront-to-spread conversion. </para>
        </briefdescription>
        <detaileddescription>
<para>Under a standard ISDA model and a set of standardised instrument characteristics, it is the running only quoted spread that will make a CDS contract have an NPV of 0 when quoted for that running only spread. Refer to: &quot;ISDA
Standard CDS converter specification.&quot; May 2009.</para>
<para>The conventional recovery rate to apply in the calculation is as specified by ISDA, not necessarily equal to the market-quoted one. It is typically 0.4 for SeniorSec and 0.2 for subordinate.</para>
<para><simplesect kind="note"><para>The conversion employs a flat hazard rate. As a result, you will not recover the market quotes.</para>
</simplesect>
<simplesect kind="note"><para>This method performs the calculation with the instrument characteristics. It will coincide with the ISDA calculation if your object has the standard characteristics. Notably:<itemizedlist>
<listitem><para>The calendar should have no bank holidays, just weekends.</para>
</listitem><listitem><para>The yield curve should be LIBOR piecewise constant in fwd rates, with a discount factor of 1 on the calculation date, which coincides with the trade date.</para>
</listitem><listitem><para>Convention should be Following for yield curve and contract cashflows.</para>
</listitem><listitem><para>The CDS should pay accrued and mature on standard <ref refid="struct_quant_lib_1_1_i_m_m" kindref="compound">IMM</ref> dates, settle on trade date +1 and upfront settle on trade date +3. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="272" column="14" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="383" bodyend="423"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_quant_lib_1_1_credit_default_swap_1af06b48e651922d7f039fd18337a8bc53" prot="public" static="no" strong="no">
        <type></type>
        <name>PricingModel</name>
        <qualifiedname>QuantLib::CreditDefaultSwap::PricingModel</qualifiedname>
        <enumvalue id="class_quant_lib_1_1_credit_default_swap_1af06b48e651922d7f039fd18337a8bc53ad64918ab817d1588001d56b623aac734" prot="public">
          <name>Midpoint</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_credit_default_swap_1af06b48e651922d7f039fd18337a8bc53ae8e737c659032064d4d0739f272749e1" prot="public">
          <name>ISDA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.hpp" line="61" column="9" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="61" bodyend="64"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Credit default swap. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>This instrument currently assumes that the issuer did not default until today&apos;s date.</para>
</simplesect>
<simplesect kind="warning"><para>if <computeroutput>Settings::includeReferenceDateCashFlows()</computeroutput> is set to <computeroutput>true</computeroutput>, payments occurring at the settlement date of the swap might be included in the NPV and therefore affect the fair-spread calculation. This might not be what you want.</para>
</simplesect>
<simplesect kind="warning"><para>conventionalSpread (and impliedHazardRate) by default use the mid-point engine, which is not ISDA conform. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::CreditDefaultSwap</label>
        <link refid="class_quant_lib_1_1_credit_default_swap"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::Instrument</label>
        <link refid="class_quant_lib_1_1_instrument"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::CreditDefaultSwap</label>
        <link refid="class_quant_lib_1_1_credit_default_swap"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>maturity_</edgelabel>
          <edgelabel>protectionStart_</edgelabel>
          <edgelabel>tradeDate_</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::Date</label>
        <link refid="class_quant_lib_1_1_date"/>
      </node>
      <node id="2">
        <label>QuantLib::Instrument</label>
        <link refid="class_quant_lib_1_1_instrument"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>valuationDate_</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
    </collaborationgraph>
    <location file="ql/instruments/creditdefaultswap.hpp" line="56" column="5" bodyfile="ql/instruments/creditdefaultswap.hpp" bodystart="56" bodyend="308"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a37fd3f28fce8d5e808d1373f4e5aa031" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>accrualRebate</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1add7cf9e24b01464eea99f8e6a6f6b158" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>accrualRebate_</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1ae389ba61c472ffc5f594946697c9e994" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>accrualRebateNPV</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a52dda7c57423f3a5da384b8cf4ef8b4e" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>accrualRebateNPV_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a468edb294da268b097c91bf821084c07" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>additionalResults</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a57d2b34e8625ab3d9ffa50c0c7931099" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>additionalResults_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a02070ea7442d30625992c1711030d4b8" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>alwaysForward_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a17c9433135a259e4776baec66204a484" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>alwaysForwardNotifications</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a4c573c48f7eaead5042864ac0eb5b025" prot="protected" virt="virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a58b4986a80efa18634483a92c121e26e" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>calculated_</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1acee7eab582ab6833ea666771d23be55f" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>cashSettlementDays</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a32cbea5584e57ca08e4d5d61fd25039d" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>cashSettlementDays_</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1af1de1b99480c31000416d1ab25739b61" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>claim_</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a8466d6a49951c9e947c7c2071766c323" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>conventionalSpread</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1ac8bbe9f688902baeae0e8daa091c5e22" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>couponLegBPS</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a12454534cd77abeae26ab62bcada0fae" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>couponLegBPS_</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1ac910d83bdb4a7585ee6d8a6d6c251cc3" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>couponLegNPV</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a661c3dc1e4ba8307fe0182e409d258c9" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>couponLegNPV_</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1adf92fae87a74030521182a62db36f3dd" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>coupons</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a0aadbf6b822fae4c4f6f7bc8fd16568b" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>CreditDefaultSwap</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1aecc6210d07a85ea30d81db52e7fbc616" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>CreditDefaultSwap</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a4b62ede47862e87461350e5f83c6effb" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>defaultLegNPV</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1af2f710c5dd6094a4049b4e74ba702dea" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>defaultLegNPV_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1ac548cb61c864779db09bd0fac6ae7c81" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>engine_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a03502fb6c606b262c25acd94ff4c1e52" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>errorEstimate</name></member>
      <member refid="class_quant_lib_1_1_instrument_1abb8f4cfa7346fab7a2f3a8c8b4da30f3" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>errorEstimate_</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a286e703f20753abeef1df56ff1e137e8" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>fairSpread</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a8ec4a85a19b64543a8a81ddd4f4bb518" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>fairSpread_</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a89cb25e2417a552e11311f64f8a8c519" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>fairUpfront</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a6bd4739d35a021936c59e01a5fa9e48b" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>fairUpfront_</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a53cb75af0223286edb1da28f31e90a35" prot="public" virt="virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>fetchResults</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1afac6ee19c3107c453e1347dd8000e023" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>forwardFirstNotificationOnly</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7157f41e83f2c5d924f5c5bafda04d1d" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>freeze</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7bb721fe00c6854e602758aba629ab77" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>frozen_</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a08d873d0f0d9e92df648483161192eef" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>impliedHazardRate</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1aae572d15be3b5fb78b4e1ceb3a08c24b" prot="private" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>init</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a5e4c746cbf7999c83dc57f87e241f1cc" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>Instrument</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a0a7c5d42815a4e16ee2158e24dbfc748" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>isCalculated</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1af06b48e651922d7f039fd18337a8bc53ae8e737c659032064d4d0739f272749e1" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>ISDA</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1afb91ae4bc5ff8c6bff6d5b5fe4895624" prot="public" virt="virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>isExpired</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a26f18f4ff7faaaebd8eae50e064b493e" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>LazyObject</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a308242481975648a8186121c8ab54e30" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>leg_</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1ac8e9d92d65d48327f5f2a77ce97d5b90" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>maturity_</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1af06b48e651922d7f039fd18337a8bc53ad64918ab817d1588001d56b623aac734" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>Midpoint</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a0b3fbbf9c09ea506c237a5aaa5ff172b" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>notional</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a5b6f22c3de7500120b8ee02ee9a5f941" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>notional_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a5afdd9698267cd30ddd10cf01f3487b0" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>NPV</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a997663780100d30ae59b14ac0285322d" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>NPV_</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::CreditDefaultSwap</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::CreditDefaultSwap</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::CreditDefaultSwap</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::CreditDefaultSwap</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::CreditDefaultSwap</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::QuantLib::Observer::"><scope>QuantLib::CreditDefaultSwap</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a5d2c31f8561beed2e9481ce68118dd58" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>paysAtDefaultTime</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1ad937e168c3542607ae91cc042b71e638" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>paysAtDefaultTime_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1aad23f546bbca156a49a95ca2bee124c4" prot="protected" virt="virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>performCalculations</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1af06b48e651922d7f039fd18337a8bc53" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>PricingModel</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a068a2781ca3d7ddc6a0846abf00f3d34" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>protectionEndDate</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1aac6ec03e413ac3830f9cdb939b984671" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>protectionStart_</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a36bc6bcc991990fba383a932d7ebc0b8" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>protectionStartDate</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a70388367f7929c1032baba0cf8f6a9fa" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>rebatesAccrual</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a70c9b24e50132408d8d9ce4f6674662a" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>recalculate</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a266c15a12160a89f4f9707db85f9fa27" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>result</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1abe8e4f961ef60691e026ad9c294f716f" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>runningSpread</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a8e2b506e77127912cf83b58d4b300077" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>runningSpread_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a3444386491f179f64f4f0aac24997071" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>setPricingEngine</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a97ae82c5e9c06c464845a49666d23fe5" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>settlesAccrual</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a749292ed6759a181b9983d115aa3c34e" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>settlesAccrual_</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a563c1d0f57171a654f739dc45fd7088b" prot="public" virt="virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>setupArguments</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a2b09907de34836832eba08eda2e57526" prot="protected" virt="virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>setupExpired</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1af5cc96cb5ac01cded1e02120c07724f9" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>side</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a93f59331d95a1559460df10c7329de08" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>side_</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1ae5bcac6b3798a150ec32036bf3695473" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>tradeDate</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1aa8fa19efd6c8ca534f30baf73b384c19" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>tradeDate_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a2e0e4786666453024b9d4e0761f2770b" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>unfreeze</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1adee2bf49be5c4c78736be293321a856d" prot="public" virt="virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1adbad916cc925be3e6cf4eb65a5d26925" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>upfront</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a9ea8d397847cfd35dc6d27349b92a53f" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>upfront_</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a9cdfe11243c2607ea01446f99cdca1a6" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>upfrontBPS</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a7e0a02b4ceaeac917e65967933015527" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>upfrontBPS_</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a21f4757a490f4e98b900f807ae320b0b" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>upfrontNPV</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a1d4f1db6a60a1a0ba077e743de52b9d7" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>upfrontNPV_</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a7ab34592651db3667f5befdc0daf40a5" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>upfrontPayment</name></member>
      <member refid="class_quant_lib_1_1_credit_default_swap_1a6ba6f047b2b29d19290f9e6f97c2df09" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>upfrontPayment_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a53a0fc1adc70b73387ad53009725835d" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>valuationDate</name></member>
      <member refid="class_quant_lib_1_1_instrument_1aa60b558fc82f022e13535360ac4a6fed" prot="protected" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>valuationDate_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a9d719c43bb627177a90d7d12324a2d6e" prot="public" virt="non-virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>~LazyObject</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::CreditDefaultSwap</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
