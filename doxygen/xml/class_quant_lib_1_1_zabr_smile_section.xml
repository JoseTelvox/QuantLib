<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_zabr_smile_section" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::ZabrSmileSection</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_smile_section" prot="public" virt="non-virtual">QuantLib::SmileSection</basecompoundref>
    <templateparamlist>
      <param>
        <type>typename Evaluation</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_smile_section_1a32a2cf662df557708db8069390247be7" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_zabr_model" kindref="compound">ZabrModel</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;ZabrModel&gt; QuantLib::ZabrSmileSection&lt; Evaluation &gt;::model_</definition>
        <argsstring></argsstring>
        <name>model_</name>
        <qualifiedname>QuantLib::ZabrSmileSection::model_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="105" column="21" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_smile_section_1adef8ee35e1d35c0a146782278389c625" prot="private" static="no" mutable="no">
        <type>Evaluation</type>
        <definition>Evaluation QuantLib::ZabrSmileSection&lt; Evaluation &gt;::evaluation_</definition>
        <argsstring></argsstring>
        <name>evaluation_</name>
        <qualifiedname>QuantLib::ZabrSmileSection::evaluation_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="106" column="16" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_smile_section_1abb8f07a35ad8f0144493fe449f8fbfa2" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::ZabrSmileSection&lt; Evaluation &gt;::forward_</definition>
        <argsstring></argsstring>
        <name>forward_</name>
        <qualifiedname>QuantLib::ZabrSmileSection::forward_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="107" column="10" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_smile_section_1ad1141648e36b1d60b0b5e728e026cff5" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::ZabrSmileSection&lt; Evaluation &gt;::params_</definition>
        <argsstring></argsstring>
        <name>params_</name>
        <qualifiedname>QuantLib::ZabrSmileSection::params_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="108" column="17" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_smile_section_1a9a804643db1776a2dc7bc201a0581448" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>const Size QuantLib::ZabrSmileSection&lt; Evaluation &gt;::fdRefinement_</definition>
        <argsstring></argsstring>
        <name>fdRefinement_</name>
        <qualifiedname>QuantLib::ZabrSmileSection::fdRefinement_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="109" column="16" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_smile_section_1a8bc71da109abc24a529e0ab08dc49333" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::ZabrSmileSection&lt; Evaluation &gt;::strikes_</definition>
        <argsstring></argsstring>
        <name>strikes_</name>
        <qualifiedname>QuantLib::ZabrSmileSection::strikes_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="110" column="17" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_smile_section_1a098ff6c028264e23231b4b95f5170034" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::ZabrSmileSection&lt; Evaluation &gt;::callPrices_</definition>
        <argsstring></argsstring>
        <name>callPrices_</name>
        <qualifiedname>QuantLib::ZabrSmileSection::callPrices_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="110" column="26" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_smile_section_1a2a3ead552463c598408880c2c3edab3b" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_interpolation" kindref="compound">Interpolation</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;Interpolation&gt; QuantLib::ZabrSmileSection&lt; Evaluation &gt;::callPriceFct_</definition>
        <argsstring></argsstring>
        <name>callPriceFct_</name>
        <qualifiedname>QuantLib::ZabrSmileSection::callPriceFct_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="111" column="21" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_smile_section_1aace5c0ada7801ff94e5c184d374edbec" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrSmileSection&lt; Evaluation &gt;::a_</definition>
        <argsstring></argsstring>
        <name>a_</name>
        <qualifiedname>QuantLib::ZabrSmileSection::a_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="112" column="10" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_smile_section_1a9363c3cfc78f2ebfd087ef401dcde46f" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrSmileSection&lt; Evaluation &gt;::b_</definition>
        <argsstring></argsstring>
        <name>b_</name>
        <qualifiedname>QuantLib::ZabrSmileSection::b_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="112" column="13" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1a429d3865a105511302a0380ad89d77c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::ZabrSmileSection&lt; Evaluation &gt;::ZabrSmileSection</definition>
        <argsstring>(Time timeToExpiry, Rate forward, std::vector&lt; Real &gt; zabrParameters, const std::vector&lt; Real &gt; &amp;moneyness=std::vector&lt; Real &gt;(), Size fdRefinement=5)</argsstring>
        <name>ZabrSmileSection</name>
        <qualifiedname>QuantLib::ZabrSmileSection::ZabrSmileSection</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>timeToExpiry</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
          <declname>zabrParameters</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>moneyness</declname>
          <defval>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>fdRefinement</declname>
          <defval>5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="48" column="5" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="116" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1ab2e42f09c8fe28bb4667f26e680b2e98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::ZabrSmileSection&lt; Evaluation &gt;::ZabrSmileSection</definition>
        <argsstring>(const Date &amp;d, Rate forward, std::vector&lt; Real &gt; zabrParameters, const DayCounter &amp;dc=Actual365Fixed(), const std::vector&lt; Real &gt; &amp;moneyness=std::vector&lt; Real &gt;(), Size fdRefinement=5)</argsstring>
        <name>ZabrSmileSection</name>
        <qualifiedname>QuantLib::ZabrSmileSection::ZabrSmileSection</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
          <declname>zabrParameters</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dc</declname>
          <defval><ref refid="class_quant_lib_1_1_actual365_fixed" kindref="compound">Actual365Fixed</ref>()</defval>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>moneyness</declname>
          <defval>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>fdRefinement</declname>
          <defval>5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="53" column="5" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="127" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1a657da8ebdcc2518874d47fde99e3defe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrSmileSection&lt; Evaluation &gt;::minStrike</definition>
        <argsstring>() const override</argsstring>
        <name>minStrike</name>
        <qualifiedname>QuantLib::ZabrSmileSection::minStrike</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_smile_section_1a54bb5cd9f6913f7d69efc85d51af2624">minStrike</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="60" column="10" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1aa16abfe6fb1bc2d6f1fc21c74b9aa764" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrSmileSection&lt; Evaluation &gt;::maxStrike</definition>
        <argsstring>() const override</argsstring>
        <name>maxStrike</name>
        <qualifiedname>QuantLib::ZabrSmileSection::maxStrike</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_smile_section_1aa74a46c0a15e98112c1f9afaad9e6604">maxStrike</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="61" column="10" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1a4f4bfc037e0af1229706c6cb68192d56" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrSmileSection&lt; Evaluation &gt;::atmLevel</definition>
        <argsstring>() const override</argsstring>
        <name>atmLevel</name>
        <qualifiedname>QuantLib::ZabrSmileSection::atmLevel</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_smile_section_1a7ff3d003fcdcf207cde30c3469b6422a">atmLevel</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="62" column="10" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1a91ef0c6a14599c9ca85e93a4a9c5d775" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrSmileSection&lt; Evaluation &gt;::optionPrice</definition>
        <argsstring>(Rate strike, Option::Type type=Option::Call, Real discount=1.0) const override</argsstring>
        <name>optionPrice</name>
        <qualifiedname>QuantLib::ZabrSmileSection::optionPrice</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_smile_section_1abf5fbad0f8d32a1b644ec3c23927061b">optionPrice</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type>Option::Type</type>
          <declname>type</declname>
          <defval>Option::Call</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="64" column="5" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1abe190d4164d73de75f46a6d415d4eab8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_zabr_model" kindref="compound">ZabrModel</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; ZabrModel &gt; QuantLib::ZabrSmileSection&lt; Evaluation &gt;::model</definition>
        <argsstring>()</argsstring>
        <name>model</name>
        <qualifiedname>QuantLib::ZabrSmileSection::model</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="68" column="21" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="68" bodyend="68"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1ae80044659f5d4e33fafd94262f3f5bfa" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref></type>
        <definition>Volatility QuantLib::ZabrSmileSection&lt; Evaluation &gt;::volatilityImpl</definition>
        <argsstring>(Rate strike) const override</argsstring>
        <name>volatilityImpl</name>
        <qualifiedname>QuantLib::ZabrSmileSection::volatilityImpl</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_smile_section_1a14bf773bdfb690c9b9e9cbe61f14c2bf">volatilityImpl</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>strike</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="71" column="16" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="71" bodyend="73"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1a327f756e0baa46a332351162ab0cb2f9" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::ZabrSmileSection&lt; Evaluation &gt;::init</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;moneyness)</argsstring>
        <name>init</name>
        <qualifiedname>QuantLib::ZabrSmileSection::init</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>moneyness</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="76" column="10" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="76" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1a51febb9d11bd25bfcbe13dd0837b731e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::ZabrSmileSection&lt; Evaluation &gt;::init</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;moneyness, ZabrShortMaturityLognormal)</argsstring>
        <name>init</name>
        <qualifiedname>QuantLib::ZabrSmileSection::init</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>moneyness</declname>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_zabr_short_maturity_lognormal" kindref="compound">ZabrShortMaturityLognormal</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="81" column="10" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="139" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1a260a7b4e98a7fc1eeee3f3a59649837f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::ZabrSmileSection&lt; Evaluation &gt;::init</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;moneyness, ZabrShortMaturityNormal)</argsstring>
        <name>init</name>
        <qualifiedname>QuantLib::ZabrSmileSection::init</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>moneyness</declname>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_zabr_short_maturity_normal" kindref="compound">ZabrShortMaturityNormal</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="82" column="10" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1a60686f1b116a912866343e6ecc82d256" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::ZabrSmileSection&lt; Evaluation &gt;::init</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;moneyness, ZabrLocalVolatility)</argsstring>
        <name>init</name>
        <qualifiedname>QuantLib::ZabrSmileSection::init</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>moneyness</declname>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_zabr_local_volatility" kindref="compound">ZabrLocalVolatility</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="83" column="10" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="154" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1a37de6419f241f76b5f295ec305f5a5fd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::ZabrSmileSection&lt; Evaluation &gt;::init</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;moneyness, ZabrFullFd)</argsstring>
        <name>init</name>
        <qualifiedname>QuantLib::ZabrSmileSection::init</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>moneyness</declname>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_zabr_full_fd" kindref="compound">ZabrFullFd</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="84" column="10" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="197" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1ac37c563bec2c52aef9a4afd05859a5e2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::ZabrSmileSection&lt; Evaluation &gt;::init2</definition>
        <argsstring>(ZabrShortMaturityLognormal)</argsstring>
        <name>init2</name>
        <qualifiedname>QuantLib::ZabrSmileSection::init2</qualifiedname>
        <param>
          <type><ref refid="struct_quant_lib_1_1_zabr_short_maturity_lognormal" kindref="compound">ZabrShortMaturityLognormal</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="85" column="10" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="203" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1a2592f0ce3574385f6ba4defffffbddc1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::ZabrSmileSection&lt; Evaluation &gt;::init2</definition>
        <argsstring>(ZabrShortMaturityNormal)</argsstring>
        <name>init2</name>
        <qualifiedname>QuantLib::ZabrSmileSection::init2</qualifiedname>
        <param>
          <type><ref refid="struct_quant_lib_1_1_zabr_short_maturity_normal" kindref="compound">ZabrShortMaturityNormal</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="86" column="10" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="206" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1a065ea703dac5cab9cdbf59738b9c4da0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::ZabrSmileSection&lt; Evaluation &gt;::init2</definition>
        <argsstring>(ZabrLocalVolatility)</argsstring>
        <name>init2</name>
        <qualifiedname>QuantLib::ZabrSmileSection::init2</qualifiedname>
        <param>
          <type><ref refid="struct_quant_lib_1_1_zabr_local_volatility" kindref="compound">ZabrLocalVolatility</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="87" column="10" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="209" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1a93e3e591c6bd12999e80ae6d04972272" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::ZabrSmileSection&lt; Evaluation &gt;::init2</definition>
        <argsstring>(ZabrFullFd)</argsstring>
        <name>init2</name>
        <qualifiedname>QuantLib::ZabrSmileSection::init2</qualifiedname>
        <param>
          <type><ref refid="struct_quant_lib_1_1_zabr_full_fd" kindref="compound">ZabrFullFd</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="88" column="10" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="214" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1ac147e1bb7cd2dfd1956e8c23130f4328" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::ZabrSmileSection&lt; Evaluation &gt;::init3</definition>
        <argsstring>(ZabrShortMaturityLognormal)</argsstring>
        <name>init3</name>
        <qualifiedname>QuantLib::ZabrSmileSection::init3</qualifiedname>
        <param>
          <type><ref refid="struct_quant_lib_1_1_zabr_short_maturity_lognormal" kindref="compound">ZabrShortMaturityLognormal</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="89" column="10" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="223" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1a79eb9c57b605f035d7e41f725390a043" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::ZabrSmileSection&lt; Evaluation &gt;::init3</definition>
        <argsstring>(ZabrShortMaturityNormal)</argsstring>
        <name>init3</name>
        <qualifiedname>QuantLib::ZabrSmileSection::init3</qualifiedname>
        <param>
          <type><ref refid="struct_quant_lib_1_1_zabr_short_maturity_normal" kindref="compound">ZabrShortMaturityNormal</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="90" column="10" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="226" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1acc3c1f7a58ca90b6f378dddf1cb9406e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::ZabrSmileSection&lt; Evaluation &gt;::init3</definition>
        <argsstring>(ZabrLocalVolatility)</argsstring>
        <name>init3</name>
        <qualifiedname>QuantLib::ZabrSmileSection::init3</qualifiedname>
        <param>
          <type><ref refid="struct_quant_lib_1_1_zabr_local_volatility" kindref="compound">ZabrLocalVolatility</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="91" column="10" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="229" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1a68572b38233be7ff80a2147c690cc178" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::ZabrSmileSection&lt; Evaluation &gt;::init3</definition>
        <argsstring>(ZabrFullFd)</argsstring>
        <name>init3</name>
        <qualifiedname>QuantLib::ZabrSmileSection::init3</qualifiedname>
        <param>
          <type><ref refid="struct_quant_lib_1_1_zabr_full_fd" kindref="compound">ZabrFullFd</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="92" column="10" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="256" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1aa44fb0d92437c556eefa4b98d9e0a55d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrSmileSection&lt; Evaluation &gt;::optionPrice</definition>
        <argsstring>(Rate strike, Option::Type type, Real discount, ZabrShortMaturityLognormal) const</argsstring>
        <name>optionPrice</name>
        <qualifiedname>QuantLib::ZabrSmileSection::optionPrice</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type>Option::Type</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_zabr_short_maturity_lognormal" kindref="compound">ZabrShortMaturityLognormal</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="93" column="10" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="262" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1a3d5bb5dab1b8956dcd36aafe1233c8cb" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrSmileSection&lt; Evaluation &gt;::optionPrice</definition>
        <argsstring>(Rate strike, Option::Type type, Real discount, ZabrShortMaturityNormal) const</argsstring>
        <name>optionPrice</name>
        <qualifiedname>QuantLib::ZabrSmileSection::optionPrice</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type>Option::Type</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_zabr_short_maturity_normal" kindref="compound">ZabrShortMaturityNormal</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="95" column="10" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="269" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1a393132628f239cae7d516a06c4da2c7c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrSmileSection&lt; Evaluation &gt;::optionPrice</definition>
        <argsstring>(Rate strike, Option::Type type, Real discount, ZabrLocalVolatility) const</argsstring>
        <name>optionPrice</name>
        <qualifiedname>QuantLib::ZabrSmileSection::optionPrice</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type>Option::Type</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_zabr_local_volatility" kindref="compound">ZabrLocalVolatility</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="97" column="10" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="278" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1a153590ba1cd5d6acf0b1c5e38dab3500" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrSmileSection&lt; Evaluation &gt;::optionPrice</definition>
        <argsstring>(Rate strike, Option::Type type, Real discount, ZabrFullFd) const</argsstring>
        <name>optionPrice</name>
        <qualifiedname>QuantLib::ZabrSmileSection::optionPrice</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type>Option::Type</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_zabr_full_fd" kindref="compound">ZabrFullFd</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="99" column="10" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="290" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1ac3315202dc9f422811293f106de13f04" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref></type>
        <definition>Real QuantLib::ZabrSmileSection&lt; Evaluation &gt;::volatilityImpl</definition>
        <argsstring>(Rate strike, ZabrShortMaturityLognormal) const</argsstring>
        <name>volatilityImpl</name>
        <qualifiedname>QuantLib::ZabrSmileSection::volatilityImpl</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_zabr_short_maturity_lognormal" kindref="compound">ZabrShortMaturityLognormal</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="101" column="16" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="298" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1a0a72de7d27e6930b60a14ab41847b542" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref></type>
        <definition>Real QuantLib::ZabrSmileSection&lt; Evaluation &gt;::volatilityImpl</definition>
        <argsstring>(Rate strike, ZabrShortMaturityNormal) const</argsstring>
        <name>volatilityImpl</name>
        <qualifiedname>QuantLib::ZabrSmileSection::volatilityImpl</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_zabr_short_maturity_normal" kindref="compound">ZabrShortMaturityNormal</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="102" column="16" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="306" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1a921ec7aeca951a022a0d10d2f4d70132" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref></type>
        <definition>Real QuantLib::ZabrSmileSection&lt; Evaluation &gt;::volatilityImpl</definition>
        <argsstring>(Rate strike, ZabrLocalVolatility) const</argsstring>
        <name>volatilityImpl</name>
        <qualifiedname>QuantLib::ZabrSmileSection::volatilityImpl</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_zabr_local_volatility" kindref="compound">ZabrLocalVolatility</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="103" column="16" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="325" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_smile_section_1a2461d283b7057dba6b092d26d97fab22" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref></type>
        <definition>Real QuantLib::ZabrSmileSection&lt; Evaluation &gt;::volatilityImpl</definition>
        <argsstring>(Rate strike, ZabrFullFd) const</argsstring>
        <name>volatilityImpl</name>
        <qualifiedname>QuantLib::ZabrSmileSection::volatilityImpl</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_zabr_full_fd" kindref="compound">ZabrFullFd</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="104" column="16" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="331" bodyend="334"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::SmileSection</label>
        <link refid="class_quant_lib_1_1_smile_section"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::ZabrSmileSection&lt; Evaluation &gt;</label>
        <link refid="class_quant_lib_1_1_zabr_smile_section"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::SmileSection</label>
        <link refid="class_quant_lib_1_1_smile_section"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::ZabrSmileSection&lt; Evaluation &gt;</label>
        <link refid="class_quant_lib_1_1_zabr_smile_section"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/volatility/zabrsmilesection.hpp" line="46" column="12" bodyfile="ql/experimental/volatility/zabrsmilesection.hpp" bodystart="46" bodyend="113"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1aace5c0ada7801ff94e5c184d374edbec" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>a_</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a4f4bfc037e0af1229706c6cb68192d56" prot="public" virt="virtual"><scope>QuantLib::ZabrSmileSection</scope><name>atmLevel</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a9363c3cfc78f2ebfd087ef401dcde46f" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>b_</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a2a3ead552463c598408880c2c3edab3b" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>callPriceFct_</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a098ff6c028264e23231b4b95f5170034" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>callPrices_</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a9d62efde0aa0bc8b6628ab562b5c479d" prot="public" virt="virtual"><scope>QuantLib::ZabrSmileSection</scope><name>dayCounter</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::ZabrSmileSection</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a3a4e90440ae22c4c9c3e9253b0199a82" prot="public" virt="virtual"><scope>QuantLib::ZabrSmileSection</scope><name>density</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a9ecdb328b2b90432da8a4429c4d56f06" prot="public" virt="virtual"><scope>QuantLib::ZabrSmileSection</scope><name>digitalOptionPrice</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1adef8ee35e1d35c0a146782278389c625" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>evaluation_</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1ac9b9e60511fc940cd8d74fbbbcd87b5f" prot="public" virt="virtual"><scope>QuantLib::ZabrSmileSection</scope><name>exerciseDate</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a7bf1b552a5e93d12631f01a5fa59eb58" prot="public" virt="virtual"><scope>QuantLib::ZabrSmileSection</scope><name>exerciseTime</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a9a804643db1776a2dc7bc201a0581448" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>fdRefinement_</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1abb8f07a35ad8f0144493fe449f8fbfa2" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>forward_</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a327f756e0baa46a332351162ab0cb2f9" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>init</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a51febb9d11bd25bfcbe13dd0837b731e" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>init</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a260a7b4e98a7fc1eeee3f3a59649837f" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>init</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a60686f1b116a912866343e6ecc82d256" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>init</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a37de6419f241f76b5f295ec305f5a5fd" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>init</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1ac37c563bec2c52aef9a4afd05859a5e2" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>init2</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a2592f0ce3574385f6ba4defffffbddc1" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>init2</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a065ea703dac5cab9cdbf59738b9c4da0" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>init2</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a93e3e591c6bd12999e80ae6d04972272" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>init2</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1ac147e1bb7cd2dfd1956e8c23130f4328" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>init3</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a79eb9c57b605f035d7e41f725390a043" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>init3</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1acc3c1f7a58ca90b6f378dddf1cb9406e" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>init3</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a68572b38233be7ff80a2147c690cc178" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>init3</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a7fba48f0a4277b91b0d0768d262affdb" prot="protected" virt="virtual"><scope>QuantLib::ZabrSmileSection</scope><name>initializeExerciseTime</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1aa16abfe6fb1bc2d6f1fc21c74b9aa764" prot="public" virt="virtual"><scope>QuantLib::ZabrSmileSection</scope><name>maxStrike</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a657da8ebdcc2518874d47fde99e3defe" prot="public" virt="virtual"><scope>QuantLib::ZabrSmileSection</scope><name>minStrike</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1abe190d4164d73de75f46a6d415d4eab8" prot="public" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>model</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a32a2cf662df557708db8069390247be7" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>model_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::SmileSection::"><scope>QuantLib::ZabrSmileSection</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::SmileSection::"><scope>QuantLib::ZabrSmileSection</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::ZabrSmileSection</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::ZabrSmileSection</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::SmileSection::"><scope>QuantLib::ZabrSmileSection</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::SmileSection::QuantLib::Observer::"><scope>QuantLib::ZabrSmileSection</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a91ef0c6a14599c9ca85e93a4a9c5d775" prot="public" virt="virtual"><scope>QuantLib::ZabrSmileSection</scope><name>optionPrice</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1aa44fb0d92437c556eefa4b98d9e0a55d" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>optionPrice</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a3d5bb5dab1b8956dcd36aafe1233c8cb" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>optionPrice</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a393132628f239cae7d516a06c4da2c7c" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>optionPrice</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a153590ba1cd5d6acf0b1c5e38dab3500" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>optionPrice</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1ad1141648e36b1d60b0b5e728e026cff5" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>params_</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a42fe316ed2696fb7b8b6fb8853b5bae0" prot="public" virt="virtual"><scope>QuantLib::ZabrSmileSection</scope><name>referenceDate</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a3fbddba097e2b742fe8800217ed613cc" prot="public" virt="virtual"><scope>QuantLib::ZabrSmileSection</scope><name>shift</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a6c2ea1d64020c754251c89372fe46686" prot="public" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>SmileSection</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1aae4f281efa6a9f4b5cea8165363df3b5" prot="public" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>SmileSection</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a67cece6b7c60c0a5d7729bea038fe85c" prot="public" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>SmileSection</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a8bc71da109abc24a529e0ab08dc49333" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>strikes_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1adecc5abf2867e2291878329b0256b08a" prot="public" virt="virtual"><scope>QuantLib::ZabrSmileSection</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a5bab1e23eb1c4d12f927c7b80cafa550" prot="public" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>variance</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a680162f5de7f231d1ff2b5fb76cfc54a" prot="protected" virt="virtual"><scope>QuantLib::ZabrSmileSection</scope><name>varianceImpl</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a7186ee49bc91697dcca75fd5204629be" prot="public" virt="virtual"><scope>QuantLib::ZabrSmileSection</scope><name>vega</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a0e1a9e52460bb881952fc9d9bce51a98" prot="public" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>volatility</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a672a3e1398986f0a9c922b7b6bf3233c" prot="public" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>volatility</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1ae80044659f5d4e33fafd94262f3f5bfa" prot="protected" virt="virtual"><scope>QuantLib::ZabrSmileSection</scope><name>volatilityImpl</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1ac3315202dc9f422811293f106de13f04" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>volatilityImpl</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a0a72de7d27e6930b60a14ab41847b542" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>volatilityImpl</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a921ec7aeca951a022a0d10d2f4d70132" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>volatilityImpl</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a2461d283b7057dba6b092d26d97fab22" prot="private" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>volatilityImpl</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1aac4cb2b17d273eecb0508f3a5c050a22" prot="public" virt="virtual"><scope>QuantLib::ZabrSmileSection</scope><name>volatilityType</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1a429d3865a105511302a0380ad89d77c1" prot="public" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>ZabrSmileSection</name></member>
      <member refid="class_quant_lib_1_1_zabr_smile_section_1ab2e42f09c8fe28bb4667f26e680b2e98" prot="public" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>ZabrSmileSection</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::ZabrSmileSection</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::ZabrSmileSection</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a7c6cb707ed5e58e5a1fa92efc3a9a88f" prot="public" virt="non-virtual"><scope>QuantLib::ZabrSmileSection</scope><name>~SmileSection</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
