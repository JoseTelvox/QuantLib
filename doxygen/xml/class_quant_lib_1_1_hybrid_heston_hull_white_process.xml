<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_hybrid_heston_hull_white_process" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::HybridHestonHullWhiteProcess</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_stochastic_process" prot="public" virt="non-virtual">QuantLib::StochasticProcess</basecompoundref>
    <includes refid="hybridhestonhullwhiteprocess_8hpp" local="no">hybridhestonhullwhiteprocess.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a4c389290ebf31faacdce85c082fb79ed" prot="public" static="no" strong="no">
        <type></type>
        <name>Discretization</name>
        <qualifiedname>QuantLib::HybridHestonHullWhiteProcess::Discretization</qualifiedname>
        <enumvalue id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a4c389290ebf31faacdce85c082fb79edac16c6632be88ea117bc1f91d7f624b9f" prot="public">
          <name>Euler</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a4c389290ebf31faacdce85c082fb79eda638c6cc72565c3a76622b5c92bcf0832" prot="public">
          <name>BSMHullWhite</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hybridhestonhullwhiteprocess.hpp" line="44" column="9" bodyfile="ql/processes/hybridhestonhullwhiteprocess.hpp" bodystart="44" bodyend="44"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1ac63091ab3dccf2f21b4d7d84add5afc1" prot="protected" static="no" mutable="no">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_heston_process" kindref="compound">HestonProcess</ref> &gt;</type>
        <definition>const ext::shared_ptr&lt;HestonProcess&gt; QuantLib::HybridHestonHullWhiteProcess::hestonProcess_</definition>
        <argsstring></argsstring>
        <name>hestonProcess_</name>
        <qualifiedname>QuantLib::HybridHestonHullWhiteProcess::hestonProcess_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hybridhestonhullwhiteprocess.hpp" line="71" column="31" bodyfile="ql/processes/hybridhestonhullwhiteprocess.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1acd4885c4fc7a4c4fdba1841b5bd4663b" prot="protected" static="no" mutable="no">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_hull_white_forward_process" kindref="compound">HullWhiteForwardProcess</ref> &gt;</type>
        <definition>const ext::shared_ptr&lt;HullWhiteForwardProcess&gt; QuantLib::HybridHestonHullWhiteProcess::hullWhiteProcess_</definition>
        <argsstring></argsstring>
        <name>hullWhiteProcess_</name>
        <qualifiedname>QuantLib::HybridHestonHullWhiteProcess::hullWhiteProcess_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hybridhestonhullwhiteprocess.hpp" line="72" column="31" bodyfile="ql/processes/hybridhestonhullwhiteprocess.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1ae54994671b2fa6b625e4bf740f8c17c7" prot="protected" static="no" mutable="no">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_hull_white" kindref="compound">HullWhite</ref> &gt;</type>
        <definition>const ext::shared_ptr&lt;HullWhite&gt; QuantLib::HybridHestonHullWhiteProcess::hullWhiteModel_</definition>
        <argsstring></argsstring>
        <name>hullWhiteModel_</name>
        <qualifiedname>QuantLib::HybridHestonHullWhiteProcess::hullWhiteModel_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hybridhestonhullwhiteprocess.hpp" line="75" column="31" bodyfile="ql/processes/hybridhestonhullwhiteprocess.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a5d506f0c10e9143526223fd920c00e3f" prot="protected" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::HybridHestonHullWhiteProcess::corrEquityShortRate_</definition>
        <argsstring></argsstring>
        <name>corrEquityShortRate_</name>
        <qualifiedname>QuantLib::HybridHestonHullWhiteProcess::corrEquityShortRate_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hybridhestonhullwhiteprocess.hpp" line="77" column="20" bodyfile="ql/processes/hybridhestonhullwhiteprocess.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a2058cbc74f4ac2469d4ff47f79ed8f9d" prot="protected" static="no" mutable="no">
        <type>const Discretization</type>
        <definition>const Discretization QuantLib::HybridHestonHullWhiteProcess::discretization_</definition>
        <argsstring></argsstring>
        <name>discretization_</name>
        <qualifiedname>QuantLib::HybridHestonHullWhiteProcess::discretization_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hybridhestonhullwhiteprocess.hpp" line="78" column="30" bodyfile="ql/processes/hybridhestonhullwhiteprocess.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1aaaa97e76f316863aca907ff2158ee4a7" prot="protected" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::HybridHestonHullWhiteProcess::maxRho_</definition>
        <argsstring></argsstring>
        <name>maxRho_</name>
        <qualifiedname>QuantLib::HybridHestonHullWhiteProcess::maxRho_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hybridhestonhullwhiteprocess.hpp" line="79" column="20" bodyfile="ql/processes/hybridhestonhullwhiteprocess.hpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a9b52c72ef134a3294df069c553e8fd8e" prot="protected" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        <definition>const Time QuantLib::HybridHestonHullWhiteProcess::T_</definition>
        <argsstring></argsstring>
        <name>T_</name>
        <qualifiedname>QuantLib::HybridHestonHullWhiteProcess::T_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hybridhestonhullwhiteprocess.hpp" line="80" column="20" bodyfile="ql/processes/hybridhestonhullwhiteprocess.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1ac42602165c2498ac8dd1dff9ab0c1c13" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a05e8e288a4bdedfe5b4e16d8cec14f1c" kindref="member">DiscountFactor</ref></type>
        <definition>DiscountFactor QuantLib::HybridHestonHullWhiteProcess::endDiscount_</definition>
        <argsstring></argsstring>
        <name>endDiscount_</name>
        <qualifiedname>QuantLib::HybridHestonHullWhiteProcess::endDiscount_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hybridhestonhullwhiteprocess.hpp" line="81" column="24" bodyfile="ql/processes/hybridhestonhullwhiteprocess.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a84f40a71082ba123b073396fa41db538" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::HybridHestonHullWhiteProcess::HybridHestonHullWhiteProcess</definition>
        <argsstring>(const ext::shared_ptr&lt; HestonProcess &gt; &amp;hestonProcess, const ext::shared_ptr&lt; HullWhiteForwardProcess &gt; &amp;hullWhiteProcess, Real corrEquityShortRate, Discretization discretization=BSMHullWhite)</argsstring>
        <name>HybridHestonHullWhiteProcess</name>
        <qualifiedname>QuantLib::HybridHestonHullWhiteProcess::HybridHestonHullWhiteProcess</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_heston_process" kindref="compound">HestonProcess</ref> &gt; &amp;</type>
          <declname>hestonProcess</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_hull_white_forward_process" kindref="compound">HullWhiteForwardProcess</ref> &gt; &amp;</type>
          <declname>hullWhiteProcess</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>corrEquityShortRate</declname>
        </param>
        <param>
          <type>Discretization</type>
          <declname>discretization</declname>
          <defval>BSMHullWhite</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hybridhestonhullwhiteprocess.hpp" line="46" column="9" bodyfile="ql/processes/hybridhestonhullwhiteprocess.cpp" bodystart="30" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a33e21e48c5c4e9a784b02764d3c9d46c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::HybridHestonHullWhiteProcess::size</definition>
        <argsstring>() const override</argsstring>
        <name>size</name>
        <qualifiedname>QuantLib::HybridHestonHullWhiteProcess::size</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a92e9b468d781e9ceb566d6e546113540">size</reimplements>
        <briefdescription>
<para>returns the number of dimensions of the stochastic process </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hybridhestonhullwhiteprocess.hpp" line="52" column="14" bodyfile="ql/processes/hybridhestonhullwhiteprocess.cpp" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a3b2c3e40783ef3f4bb25c01efc1cb8cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::HybridHestonHullWhiteProcess::initialValues</definition>
        <argsstring>() const override</argsstring>
        <name>initialValues</name>
        <qualifiedname>QuantLib::HybridHestonHullWhiteProcess::initialValues</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a4277a74107d071252a2445d23c90b654">initialValues</reimplements>
        <briefdescription>
<para>returns the initial values of the state variables </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hybridhestonhullwhiteprocess.hpp" line="53" column="15" bodyfile="ql/processes/hybridhestonhullwhiteprocess.cpp" bodystart="60" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a5aacd74a360f10b0b23aa728091364f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::HybridHestonHullWhiteProcess::drift</definition>
        <argsstring>(Time t, const Array &amp;x) const override</argsstring>
        <name>drift</name>
        <qualifiedname>QuantLib::HybridHestonHullWhiteProcess::drift</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a467056bfaa17a1ea3debd1dc21402bb8">drift</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the drift part of the equation, i.e., <formula id="468">$ \mu(t, \mathrm{x}_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hybridhestonhullwhiteprocess.hpp" line="54" column="15" bodyfile="ql/processes/hybridhestonhullwhiteprocess.cpp" bodystart="68" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a205d742052f1f867f3a2c486f0474069" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::HybridHestonHullWhiteProcess::diffusion</definition>
        <argsstring>(Time t, const Array &amp;x) const override</argsstring>
        <name>diffusion</name>
        <qualifiedname>QuantLib::HybridHestonHullWhiteProcess::diffusion</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a45df6a954a177df19d31de5a7f2bef35">diffusion</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the diffusion part of the equation, i.e. <formula id="469">$ \sigma(t, \mathrm{x}_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hybridhestonhullwhiteprocess.hpp" line="55" column="16" bodyfile="ql/processes/hybridhestonhullwhiteprocess.cpp" bodystart="90" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a213f3a8850800971bbe107b0f0042f6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::HybridHestonHullWhiteProcess::apply</definition>
        <argsstring>(const Array &amp;x0, const Array &amp;dx) const override</argsstring>
        <name>apply</name>
        <qualifiedname>QuantLib::HybridHestonHullWhiteProcess::apply</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1ae2e3d89d3595fcd73be5e6e7e195f3e7">apply</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>dx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>applies a change to the asset value. By default, it returns <formula id="477">$ \mathrm{x} + \Delta \mathrm{x} $</formula>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hybridhestonhullwhiteprocess.hpp" line="56" column="15" bodyfile="ql/processes/hybridhestonhullwhiteprocess.cpp" bodystart="79" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a04824599f62ab6827acb921776658653" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::HybridHestonHullWhiteProcess::evolve</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt, const Array &amp;dw) const override</argsstring>
        <name>evolve</name>
        <qualifiedname>QuantLib::HybridHestonHullWhiteProcess::evolve</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a8d99a715b297d5b6543b1d303a6002c0">evolve</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>dw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the asset value after a time interval  <formula id="474">$ \Delta t
$</formula> according to the given discretization. By default, it returns    <formula id="475">\[E(\mathrm{x}_0,t_0,\Delta t) +
S(\mathrm{x}_0,t_0,\Delta t) \cdot \Delta \mathrm{w}
\]</formula> where <formula id="476">$ E $</formula> is the expectation and <formula id="290">$ S $</formula> the standard deviation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hybridhestonhullwhiteprocess.hpp" line="58" column="15" bodyfile="ql/processes/hybridhestonhullwhiteprocess.cpp" bodystart="107" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a7422b00245c7ee4faed77e2b4bb1e262" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a05e8e288a4bdedfe5b4e16d8cec14f1c" kindref="member">DiscountFactor</ref></type>
        <definition>DiscountFactor QuantLib::HybridHestonHullWhiteProcess::numeraire</definition>
        <argsstring>(Time t, const Array &amp;x) const</argsstring>
        <name>numeraire</name>
        <qualifiedname>QuantLib::HybridHestonHullWhiteProcess::numeraire</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hybridhestonhullwhiteprocess.hpp" line="60" column="24" bodyfile="ql/processes/hybridhestonhullwhiteprocess.cpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1afa2b573c4477016f90fc20210626589d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_heston_process" kindref="compound">HestonProcess</ref> &gt; &amp;</type>
        <definition>const ext::shared_ptr&lt; HestonProcess &gt; &amp; QuantLib::HybridHestonHullWhiteProcess::hestonProcess</definition>
        <argsstring>() const</argsstring>
        <name>hestonProcess</name>
        <qualifiedname>QuantLib::HybridHestonHullWhiteProcess::hestonProcess</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hybridhestonhullwhiteprocess.hpp" line="62" column="31" bodyfile="ql/processes/hybridhestonhullwhiteprocess.cpp" bodystart="210" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1afceae6266a9f5830711c6cca549ad0be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_hull_white_forward_process" kindref="compound">HullWhiteForwardProcess</ref> &gt; &amp;</type>
        <definition>const ext::shared_ptr&lt; HullWhiteForwardProcess &gt; &amp; QuantLib::HybridHestonHullWhiteProcess::hullWhiteProcess</definition>
        <argsstring>() const</argsstring>
        <name>hullWhiteProcess</name>
        <qualifiedname>QuantLib::HybridHestonHullWhiteProcess::hullWhiteProcess</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hybridhestonhullwhiteprocess.hpp" line="63" column="31" bodyfile="ql/processes/hybridhestonhullwhiteprocess.cpp" bodystart="215" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1aceec41ec51b8a3cc0d210adb072f710e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::HybridHestonHullWhiteProcess::eta</definition>
        <argsstring>() const</argsstring>
        <name>eta</name>
        <qualifiedname>QuantLib::HybridHestonHullWhiteProcess::eta</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hybridhestonhullwhiteprocess.hpp" line="65" column="14" bodyfile="ql/processes/hybridhestonhullwhiteprocess.cpp" bodystart="205" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1ab969319119676dbe81df02167cdf1ad8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        <definition>Time QuantLib::HybridHestonHullWhiteProcess::time</definition>
        <argsstring>(const Date &amp;date) const override</argsstring>
        <name>time</name>
        <qualifiedname>QuantLib::HybridHestonHullWhiteProcess::time</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a39c5f08a3779665f9185a558d2b8418d">time</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the time value corresponding to the given date in the reference system of the stochastic process.</para>
<para><simplesect kind="note"><para>As a number of processes might not need this functionality, a default implementation is given which raises an exception. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hybridhestonhullwhiteprocess.hpp" line="66" column="14" bodyfile="ql/processes/hybridhestonhullwhiteprocess.cpp" bodystart="224" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a79d8085507e34dc1309a7c7b110d67bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Discretization</type>
        <definition>HybridHestonHullWhiteProcess::Discretization QuantLib::HybridHestonHullWhiteProcess::discretization</definition>
        <argsstring>() const</argsstring>
        <name>discretization</name>
        <qualifiedname>QuantLib::HybridHestonHullWhiteProcess::discretization</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hybridhestonhullwhiteprocess.hpp" line="67" column="24" bodyfile="ql/processes/hybridhestonhullwhiteprocess.cpp" bodystart="220" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a2f44a1524487327da85496c393cc9ca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::HybridHestonHullWhiteProcess::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <qualifiedname>QuantLib::HybridHestonHullWhiteProcess::update</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_observer_1a07905c55dca858470fcf4a1aea0005aa">update</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must be implemented in derived classes. An instance of Observer does not call this method directly: instead, it will be called by the observables the instance registered with when they need to notify any changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hybridhestonhullwhiteprocess.hpp" line="68" column="14" bodyfile="ql/processes/hybridhestonhullwhiteprocess.cpp" bodystart="228" bodyend="230"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Hybrid Heston Hull-White stochastic process. </para>
    </briefdescription>
    <detaileddescription>
<para>This class implements a three factor Heston Hull-White model</para>
<para><xrefsect id="bug_1_bug000010"><xreftitle>Bug</xreftitle><xrefdescription><para>This class was not tested enough to guarantee its functionality... work in progress</para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::HybridHestonHullWhiteProcess</label>
        <link refid="class_quant_lib_1_1_hybrid_heston_hull_white_process"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="3">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::StochasticProcess</label>
        <link refid="class_quant_lib_1_1_stochastic_process"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::HybridHestonHullWhiteProcess</label>
        <link refid="class_quant_lib_1_1_hybrid_heston_hull_white_process"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="3">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::StochasticProcess</label>
        <link refid="class_quant_lib_1_1_stochastic_process"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/processes/hybridhestonhullwhiteprocess.hpp" line="42" column="5" bodyfile="ql/processes/hybridhestonhullwhiteprocess.hpp" bodystart="42" bodyend="82"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a213f3a8850800971bbe107b0f0042f6b" prot="public" virt="virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>apply</name></member>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a4c389290ebf31faacdce85c082fb79eda638c6cc72565c3a76622b5c92bcf0832" prot="public" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>BSMHullWhite</name></member>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a5d506f0c10e9143526223fd920c00e3f" prot="protected" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>corrEquityShortRate_</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a3a92717719d8621148989905a132c5e1" prot="public" virt="virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>covariance</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a205d742052f1f867f3a2c486f0474069" prot="public" virt="virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>diffusion</name></member>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a4c389290ebf31faacdce85c082fb79ed" prot="public" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>Discretization</name></member>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a79d8085507e34dc1309a7c7b110d67bd" prot="public" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>discretization</name></member>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a2058cbc74f4ac2469d4ff47f79ed8f9d" prot="protected" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>discretization_</name></member>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a5aacd74a360f10b0b23aa728091364f4" prot="public" virt="virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>drift</name></member>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1ac42602165c2498ac8dd1dff9ab0c1c13" prot="protected" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>endDiscount_</name></member>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1aceec41ec51b8a3cc0d210adb072f710e" prot="public" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>eta</name></member>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a4c389290ebf31faacdce85c082fb79edac16c6632be88ea117bc1f91d7f624b9f" prot="public" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>Euler</name></member>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a04824599f62ab6827acb921776658653" prot="public" virt="virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>evolve</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1af225d654ba08bc09bf2ecab7d787ca9b" prot="public" virt="virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>expectation</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0346d38598fb9a5a1cd58024f05081aa" prot="public" virt="virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>factors</name></member>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1afa2b573c4477016f90fc20210626589d" prot="public" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>hestonProcess</name></member>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1ac63091ab3dccf2f21b4d7d84add5afc1" prot="protected" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>hestonProcess_</name></member>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1ae54994671b2fa6b625e4bf740f8c17c7" prot="protected" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>hullWhiteModel_</name></member>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1afceae6266a9f5830711c6cca549ad0be" prot="public" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>hullWhiteProcess</name></member>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1acd4885c4fc7a4c4fdba1841b5bd4663b" prot="protected" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>hullWhiteProcess_</name></member>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a84f40a71082ba123b073396fa41db538" prot="public" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>HybridHestonHullWhiteProcess</name></member>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a3b2c3e40783ef3f4bb25c01efc1cb8cd" prot="public" virt="virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>initialValues</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1aaaa97e76f316863aca907ff2158ee4a7" prot="protected" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>maxRho_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a7422b00245c7ee4faed77e2b4bb1e262" prot="public" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>numeraire</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a33e21e48c5c4e9a784b02764d3c9d46c" prot="public" virt="virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>size</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a47e9f5540b2ca9c32650dc81d051ca86" prot="public" virt="virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>stdDeviation</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a2dd24b794a6b320bc60ba9e1a87bf48e" prot="protected" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>StochasticProcess</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a957ee9776d6048835106ea29ea44927f" prot="protected" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>StochasticProcess</name></member>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a9b52c72ef134a3294df069c553e8fd8e" prot="protected" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>T_</name></member>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1ab969319119676dbe81df02167cdf1ad8" prot="public" virt="virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>time</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a2f44a1524487327da85496c393cc9ca8" prot="public" virt="virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0e2b6a14e675db5abd0ab8965ff7b2c3" prot="public" virt="non-virtual"><scope>QuantLib::HybridHestonHullWhiteProcess</scope><name>~StochasticProcess</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
