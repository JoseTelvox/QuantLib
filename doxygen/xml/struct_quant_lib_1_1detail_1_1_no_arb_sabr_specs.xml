<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="struct_quant_lib_1_1detail_1_1_no_arb_sabr_specs" kind="struct" language="C++" prot="public">
    <compoundname>QuantLib::detail::NoArbSabrSpecs</compoundname>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_quant_lib_1_1detail_1_1_no_arb_sabr_specs_1ad5286c47a8a5c4d0a54c406cd8026e9f" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_no_arb_sabr_smile_section" kindref="compound">NoArbSabrWrapper</ref></type>
        <definition>typedef NoArbSabrWrapper QuantLib::detail::NoArbSabrSpecs::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <qualifiedname>QuantLib::detail::NoArbSabrSpecs::type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/noarbsabrinterpolation.hpp" line="184" column="30" bodyfile="ql/experimental/volatility/noarbsabrinterpolation.hpp" bodystart="184" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_no_arb_sabr_specs_1aafb38da195a8b03a1f5fe4acd5b29dfc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::detail::NoArbSabrSpecs::dimension</definition>
        <argsstring>()</argsstring>
        <name>dimension</name>
        <qualifiedname>QuantLib::detail::NoArbSabrSpecs::dimension</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/noarbsabrinterpolation.hpp" line="39" column="10" bodyfile="ql/experimental/volatility/noarbsabrinterpolation.hpp" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_no_arb_sabr_specs_1ac57de5152873f755bd3300ba56e595c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::detail::NoArbSabrSpecs::eps</definition>
        <argsstring>()</argsstring>
        <name>eps</name>
        <qualifiedname>QuantLib::detail::NoArbSabrSpecs::eps</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/noarbsabrinterpolation.hpp" line="40" column="10" bodyfile="ql/experimental/volatility/noarbsabrinterpolation.hpp" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_no_arb_sabr_specs_1a00fd1e6b12a588afcdf413da887ae566" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::detail::NoArbSabrSpecs::defaultValues</definition>
        <argsstring>(std::vector&lt; Real &gt; &amp;params, std::vector&lt; bool &gt; &amp;paramIsFixed, const Real &amp;forward, const Real expiryTime, const std::vector&lt; Real &gt; &amp;addParams)</argsstring>
        <name>defaultValues</name>
        <qualifiedname>QuantLib::detail::NoArbSabrSpecs::defaultValues</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>std::vector&lt; bool &gt; &amp;</type>
          <declname>paramIsFixed</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>forward</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>expiryTime</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>addParams</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/noarbsabrinterpolation.hpp" line="41" column="10" bodyfile="ql/experimental/volatility/noarbsabrinterpolation.hpp" bodystart="41" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_no_arb_sabr_specs_1a8a79ad364412b4c0068d420a090455ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::detail::NoArbSabrSpecs::guess</definition>
        <argsstring>(Array &amp;values, const std::vector&lt; bool &gt; &amp;paramIsFixed, const Real &amp;forward, const Real expiryTime, const std::vector&lt; Real &gt; &amp;r, const std::vector&lt; Real &gt; &amp;)</argsstring>
        <name>guess</name>
        <qualifiedname>QuantLib::detail::NoArbSabrSpecs::guess</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
          <declname>paramIsFixed</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>forward</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>expiryTime</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/noarbsabrinterpolation.hpp" line="74" column="10" bodyfile="ql/experimental/volatility/noarbsabrinterpolation.hpp" bodystart="74" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_no_arb_sabr_specs_1a51abb317a47888ca580d403e286ced00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::detail::NoArbSabrSpecs::inverse</definition>
        <argsstring>(const Array &amp;y, const std::vector&lt; bool &gt; &amp;paramIsFixed, const std::vector&lt; Real &gt; &amp;params, const Real forward)</argsstring>
        <name>inverse</name>
        <qualifiedname>QuantLib::detail::NoArbSabrSpecs::inverse</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
          <declname>paramIsFixed</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/noarbsabrinterpolation.hpp" line="103" column="11" bodyfile="ql/experimental/volatility/noarbsabrinterpolation.hpp" bodystart="103" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_no_arb_sabr_specs_1a08dbb95f4e1285c248403e6c27c190c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::detail::NoArbSabrSpecs::direct</definition>
        <argsstring>(const Array &amp;x, const std::vector&lt; bool &gt; &amp;paramIsFixed, const std::vector&lt; Real &gt; &amp;params, const Real forward)</argsstring>
        <name>direct</name>
        <qualifiedname>QuantLib::detail::NoArbSabrSpecs::direct</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
          <declname>paramIsFixed</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/noarbsabrinterpolation.hpp" line="129" column="11" bodyfile="ql/experimental/volatility/noarbsabrinterpolation.hpp" bodystart="129" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_no_arb_sabr_specs_1aa9253af0b7ea15b96c75f92754d0ac09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::detail::NoArbSabrSpecs::weight</definition>
        <argsstring>(const Real strike, const Real forward, const Real stdDev, const std::vector&lt; Real &gt; &amp;addParams)</argsstring>
        <name>weight</name>
        <qualifiedname>QuantLib::detail::NoArbSabrSpecs::weight</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>stdDev</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>addParams</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/noarbsabrinterpolation.hpp" line="180" column="10" bodyfile="ql/experimental/volatility/noarbsabrinterpolation.hpp" bodystart="180" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_no_arb_sabr_specs_1ace55b78619ae4d843696420aee240eff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_no_arb_sabr_smile_section" kindref="compound">type</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; type &gt; QuantLib::detail::NoArbSabrSpecs::instance</definition>
        <argsstring>(const Time t, const Real &amp;forward, const std::vector&lt; Real &gt; &amp;params, const std::vector&lt; Real &gt; &amp;)</argsstring>
        <name>instance</name>
        <qualifiedname>QuantLib::detail::NoArbSabrSpecs::instance</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>forward</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/noarbsabrinterpolation.hpp" line="185" column="21" bodyfile="ql/experimental/volatility/noarbsabrinterpolation.hpp" bodystart="185" bodyend="189"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ql/experimental/volatility/noarbsabrinterpolation.hpp" line="38" column="1" bodyfile="ql/experimental/volatility/noarbsabrinterpolation.hpp" bodystart="38" bodyend="190"/>
    <listofallmembers>
      <member refid="struct_quant_lib_1_1detail_1_1_no_arb_sabr_specs_1a00fd1e6b12a588afcdf413da887ae566" prot="public" virt="non-virtual"><scope>QuantLib::detail::NoArbSabrSpecs</scope><name>defaultValues</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_no_arb_sabr_specs_1aafb38da195a8b03a1f5fe4acd5b29dfc" prot="public" virt="non-virtual"><scope>QuantLib::detail::NoArbSabrSpecs</scope><name>dimension</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_no_arb_sabr_specs_1a08dbb95f4e1285c248403e6c27c190c3" prot="public" virt="non-virtual"><scope>QuantLib::detail::NoArbSabrSpecs</scope><name>direct</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_no_arb_sabr_specs_1ac57de5152873f755bd3300ba56e595c7" prot="public" virt="non-virtual"><scope>QuantLib::detail::NoArbSabrSpecs</scope><name>eps</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_no_arb_sabr_specs_1a8a79ad364412b4c0068d420a090455ab" prot="public" virt="non-virtual"><scope>QuantLib::detail::NoArbSabrSpecs</scope><name>guess</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_no_arb_sabr_specs_1ace55b78619ae4d843696420aee240eff" prot="public" virt="non-virtual"><scope>QuantLib::detail::NoArbSabrSpecs</scope><name>instance</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_no_arb_sabr_specs_1a51abb317a47888ca580d403e286ced00" prot="public" virt="non-virtual"><scope>QuantLib::detail::NoArbSabrSpecs</scope><name>inverse</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_no_arb_sabr_specs_1ad5286c47a8a5c4d0a54c406cd8026e9f" prot="public" virt="non-virtual"><scope>QuantLib::detail::NoArbSabrSpecs</scope><name>type</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_no_arb_sabr_specs_1aa9253af0b7ea15b96c75f92754d0ac09" prot="public" virt="non-virtual"><scope>QuantLib::detail::NoArbSabrSpecs</scope><name>weight</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
