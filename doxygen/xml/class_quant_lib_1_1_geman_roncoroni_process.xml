<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_geman_roncoroni_process" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::GemanRoncoroniProcess</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_stochastic_process1_d" prot="public" virt="non-virtual">QuantLib::StochasticProcess1D</basecompoundref>
    <includes refid="gemanroncoroniprocess_8hpp" local="no">gemanroncoroniprocess.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_geman_roncoroni_process_1ab2f93ea8e420cb86ee49c0827939b9fc" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::GemanRoncoroniProcess::x0_</definition>
        <argsstring></argsstring>
        <name>x0_</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::x0_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="69" column="20" bodyfile="ql/experimental/processes/gemanroncoroniprocess.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_geman_roncoroni_process_1a84dad77722aaa42d3321eb8f5f4072c6" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::GemanRoncoroniProcess::alpha_</definition>
        <argsstring></argsstring>
        <name>alpha_</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::alpha_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="70" column="20" bodyfile="ql/experimental/processes/gemanroncoroniprocess.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_geman_roncoroni_process_1aea66c1ec6b2a4655b688494def8d2402" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::GemanRoncoroniProcess::beta_</definition>
        <argsstring></argsstring>
        <name>beta_</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::beta_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="70" column="27" bodyfile="ql/experimental/processes/gemanroncoroniprocess.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_geman_roncoroni_process_1ae6825d6ef9b0893af2ae1d47feba55ec" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::GemanRoncoroniProcess::gamma_</definition>
        <argsstring></argsstring>
        <name>gamma_</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::gamma_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="70" column="33" bodyfile="ql/experimental/processes/gemanroncoroniprocess.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_geman_roncoroni_process_1ad3f2f62377351fd6be9c8f2653c11bc2" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::GemanRoncoroniProcess::delta_</definition>
        <argsstring></argsstring>
        <name>delta_</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::delta_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="70" column="40" bodyfile="ql/experimental/processes/gemanroncoroniprocess.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_geman_roncoroni_process_1ad140b4c24b1bd5fbb269ca090b78b60f" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::GemanRoncoroniProcess::eps_</definition>
        <argsstring></argsstring>
        <name>eps_</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::eps_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="71" column="20" bodyfile="ql/experimental/processes/gemanroncoroniprocess.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_geman_roncoroni_process_1a6c7d7c493bc03490a360b7b05d56bff2" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::GemanRoncoroniProcess::zeta_</definition>
        <argsstring></argsstring>
        <name>zeta_</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::zeta_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="71" column="25" bodyfile="ql/experimental/processes/gemanroncoroniprocess.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_geman_roncoroni_process_1a153a165fa6ba887c9cadea71f7e64b11" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::GemanRoncoroniProcess::d_</definition>
        <argsstring></argsstring>
        <name>d_</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::d_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="71" column="31" bodyfile="ql/experimental/processes/gemanroncoroniprocess.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_geman_roncoroni_process_1a2ac41f18f9b7a145ca8abc7cb43a821c" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::GemanRoncoroniProcess::k_</definition>
        <argsstring></argsstring>
        <name>k_</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::k_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="72" column="20" bodyfile="ql/experimental/processes/gemanroncoroniprocess.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_geman_roncoroni_process_1aedcc7652303e24af9ba6839fdf6e4f13" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::GemanRoncoroniProcess::tau_</definition>
        <argsstring></argsstring>
        <name>tau_</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::tau_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="72" column="23" bodyfile="ql/experimental/processes/gemanroncoroniprocess.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_geman_roncoroni_process_1afeec6fc12c7b1e70fb18621c50fb75a8" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::GemanRoncoroniProcess::sig2_</definition>
        <argsstring></argsstring>
        <name>sig2_</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::sig2_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="73" column="20" bodyfile="ql/experimental/processes/gemanroncoroniprocess.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_geman_roncoroni_process_1a5d4a77e7975b99c1065019df4a0eed5d" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::GemanRoncoroniProcess::a_</definition>
        <argsstring></argsstring>
        <name>a_</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::a_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="73" column="26" bodyfile="ql/experimental/processes/gemanroncoroniprocess.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_geman_roncoroni_process_1aeef61802976e159802df35ce993df651" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::GemanRoncoroniProcess::b_</definition>
        <argsstring></argsstring>
        <name>b_</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::b_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="73" column="29" bodyfile="ql/experimental/processes/gemanroncoroniprocess.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_geman_roncoroni_process_1aed657eb789722225e1c0de1db88c1e36" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::GemanRoncoroniProcess::theta1_</definition>
        <argsstring></argsstring>
        <name>theta1_</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::theta1_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="74" column="20" bodyfile="ql/experimental/processes/gemanroncoroniprocess.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_geman_roncoroni_process_1afa770e66b2ffd234a53e44b8139f705b" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::GemanRoncoroniProcess::theta2_</definition>
        <argsstring></argsstring>
        <name>theta2_</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::theta2_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="74" column="28" bodyfile="ql/experimental/processes/gemanroncoroniprocess.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_geman_roncoroni_process_1a736a973858ec67d84f04573a694a109c" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::GemanRoncoroniProcess::theta3_</definition>
        <argsstring></argsstring>
        <name>theta3_</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::theta3_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="74" column="36" bodyfile="ql/experimental/processes/gemanroncoroniprocess.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_geman_roncoroni_process_1a9bc5ccd88a869a9dba6e1f1f4ed652f0" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::GemanRoncoroniProcess::psi_</definition>
        <argsstring></argsstring>
        <name>psi_</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::psi_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="75" column="20" bodyfile="ql/experimental/processes/gemanroncoroniprocess.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_geman_roncoroni_process_1a854854bb237786dc2c5cb3a7b9a1539b" prot="private" static="no" mutable="yes">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_mersenne_twister_uniform_rng" kindref="compound">PseudoRandom::urng_type</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;PseudoRandom::urng_type&gt; QuantLib::GemanRoncoroniProcess::urng_</definition>
        <argsstring></argsstring>
        <name>urng_</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::urng_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="76" column="33" bodyfile="ql/experimental/processes/gemanroncoroniprocess.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_geman_roncoroni_process_1a556559ef7bb50a529b3ac97eb2d87951" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::GemanRoncoroniProcess::GemanRoncoroniProcess</definition>
        <argsstring>(Real x0, Real alpha, Real beta, Real gamma, Real delta, Real eps, Real zeta, Real d, Real k, Real tau, Real sig2, Real a, Real b, Real theta1, Real theta2, Real theta3, Real psi)</argsstring>
        <name>GemanRoncoroniProcess</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::GemanRoncoroniProcess</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>gamma</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>eps</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>zeta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>tau</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>sig2</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>theta1</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>theta2</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>theta3</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>psi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="48" column="9" bodyfile="ql/experimental/processes/gemanroncoroniprocess.cpp" bodystart="31" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_geman_roncoroni_process_1afa934267e14a857eda9e97eaee846920" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GemanRoncoroniProcess::x0</definition>
        <argsstring>() const override</argsstring>
        <name>x0</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::x0</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process1_d_1a4a0eee3b5c6592950bd6635177f76113">x0</reimplements>
        <briefdescription>
<para>returns the initial value of the state variable </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="57" column="14" bodyfile="ql/experimental/processes/gemanroncoroniprocess.cpp" bodystart="52" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_geman_roncoroni_process_1a64516a5f035bcaaf83575297863d78e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GemanRoncoroniProcess::drift</definition>
        <argsstring>(Time t, Real x) const override</argsstring>
        <name>drift</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::drift</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process1_d_1ad27eced4c2abbe7d8da5951969158e2d">drift</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the drift part of the equation, i.e. <formula id="478">$ \mu(t, x_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="58" column="14" bodyfile="ql/experimental/processes/gemanroncoroniprocess.cpp" bodystart="56" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_geman_roncoroni_process_1ac4dd162eae34b40cbcc605e85fb4f19e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GemanRoncoroniProcess::diffusion</definition>
        <argsstring>(Time t, Real x) const override</argsstring>
        <name>diffusion</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::diffusion</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process1_d_1a66bde34ae0158d64169e39655fdfcfc0">diffusion</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the diffusion part of the equation, i.e. <formula id="479">$ \sigma(t, x_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="59" column="14" bodyfile="ql/experimental/processes/gemanroncoroniprocess.cpp" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_geman_roncoroni_process_1ab62865912f1204c08b75e6231b528f27" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GemanRoncoroniProcess::stdDeviation</definition>
        <argsstring>(Time t0, Real x0, Time dt) const override</argsstring>
        <name>stdDeviation</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::stdDeviation</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process1_d_1a3290404acdbfcbbd6bbf8b035862e803">stdDeviation</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the standard deviation <formula id="481">$ S(x_{t_0 + \Delta t} | x_{t_0} = x_0) $</formula> of the process after a time interval <formula id="471">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="60" column="14" bodyfile="ql/experimental/processes/gemanroncoroniprocess.cpp" bodystart="69" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_geman_roncoroni_process_1a98747fd734549b00fec273fd2d5d2d54" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GemanRoncoroniProcess::evolve</definition>
        <argsstring>(Time t0, Real x0, Time dt, Real dw) const override</argsstring>
        <name>evolve</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::evolve</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process1_d_1a39605ea27c7ef3a7feafed4fafcc1f90">evolve</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>dw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the asset value after a time interval  <formula id="474">$ \Delta t
$</formula> according to the given discretization. By default, it returns   <formula id="483">\[E(x_0,t_0,\Delta t) + S(x_0,t_0,\Delta t) \cdot \Delta w
\]</formula> where <formula id="476">$ E $</formula> is the expectation and <formula id="290">$ S $</formula> the standard deviation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="61" column="14" bodyfile="ql/experimental/processes/gemanroncoroniprocess.cpp" bodystart="75" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_geman_roncoroni_process_1aec5aee3bc8cabb3365087a1e89e7bc47" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GemanRoncoroniProcess::evolve</definition>
        <argsstring>(Time t0, Real x0, Time dt, Real dw, const Array &amp;du) const</argsstring>
        <name>evolve</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::evolve</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>dw</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>du</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="63" column="14" bodyfile="ql/experimental/processes/gemanroncoroniprocess.cpp" bodystart="89" bodyend="115"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_geman_roncoroni_process_1a8d99a715b297d5b6543b1d303a6002c0" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::StochasticProcess::evolve</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt, const Array &amp;dw) const</argsstring>
        <name>evolve</name>
        <qualifiedname>QuantLib::GemanRoncoroniProcess::evolve</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a8d99a715b297d5b6543b1d303a6002c0">evolve</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>dw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the asset value after a time interval  <formula id="474">$ \Delta t
$</formula> according to the given discretization. By default, it returns    <formula id="475">\[E(\mathrm{x}_0,t_0,\Delta t) +
S(\mathrm{x}_0,t_0,\Delta t) \cdot \Delta \mathrm{w}
\]</formula> where <formula id="476">$ E $</formula> is the expectation and <formula id="290">$ S $</formula> the standard deviation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="67" column="9" bodyfile="ql/stochasticprocess.cpp" bodystart="54" bodyend="57"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Geman-Roncoroni process class. </para>
    </briefdescription>
    <detaileddescription>
<para>This class describes the Geman-Roncoroni process governed by         <formula id="176">\[\begin{array}{rcl}
    dE(t) &amp;=&amp; \left[ \frac{\partial}{\partial t} \mu(t)
        +\theta_1 \left(\mu(t)-E(t^-)\right)\right]dt
        +\sigma dW(t) + h(E(t^-))dJ(t) \\
    \mu(t)&amp;=&amp; \alpha + \beta t +\gamma \cos(\epsilon+2\pi t)
        +\delta \cos(\zeta + 4\pi t)
\end{array}
\]</formula> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::GemanRoncoroniProcess</label>
        <link refid="class_quant_lib_1_1_geman_roncoroni_process"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="3">
        <label>QuantLib::StochasticProcess</label>
        <link refid="class_quant_lib_1_1_stochastic_process"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::StochasticProcess1D</label>
        <link refid="class_quant_lib_1_1_stochastic_process1_d"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::GemanRoncoroniProcess</label>
        <link refid="class_quant_lib_1_1_geman_roncoroni_process"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="3">
        <label>QuantLib::StochasticProcess</label>
        <link refid="class_quant_lib_1_1_stochastic_process"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::StochasticProcess1D</label>
        <link refid="class_quant_lib_1_1_stochastic_process1_d"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/processes/gemanroncoroniprocess.hpp" line="46" column="5" bodyfile="ql/experimental/processes/gemanroncoroniprocess.hpp" bodystart="46" bodyend="77"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1a5d4a77e7975b99c1065019df4a0eed5d" prot="private" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>a_</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1a84dad77722aaa42d3321eb8f5f4072c6" prot="private" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>alpha_</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a303b2e3c9243b674ac1f145c304811b7" prot="public" virt="virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>apply</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1aeef61802976e159802df35ce993df651" prot="private" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>b_</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1aea66c1ec6b2a4655b688494def8d2402" prot="private" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>beta_</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1a153a165fa6ba887c9cadea71f7e64b11" prot="private" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>d_</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1ad3f2f62377351fd6be9c8f2653c11bc2" prot="private" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>delta_</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1ac4dd162eae34b40cbcc605e85fb4f19e" prot="public" virt="virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>diffusion</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1aff0e6c615f076baf4393abe860794583" prot="protected" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>discretization_</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1a64516a5f035bcaaf83575297863d78e5" prot="public" virt="virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>drift</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1ad140b4c24b1bd5fbb269ca090b78b60f" prot="private" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>eps_</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1a98747fd734549b00fec273fd2d5d2d54" prot="public" virt="virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>evolve</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1aec5aee3bc8cabb3365087a1e89e7bc47" prot="public" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>evolve</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1a8d99a715b297d5b6543b1d303a6002c0" prot="private" virt="virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>evolve</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a4543779731a4ce76e9dd85f3c81752e7" prot="public" virt="virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>expectation</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0346d38598fb9a5a1cd58024f05081aa" prot="public" virt="virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>factors</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1ae6825d6ef9b0893af2ae1d47feba55ec" prot="private" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>gamma_</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1a556559ef7bb50a529b3ac97eb2d87951" prot="public" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>GemanRoncoroniProcess</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::GemanRoncoroniProcess</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1a2ac41f18f9b7a145ca8abc7cb43a821c" prot="private" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>k_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::GemanRoncoroniProcess</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::GemanRoncoroniProcess</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::GemanRoncoroniProcess</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::GemanRoncoroniProcess</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::GemanRoncoroniProcess</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1a9bc5ccd88a869a9dba6e1f1f4ed652f0" prot="private" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>psi_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1afeec6fc12c7b1e70fb18621c50fb75a8" prot="private" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>sig2_</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1ab62865912f1204c08b75e6231b528f27" prot="public" virt="virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>stdDeviation</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a2dd24b794a6b320bc60ba9e1a87bf48e" prot="protected" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>StochasticProcess</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a957ee9776d6048835106ea29ea44927f" prot="protected" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>StochasticProcess</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a8fd2dc83f956da3dd008242ee5a5c926" prot="protected" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>StochasticProcess1D</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a0971f058bea9a93d2ced17c685576686" prot="protected" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>StochasticProcess1D</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1aedcc7652303e24af9ba6839fdf6e4f13" prot="private" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>tau_</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1aed657eb789722225e1c0de1db88c1e36" prot="private" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>theta1_</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1afa770e66b2ffd234a53e44b8139f705b" prot="private" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>theta2_</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1a736a973858ec67d84f04573a694a109c" prot="private" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>theta3_</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a39c5f08a3779665f9185a558d2b8418d" prot="public" virt="virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>time</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0f22628658fd2dc702c13c354ef3244e" prot="public" virt="virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1a854854bb237786dc2c5cb3a7b9a1539b" prot="private" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>urng_</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1afec760c46c7f53d98cea9befd7087508" prot="public" virt="virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>variance</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1afa934267e14a857eda9e97eaee846920" prot="public" virt="virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>x0</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1ab2f93ea8e420cb86ee49c0827939b9fc" prot="private" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>x0_</name></member>
      <member refid="class_quant_lib_1_1_geman_roncoroni_process_1a6c7d7c493bc03490a360b7b05d56bff2" prot="private" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>zeta_</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0e2b6a14e675db5abd0ab8965ff7b2c3" prot="public" virt="non-virtual"><scope>QuantLib::GemanRoncoroniProcess</scope><name>~StochasticProcess</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
