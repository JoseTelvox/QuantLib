<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_analytic_heston_engine" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::AnalyticHestonEngine</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_generic_model_engine" prot="public" virt="non-virtual">QuantLib::GenericModelEngine&lt; HestonModel, VanillaOption::arguments, VanillaOption::results &gt;</basecompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_analytic_heston_hull_white_engine" prot="public" virt="non-virtual">QuantLib::AnalyticHestonHullWhiteEngine</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_bates_double_exp_engine" prot="public" virt="non-virtual">QuantLib::BatesDoubleExpEngine</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_bates_engine" prot="public" virt="non-virtual">QuantLib::BatesEngine</derivedcompoundref>
    <includes refid="analytichestonengine_8hpp" local="no">analytichestonengine.hpp</includes>
    <innerclass refid="class_quant_lib_1_1_analytic_heston_engine_1_1_a_p___helper" prot="public">QuantLib::AnalyticHestonEngine::AP_Helper</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_heston_engine_1_1_fj___helper" prot="public">QuantLib::AnalyticHestonEngine::Fj_Helper</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_heston_engine_1_1_integration" prot="public">QuantLib::AnalyticHestonEngine::Integration</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_heston_engine_1_1_optimal_alpha" prot="public">QuantLib::AnalyticHestonEngine::OptimalAlpha</innerclass>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9" prot="public" static="no" strong="no">
        <type></type>
        <name>ComplexLogFormula</name>
        <qualifiedname>QuantLib::AnalyticHestonEngine::ComplexLogFormula</qualifiedname>
        <enumvalue id="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9afeafbbdface61417ba7352bbe1089350" prot="public">
          <name>Gatheral</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9a1ee33f1ea49508f9dc81df0617c2ec50" prot="public">
          <name>BranchCorrection</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9aebaa9c2dfe01cf6ef293c45bc703f04f" prot="public">
          <name>AndersenPiterbarg</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9a6870bde1aa2714255c0c2c3446aa34a1" prot="public">
          <name>AndersenPiterbargOptCV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9ade9ab8c105891c639fb401df91ab0ca8" prot="public">
          <name>AsymptoticChF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9ae6559f4eebda2f3aca5c186667abafd5" prot="public">
          <name>AngledContour</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9a50982e98a3cf9a3eb2a74d7f571233f5" prot="public">
          <name>AngledContourNoCV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9af251c06ef4c920b737aed7c71121d8d7" prot="public">
          <name>OptimalCV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/analytichestonengine.hpp" line="100" column="9" bodyfile="ql/pricingengines/vanilla/analytichestonengine.hpp" bodystart="100" bodyend="118"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_heston_engine_1aa3a2f2a48badbc511adb06d543e55b6f" prot="private" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::AnalyticHestonEngine::evaluations_</definition>
        <argsstring></argsstring>
        <name>evaluations_</name>
        <qualifiedname>QuantLib::AnalyticHestonEngine::evaluations_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/analytichestonengine.hpp" line="191" column="22" bodyfile="ql/pricingengines/vanilla/analytichestonengine.hpp" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_heston_engine_1a2be6bccc4f451d7810c8d802310912b7" prot="private" static="no" mutable="no">
        <type>const ComplexLogFormula</type>
        <definition>const ComplexLogFormula QuantLib::AnalyticHestonEngine::cpxLog_</definition>
        <argsstring></argsstring>
        <name>cpxLog_</name>
        <qualifiedname>QuantLib::AnalyticHestonEngine::cpxLog_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/analytichestonengine.hpp" line="192" column="33" bodyfile="ql/pricingengines/vanilla/analytichestonengine.hpp" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_heston_engine_1ae3a882d9700ea97d12b911c45f67cf72" prot="private" static="no" mutable="no">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_analytic_heston_engine_1_1_integration" kindref="compound">Integration</ref> &gt;</type>
        <definition>const ext::shared_ptr&lt;Integration&gt; QuantLib::AnalyticHestonEngine::integration_</definition>
        <argsstring></argsstring>
        <name>integration_</name>
        <qualifiedname>QuantLib::AnalyticHestonEngine::integration_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/analytichestonengine.hpp" line="193" column="31" bodyfile="ql/pricingengines/vanilla/analytichestonengine.hpp" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_heston_engine_1aa4f7f4d38b98991489d52e136dabb46d" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::AnalyticHestonEngine::andersenPiterbargEpsilon_</definition>
        <argsstring></argsstring>
        <name>andersenPiterbargEpsilon_</name>
        <qualifiedname>QuantLib::AnalyticHestonEngine::andersenPiterbargEpsilon_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/analytichestonengine.hpp" line="194" column="20" bodyfile="ql/pricingengines/vanilla/analytichestonengine.hpp" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_heston_engine_1a4568871f40e4d0055941a22f00b19fec" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::AnalyticHestonEngine::alpha_</definition>
        <argsstring></argsstring>
        <name>alpha_</name>
        <qualifiedname>QuantLib::AnalyticHestonEngine::alpha_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/analytichestonengine.hpp" line="194" column="46" bodyfile="ql/pricingengines/vanilla/analytichestonengine.hpp" bodystart="194" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_heston_engine_1a38dd22f9c1334c9af7ab89e046c5f93f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::AnalyticHestonEngine::AnalyticHestonEngine</definition>
        <argsstring>(const ext::shared_ptr&lt; HestonModel &gt; &amp;model, Real relTolerance, Size maxEvaluations)</argsstring>
        <name>AnalyticHestonEngine</name>
        <qualifiedname>QuantLib::AnalyticHestonEngine::AnalyticHestonEngine</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_heston_model" kindref="compound">HestonModel</ref> &gt; &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>relTolerance</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxEvaluations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/analytichestonengine.hpp" line="125" column="9" bodyfile="ql/pricingengines/vanilla/analytichestonengine.cpp" bodystart="675" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_heston_engine_1a27867f49dd312a798485aa6e72794af3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::AnalyticHestonEngine::AnalyticHestonEngine</definition>
        <argsstring>(const ext::shared_ptr&lt; HestonModel &gt; &amp;model, Size integrationOrder=144)</argsstring>
        <name>AnalyticHestonEngine</name>
        <qualifiedname>QuantLib::AnalyticHestonEngine::AnalyticHestonEngine</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_heston_model" kindref="compound">HestonModel</ref> &gt; &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>integrationOrder</declname>
          <defval>144</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/analytichestonengine.hpp" line="130" column="9" bodyfile="ql/pricingengines/vanilla/analytichestonengine.cpp" bodystart="661" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_heston_engine_1a41d72ab5bcbbdde71e415e1367d7f5c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::AnalyticHestonEngine::AnalyticHestonEngine</definition>
        <argsstring>(const ext::shared_ptr&lt; HestonModel &gt; &amp;model, ComplexLogFormula cpxLog, const Integration &amp;itg, Real andersenPiterbargEpsilon=1e-25, Real alpha=-0.5)</argsstring>
        <name>AnalyticHestonEngine</name>
        <qualifiedname>QuantLib::AnalyticHestonEngine::AnalyticHestonEngine</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_heston_model" kindref="compound">HestonModel</ref> &gt; &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>ComplexLogFormula</type>
          <declname>cpxLog</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_analytic_heston_engine_1_1_integration" kindref="compound">Integration</ref> &amp;</type>
          <declname>itg</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>andersenPiterbargEpsilon</declname>
          <defval>1e-25</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>alpha</declname>
          <defval>-0.5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/analytichestonengine.hpp" line="135" column="9" bodyfile="ql/pricingengines/vanilla/analytichestonengine.cpp" bodystart="689" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_heston_engine_1a9120eef6538bf14cff0424773b89c8a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::AnalyticHestonEngine::calculate</definition>
        <argsstring>() const override</argsstring>
        <name>calculate</name>
        <qualifiedname>QuantLib::AnalyticHestonEngine::calculate</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_pricing_engine_1ad2be11cff80d9792f0cc8231711fcb06">calculate</reimplements>
        <reimplementedby refid="class_quant_lib_1_1_analytic_heston_hull_white_engine_1a8d798d81498d0cb6a445603ea060ec4e">calculate</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/analytichestonengine.hpp" line="140" column="14" bodyfile="ql/pricingengines/vanilla/analytichestonengine.cpp" bodystart="863" bodyend="877"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_heston_engine_1afd2c50b1835b62f16e96370e90c3d837" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::complex&lt; Real &gt; QuantLib::AnalyticHestonEngine::chF</definition>
        <argsstring>(const std::complex&lt; Real &gt; &amp;z, Time t) const</argsstring>
        <name>chF</name>
        <qualifiedname>QuantLib::AnalyticHestonEngine::chF</qualifiedname>
        <param>
          <type>const std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/analytichestonengine.hpp" line="143" column="22" bodyfile="ql/pricingengines/vanilla/analytichestonengine.cpp" bodystart="580" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_heston_engine_1a0c7bd9e9dbcffe9f972603e40d0840cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::complex&lt; Real &gt; QuantLib::AnalyticHestonEngine::lnChF</definition>
        <argsstring>(const std::complex&lt; Real &gt; &amp;z, Time t) const</argsstring>
        <name>lnChF</name>
        <qualifiedname>QuantLib::AnalyticHestonEngine::lnChF</qualifiedname>
        <param>
          <type>const std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/analytichestonengine.hpp" line="144" column="22" bodyfile="ql/pricingengines/vanilla/analytichestonengine.cpp" bodystart="623" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_heston_engine_1a426d2f9905ff55527a26591cd6bf6649" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::AnalyticHestonEngine::numberOfEvaluations</definition>
        <argsstring>() const</argsstring>
        <name>numberOfEvaluations</name>
        <qualifiedname>QuantLib::AnalyticHestonEngine::numberOfEvaluations</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/analytichestonengine.hpp" line="146" column="14" bodyfile="ql/pricingengines/vanilla/analytichestonengine.cpp" bodystart="723" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_heston_engine_1a8dbe26195890fc9297e79408c089a647" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticHestonEngine::priceVanillaPayoff</definition>
        <argsstring>(const ext::shared_ptr&lt; PlainVanillaPayoff &gt; &amp;payoff, const Date &amp;maturity) const</argsstring>
        <name>priceVanillaPayoff</name>
        <qualifiedname>QuantLib::AnalyticHestonEngine::priceVanillaPayoff</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_plain_vanilla_payoff" kindref="compound">PlainVanillaPayoff</ref> &gt; &amp;</type>
          <declname>payoff</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>maturity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/analytichestonengine.hpp" line="166" column="14" bodyfile="ql/pricingengines/vanilla/analytichestonengine.cpp" bodystart="727" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_heston_engine_1a7cff1b17a4ebcd6b048143ce1481013c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticHestonEngine::priceVanillaPayoff</definition>
        <argsstring>(const ext::shared_ptr&lt; PlainVanillaPayoff &gt; &amp;payoff, Time maturity) const</argsstring>
        <name>priceVanillaPayoff</name>
        <qualifiedname>QuantLib::AnalyticHestonEngine::priceVanillaPayoff</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_plain_vanilla_payoff" kindref="compound">PlainVanillaPayoff</ref> &gt; &amp;</type>
          <declname>payoff</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>maturity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/analytichestonengine.hpp" line="170" column="14" bodyfile="ql/pricingengines/vanilla/analytichestonengine.cpp" bodystart="739" bodyend="748"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_heston_engine_1a197d2ed18505819fa83a968748faaf67" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::AnalyticHestonEngine::doCalculation</definition>
        <argsstring>(Real riskFreeDiscount, Real dividendDiscount, Real spotPrice, Real strikePrice, Real term, Real kappa, Real theta, Real sigma, Real v0, Real rho, const TypePayoff &amp;type, const Integration &amp;integration, ComplexLogFormula cpxLog, const AnalyticHestonEngine *enginePtr, Real &amp;value, Size &amp;evaluations)</argsstring>
        <name>doCalculation</name>
        <qualifiedname>QuantLib::AnalyticHestonEngine::doCalculation</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>riskFreeDiscount</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>dividendDiscount</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>spotPrice</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>strikePrice</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>term</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>kappa</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>theta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>sigma</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>v0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>rho</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_type_payoff" kindref="compound">TypePayoff</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_analytic_heston_engine_1_1_integration" kindref="compound">Integration</ref> &amp;</type>
          <declname>integration</declname>
        </param>
        <param>
          <type>ComplexLogFormula</type>
          <declname>cpxLog</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_analytic_heston_engine" kindref="compound">AnalyticHestonEngine</ref> *</type>
          <declname>enginePtr</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &amp;</type>
          <declname>evaluations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/analytichestonengine.hpp" line="149" column="21" bodyfile="ql/pricingengines/vanilla/analytichestonengine.cpp" bodystart="1070" bodyend="1164"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_heston_engine_1aad20f20041025c9558f04f37aff39049" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ComplexLogFormula</type>
        <definition>AnalyticHestonEngine::ComplexLogFormula QuantLib::AnalyticHestonEngine::optimalControlVariate</definition>
        <argsstring>(Time t, Real v0, Real kappa, Real theta, Real sigma, Real rho)</argsstring>
        <name>optimalControlVariate</name>
        <qualifiedname>QuantLib::AnalyticHestonEngine::optimalControlVariate</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>v0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>kappa</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>theta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>sigma</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>rho</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/analytichestonengine.hpp" line="173" column="34" bodyfile="ql/pricingengines/vanilla/analytichestonengine.cpp" bodystart="710" bodyend="721"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_heston_engine_1a5ae5103221990f608acda4260108693a" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::complex&lt; Real &gt; QuantLib::AnalyticHestonEngine::addOnTerm</definition>
        <argsstring>(Real phi, Time t, Size j) const</argsstring>
        <name>addOnTerm</name>
        <qualifiedname>QuantLib::AnalyticHestonEngine::addOnTerm</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_analytic_h1_h_w_engine_1a22cbdc5272f63ab508415f1ccb518fea">addOnTerm</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_analytic_heston_hull_white_engine_1afcff3bcebf478b29d65db7f1ca83edfc">addOnTerm</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_bates_det_jump_engine_1a6d60dffd81b37e72ac11e6e46674577e">addOnTerm</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_bates_double_exp_det_jump_engine_1a52288537a71c8235aad11a23668b383e">addOnTerm</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_bates_double_exp_engine_1ade1daa9b6861d9c51cde25c8e33501a7">addOnTerm</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_bates_engine_1a0ede49660337a2730c9a3fae52074a71">addOnTerm</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/analytichestonengine.hpp" line="179" column="30" bodyfile="ql/pricingengines/vanilla/analytichestonengine.hpp" bodystart="307" bodyend="310"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_heston_engine_1aaf00baedf6985fca3e06252398eb765c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticHestonEngine::priceVanillaPayoff</definition>
        <argsstring>(const ext::shared_ptr&lt; PlainVanillaPayoff &gt; &amp;payoff, Time maturity, Real fwd) const</argsstring>
        <name>priceVanillaPayoff</name>
        <qualifiedname>QuantLib::AnalyticHestonEngine::priceVanillaPayoff</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_plain_vanilla_payoff" kindref="compound">PlainVanillaPayoff</ref> &gt; &amp;</type>
          <declname>payoff</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>maturity</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>fwd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/analytichestonengine.hpp" line="186" column="14" bodyfile="ql/pricingengines/vanilla/analytichestonengine.cpp" bodystart="750" bodyend="861"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>analytic Heston-model engine based on Fourier transform </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_quant_lib_1_1_analytic_heston_engine_1_1_integration" kindref="compound">Integration</ref> detail: Two algebraically equivalent formulations of the complex logarithm of the Heston model exist. Gatherals [2005] (also Duffie, Pan and <ref refid="class_quant_lib_1_1_singleton" kindref="compound">Singleton</ref> [2000], and Schoutens, Simons and Tistaert[2004]) version does not cause discoutinuities whereas the original version (e.g. Heston [1993]) needs some sort of &quot;branch correction&quot; to work properly. Gatheral&apos;s version does also work with adaptive integration routines and should be preferred over the original Heston version.</para>
<para>References:</para>
<para>Heston, Steven L., 1993. A Closed-Form Solution for Options with Stochastic <ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref> with Applications to <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> and <ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref> Options. The review of Financial Studies, Volume 6, Issue 2, 327-343.</para>
<para>A. Sepp, Pricing European-Style Options under Jump Diffusion Processes with Stochastic <ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref>: Applications of Fourier Transform (<ulink url="http://math.ut.ee/~spartak/papers/stochjumpvols.pdf">http://math.ut.ee/~spartak/papers/stochjumpvols.pdf</ulink>)</para>
<para>R. Lord and C. Kahl, Why the rotation count algorithm works, <ulink url="http://papers.ssrn.com/sol3/papers.cfm?abstract_id=921335">http://papers.ssrn.com/sol3/papers.cfm?abstract_id=921335</ulink></para>
<para>H. Albrecher, P. Mayer, W.Schoutens and J. Tistaert, The Little Heston Trap, <ulink url="http://www.schoutens.be/HestonTrap.pdf">http://www.schoutens.be/HestonTrap.pdf</ulink></para>
<para>J. Gatheral, The <ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref> Surface: A Practitioner&apos;s Guide, Wiley Finance</para>
<para>F. Le Floc&apos;h, Fourier <ref refid="class_quant_lib_1_1_analytic_heston_engine_1_1_integration" kindref="compound">Integration</ref> and Stochastic <ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref> Calibration, <ulink url="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2362968">https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2362968</ulink></para>
<para>L. Andersen, and V. Piterbarg, 2010, Interest <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> Modeling, Volume I: Foundations and Vanilla Models, Atlantic Financial Press London.</para>
<para>L. Andersen and M. Lake, 2018 Robust High-Precision <ref refid="class_quant_lib_1_1_option" kindref="compound">Option</ref> Pricing by Fourier Transforms: Contour Deformations and Double-Exponential Quadrature, <ulink url="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3231626">https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3231626</ulink></para>
<para><xrefsect id="test_1_test000142"><xreftitle>Test</xreftitle><xrefdescription><para>the correctness of the returned value is tested by reproducing results available in web/literature and comparison with Black pricing. </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="8">
        <label>QuantLib::AnalyticH1HWEngine</label>
        <link refid="class_quant_lib_1_1_analytic_h1_h_w_engine"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::AnalyticHestonEngine</label>
        <link refid="class_quant_lib_1_1_analytic_heston_engine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::AnalyticHestonHullWhiteEngine</label>
        <link refid="class_quant_lib_1_1_analytic_heston_hull_white_engine"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>QuantLib::BatesDetJumpEngine</label>
        <link refid="class_quant_lib_1_1_bates_det_jump_engine"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>QuantLib::BatesDoubleExpDetJumpEngine</label>
        <link refid="class_quant_lib_1_1_bates_double_exp_det_jump_engine"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>QuantLib::BatesDoubleExpEngine</label>
        <link refid="class_quant_lib_1_1_bates_double_exp_engine"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>QuantLib::BatesEngine</label>
        <link refid="class_quant_lib_1_1_bates_engine"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::GenericEngine&lt; VanillaOption::arguments, VanillaOption::results &gt;</label>
        <link refid="class_quant_lib_1_1_generic_engine"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::GenericModelEngine&lt; HestonModel, VanillaOption::arguments, VanillaOption::results &gt;</label>
        <link refid="class_quant_lib_1_1_generic_model_engine"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="6">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="4">
        <label>QuantLib::PricingEngine</label>
        <link refid="class_quant_lib_1_1_pricing_engine"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::AnalyticHestonEngine</label>
        <link refid="class_quant_lib_1_1_analytic_heston_engine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::GenericEngine&lt; VanillaOption::arguments, VanillaOption::results &gt;</label>
        <link refid="class_quant_lib_1_1_generic_engine"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::GenericModelEngine&lt; HestonModel, VanillaOption::arguments, VanillaOption::results &gt;</label>
        <link refid="class_quant_lib_1_1_generic_model_engine"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>model_</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::Handle&lt; HestonModel &gt;</label>
        <link refid="class_quant_lib_1_1_handle"/>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="6">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="4">
        <label>QuantLib::PricingEngine</label>
        <link refid="class_quant_lib_1_1_pricing_engine"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/pricingengines/vanilla/analytichestonengine.hpp" line="91" column="5" bodyfile="ql/pricingengines/vanilla/analytichestonengine.hpp" bodystart="94" bodyend="195"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a5ae5103221990f608acda4260108693a" prot="protected" virt="virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>addOnTerm</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a4568871f40e4d0055941a22f00b19fec" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>alpha_</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a38dd22f9c1334c9af7ab89e046c5f93f" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>AnalyticHestonEngine</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a27867f49dd312a798485aa6e72794af3" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>AnalyticHestonEngine</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a41d72ab5bcbbdde71e415e1367d7f5c8" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>AnalyticHestonEngine</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9aebaa9c2dfe01cf6ef293c45bc703f04f" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>AndersenPiterbarg</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1aa4f7f4d38b98991489d52e136dabb46d" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>andersenPiterbargEpsilon_</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9a6870bde1aa2714255c0c2c3446aa34a1" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>AndersenPiterbargOptCV</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9ae6559f4eebda2f3aca5c186667abafd5" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>AngledContour</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9a50982e98a3cf9a3eb2a74d7f571233f5" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>AngledContourNoCV</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1ad2371cdbafa1989afb0e4733b1212c0d" prot="protected" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>arguments_</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9ade9ab8c105891c639fb401df91ab0ca8" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>AsymptoticChF</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9a1ee33f1ea49508f9dc81df0617c2ec50" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>BranchCorrection</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a9120eef6538bf14cff0424773b89c8a0" prot="public" virt="virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1afd2c50b1835b62f16e96370e90c3d837" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>chF</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>ComplexLogFormula</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a2be6bccc4f451d7810c8d802310912b7" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>cpxLog_</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a197d2ed18505819fa83a968748faaf67" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>doCalculation</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1aa3a2f2a48badbc511adb06d543e55b6f" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>evaluations_</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9afeafbbdface61417ba7352bbe1089350" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>Gatheral</name></member>
      <member refid="class_quant_lib_1_1_generic_model_engine_1ab8c094dbe99234f8aa9dc0a92e0e5fd1" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>GenericModelEngine</name></member>
      <member refid="class_quant_lib_1_1_generic_model_engine_1a8ab246499452beddca7225a2c63f8549" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>GenericModelEngine</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1ad9c6e8dc65ca072d5e6e17640d74db3e" prot="public" virt="virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>getArguments</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1aea8272ef6e5e0ea1cffadfed0454fa88" prot="public" virt="virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>getResults</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1ae3a882d9700ea97d12b911c45f67cf72" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>integration_</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a0c7bd9e9dbcffe9f972603e40d0840cc" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>lnChF</name></member>
      <member refid="class_quant_lib_1_1_generic_model_engine_1a48733a3abfeb33214816709c9c5c6b62" prot="protected" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>model_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a426d2f9905ff55527a26591cd6bf6649" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>numberOfEvaluations</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::AnalyticHestonEngine</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::AnalyticHestonEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::AnalyticHestonEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::AnalyticHestonEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1aad20f20041025c9558f04f37aff39049" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>optimalControlVariate</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9af251c06ef4c920b737aed7c71121d8d7" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>OptimalCV</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a8dbe26195890fc9297e79408c089a647" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>priceVanillaPayoff</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a7cff1b17a4ebcd6b048143ce1481013c" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>priceVanillaPayoff</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1aaf00baedf6985fca3e06252398eb765c" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>priceVanillaPayoff</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1a81c5390ba1e713e57ca87d5f841d37f2" prot="public" virt="virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>reset</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1a41281f2ea4990dbce90be1f9f2e231f6" prot="protected" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>results_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1aaf5ef54d9e1abf8b1b50b48804edf3dc" prot="public" virt="virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_pricing_engine_1a66b279a54578cd7e60d402e5147eb526" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticHestonEngine</scope><name>~PricingEngine</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
