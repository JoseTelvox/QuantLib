<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_inverse_cumulative_rng" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::InverseCumulativeRng</compoundname>
    <includes refid="inversecumulativerng_8hpp" local="no">inversecumulativerng.hpp</includes>
    <templateparamlist>
      <param>
        <type>class RNG</type>
      </param>
      <param>
        <type>class IC</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_inverse_cumulative_rng_1aa0980771f912df42698108945f141375" prot="public" static="no">
        <type><ref refid="struct_quant_lib_1_1_sample" kindref="compound">Sample</ref>&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>typedef Sample&lt;Real&gt; QuantLib::InverseCumulativeRng&lt; RNG, IC &gt;::sample_type</definition>
        <argsstring></argsstring>
        <name>sample_type</name>
        <qualifiedname>QuantLib::InverseCumulativeRng::sample_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/inversecumulativerng.hpp" line="56" column="24" bodyfile="ql/math/randomnumbers/inversecumulativerng.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_inverse_cumulative_rng_1ada9116c1b97ac97f1dbbbcfc0368b92d" prot="public" static="no">
        <type>RNG</type>
        <definition>typedef RNG QuantLib::InverseCumulativeRng&lt; RNG, IC &gt;::urng_type</definition>
        <argsstring></argsstring>
        <name>urng_type</name>
        <qualifiedname>QuantLib::InverseCumulativeRng::urng_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/inversecumulativerng.hpp" line="57" column="21" bodyfile="ql/math/randomnumbers/inversecumulativerng.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_inverse_cumulative_rng_1ace9deaf8e982c195a7ea175ec79479fe" prot="private" static="no" mutable="no">
        <type>RNG</type>
        <definition>RNG QuantLib::InverseCumulativeRng&lt; RNG, IC &gt;::uniformGenerator_</definition>
        <argsstring></argsstring>
        <name>uniformGenerator_</name>
        <qualifiedname>QuantLib::InverseCumulativeRng::uniformGenerator_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/inversecumulativerng.hpp" line="62" column="13" bodyfile="ql/math/randomnumbers/inversecumulativerng.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_inverse_cumulative_rng_1a56a418e66e7c62b66bfc5c8cfdd835fc" prot="private" static="no" mutable="no">
        <type>IC</type>
        <definition>IC QuantLib::InverseCumulativeRng&lt; RNG, IC &gt;::ICND_</definition>
        <argsstring></argsstring>
        <name>ICND_</name>
        <qualifiedname>QuantLib::InverseCumulativeRng::ICND_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/inversecumulativerng.hpp" line="63" column="12" bodyfile="ql/math/randomnumbers/inversecumulativerng.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_inverse_cumulative_rng_1ab120367b6c65ee1f86a436846069b975" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::InverseCumulativeRng&lt; RNG, IC &gt;::InverseCumulativeRng</definition>
        <argsstring>(const RNG &amp;uniformGenerator)</argsstring>
        <name>InverseCumulativeRng</name>
        <qualifiedname>QuantLib::InverseCumulativeRng::InverseCumulativeRng</qualifiedname>
        <param>
          <type>const RNG &amp;</type>
          <declname>uniformGenerator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/inversecumulativerng.hpp" line="58" column="18" bodyfile="ql/math/randomnumbers/inversecumulativerng.hpp" bodystart="67" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_inverse_cumulative_rng_1a40a735a8877152ca41b6f6748035ada7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_quant_lib_1_1_sample" kindref="compound">sample_type</ref></type>
        <definition>InverseCumulativeRng&lt; RNG, IC &gt;::sample_type QuantLib::InverseCumulativeRng&lt; RNG, IC &gt;::next</definition>
        <argsstring>() const</argsstring>
        <name>next</name>
        <qualifiedname>QuantLib::InverseCumulativeRng::next</qualifiedname>
        <briefdescription>
<para>returns a sample from a Gaussian distribution </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/inversecumulativerng.hpp" line="60" column="21" bodyfile="ql/math/randomnumbers/inversecumulativerng.hpp" bodystart="72" bodyend="75"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Inverse cumulative random number generator. </para>
    </briefdescription>
    <detaileddescription>
<para>It uses a uniform deviate in (0, 1) as the source of cumulative distribution values. Then an inverse cumulative distribution is used to calculate the distribution deviate.</para>
<para>The uniform deviate is supplied by RNG.</para>
<para>Class RNG must implement the following interface: <programlisting><codeline><highlight class="normal">RNG::sample_type<sp/>RNG::next()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
</programlisting></para>
<para>The inverse cumulative distribution is supplied by IC.</para>
<para>Class IC must implement the following interface: <programlisting><codeline><highlight class="normal">IC::IC();</highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>IC::operator()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="ql/math/randomnumbers/inversecumulativerng.hpp" line="54" column="5" bodyfile="ql/math/randomnumbers/inversecumulativerng.hpp" bodystart="54" bodyend="64"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_inverse_cumulative_rng_1a56a418e66e7c62b66bfc5c8cfdd835fc" prot="private" virt="non-virtual"><scope>QuantLib::InverseCumulativeRng</scope><name>ICND_</name></member>
      <member refid="class_quant_lib_1_1_inverse_cumulative_rng_1ab120367b6c65ee1f86a436846069b975" prot="public" virt="non-virtual"><scope>QuantLib::InverseCumulativeRng</scope><name>InverseCumulativeRng</name></member>
      <member refid="class_quant_lib_1_1_inverse_cumulative_rng_1a40a735a8877152ca41b6f6748035ada7" prot="public" virt="non-virtual"><scope>QuantLib::InverseCumulativeRng</scope><name>next</name></member>
      <member refid="class_quant_lib_1_1_inverse_cumulative_rng_1aa0980771f912df42698108945f141375" prot="public" virt="non-virtual"><scope>QuantLib::InverseCumulativeRng</scope><name>sample_type</name></member>
      <member refid="class_quant_lib_1_1_inverse_cumulative_rng_1ace9deaf8e982c195a7ea175ec79479fe" prot="private" virt="non-virtual"><scope>QuantLib::InverseCumulativeRng</scope><name>uniformGenerator_</name></member>
      <member refid="class_quant_lib_1_1_inverse_cumulative_rng_1ada9116c1b97ac97f1dbbbcfc0368b92d" prot="public" virt="non-virtual"><scope>QuantLib::InverseCumulativeRng</scope><name>urng_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
