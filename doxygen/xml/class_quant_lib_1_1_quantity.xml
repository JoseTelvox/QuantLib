<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_quantity" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::Quantity</compoundname>
    <includes refid="quantity_8hpp" local="no">quantity.hpp</includes>
    <sectiondef kind="user-defined">
      <header>Conversion settings</header>
      <description><para>These parameters are used for combining quantity amounts in different currencies </para>
</description>
      <memberdef kind="enum" id="class_quant_lib_1_1_quantity_1a6f8edeaf953828a832b59440d12f33b1" prot="public" static="no" strong="no">
        <type></type>
        <name>ConversionType</name>
        <qualifiedname>QuantLib::Quantity::ConversionType</qualifiedname>
        <enumvalue id="class_quant_lib_1_1_quantity_1a6f8edeaf953828a832b59440d12f33b1a3f3b094359a7b625c6249bb5630c9c03" prot="public">
          <name>NoConversion</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>do not perform conversions </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_quantity_1a6f8edeaf953828a832b59440d12f33b1af2646ad5adc18876bb645f87a38cad08" prot="public">
          <name>BaseUnitOfMeasureConversion</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>convert both operands to the base unitOfMeasure before converting </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_quantity_1a6f8edeaf953828a832b59440d12f33b1aa3faba7931bd8bcc7685594c87c0786d" prot="public">
          <name>AutomatedConversion</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>return the result in the unitOfMeasure of the first operand </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="67" column="9" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="67" bodyend="75"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_quantity_1a5c76fc64b4ec2cb647d2190bdc44bb1f" prot="public" static="yes" mutable="no">
        <type><ref refid="class_quant_lib_1_1_quantity_1a6f8edeaf953828a832b59440d12f33b1" kindref="member">ConversionType</ref></type>
        <definition>Quantity::ConversionType QuantLib::Quantity::conversionType</definition>
        <argsstring></argsstring>
        <name>conversionType</name>
        <qualifiedname>QuantLib::Quantity::conversionType</qualifiedname>
        <initializer>= <ref refid="class_quant_lib_1_1_quantity_1a6f8edeaf953828a832b59440d12f33b1a3f3b094359a7b625c6249bb5630c9c03" kindref="member">Quantity::NoConversion</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="76" column="31" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_quantity_1abb69a59fbb78006a5e7882c53d8126ec" prot="public" static="yes" mutable="no">
        <type><ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref></type>
        <definition>UnitOfMeasure QuantLib::Quantity::baseUnitOfMeasure</definition>
        <argsstring></argsstring>
        <name>baseUnitOfMeasure</name>
        <qualifiedname>QuantLib::Quantity::baseUnitOfMeasure</qualifiedname>
        <initializer>= <ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="77" column="30" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_quantity_1aabee70add850ba7c77b243990144f33d" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref></type>
        <definition>CommodityType QuantLib::Quantity::commodityType_</definition>
        <argsstring></argsstring>
        <name>commodityType_</name>
        <qualifiedname>QuantLib::Quantity::commodityType_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="82" column="23" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_quantity_1a8ce91a59fdfec7a7f58ea253449196b7" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref></type>
        <definition>UnitOfMeasure QuantLib::Quantity::unitOfMeasure_</definition>
        <argsstring></argsstring>
        <name>unitOfMeasure_</name>
        <qualifiedname>QuantLib::Quantity::unitOfMeasure_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="83" column="23" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_quantity_1a866a3c6dc88f7a812722f58e430e5b69" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Quantity::amount_</definition>
        <argsstring></argsstring>
        <name>amount_</name>
        <qualifiedname>QuantLib::Quantity::amount_</qualifiedname>
        <initializer>= 0.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="84" column="14" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_quant_lib_1_1_quantity_1ab21e4a8e1226c72f1ab4885d5689704e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Quantity &amp;quantity)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::Quantity::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="80" column="16" bodyfile="ql/experimental/commodities/quantity.cpp" bodystart="202" bodyend="205"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Constructors</header>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1a8ffdb969ad1a051aa64dd318d8bd81f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Quantity::Quantity</definition>
        <argsstring>()=default</argsstring>
        <name>Quantity</name>
        <qualifiedname>QuantLib::Quantity::Quantity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="38" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1aac5f8d87a31ec573dc9e3f2b20389c79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Quantity::Quantity</definition>
        <argsstring>(CommodityType commodityType, UnitOfMeasure unitOfMeasure, Real amount)</argsstring>
        <name>Quantity</name>
        <qualifiedname>QuantLib::Quantity::Quantity</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref></type>
          <declname>commodityType</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref></type>
          <declname>unitOfMeasure</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>amount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="39" column="9" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="124" bodyend="126"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Inspectors</header>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1ad97a1ad7f8c42117dbde2dbaea7cc26e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref> &amp;</type>
        <definition>const CommodityType &amp; QuantLib::Quantity::commodityType</definition>
        <argsstring>() const</argsstring>
        <name>commodityType</name>
        <qualifiedname>QuantLib::Quantity::commodityType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="43" column="29" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="128" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1a6d3c7e740a9e8690d3d63ff405420209" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref> &amp;</type>
        <definition>const UnitOfMeasure &amp; QuantLib::Quantity::unitOfMeasure</definition>
        <argsstring>() const</argsstring>
        <name>unitOfMeasure</name>
        <qualifiedname>QuantLib::Quantity::unitOfMeasure</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="44" column="29" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="132" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1a85a19dec690df53ae922f1659df9247a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Quantity::amount</definition>
        <argsstring>() const</argsstring>
        <name>amount</name>
        <qualifiedname>QuantLib::Quantity::amount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="45" column="14" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="136" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1a7c749cba22b2d86251e39910580b63c0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref></type>
        <definition>Quantity QuantLib::Quantity::rounded</definition>
        <argsstring>() const</argsstring>
        <name>rounded</name>
        <qualifiedname>QuantLib::Quantity::rounded</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="46" column="18" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="140" bodyend="144"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Quantity arithmetics</header>
      <description><para>See below for non-member functions and for settings which determine the behavior of the operators. </para>
</description>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1a39877ff7bdf37569cdaeda99b2af013d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref></type>
        <definition>Quantity QuantLib::Quantity::operator+</definition>
        <argsstring>() const</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Quantity::operator+</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="54" column="18" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="146" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1a4e7503a1a7ff241169bd07bba4f4436d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref></type>
        <definition>Quantity QuantLib::Quantity::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Quantity::operator-</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="55" column="18" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="150" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1a99594f59eaa0e43ee39dffcbc5aa16b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        <definition>Quantity &amp; QuantLib::Quantity::operator+=</definition>
        <argsstring>(const Quantity &amp;)</argsstring>
        <name>operator+=</name>
        <qualifiedname>QuantLib::Quantity::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <defname>m</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="56" column="18" bodyfile="ql/experimental/commodities/quantity.cpp" bodystart="50" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1a3239a2c3c423ea0c8cf0135cf71bef5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        <definition>Quantity &amp; QuantLib::Quantity::operator-=</definition>
        <argsstring>(const Quantity &amp;)</argsstring>
        <name>operator-=</name>
        <qualifiedname>QuantLib::Quantity::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <defname>m</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="57" column="18" bodyfile="ql/experimental/commodities/quantity.cpp" bodystart="68" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1a03c2de8499890ee6dd91cffa5d250b97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        <definition>Quantity &amp; QuantLib::Quantity::operator*=</definition>
        <argsstring>(Real)</argsstring>
        <name>operator*=</name>
        <qualifiedname>QuantLib::Quantity::operator*=</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="58" column="18" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1a6de632656e676dcd9acd0afa74cea776" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        <definition>Quantity &amp; QuantLib::Quantity::operator/=</definition>
        <argsstring>(Real)</argsstring>
        <name>operator/=</name>
        <qualifiedname>QuantLib::Quantity::operator/=</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <defname>x</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="59" column="18" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="159" bodyend="162"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="related">
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1afbdc8e55dbb347a2dc5f84d6ac93f83c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref></type>
        <definition>Quantity operator+</definition>
        <argsstring>(const Quantity &amp;, const Quantity &amp;)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Quantity::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="91" column="14" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="165" bodyend="169" declfile="ql/experimental/commodities/quantity.hpp" declline="91" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1ad78fa7a2b2c87df291ea92b30b4ab21e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref></type>
        <definition>Quantity operator-</definition>
        <argsstring>(const Quantity &amp;, const Quantity &amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Quantity::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="93" column="14" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="171" bodyend="175" declfile="ql/experimental/commodities/quantity.hpp" declline="93" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1a9d5ba8f98f7b4996e5e9ed2e57ac24cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref></type>
        <definition>Quantity operator*</definition>
        <argsstring>(const Quantity &amp;, Real)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Quantity::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="95" column="14" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="177" bodyend="181" declfile="ql/experimental/commodities/quantity.hpp" declline="95" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1aad1cad04d3e9719f8335cbb8af7c9d45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref></type>
        <definition>Quantity operator*</definition>
        <argsstring>(Real, const Quantity &amp;)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Quantity::operator*</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="97" column="14" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="183" bodyend="185" declfile="ql/experimental/commodities/quantity.hpp" declline="97" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1a3509a450371b66d3cb796cc446679724" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref></type>
        <definition>Quantity operator/</definition>
        <argsstring>(const Quantity &amp;, Real)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::Quantity::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="99" column="14" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="187" bodyend="191" declfile="ql/experimental/commodities/quantity.hpp" declline="99" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1a3491221669a3f36e3c5ea9f18fdeeef9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real operator/</definition>
        <argsstring>(const Quantity &amp;, const Quantity &amp;)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::Quantity::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="101" column="10" bodyfile="ql/experimental/commodities/quantity.cpp" bodystart="86" bodyend="103" declfile="ql/experimental/commodities/quantity.hpp" declline="101" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1abc87975ae73b653638f53313f0f126c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Quantity &amp;, const Quantity &amp;)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::Quantity::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="104" column="10" bodyfile="ql/experimental/commodities/quantity.cpp" bodystart="105" bodyend="123" declfile="ql/experimental/commodities/quantity.hpp" declline="104" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1ab5319972dff38489989679a5a68fe451" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Quantity &amp;, const Quantity &amp;)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::Quantity::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="106" column="10" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="193" bodyend="195" declfile="ql/experimental/commodities/quantity.hpp" declline="106" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1a39659ebc093023e8f81571b7ccc7c712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const Quantity &amp;, const Quantity &amp;)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>QuantLib::Quantity::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="108" column="5" bodyfile="ql/experimental/commodities/quantity.cpp" bodystart="125" bodyend="142" declfile="ql/experimental/commodities/quantity.hpp" declline="108" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1aee765537c0de009828db8d5c1302cd54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const Quantity &amp;, const Quantity &amp;)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>QuantLib::Quantity::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="110" column="5" bodyfile="ql/experimental/commodities/quantity.cpp" bodystart="144" bodyend="161" declfile="ql/experimental/commodities/quantity.hpp" declline="110" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1a00c4d93468e4de8b1c0ce0d808e0c7b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const Quantity &amp;, const Quantity &amp;)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>QuantLib::Quantity::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="112" column="10" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="197" bodyend="199" declfile="ql/experimental/commodities/quantity.hpp" declline="112" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1a5cfb1d15f4c1a39611a6ceada7e76dac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const Quantity &amp;, const Quantity &amp;)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>QuantLib::Quantity::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="114" column="10" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="201" bodyend="203" declfile="ql/experimental/commodities/quantity.hpp" declline="114" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1ab3eb319be4ad31a69bbedb9741f25b5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool close</definition>
        <argsstring>(const Quantity &amp;, const Quantity &amp;, Size n=42)</argsstring>
        <name>close</name>
        <qualifiedname>QuantLib::Quantity::close</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
          <defval>42</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="117" column="10" bodyfile="ql/experimental/commodities/quantity.cpp" bodystart="163" bodyend="180" declfile="ql/experimental/commodities/quantity.hpp" declline="117" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1aa203374ee10b1dd92948e400472cd1e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool close_enough</definition>
        <argsstring>(const Quantity &amp;, const Quantity &amp;, Size n=42)</argsstring>
        <name>close_enough</name>
        <qualifiedname>QuantLib::Quantity::close_enough</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
          <defval>42</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="119" column="10" bodyfile="ql/experimental/commodities/quantity.cpp" bodystart="182" bodyend="199" declfile="ql/experimental/commodities/quantity.hpp" declline="119" declcolumn="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Amount of a commodity. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::Quantity</label>
        <link refid="class_quant_lib_1_1_quantity"/>
        <childnode refid="2" relation="usage">
          <edgelabel>baseUnitOfMeasure</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::UnitOfMeasure</label>
        <link refid="class_quant_lib_1_1_unit_of_measure"/>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/commodities/quantity.hpp" line="34" column="5" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="34" bodyend="85"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_quantity_1a85a19dec690df53ae922f1659df9247a" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>amount</name></member>
      <member refid="class_quant_lib_1_1_quantity_1a866a3c6dc88f7a812722f58e430e5b69" prot="private" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>amount_</name></member>
      <member refid="class_quant_lib_1_1_quantity_1a6f8edeaf953828a832b59440d12f33b1aa3faba7931bd8bcc7685594c87c0786d" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>AutomatedConversion</name></member>
      <member refid="class_quant_lib_1_1_quantity_1abb69a59fbb78006a5e7882c53d8126ec" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>baseUnitOfMeasure</name></member>
      <member refid="class_quant_lib_1_1_quantity_1a6f8edeaf953828a832b59440d12f33b1af2646ad5adc18876bb645f87a38cad08" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>BaseUnitOfMeasureConversion</name></member>
      <member refid="class_quant_lib_1_1_quantity_1ab3eb319be4ad31a69bbedb9741f25b5a" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>close</name></member>
      <member refid="class_quant_lib_1_1_quantity_1aa203374ee10b1dd92948e400472cd1e7" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>close_enough</name></member>
      <member refid="class_quant_lib_1_1_quantity_1ad97a1ad7f8c42117dbde2dbaea7cc26e" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>commodityType</name></member>
      <member refid="class_quant_lib_1_1_quantity_1aabee70add850ba7c77b243990144f33d" prot="private" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>commodityType_</name></member>
      <member refid="class_quant_lib_1_1_quantity_1a6f8edeaf953828a832b59440d12f33b1" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>ConversionType</name></member>
      <member refid="class_quant_lib_1_1_quantity_1a5c76fc64b4ec2cb647d2190bdc44bb1f" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>conversionType</name></member>
      <member refid="class_quant_lib_1_1_quantity_1a6f8edeaf953828a832b59440d12f33b1a3f3b094359a7b625c6249bb5630c9c03" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>NoConversion</name></member>
      <member refid="class_quant_lib_1_1_quantity_1ab5319972dff38489989679a5a68fe451" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>operator!=</name></member>
      <member refid="class_quant_lib_1_1_quantity_1a9d5ba8f98f7b4996e5e9ed2e57ac24cc" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>operator*</name></member>
      <member refid="class_quant_lib_1_1_quantity_1aad1cad04d3e9719f8335cbb8af7c9d45" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>operator*</name></member>
      <member refid="class_quant_lib_1_1_quantity_1a03c2de8499890ee6dd91cffa5d250b97" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>operator*=</name></member>
      <member refid="class_quant_lib_1_1_quantity_1a39877ff7bdf37569cdaeda99b2af013d" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>operator+</name></member>
      <member refid="class_quant_lib_1_1_quantity_1afbdc8e55dbb347a2dc5f84d6ac93f83c" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>operator+</name></member>
      <member refid="class_quant_lib_1_1_quantity_1a99594f59eaa0e43ee39dffcbc5aa16b6" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>operator+=</name></member>
      <member refid="class_quant_lib_1_1_quantity_1a4e7503a1a7ff241169bd07bba4f4436d" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>operator-</name></member>
      <member refid="class_quant_lib_1_1_quantity_1ad78fa7a2b2c87df291ea92b30b4ab21e" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>operator-</name></member>
      <member refid="class_quant_lib_1_1_quantity_1a3239a2c3c423ea0c8cf0135cf71bef5c" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>operator-=</name></member>
      <member refid="class_quant_lib_1_1_quantity_1a3509a450371b66d3cb796cc446679724" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>operator/</name></member>
      <member refid="class_quant_lib_1_1_quantity_1a3491221669a3f36e3c5ea9f18fdeeef9" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>operator/</name></member>
      <member refid="class_quant_lib_1_1_quantity_1a6de632656e676dcd9acd0afa74cea776" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>operator/=</name></member>
      <member refid="class_quant_lib_1_1_quantity_1a39659ebc093023e8f81571b7ccc7c712" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>operator&lt;</name></member>
      <member refid="class_quant_lib_1_1_quantity_1ab21e4a8e1226c72f1ab4885d5689704e" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_quant_lib_1_1_quantity_1aee765537c0de009828db8d5c1302cd54" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>operator&lt;=</name></member>
      <member refid="class_quant_lib_1_1_quantity_1abc87975ae73b653638f53313f0f126c0" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>operator==</name></member>
      <member refid="class_quant_lib_1_1_quantity_1a00c4d93468e4de8b1c0ce0d808e0c7b8" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>operator&gt;</name></member>
      <member refid="class_quant_lib_1_1_quantity_1a5cfb1d15f4c1a39611a6ceada7e76dac" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>operator&gt;=</name></member>
      <member refid="class_quant_lib_1_1_quantity_1a8ffdb969ad1a051aa64dd318d8bd81f4" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>Quantity</name></member>
      <member refid="class_quant_lib_1_1_quantity_1aac5f8d87a31ec573dc9e3f2b20389c79" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>Quantity</name></member>
      <member refid="class_quant_lib_1_1_quantity_1a7c749cba22b2d86251e39910580b63c0" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>rounded</name></member>
      <member refid="class_quant_lib_1_1_quantity_1a6d3c7e740a9e8690d3d63ff405420209" prot="public" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>unitOfMeasure</name></member>
      <member refid="class_quant_lib_1_1_quantity_1a8ce91a59fdfec7a7f58ea253449196b7" prot="private" virt="non-virtual"><scope>QuantLib::Quantity</scope><name>unitOfMeasure_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
