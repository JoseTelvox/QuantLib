<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_clone" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::Clone</compoundname>
    <includes refid="clone_8hpp" local="no">clone.hpp</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_clone_1a944e0c5ac5d2a4239dab42b7c63b146c" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; T &gt;</type>
        <definition>std::unique_ptr&lt;T&gt; QuantLib::Clone&lt; T &gt;::ptr_</definition>
        <argsstring></argsstring>
        <name>ptr_</name>
        <qualifiedname>QuantLib::Clone::ptr_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/clone.hpp" line="56" column="25" bodyfile="ql/utilities/clone.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_clone_1a0b7607e69bee6d1c41be00fc0d20ab26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Clone&lt; T &gt;::Clone</definition>
        <argsstring>()=default</argsstring>
        <name>Clone</name>
        <qualifiedname>QuantLib::Clone::Clone</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/clone.hpp" line="42" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_clone_1a86c435e5c782623ab6b9a42367345493" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Clone&lt; T &gt;::Clone</definition>
        <argsstring>(std::unique_ptr&lt; T &gt; &amp;&amp;)</argsstring>
        <name>Clone</name>
        <qualifiedname>QuantLib::Clone::Clone</qualifiedname>
        <param>
          <type>std::unique_ptr&lt; T &gt; &amp;&amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/clone.hpp" line="43" column="9" bodyfile="ql/utilities/clone.hpp" bodystart="67" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_clone_1a18f149dccb07344ff45a2b3dee1717ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Clone&lt; T &gt;::Clone</definition>
        <argsstring>(const T &amp;)</argsstring>
        <name>Clone</name>
        <qualifiedname>QuantLib::Clone::Clone</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <defname>t</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/clone.hpp" line="44" column="9" bodyfile="ql/utilities/clone.hpp" bodystart="71" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_clone_1ae433680aeef6a5bb0ac658d504bdcde7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Clone&lt; T &gt;::Clone</definition>
        <argsstring>(const Clone&lt; T &gt; &amp;)</argsstring>
        <name>Clone</name>
        <qualifiedname>QuantLib::Clone::Clone</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_clone" kindref="compound">Clone</ref>&lt; T &gt; &amp;</type>
          <defname>t</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/clone.hpp" line="45" column="9" bodyfile="ql/utilities/clone.hpp" bodystart="75" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_clone_1a4eb3cdf6b5041fc3ecf6659ae7b8ce27" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Clone&lt; T &gt;::Clone</definition>
        <argsstring>(Clone&lt; T &gt; &amp;&amp;) noexcept</argsstring>
        <name>Clone</name>
        <qualifiedname>QuantLib::Clone::Clone</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_clone" kindref="compound">Clone</ref>&lt; T &gt; &amp;&amp;</type>
          <defname>t</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/clone.hpp" line="46" column="9" bodyfile="ql/utilities/clone.hpp" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_clone_1a48b1f7318da9c6963daef9ca48cdd65e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_clone" kindref="compound">Clone</ref>&lt; T &gt; &amp;</type>
        <definition>Clone&lt; T &gt; &amp; QuantLib::Clone&lt; T &gt;::operator=</definition>
        <argsstring>(const T &amp;)</argsstring>
        <name>operator=</name>
        <qualifiedname>QuantLib::Clone::operator=</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <defname>t</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/clone.hpp" line="47" column="15" bodyfile="ql/utilities/clone.hpp" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_clone_1a420e8e3ffca4522c29688142558afbc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_clone" kindref="compound">Clone</ref>&lt; T &gt; &amp;</type>
        <definition>Clone&lt; T &gt; &amp; QuantLib::Clone&lt; T &gt;::operator=</definition>
        <argsstring>(const Clone&lt; T &gt; &amp;)</argsstring>
        <name>operator=</name>
        <qualifiedname>QuantLib::Clone::operator=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_clone" kindref="compound">Clone</ref>&lt; T &gt; &amp;</type>
          <defname>t</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/clone.hpp" line="48" column="15" bodyfile="ql/utilities/clone.hpp" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_clone_1ad141dda546a97e944287b3fd637e2f8d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_clone" kindref="compound">Clone</ref>&lt; T &gt; &amp;</type>
        <definition>Clone&lt; T &gt; &amp; QuantLib::Clone&lt; T &gt;::operator=</definition>
        <argsstring>(Clone&lt; T &gt; &amp;&amp;) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>QuantLib::Clone::operator=</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_clone" kindref="compound">Clone</ref>&lt; T &gt; &amp;&amp;</type>
          <defname>t</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/clone.hpp" line="49" column="15" bodyfile="ql/utilities/clone.hpp" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_clone_1a91ef47de7594065065610a5e99739050" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; QuantLib::Clone&lt; T &gt;::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Clone::operator*</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/clone.hpp" line="50" column="11" bodyfile="ql/utilities/clone.hpp" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_clone_1a6160b220228c89c8e4c69b09c915eac5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T * QuantLib::Clone&lt; T &gt;::operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <qualifiedname>QuantLib::Clone::operator-&gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/clone.hpp" line="51" column="11" bodyfile="ql/utilities/clone.hpp" bodystart="108" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_clone_1ab5e2ea5fb20bd10668b4aed9aa06b298" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::Clone&lt; T &gt;::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>QuantLib::Clone::empty</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/clone.hpp" line="52" column="14" bodyfile="ql/utilities/clone.hpp" bodystart="113" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_clone_1ab0b87d26d7b066d1c0a36ae29e84e69c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::Clone&lt; T &gt;::swap</definition>
        <argsstring>(Clone&lt; T &gt; &amp;t) noexcept</argsstring>
        <name>swap</name>
        <qualifiedname>QuantLib::Clone::swap</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_clone" kindref="compound">Clone</ref>&lt; T &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/clone.hpp" line="53" column="14" bodyfile="ql/utilities/clone.hpp" bodystart="118" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_clone_1afb9c40b5e1eb4d6a29ee9a215a47f0a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Clone&lt; T &gt;::~Clone</definition>
        <argsstring>()=default</argsstring>
        <name>~Clone</name>
        <qualifiedname>QuantLib::Clone::~Clone</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/clone.hpp" line="54" column="9"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="related">
      <memberdef kind="function" id="class_quant_lib_1_1_clone_1a9bf8c0c35554e9c1d00831c0da3e0aa6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(Clone&lt; T &gt; &amp;, Clone&lt; T &gt; &amp;) noexcept</argsstring>
        <name>swap</name>
        <qualifiedname>QuantLib::Clone::swap</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_clone" kindref="compound">Clone</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_clone" kindref="compound">Clone</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/clone.hpp" line="61" column="10" bodyfile="ql/utilities/clone.hpp" bodystart="123" bodyend="125" declfile="ql/utilities/clone.hpp" declline="61" declcolumn="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>cloning proxy to an underlying object </para>
    </briefdescription>
    <detaileddescription>
<para>When copied, this class will make a clone of its underlying object, which must provide a <computeroutput>clone()</computeroutput> method returning a std::auto_ptr (or a std::unique_ptr, depending on your configuration) to a newly-allocated instance. </para>
    </detaileddescription>
    <location file="ql/utilities/clone.hpp" line="40" column="5" bodyfile="ql/utilities/clone.hpp" bodystart="40" bodyend="57"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_clone_1a0b7607e69bee6d1c41be00fc0d20ab26" prot="public" virt="non-virtual"><scope>QuantLib::Clone</scope><name>Clone</name></member>
      <member refid="class_quant_lib_1_1_clone_1a86c435e5c782623ab6b9a42367345493" prot="public" virt="non-virtual"><scope>QuantLib::Clone</scope><name>Clone</name></member>
      <member refid="class_quant_lib_1_1_clone_1a18f149dccb07344ff45a2b3dee1717ea" prot="public" virt="non-virtual"><scope>QuantLib::Clone</scope><name>Clone</name></member>
      <member refid="class_quant_lib_1_1_clone_1ae433680aeef6a5bb0ac658d504bdcde7" prot="public" virt="non-virtual"><scope>QuantLib::Clone</scope><name>Clone</name></member>
      <member refid="class_quant_lib_1_1_clone_1a4eb3cdf6b5041fc3ecf6659ae7b8ce27" prot="public" virt="non-virtual"><scope>QuantLib::Clone</scope><name>Clone</name></member>
      <member refid="class_quant_lib_1_1_clone_1ab5e2ea5fb20bd10668b4aed9aa06b298" prot="public" virt="non-virtual"><scope>QuantLib::Clone</scope><name>empty</name></member>
      <member refid="class_quant_lib_1_1_clone_1a91ef47de7594065065610a5e99739050" prot="public" virt="non-virtual"><scope>QuantLib::Clone</scope><name>operator*</name></member>
      <member refid="class_quant_lib_1_1_clone_1a6160b220228c89c8e4c69b09c915eac5" prot="public" virt="non-virtual"><scope>QuantLib::Clone</scope><name>operator-&gt;</name></member>
      <member refid="class_quant_lib_1_1_clone_1a48b1f7318da9c6963daef9ca48cdd65e" prot="public" virt="non-virtual"><scope>QuantLib::Clone</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_clone_1a420e8e3ffca4522c29688142558afbc9" prot="public" virt="non-virtual"><scope>QuantLib::Clone</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_clone_1ad141dda546a97e944287b3fd637e2f8d" prot="public" virt="non-virtual"><scope>QuantLib::Clone</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_clone_1a944e0c5ac5d2a4239dab42b7c63b146c" prot="private" virt="non-virtual"><scope>QuantLib::Clone</scope><name>ptr_</name></member>
      <member refid="class_quant_lib_1_1_clone_1ab0b87d26d7b066d1c0a36ae29e84e69c" prot="public" virt="non-virtual"><scope>QuantLib::Clone</scope><name>swap</name></member>
      <member refid="class_quant_lib_1_1_clone_1a9bf8c0c35554e9c1d00831c0da3e0aa6" prot="public" virt="non-virtual"><scope>QuantLib::Clone</scope><name>swap</name></member>
      <member refid="class_quant_lib_1_1_clone_1afb9c40b5e1eb4d6a29ee9a215a47f0a2" prot="public" virt="non-virtual"><scope>QuantLib::Clone</scope><name>~Clone</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
