<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_t_copula_policy" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::TCopulaPolicy</compoundname>
    <includes refid="tcopulapolicy_8hpp" local="no">tcopulapolicy.hpp</includes>
    <innerclass refid="struct_quant_lib_1_1_t_copula_policy_1_1init_traits" prot="public">QuantLib::TCopulaPolicy::initTraits</innerclass>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_t_copula_policy_1abd2283204e7fe178414638c215c4ce2b" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; boost::math::students_t_distribution&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt;</type>
        <definition>std::vector&lt;boost::math::students_t_distribution&lt;Real&gt; &gt; QuantLib::TCopulaPolicy::distributions_</definition>
        <argsstring></argsstring>
        <name>distributions_</name>
        <qualifiedname>QuantLib::TCopulaPolicy::distributions_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/tcopulapolicy.hpp" line="149" column="29" bodyfile="ql/experimental/math/tcopulapolicy.hpp" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_t_copula_policy_1a4861448ce84c387ada7b647d69c9d625" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::TCopulaPolicy::varianceFactors_</definition>
        <argsstring></argsstring>
        <name>varianceFactors_</name>
        <qualifiedname>QuantLib::TCopulaPolicy::varianceFactors_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/tcopulapolicy.hpp" line="150" column="29" bodyfile="ql/experimental/math/tcopulapolicy.hpp" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_t_copula_policy_1ac54ac0d45bd393558889fbebd3dd9d87" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_cumulative_behrens_fisher" kindref="compound">CumulativeBehrensFisher</ref> &gt;</type>
        <definition>std::vector&lt;CumulativeBehrensFisher&gt; QuantLib::TCopulaPolicy::latentVarsCumul_</definition>
        <argsstring></argsstring>
        <name>latentVarsCumul_</name>
        <qualifiedname>QuantLib::TCopulaPolicy::latentVarsCumul_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/tcopulapolicy.hpp" line="151" column="29" bodyfile="ql/experimental/math/tcopulapolicy.hpp" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_t_copula_policy_1a08efc7d7cb761fc685015fc85a9065a8" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_inverse_cumulative_behrens_fisher" kindref="compound">InverseCumulativeBehrensFisher</ref> &gt;</type>
        <definition>std::vector&lt;InverseCumulativeBehrensFisher&gt; QuantLib::TCopulaPolicy::latentVarsInverters_</definition>
        <argsstring></argsstring>
        <name>latentVarsInverters_</name>
        <qualifiedname>QuantLib::TCopulaPolicy::latentVarsInverters_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/tcopulapolicy.hpp" line="152" column="29" bodyfile="ql/experimental/math/tcopulapolicy.hpp" bodystart="152" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_t_copula_policy_1a553e40d1db9ed46d8d1ba29753c8b228" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::TCopulaPolicy::TCopulaPolicy</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; Real &gt; &gt; &amp;factorWeights=std::vector&lt; std::vector&lt; Real &gt; &gt;(), const initTraits &amp;vals=initTraits())</argsstring>
        <name>TCopulaPolicy</name>
        <qualifiedname>QuantLib::TCopulaPolicy::TCopulaPolicy</qualifiedname>
        <param>
          <type>const std::vector&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt; &amp;</type>
          <declname>factorWeights</declname>
          <defval>std::vector&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt;()</defval>
        </param>
        <param>
          <type>const <ref refid="struct_quant_lib_1_1_t_copula_policy_1_1init_traits" kindref="compound">initTraits</ref> &amp;</type>
          <declname>vals</declname>
          <defval><ref refid="struct_quant_lib_1_1_t_copula_policy_1_1init_traits" kindref="compound">initTraits</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delayed initialization of the distribution parameters and caches. To be called by the latent model. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/tcopulapolicy.hpp" line="60" column="18" bodyfile="ql/experimental/math/tcopulapolicy.cpp" bodystart="26" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_t_copula_policy_1a61b93eb41147b85b8c99f0f7ab653524" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::TCopulaPolicy::numFactors</definition>
        <argsstring>() const</argsstring>
        <name>numFactors</name>
        <qualifiedname>QuantLib::TCopulaPolicy::numFactors</qualifiedname>
        <briefdescription>
<para>Number of independent random factors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/tcopulapolicy.hpp" line="66" column="14" bodyfile="ql/experimental/math/tcopulapolicy.hpp" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_t_copula_policy_1a1ccbea97f7fcf62f0b7f805442e14d1f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_quant_lib_1_1_t_copula_policy_1_1init_traits" kindref="compound">initTraits</ref></type>
        <definition>initTraits QuantLib::TCopulaPolicy::getInitTraits</definition>
        <argsstring>() const</argsstring>
        <name>getInitTraits</name>
        <qualifiedname>QuantLib::TCopulaPolicy::getInitTraits</qualifiedname>
        <briefdescription>
<para>returns a copy of the initialization arguments </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/tcopulapolicy.hpp" line="72" column="20" bodyfile="ql/experimental/math/tcopulapolicy.hpp" bodystart="72" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_t_copula_policy_1a6b14c014255ff1c080a0b694dd64355c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Real &gt; &amp; QuantLib::TCopulaPolicy::varianceFactors</definition>
        <argsstring>() const</argsstring>
        <name>varianceFactors</name>
        <qualifiedname>QuantLib::TCopulaPolicy::varianceFactors</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/tcopulapolicy.hpp" line="81" column="27" bodyfile="ql/experimental/math/tcopulapolicy.hpp" bodystart="81" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_t_copula_policy_1a872c7c4a5130bd71fd151d64e00ac716" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::TCopulaPolicy::cumulativeY</definition>
        <argsstring>(Real val, Size iVariable) const</argsstring>
        <name>cumulativeY</name>
        <qualifiedname>QuantLib::TCopulaPolicy::cumulativeY</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iVariable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cumulative probability of a given latent variable. The iVariable parameter is the index of the requested variable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/tcopulapolicy.hpp" line="87" column="21" bodyfile="ql/experimental/math/tcopulapolicy.hpp" bodystart="87" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_t_copula_policy_1a364d30d3d0061029c6f2ad399c9e30a8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::TCopulaPolicy::cumulativeZ</definition>
        <argsstring>(Real z) const</argsstring>
        <name>cumulativeZ</name>
        <qualifiedname>QuantLib::TCopulaPolicy::cumulativeZ</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Cumulative probability of the idiosyncratic factors (all the same) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/tcopulapolicy.hpp" line="95" column="21" bodyfile="ql/experimental/math/tcopulapolicy.hpp" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_t_copula_policy_1af44a56081caf4c2edacf43d53e4b631e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::TCopulaPolicy::density</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;m) const</argsstring>
        <name>density</name>
        <qualifiedname>QuantLib::TCopulaPolicy::density</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> density of a given realization of values of the systemic factors (remember they are independent). Intended to be used in numerical integration of an arbitrary function depending on those values. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/tcopulapolicy.hpp" line="104" column="21" bodyfile="ql/experimental/math/tcopulapolicy.hpp" bodystart="104" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_t_copula_policy_1a4a7e5c0bb0ad88a07b94cc60e22dae84" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::TCopulaPolicy::inverseCumulativeY</definition>
        <argsstring>(Probability p, Size iVariable) const</argsstring>
        <name>inverseCumulativeY</name>
        <qualifiedname>QuantLib::TCopulaPolicy::inverseCumulativeY</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iVariable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the inverse of the cumulative distribution of the (modelled) latent variable (as indexed by iVariable). Involves the convolution of the factors&apos; distributions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/tcopulapolicy.hpp" line="120" column="14" bodyfile="ql/experimental/math/tcopulapolicy.hpp" bodystart="120" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_t_copula_policy_1ad1cd56d8b08e9e6df53b8b087b97ecda" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::TCopulaPolicy::inverseCumulativeZ</definition>
        <argsstring>(Probability p) const</argsstring>
        <name>inverseCumulativeZ</name>
        <qualifiedname>QuantLib::TCopulaPolicy::inverseCumulativeZ</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the inverse of the cumulative distribution of the idiosincratic factor. The LM here is limited to all idiosincratic factors following the same distribution. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/tcopulapolicy.hpp" line="131" column="14" bodyfile="ql/experimental/math/tcopulapolicy.hpp" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_t_copula_policy_1a80ce4ba59913792116638a7aa0014faf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::TCopulaPolicy::inverseCumulativeDensity</definition>
        <argsstring>(Probability p, Size iFactor) const</argsstring>
        <name>inverseCumulativeDensity</name>
        <qualifiedname>QuantLib::TCopulaPolicy::inverseCumulativeDensity</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the inverse of the cumulative distribution of the systemic factor iFactor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/tcopulapolicy.hpp" line="138" column="14" bodyfile="ql/experimental/math/tcopulapolicy.hpp" bodystart="138" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_t_copula_policy_1a87b83480cc2d1860f6ad7d2cc41c8386" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::TCopulaPolicy::allFactorCumulInverter</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;probs) const</argsstring>
        <name>allFactorCumulInverter</name>
        <qualifiedname>QuantLib::TCopulaPolicy::allFactorCumulInverter</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>probs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/tcopulapolicy.hpp" line="147" column="21" bodyfile="ql/experimental/math/tcopulapolicy.cpp" bodystart="65" bodyend="83"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Student-T Latent Model&apos;s copula policy. </para>
    </briefdescription>
    <detaileddescription>
<para>Describes the copula of a set of normalized Student-T independent random factors to be fed into the latent variable model. The latent model requires the independent variables to be of unit variance so the policy expects the factors coefficients to be as usual and the T variables to be normalized, the normalization is performed by the policy. To normalize the random variables they are divided by the square root of the variance of each T ( <formula id="173">$ \frac{\nu}{\nu-2}$</formula>) </para>
    </detaileddescription>
    <location file="ql/experimental/math/tcopulapolicy.hpp" line="41" column="5" bodyfile="ql/experimental/math/tcopulapolicy.hpp" bodystart="41" bodyend="153"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_t_copula_policy_1a87b83480cc2d1860f6ad7d2cc41c8386" prot="public" virt="non-virtual"><scope>QuantLib::TCopulaPolicy</scope><name>allFactorCumulInverter</name></member>
      <member refid="class_quant_lib_1_1_t_copula_policy_1a872c7c4a5130bd71fd151d64e00ac716" prot="public" virt="non-virtual"><scope>QuantLib::TCopulaPolicy</scope><name>cumulativeY</name></member>
      <member refid="class_quant_lib_1_1_t_copula_policy_1a364d30d3d0061029c6f2ad399c9e30a8" prot="public" virt="non-virtual"><scope>QuantLib::TCopulaPolicy</scope><name>cumulativeZ</name></member>
      <member refid="class_quant_lib_1_1_t_copula_policy_1af44a56081caf4c2edacf43d53e4b631e" prot="public" virt="non-virtual"><scope>QuantLib::TCopulaPolicy</scope><name>density</name></member>
      <member refid="class_quant_lib_1_1_t_copula_policy_1abd2283204e7fe178414638c215c4ce2b" prot="private" virt="non-virtual"><scope>QuantLib::TCopulaPolicy</scope><name>distributions_</name></member>
      <member refid="class_quant_lib_1_1_t_copula_policy_1a1ccbea97f7fcf62f0b7f805442e14d1f" prot="public" virt="non-virtual"><scope>QuantLib::TCopulaPolicy</scope><name>getInitTraits</name></member>
      <member refid="class_quant_lib_1_1_t_copula_policy_1a80ce4ba59913792116638a7aa0014faf" prot="public" virt="non-virtual"><scope>QuantLib::TCopulaPolicy</scope><name>inverseCumulativeDensity</name></member>
      <member refid="class_quant_lib_1_1_t_copula_policy_1a4a7e5c0bb0ad88a07b94cc60e22dae84" prot="public" virt="non-virtual"><scope>QuantLib::TCopulaPolicy</scope><name>inverseCumulativeY</name></member>
      <member refid="class_quant_lib_1_1_t_copula_policy_1ad1cd56d8b08e9e6df53b8b087b97ecda" prot="public" virt="non-virtual"><scope>QuantLib::TCopulaPolicy</scope><name>inverseCumulativeZ</name></member>
      <member refid="class_quant_lib_1_1_t_copula_policy_1ac54ac0d45bd393558889fbebd3dd9d87" prot="private" virt="non-virtual"><scope>QuantLib::TCopulaPolicy</scope><name>latentVarsCumul_</name></member>
      <member refid="class_quant_lib_1_1_t_copula_policy_1a08efc7d7cb761fc685015fc85a9065a8" prot="private" virt="non-virtual"><scope>QuantLib::TCopulaPolicy</scope><name>latentVarsInverters_</name></member>
      <member refid="class_quant_lib_1_1_t_copula_policy_1a61b93eb41147b85b8c99f0f7ab653524" prot="public" virt="non-virtual"><scope>QuantLib::TCopulaPolicy</scope><name>numFactors</name></member>
      <member refid="class_quant_lib_1_1_t_copula_policy_1a553e40d1db9ed46d8d1ba29753c8b228" prot="public" virt="non-virtual"><scope>QuantLib::TCopulaPolicy</scope><name>TCopulaPolicy</name></member>
      <member refid="class_quant_lib_1_1_t_copula_policy_1a6b14c014255ff1c080a0b694dd64355c" prot="public" virt="non-virtual"><scope>QuantLib::TCopulaPolicy</scope><name>varianceFactors</name></member>
      <member refid="class_quant_lib_1_1_t_copula_policy_1a4861448ce84c387ada7b647d69c9d625" prot="private" virt="non-virtual"><scope>QuantLib::TCopulaPolicy</scope><name>varianceFactors_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
