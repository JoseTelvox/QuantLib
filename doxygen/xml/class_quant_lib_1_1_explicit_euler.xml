<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_explicit_euler" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::ExplicitEuler</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_mixed_scheme" prot="public" virt="non-virtual">QuantLib::MixedScheme&lt; Operator &gt;</basecompoundref>
    <includes refid="expliciteuler_8hpp" local="no">expliciteuler.hpp</includes>
    <templateparamlist>
      <param>
        <type>class Operator</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_explicit_euler_1a5ac9f384fb65e63aeb476a5590c7c1a3" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_operator_traits" kindref="compound">OperatorTraits</ref>&lt; Operator &gt;</type>
        <definition>typedef OperatorTraits&lt;Operator&gt; QuantLib::ExplicitEuler&lt; Operator &gt;::traits</definition>
        <argsstring></argsstring>
        <name>traits</name>
        <qualifiedname>QuantLib::ExplicitEuler::traits</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/expliciteuler.hpp" line="69" column="32" bodyfile="ql/methods/finitedifferences/expliciteuler.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_explicit_euler_1a63d3e5386d8799e03ee48982b4192980" prot="public" static="no">
        <type>traits::operator_type</type>
        <definition>typedef traits::operator_type QuantLib::ExplicitEuler&lt; Operator &gt;::operator_type</definition>
        <argsstring></argsstring>
        <name>operator_type</name>
        <qualifiedname>QuantLib::ExplicitEuler::operator_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/expliciteuler.hpp" line="70" column="48" bodyfile="ql/methods/finitedifferences/expliciteuler.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_explicit_euler_1a631ca3e41a9ef8c571be76e1318ecf74" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">traits::array_type</ref></type>
        <definition>typedef traits::array_type QuantLib::ExplicitEuler&lt; Operator &gt;::array_type</definition>
        <argsstring></argsstring>
        <name>array_type</name>
        <qualifiedname>QuantLib::ExplicitEuler::array_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/expliciteuler.hpp" line="71" column="45" bodyfile="ql/methods/finitedifferences/expliciteuler.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_explicit_euler_1a993f35eee614cefc95268d9d1b1ea4c2" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_boundary_condition" kindref="compound">traits::bc_type</ref></type>
        <definition>typedef traits::bc_type QuantLib::ExplicitEuler&lt; Operator &gt;::bc_type</definition>
        <argsstring></argsstring>
        <name>bc_type</name>
        <qualifiedname>QuantLib::ExplicitEuler::bc_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/expliciteuler.hpp" line="72" column="42" bodyfile="ql/methods/finitedifferences/expliciteuler.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_explicit_euler_1a8b1373d97c7b299d3a42b57157057b3e" prot="public" static="no">
        <type>traits::bc_set</type>
        <definition>typedef traits::bc_set QuantLib::ExplicitEuler&lt; Operator &gt;::bc_set</definition>
        <argsstring></argsstring>
        <name>bc_set</name>
        <qualifiedname>QuantLib::ExplicitEuler::bc_set</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/expliciteuler.hpp" line="73" column="41" bodyfile="ql/methods/finitedifferences/expliciteuler.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_explicit_euler_1a396512fc8eed50edb30c4e91c794b1f9" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_step_condition" kindref="compound">traits::condition_type</ref></type>
        <definition>typedef traits::condition_type QuantLib::ExplicitEuler&lt; Operator &gt;::condition_type</definition>
        <argsstring></argsstring>
        <name>condition_type</name>
        <qualifiedname>QuantLib::ExplicitEuler::condition_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/expliciteuler.hpp" line="74" column="49" bodyfile="ql/methods/finitedifferences/expliciteuler.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_explicit_euler_1af814d461bf460924dadf5fb118389aaf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::ExplicitEuler&lt; Operator &gt;::ExplicitEuler</definition>
        <argsstring>(const operator_type &amp;L, const std::vector&lt; ext::shared_ptr&lt; bc_type &gt; &gt; &amp;bcs)</argsstring>
        <name>ExplicitEuler</name>
        <qualifiedname>QuantLib::ExplicitEuler::ExplicitEuler</qualifiedname>
        <param>
          <type>const operator_type &amp;</type>
          <declname>L</declname>
        </param>
        <param>
          <type>const std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_boundary_condition" kindref="compound">bc_type</ref> &gt; &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/expliciteuler.hpp" line="76" column="9" bodyfile="ql/methods/finitedifferences/expliciteuler.hpp" bodystart="76" bodyend="78"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Forward Euler scheme for finite difference methods </para>
    </briefdescription>
    <detaileddescription>
<para>See sect. findiff for details on the method.</para>
<para>In this implementation, the passed operator must be derived from either TimeConstantOperator or TimeDependentOperator. Also, it must implement at least the following interface:</para>
<para><programlisting><codeline><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>...<sp/>array_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>copy<sp/>constructor/assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>(these<sp/>will<sp/>be<sp/>provided<sp/>by<sp/>the<sp/>compiler<sp/>if<sp/>none<sp/>is<sp/>defined)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Operator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operator&amp;);</highlight></codeline>
<codeline><highlight class="normal">Operator&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operator&amp;);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>inspectors</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>size();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>modifiers</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setTime(<ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref><sp/>t);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>operator<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">array_type<sp/>applyTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>array_type&amp;);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Operator<sp/>identity(<ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>size);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>operator<sp/>algebra</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Operator<sp/>operator*(<ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operator&amp;);</highlight></codeline>
<codeline><highlight class="normal">Operator<sp/>operator-(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operator&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operator&amp;);</highlight></codeline>
</programlisting></para>
<para><xrefsect id="todo_1_todo000056"><xreftitle>Todo</xreftitle><xrefdescription><para>add Richardson extrapolation</para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::ExplicitEuler&lt; Operator &gt;</label>
        <link refid="class_quant_lib_1_1_explicit_euler"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::MixedScheme&lt; Operator &gt;</label>
        <link refid="class_quant_lib_1_1_mixed_scheme"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::ExplicitEuler&lt; Operator &gt;</label>
        <link refid="class_quant_lib_1_1_explicit_euler"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::MixedScheme&lt; Operator &gt;</label>
        <link refid="class_quant_lib_1_1_mixed_scheme"/>
      </node>
    </collaborationgraph>
    <location file="ql/methods/finitedifferences/expliciteuler.hpp" line="66" column="5" bodyfile="ql/methods/finitedifferences/expliciteuler.hpp" bodystart="66" bodyend="79"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_explicit_euler_1a631ca3e41a9ef8c571be76e1318ecf74" prot="public" virt="non-virtual"><scope>QuantLib::ExplicitEuler</scope><name>array_type</name></member>
      <member refid="class_quant_lib_1_1_explicit_euler_1a8b1373d97c7b299d3a42b57157057b3e" prot="public" virt="non-virtual"><scope>QuantLib::ExplicitEuler</scope><name>bc_set</name></member>
      <member refid="class_quant_lib_1_1_explicit_euler_1a993f35eee614cefc95268d9d1b1ea4c2" prot="public" virt="non-virtual"><scope>QuantLib::ExplicitEuler</scope><name>bc_type</name></member>
      <member refid="class_quant_lib_1_1_mixed_scheme_1ad07e2c9ca7b76c9f26c0206e34b3a94f" prot="protected" virt="non-virtual"><scope>QuantLib::ExplicitEuler</scope><name>bcs_</name></member>
      <member refid="class_quant_lib_1_1_explicit_euler_1a396512fc8eed50edb30c4e91c794b1f9" prot="public" virt="non-virtual"><scope>QuantLib::ExplicitEuler</scope><name>condition_type</name></member>
      <member refid="class_quant_lib_1_1_mixed_scheme_1a10229cd868fccab53b7d53877994ac1d" prot="protected" virt="non-virtual"><scope>QuantLib::ExplicitEuler</scope><name>dt_</name></member>
      <member refid="class_quant_lib_1_1_explicit_euler_1af814d461bf460924dadf5fb118389aaf" prot="public" virt="non-virtual"><scope>QuantLib::ExplicitEuler</scope><name>ExplicitEuler</name></member>
      <member refid="class_quant_lib_1_1_mixed_scheme_1a71c5d2ba8d1e04e9bf528fa043aa03d8" prot="protected" virt="non-virtual"><scope>QuantLib::ExplicitEuler</scope><name>explicitPart_</name></member>
      <member refid="class_quant_lib_1_1_mixed_scheme_1a9aa58d76a255c1ec21f707195ec43d32" prot="protected" virt="non-virtual"><scope>QuantLib::ExplicitEuler</scope><name>I_</name></member>
      <member refid="class_quant_lib_1_1_mixed_scheme_1ae159fab2d306ed78f477e84e464173eb" prot="protected" virt="non-virtual"><scope>QuantLib::ExplicitEuler</scope><name>implicitPart_</name></member>
      <member refid="class_quant_lib_1_1_mixed_scheme_1a5f810e4a5ff151828ed29505cf21d883" prot="protected" virt="non-virtual"><scope>QuantLib::ExplicitEuler</scope><name>L_</name></member>
      <member refid="class_quant_lib_1_1_mixed_scheme_1ab20e48252dd17e67043c8c55b022ecb0" prot="public" virt="non-virtual"><scope>QuantLib::ExplicitEuler</scope><name>MixedScheme</name></member>
      <member refid="class_quant_lib_1_1_explicit_euler_1a63d3e5386d8799e03ee48982b4192980" prot="public" virt="non-virtual"><scope>QuantLib::ExplicitEuler</scope><name>operator_type</name></member>
      <member refid="class_quant_lib_1_1_mixed_scheme_1a635819fc8104a0698b508e672a809b17" prot="public" virt="non-virtual"><scope>QuantLib::ExplicitEuler</scope><name>setStep</name></member>
      <member refid="class_quant_lib_1_1_mixed_scheme_1a9017a4a3765ddda854e7875f7da6c8a7" prot="public" virt="non-virtual"><scope>QuantLib::ExplicitEuler</scope><name>step</name></member>
      <member refid="class_quant_lib_1_1_mixed_scheme_1a35f4375a9cccf1c4521611f84bab7424" prot="protected" virt="non-virtual"><scope>QuantLib::ExplicitEuler</scope><name>theta_</name></member>
      <member refid="class_quant_lib_1_1_explicit_euler_1a5ac9f384fb65e63aeb476a5590c7c1a3" prot="public" virt="non-virtual"><scope>QuantLib::ExplicitEuler</scope><name>traits</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
