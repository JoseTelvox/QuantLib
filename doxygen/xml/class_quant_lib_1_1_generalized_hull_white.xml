<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_generalized_hull_white" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::GeneralizedHullWhite</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_one_factor_affine_model" prot="public" virt="non-virtual">QuantLib::OneFactorAffineModel</basecompoundref>
    <basecompoundref refid="class_quant_lib_1_1_term_structure_consistent_model" prot="public" virt="non-virtual">QuantLib::TermStructureConsistentModel</basecompoundref>
    <includes refid="generalizedhullwhite_8hpp" local="no">generalizedhullwhite.hpp</includes>
    <innerclass refid="class_quant_lib_1_1_generalized_hull_white_1_1_dynamics" prot="public">QuantLib::GeneralizedHullWhite::Dynamics</innerclass>
    <innerclass refid="class_quant_lib_1_1_generalized_hull_white_1_1_fitting_parameter" prot="public">QuantLib::GeneralizedHullWhite::FittingParameter</innerclass>
    <innerclass refid="class_quant_lib_1_1_generalized_hull_white_1_1_helper" prot="public">QuantLib::GeneralizedHullWhite::Helper</innerclass>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_generalized_hull_white_1ae9fef9e66be445ce78677281652ee85c" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt;</type>
        <definition>std::vector&lt;Date&gt; QuantLib::GeneralizedHullWhite::speedstructure_</definition>
        <argsstring></argsstring>
        <name>speedstructure_</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::speedstructure_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="145" column="21" bodyfile="ql/experimental/shortrate/generalizedhullwhite.hpp" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_generalized_hull_white_1a4cf2ca708fd3597964b523bfbe1d603c" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt;</type>
        <definition>std::vector&lt;Date&gt; QuantLib::GeneralizedHullWhite::volstructure_</definition>
        <argsstring></argsstring>
        <name>volstructure_</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::volstructure_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="146" column="21" bodyfile="ql/experimental/shortrate/generalizedhullwhite.hpp" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_generalized_hull_white_1a72abcc6fb51c25860884339d863a22a8" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt;</type>
        <definition>std::vector&lt;Time&gt; QuantLib::GeneralizedHullWhite::speedperiods_</definition>
        <argsstring></argsstring>
        <name>speedperiods_</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::speedperiods_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="147" column="21" bodyfile="ql/experimental/shortrate/generalizedhullwhite.hpp" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_generalized_hull_white_1afb0bf7a31c4023831e04f7b198dfa7a2" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt;</type>
        <definition>std::vector&lt;Time&gt; QuantLib::GeneralizedHullWhite::volperiods_</definition>
        <argsstring></argsstring>
        <name>volperiods_</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::volperiods_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="148" column="21" bodyfile="ql/experimental/shortrate/generalizedhullwhite.hpp" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_generalized_hull_white_1aabbd696e5eaaa82fc0c60c15f310ba38" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_interpolation" kindref="compound">Interpolation</ref></type>
        <definition>Interpolation QuantLib::GeneralizedHullWhite::speed_</definition>
        <argsstring></argsstring>
        <name>speed_</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::speed_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="149" column="23" bodyfile="ql/experimental/shortrate/generalizedhullwhite.hpp" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_generalized_hull_white_1a18d399dca81e3d0b838a40fa1245dfd5" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_interpolation" kindref="compound">Interpolation</ref></type>
        <definition>Interpolation QuantLib::GeneralizedHullWhite::vol_</definition>
        <argsstring></argsstring>
        <name>vol_</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::vol_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="150" column="23" bodyfile="ql/experimental/shortrate/generalizedhullwhite.hpp" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_generalized_hull_white_1a586e7b1430fa4fd5b0cc254fa666d17c" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_parameter" kindref="compound">Parameter</ref> &amp;</type>
        <definition>Parameter&amp; QuantLib::GeneralizedHullWhite::a_</definition>
        <argsstring></argsstring>
        <name>a_</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::a_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="155" column="19" bodyfile="ql/experimental/shortrate/generalizedhullwhite.hpp" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_generalized_hull_white_1aaca6f8d5ea70254bc25cb4b84f6806cb" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_parameter" kindref="compound">Parameter</ref> &amp;</type>
        <definition>Parameter&amp; QuantLib::GeneralizedHullWhite::sigma_</definition>
        <argsstring></argsstring>
        <name>sigma_</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::sigma_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="156" column="19" bodyfile="ql/experimental/shortrate/generalizedhullwhite.hpp" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_generalized_hull_white_1ac12761e00f2ea95982602d758ae99bd3" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_parameter" kindref="compound">Parameter</ref></type>
        <definition>Parameter QuantLib::GeneralizedHullWhite::phi_</definition>
        <argsstring></argsstring>
        <name>phi_</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::phi_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="157" column="19" bodyfile="ql/experimental/shortrate/generalizedhullwhite.hpp" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_generalized_hull_white_1ac687dc9165e7e719a50e6b8f7611303f" prot="private" static="no" mutable="no">
        <type>std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(<ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>)&gt;</type>
        <definition>std::function&lt;Real(Real)&gt; QuantLib::GeneralizedHullWhite::f_</definition>
        <argsstring></argsstring>
        <name>f_</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::f_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="159" column="23" bodyfile="ql/experimental/shortrate/generalizedhullwhite.hpp" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_generalized_hull_white_1a249c491c0e480be64529fde3c45dd066" prot="private" static="no" mutable="no">
        <type>std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(<ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>)&gt;</type>
        <definition>std::function&lt;Real(Real)&gt; QuantLib::GeneralizedHullWhite::fInverse_</definition>
        <argsstring></argsstring>
        <name>fInverse_</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::fInverse_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="160" column="23" bodyfile="ql/experimental/shortrate/generalizedhullwhite.hpp" bodystart="160" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_hull_white_1aca4a55536f7400c99f4d7fcc57d70049" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::GeneralizedHullWhite::GeneralizedHullWhite</definition>
        <argsstring>(const Handle&lt; YieldTermStructure &gt; &amp;yieldtermStructure, const std::vector&lt; Date &gt; &amp;speedstructure, const std::vector&lt; Date &gt; &amp;volstructure, const std::vector&lt; Real &gt; &amp;speed, const std::vector&lt; Real &gt; &amp;vol, const std::function&lt; Real(Real)&gt; &amp;f={}, const std::function&lt; Real(Real)&gt; &amp;fInverse={})</argsstring>
        <name>GeneralizedHullWhite</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::GeneralizedHullWhite</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
          <declname>yieldtermStructure</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt; &amp;</type>
          <declname>speedstructure</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt; &amp;</type>
          <declname>volstructure</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>speed</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>vol</declname>
        </param>
        <param>
          <type>const std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(<ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>)&gt; &amp;</type>
          <declname>f</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(<ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>)&gt; &amp;</type>
          <declname>fInverse</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="76" column="9" bodyfile="ql/experimental/shortrate/generalizedhullwhite.cpp" bodystart="82" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_hull_white_1afe8e9dfefbc9955c7f9da2867ebd960b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SpeedInterpolationTraits</type>
          </param>
          <param>
            <type>class VolInterpolationTraits</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>QuantLib::GeneralizedHullWhite::GeneralizedHullWhite</definition>
        <argsstring>(const Handle&lt; YieldTermStructure &gt; &amp;yieldtermStructure, const std::vector&lt; Date &gt; &amp;speedstructure, const std::vector&lt; Date &gt; &amp;volstructure, const std::vector&lt; Real &gt; &amp;speed, const std::vector&lt; Real &gt; &amp;vol, const SpeedInterpolationTraits &amp;speedtraits, const VolInterpolationTraits &amp;voltraits, const std::function&lt; Real(Real)&gt; &amp;f={}, const std::function&lt; Real(Real)&gt; &amp;fInverse={})</argsstring>
        <name>GeneralizedHullWhite</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::GeneralizedHullWhite</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
          <declname>yieldtermStructure</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt; &amp;</type>
          <declname>speedstructure</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt; &amp;</type>
          <declname>volstructure</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>speed</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>vol</declname>
        </param>
        <param>
          <type>const SpeedInterpolationTraits &amp;</type>
          <declname>speedtraits</declname>
        </param>
        <param>
          <type>const VolInterpolationTraits &amp;</type>
          <declname>voltraits</declname>
        </param>
        <param>
          <type>const std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(<ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>)&gt; &amp;</type>
          <declname>f</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(<ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>)&gt; &amp;</type>
          <declname>fInverse</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="86" column="9" bodyfile="ql/experimental/shortrate/generalizedhullwhite.hpp" bodystart="86" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_hull_white_1a31071d5b9de04633f92e7f05c32d9a9d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_one_factor_model_1_1_short_rate_dynamics" kindref="compound">ShortRateDynamics</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; ShortRateDynamics &gt; QuantLib::GeneralizedHullWhite::dynamics</definition>
        <argsstring>() const override</argsstring>
        <name>dynamics</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::dynamics</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_one_factor_model_1a8d62ee9199d0c0d3fe4e9b562537bcd3">dynamics</reimplements>
        <briefdescription>
<para>returns the short-rate dynamics </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="105" column="25" bodyfile="ql/experimental/shortrate/generalizedhullwhite.hpp" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_hull_white_1abe2dc663cb805c388e93ab8f743ea0ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_lattice" kindref="compound">Lattice</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; Lattice &gt; QuantLib::GeneralizedHullWhite::tree</definition>
        <argsstring>(const TimeGrid &amp;grid) const override</argsstring>
        <name>tree</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::tree</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_short_rate_model_1ae29f41ca551d424e53bac5967353e8ae">tree</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_time_grid" kindref="compound">TimeGrid</ref> &amp;</type>
          <declname>grid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="110" column="25" bodyfile="ql/experimental/shortrate/generalizedhullwhite.cpp" bodystart="211" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_hull_white_1a8b50974d944310e1adda9fdcd01e9288" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::GeneralizedHullWhite::GeneralizedHullWhite</definition>
        <argsstring>(const Handle&lt; YieldTermStructure &gt; &amp;yieldtermStructure, Real a=0.1, Real sigma=0.01)</argsstring>
        <name>GeneralizedHullWhite</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::GeneralizedHullWhite</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
          <declname>yieldtermStructure</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
          <defval>0.1</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>sigma</declname>
          <defval>0.01</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="114" column="9" bodyfile="ql/experimental/shortrate/generalizedhullwhite.cpp" bodystart="102" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_hull_white_1aa93daa21af962b9e5d455a1f7e47fad6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_one_factor_model_1_1_short_rate_dynamics" kindref="compound">ShortRateDynamics</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; OneFactorModel::ShortRateDynamics &gt; QuantLib::GeneralizedHullWhite::HWdynamics</definition>
        <argsstring>() const</argsstring>
        <name>HWdynamics</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::HWdynamics</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="119" column="25" bodyfile="ql/experimental/shortrate/generalizedhullwhite.hpp" bodystart="300" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_hull_white_1ad02479fb50e222d18b780f144193b574" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GeneralizedHullWhite::discountBondOption</definition>
        <argsstring>(Option::Type type, Real strike, Time maturity, Time bondMaturity) const override</argsstring>
        <name>discountBondOption</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::discountBondOption</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_affine_model_1a6c201d4c9ebd7f54574d62a22a608fee">discountBondOption</reimplements>
        <param>
          <type>Option::Type</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>maturity</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>bondMaturity</declname>
        </param>
        <briefdescription>
<para>Only valid under Hull-White model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="122" column="14" bodyfile="ql/experimental/shortrate/generalizedhullwhite.cpp" bodystart="181" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_hull_white_1a13612e99a407909dffe426f45d52b49c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; bool &gt;</type>
        <definition>std::vector&lt; bool &gt; QuantLib::GeneralizedHullWhite::fixedReversion</definition>
        <argsstring>() const</argsstring>
        <name>fixedReversion</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::fixedReversion</qualifiedname>
        <briefdescription>
<para>vector to pass to &apos;calibrate&apos; to fit only volatility </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="128" column="21" bodyfile="ql/experimental/shortrate/generalizedhullwhite.cpp" bodystart="253" bodyend="259"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_hull_white_1ab28167aac88de2250d012d9741195e07" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GeneralizedHullWhite::a</definition>
        <argsstring>() const</argsstring>
        <name>a</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::a</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="132" column="14" bodyfile="ql/experimental/shortrate/generalizedhullwhite.hpp" bodystart="132" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_hull_white_1a5addf3d42aab0bff75ca228266f13d40" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GeneralizedHullWhite::sigma</definition>
        <argsstring>() const</argsstring>
        <name>sigma</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::sigma</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="133" column="14" bodyfile="ql/experimental/shortrate/generalizedhullwhite.hpp" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_hull_white_1afe39d8df716bfac7298b1186883183a2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::GeneralizedHullWhite::generateArguments</definition>
        <argsstring>() override</argsstring>
        <name>generateArguments</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::generateArguments</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_calibrated_model_1a9282281fe5c1dbc558462648b72b6e18">generateArguments</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="134" column="14" bodyfile="ql/experimental/shortrate/generalizedhullwhite.cpp" bodystart="122" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_hull_white_1ace3dd5bc6ccb186c365c1b56f7fda70f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GeneralizedHullWhite::A</definition>
        <argsstring>(Time t, Time T) const override</argsstring>
        <name>A</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::A</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_one_factor_affine_model_1a224fa6be739797639de10aa78a239d11">A</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>T</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="135" column="14" bodyfile="ql/experimental/shortrate/generalizedhullwhite.cpp" bodystart="199" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_hull_white_1adf742d564f8eb656366668d54242fca8" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GeneralizedHullWhite::B</definition>
        <argsstring>(Time t, Time T) const override</argsstring>
        <name>B</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::B</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_one_factor_affine_model_1aade170fa9f879b42f050f2c5a9f1910d">B</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>T</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="136" column="14" bodyfile="ql/experimental/shortrate/generalizedhullwhite.cpp" bodystart="128" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_hull_white_1add765ecaa121d899137e9a69b742d044" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GeneralizedHullWhite::V</definition>
        <argsstring>(Time t, Time T) const</argsstring>
        <name>V</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::V</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>T</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="137" column="14" bodyfile="ql/experimental/shortrate/generalizedhullwhite.cpp" bodystart="152" bodyend="179"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_hull_white_1a4e7201ec62304906c4374cb07540252c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(<ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref>)&gt;</type>
        <definition>std::function&lt; Real(Time)&gt; QuantLib::GeneralizedHullWhite::speed</definition>
        <argsstring>() const</argsstring>
        <name>speed</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::speed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="152" column="23" bodyfile="ql/experimental/shortrate/generalizedhullwhite.cpp" bodystart="244" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_hull_white_1a4bd379a48c9292cc04a82b6322f8ab57" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(<ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref>)&gt;</type>
        <definition>std::function&lt; Real(Time)&gt; QuantLib::GeneralizedHullWhite::vol</definition>
        <argsstring>() const</argsstring>
        <name>vol</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::vol</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="153" column="23" bodyfile="ql/experimental/shortrate/generalizedhullwhite.cpp" bodystart="248" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_hull_white_1ac5050a8cace9c44053fad8f37b9ea559" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SpeedInterpolationTraits</type>
          </param>
          <param>
            <type>class VolInterpolationTraits</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void QuantLib::GeneralizedHullWhite::initialize</definition>
        <argsstring>(const Handle&lt; YieldTermStructure &gt; &amp;yieldtermStructure, const std::vector&lt; Date &gt; &amp;speedstructure, const std::vector&lt; Date &gt; &amp;volstructure, const std::vector&lt; Real &gt; &amp;speed, const std::vector&lt; Real &gt; &amp;vol, const SpeedInterpolationTraits &amp;speedtraits, const VolInterpolationTraits &amp;voltraits, const std::function&lt; Real(Real)&gt; &amp;f, const std::function&lt; Real(Real)&gt; &amp;fInverse)</argsstring>
        <name>initialize</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::initialize</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
          <declname>yieldtermStructure</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt; &amp;</type>
          <declname>speedstructure</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt; &amp;</type>
          <declname>volstructure</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>speed</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>vol</declname>
        </param>
        <param>
          <type>const SpeedInterpolationTraits &amp;</type>
          <declname>speedtraits</declname>
        </param>
        <param>
          <type>const VolInterpolationTraits &amp;</type>
          <declname>voltraits</declname>
        </param>
        <param>
          <type>const std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(<ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(<ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>)&gt; &amp;</type>
          <declname>fInverse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="167" column="14" bodyfile="ql/experimental/shortrate/generalizedhullwhite.hpp" bodystart="167" bodyend="215"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_hull_white_1a86eeb7572d14e1e1d2584078ca563796" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>static Real QuantLib::GeneralizedHullWhite::identity</definition>
        <argsstring>(Real x)</argsstring>
        <name>identity</name>
        <qualifiedname>QuantLib::GeneralizedHullWhite::identity</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="162" column="21" bodyfile="ql/experimental/shortrate/generalizedhullwhite.hpp" bodystart="162" bodyend="164"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Generalized Hull-White model class. </para>
    </briefdescription>
    <detaileddescription>
<para>This class implements the standard Black-Karasinski model defined by   <formula id="177">\[d f(r_t) = (\theta(t) - \alpha f(r_t))dt + \sigma dW_t,
\]</formula> where <formula id="178">$ alpha $</formula> and <formula id="179">$ sigma $</formula> are piecewise linear functions. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="8">
        <label>QuantLib::AffineModel</label>
        <link refid="class_quant_lib_1_1_affine_model"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::CalibratedModel</label>
        <link refid="class_quant_lib_1_1_calibrated_model"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::GeneralizedHullWhite</label>
        <link refid="class_quant_lib_1_1_generalized_hull_white"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="6">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::OneFactorAffineModel</label>
        <link refid="class_quant_lib_1_1_one_factor_affine_model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::OneFactorModel</label>
        <link refid="class_quant_lib_1_1_one_factor_model"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::ShortRateModel</label>
        <link refid="class_quant_lib_1_1_short_rate_model"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>QuantLib::TermStructureConsistentModel</label>
        <link refid="class_quant_lib_1_1_term_structure_consistent_model"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="9">
        <label>QuantLib::AffineModel</label>
        <link refid="class_quant_lib_1_1_affine_model"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QuantLib::Array</label>
        <link refid="class_quant_lib_1_1_array"/>
      </node>
      <node id="5">
        <label>QuantLib::CalibratedModel</label>
        <link refid="class_quant_lib_1_1_calibrated_model"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>problemValues_</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::GeneralizedHullWhite</label>
        <link refid="class_quant_lib_1_1_generalized_hull_white"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="6">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::OneFactorAffineModel</label>
        <link refid="class_quant_lib_1_1_one_factor_affine_model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::OneFactorModel</label>
        <link refid="class_quant_lib_1_1_one_factor_model"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::ShortRateModel</label>
        <link refid="class_quant_lib_1_1_short_rate_model"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>QuantLib::TermStructureConsistentModel</label>
        <link refid="class_quant_lib_1_1_term_structure_consistent_model"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/shortrate/generalizedhullwhite.hpp" line="72" column="5" bodyfile="ql/experimental/shortrate/generalizedhullwhite.hpp" bodystart="73" bodyend="216"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1ace3dd5bc6ccb186c365c1b56f7fda70f" prot="protected" virt="virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>A</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1ab28167aac88de2250d012d9741195e07" prot="protected" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>a</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1a586e7b1430fa4fd5b0cc254fa666d17c" prot="private" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>a_</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1a063e96ccbf2ebbdb39341822083bd37c" prot="protected" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>arguments_</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1adf742d564f8eb656366668d54242fca8" prot="protected" virt="virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>B</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1af2776521b1584d547ec2440833508677" prot="public" virt="virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>calibrate</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1a6368e7ce0867de464f64d7b104b79b85" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>CalibratedModel</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1a3b1198e322e93d700c2b48fe0cd888cf" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>constraint</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1add85b46f3e818f3916bd30eb85d877ef" prot="protected" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>constraint_</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_one_factor_affine_model_1a0247518bb81c11a725f53228d6e271dc" prot="public" virt="virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>discount</name></member>
      <member refid="class_quant_lib_1_1_one_factor_affine_model_1a5911b73fc6e682bc12db08925e82c396" prot="public" virt="virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>discountBond</name></member>
      <member refid="class_quant_lib_1_1_one_factor_affine_model_1a43fb17531dc31036c9d277d1c69b0018" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>discountBond</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1ad02479fb50e222d18b780f144193b574" prot="public" virt="virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>discountBondOption</name></member>
      <member refid="class_quant_lib_1_1_affine_model_1a6be43b6fa4380dee96cc59449025bb2b" prot="public" virt="virtual" ambiguityscope="QuantLib::OneFactorAffineModel::"><scope>QuantLib::GeneralizedHullWhite</scope><name>discountBondOption</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1a31071d5b9de04633f92e7f05c32d9a9d" prot="public" virt="virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>dynamics</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1a797a6b080b7a66d620758ff6fe34df39" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>endCriteria</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1ac687dc9165e7e719a50e6b8f7611303f" prot="private" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>f_</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1a249c491c0e480be64529fde3c45dd066" prot="private" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>fInverse_</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1a13612e99a407909dffe426f45d52b49c" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>fixedReversion</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1a66027503e827f56c83a5a60f8f066d84" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>functionEvaluation</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1a6b9b9c042c526902626eead4de47e74c" prot="protected" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>functionEvaluation_</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1aca4a55536f7400c99f4d7fcc57d70049" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>GeneralizedHullWhite</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1afe8e9dfefbc9955c7f9da2867ebd960b" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>GeneralizedHullWhite</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1a8b50974d944310e1adda9fdcd01e9288" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>GeneralizedHullWhite</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1afe39d8df716bfac7298b1186883183a2" prot="protected" virt="virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>generateArguments</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1aa93daa21af962b9e5d455a1f7e47fad6" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>HWdynamics</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1a86eeb7572d14e1e1d2584078ca563796" prot="private" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>identity</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1ac5050a8cace9c44053fad8f37b9ea559" prot="private" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>initialize</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::CalibratedModel::"><scope>QuantLib::GeneralizedHullWhite</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::CalibratedModel::"><scope>QuantLib::GeneralizedHullWhite</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::CalibratedModel::"><scope>QuantLib::GeneralizedHullWhite</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_one_factor_affine_model_1a886ce2d7ee60eb4ba3d5e8d4d5c5fec1" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>OneFactorAffineModel</name></member>
      <member refid="class_quant_lib_1_1_one_factor_model_1a5a46125d5e17846020c0f2562b26e371" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>OneFactorModel</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::GeneralizedHullWhite</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::CalibratedModel::QuantLib::Observable::"><scope>QuantLib::GeneralizedHullWhite</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::GeneralizedHullWhite</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1adae9352d30045e32f5382fa79a0bc88c" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>params</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1ac12761e00f2ea95982602d758ae99bd3" prot="private" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>phi_</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1ab7766a4e575c67e8f1e00f98bfe2e8c6" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>problemValues</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1a4341c3bd6dc46bc9380bb4d52c032d25" prot="protected" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>problemValues_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1a018930665d7468824b0f1800b7472eb6" prot="public" virt="virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>setParams</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1a91f2d3c3d84fbe420b0d842de338037e" prot="protected" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>shortRateEndCriteria_</name></member>
      <member refid="class_quant_lib_1_1_short_rate_model_1a372926acccb7e867cbd64657b3ad36db" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>ShortRateModel</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1a5addf3d42aab0bff75ca228266f13d40" prot="protected" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>sigma</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1aaca6f8d5ea70254bc25cb4b84f6806cb" prot="private" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>sigma_</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1a4e7201ec62304906c4374cb07540252c" prot="private" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>speed</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1aabbd696e5eaaa82fc0c60c15f310ba38" prot="private" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>speed_</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1a72abcc6fb51c25860884339d863a22a8" prot="private" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>speedperiods_</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1ae9fef9e66be445ce78677281652ee85c" prot="private" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>speedstructure_</name></member>
      <member refid="class_quant_lib_1_1_term_structure_consistent_model_1a3035748f8b1b618e13a45428e3f55f90" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>termStructure</name></member>
      <member refid="class_quant_lib_1_1_term_structure_consistent_model_1a20d3cd0bfeafc1ed325eb7e5747943a7" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>TermStructureConsistentModel</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1abe2dc663cb805c388e93ab8f743ea0ac" prot="public" virt="virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>tree</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1a03d7cb63ca181a47a45994cfe448e42c" prot="public" virt="virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1add765ecaa121d899137e9a69b742d044" prot="protected" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>V</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1a2652178a7f9d28ca4e213f76b55c87e9" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>value</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1a4bd379a48c9292cc04a82b6322f8ab57" prot="private" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>vol</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1a18d399dca81e3d0b838a40fa1245dfd5" prot="private" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>vol_</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1afb0bf7a31c4023831e04f7b198dfa7a2" prot="private" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>volperiods_</name></member>
      <member refid="class_quant_lib_1_1_generalized_hull_white_1a4cf2ca708fd3597964b523bfbe1d603c" prot="private" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>volstructure_</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_one_factor_model_1ac6681ea431a84683013da24f2a04f5eb" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedHullWhite</scope><name>~OneFactorModel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
