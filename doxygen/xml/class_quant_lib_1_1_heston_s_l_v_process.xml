<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_heston_s_l_v_process" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::HestonSLVProcess</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_stochastic_process" prot="public" virt="non-virtual">QuantLib::StochasticProcess</basecompoundref>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_heston_s_l_v_process_1afea2ee4c81ea1d80dec54b02588c742c" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::HestonSLVProcess::kappa_</definition>
        <argsstring></argsstring>
        <name>kappa_</name>
        <qualifiedname>QuantLib::HestonSLVProcess::kappa_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="76" column="14" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_heston_s_l_v_process_1adbe3ff2a76ae7eae9b3c4f19b1bc6958" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::HestonSLVProcess::theta_</definition>
        <argsstring></argsstring>
        <name>theta_</name>
        <qualifiedname>QuantLib::HestonSLVProcess::theta_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="76" column="21" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_heston_s_l_v_process_1a6f9303a24e2551ddf7c044e38d44e235" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::HestonSLVProcess::sigma_</definition>
        <argsstring></argsstring>
        <name>sigma_</name>
        <qualifiedname>QuantLib::HestonSLVProcess::sigma_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="76" column="28" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_heston_s_l_v_process_1afac4c3235b8a39a9553a8d29a62ae4cc" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::HestonSLVProcess::rho_</definition>
        <argsstring></argsstring>
        <name>rho_</name>
        <qualifiedname>QuantLib::HestonSLVProcess::rho_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="76" column="35" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_heston_s_l_v_process_1a3e3ebfb25c5234415105c904fb35c6b6" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::HestonSLVProcess::v0_</definition>
        <argsstring></argsstring>
        <name>v0_</name>
        <qualifiedname>QuantLib::HestonSLVProcess::v0_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="76" column="40" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_heston_s_l_v_process_1a67a256d3191759be4b285706bdb53ce1" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::HestonSLVProcess::mixingFactor_</definition>
        <argsstring></argsstring>
        <name>mixingFactor_</name>
        <qualifiedname>QuantLib::HestonSLVProcess::mixingFactor_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="76" column="44" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_heston_s_l_v_process_1aabd42cde601542502a1483e83d9958d3" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::HestonSLVProcess::mixedSigma_</definition>
        <argsstring></argsstring>
        <name>mixedSigma_</name>
        <qualifiedname>QuantLib::HestonSLVProcess::mixedSigma_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="76" column="58" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_heston_s_l_v_process_1ae3f8defcdb2798142ac9ab8fb188b79a" prot="private" static="no" mutable="no">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_heston_process" kindref="compound">HestonProcess</ref> &gt;</type>
        <definition>const ext::shared_ptr&lt;HestonProcess&gt; QuantLib::HestonSLVProcess::hestonProcess_</definition>
        <argsstring></argsstring>
        <name>hestonProcess_</name>
        <qualifiedname>QuantLib::HestonSLVProcess::hestonProcess_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="78" column="31" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_heston_s_l_v_process_1a55488b7ca69ed0a785cad9f1e04caf7b" prot="private" static="no" mutable="no">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_local_vol_term_structure" kindref="compound">LocalVolTermStructure</ref> &gt;</type>
        <definition>const ext::shared_ptr&lt;LocalVolTermStructure&gt; QuantLib::HestonSLVProcess::leverageFct_</definition>
        <argsstring></argsstring>
        <name>leverageFct_</name>
        <qualifiedname>QuantLib::HestonSLVProcess::leverageFct_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="79" column="31" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="79" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_heston_s_l_v_process_1a6b4cbee1d15291a80baf5cb7dc9cb855" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::HestonSLVProcess::HestonSLVProcess</definition>
        <argsstring>(const ext::shared_ptr&lt; HestonProcess &gt; &amp;hestonProcess, ext::shared_ptr&lt; LocalVolTermStructure &gt; leverageFct, Real mixingFactor=1.0)</argsstring>
        <name>HestonSLVProcess</name>
        <qualifiedname>QuantLib::HestonSLVProcess::HestonSLVProcess</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_heston_process" kindref="compound">HestonProcess</ref> &gt; &amp;</type>
          <declname>hestonProcess</declname>
        </param>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_local_vol_term_structure" kindref="compound">LocalVolTermStructure</ref> &gt;</type>
          <declname>leverageFct</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>mixingFactor</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="35" column="9" bodyfile="ql/processes/hestonslvprocess.cpp" bodystart="32" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_heston_s_l_v_process_1ace58f60b984ec130f6cf684c432bf4ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::HestonSLVProcess::size</definition>
        <argsstring>() const override</argsstring>
        <name>size</name>
        <qualifiedname>QuantLib::HestonSLVProcess::size</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a92e9b468d781e9ceb566d6e546113540">size</reimplements>
        <briefdescription>
<para>returns the number of dimensions of the stochastic process </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="39" column="14" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_heston_s_l_v_process_1a5d347ed76b3894079c7539e79464c4e4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::HestonSLVProcess::factors</definition>
        <argsstring>() const override</argsstring>
        <name>factors</name>
        <qualifiedname>QuantLib::HestonSLVProcess::factors</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a0346d38598fb9a5a1cd58024f05081aa">factors</reimplements>
        <briefdescription>
<para>returns the number of independent factors of the process </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="40" column="14" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_heston_s_l_v_process_1a104892cd0c8b0d5b3a83f54f5fc4fa31" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::HestonSLVProcess::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <qualifiedname>QuantLib::HestonSLVProcess::update</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_observer_1a07905c55dca858470fcf4a1aea0005aa">update</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must be implemented in derived classes. An instance of Observer does not call this method directly: instead, it will be called by the observables the instance registered with when they need to notify any changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="42" column="14" bodyfile="ql/processes/hestonslvprocess.cpp" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_heston_s_l_v_process_1adfd54e06aa8f9b29c528ff751c89a854" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::HestonSLVProcess::initialValues</definition>
        <argsstring>() const override</argsstring>
        <name>initialValues</name>
        <qualifiedname>QuantLib::HestonSLVProcess::initialValues</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a4277a74107d071252a2445d23c90b654">initialValues</reimplements>
        <briefdescription>
<para>returns the initial values of the state variables </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="44" column="15" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_heston_s_l_v_process_1a17d2d04b61705732e4ec94101eb4d87d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::HestonSLVProcess::apply</definition>
        <argsstring>(const Array &amp;x0, const Array &amp;dx) const override</argsstring>
        <name>apply</name>
        <qualifiedname>QuantLib::HestonSLVProcess::apply</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1ae2e3d89d3595fcd73be5e6e7e195f3e7">apply</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>dx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>applies a change to the asset value. By default, it returns <formula id="477">$ \mathrm{x} + \Delta \mathrm{x} $</formula>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="47" column="15" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="47" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_heston_s_l_v_process_1a4d5d47d4b50bcb5ed08686615c1cf7a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::HestonSLVProcess::drift</definition>
        <argsstring>(Time t, const Array &amp;x) const override</argsstring>
        <name>drift</name>
        <qualifiedname>QuantLib::HestonSLVProcess::drift</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a467056bfaa17a1ea3debd1dc21402bb8">drift</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the drift part of the equation, i.e., <formula id="468">$ \mu(t, \mathrm{x}_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="51" column="15" bodyfile="ql/processes/hestonslvprocess.cpp" bodystart="46" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_heston_s_l_v_process_1a4a695c61abbb7236f44d4a09d28c8aa8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::HestonSLVProcess::diffusion</definition>
        <argsstring>(Time t, const Array &amp;x) const override</argsstring>
        <name>diffusion</name>
        <qualifiedname>QuantLib::HestonSLVProcess::diffusion</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a45df6a954a177df19d31de5a7f2bef35">diffusion</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the diffusion part of the equation, i.e. <formula id="469">$ \sigma(t, \mathrm{x}_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="52" column="16" bodyfile="ql/processes/hestonslvprocess.cpp" bodystart="61" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_heston_s_l_v_process_1a62832fa91752bd193772670a36188f7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::HestonSLVProcess::evolve</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt, const Array &amp;dw) const override</argsstring>
        <name>evolve</name>
        <qualifiedname>QuantLib::HestonSLVProcess::evolve</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a8d99a715b297d5b6543b1d303a6002c0">evolve</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>dw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the asset value after a time interval  <formula id="474">$ \Delta t
$</formula> according to the given discretization. By default, it returns    <formula id="475">\[E(\mathrm{x}_0,t_0,\Delta t) +
S(\mathrm{x}_0,t_0,\Delta t) \cdot \Delta \mathrm{w}
\]</formula> where <formula id="476">$ E $</formula> is the expectation and <formula id="290">$ S $</formula> the standard deviation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="53" column="15" bodyfile="ql/processes/hestonslvprocess.cpp" bodystart="76" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_heston_s_l_v_process_1a968de5e9e53589ec2dfc873a670cfbe8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::HestonSLVProcess::v0</definition>
        <argsstring>() const</argsstring>
        <name>v0</name>
        <qualifiedname>QuantLib::HestonSLVProcess::v0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="55" column="14" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_heston_s_l_v_process_1afac593901e34e22c030c5f1ec5bb29a0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::HestonSLVProcess::rho</definition>
        <argsstring>() const</argsstring>
        <name>rho</name>
        <qualifiedname>QuantLib::HestonSLVProcess::rho</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="56" column="14" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_heston_s_l_v_process_1a9eca17529d57926b8eb408f14f91970d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::HestonSLVProcess::kappa</definition>
        <argsstring>() const</argsstring>
        <name>kappa</name>
        <qualifiedname>QuantLib::HestonSLVProcess::kappa</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="57" column="14" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_heston_s_l_v_process_1a207334cb56c248c8edd76d2d5116d0dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::HestonSLVProcess::theta</definition>
        <argsstring>() const</argsstring>
        <name>theta</name>
        <qualifiedname>QuantLib::HestonSLVProcess::theta</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="58" column="14" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_heston_s_l_v_process_1ab924a7d1ddde1eeec8274635cc78f17a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::HestonSLVProcess::sigma</definition>
        <argsstring>() const</argsstring>
        <name>sigma</name>
        <qualifiedname>QuantLib::HestonSLVProcess::sigma</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="59" column="14" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_heston_s_l_v_process_1a7966c0a62455b5375b1d97c3eac50c8c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::HestonSLVProcess::mixingFactor</definition>
        <argsstring>() const</argsstring>
        <name>mixingFactor</name>
        <qualifiedname>QuantLib::HestonSLVProcess::mixingFactor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="60" column="14" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_heston_s_l_v_process_1a89a75a3c6d6879dd9f865e2f12f4b919" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_local_vol_term_structure" kindref="compound">LocalVolTermStructure</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; LocalVolTermStructure &gt; QuantLib::HestonSLVProcess::leverageFct</definition>
        <argsstring>() const</argsstring>
        <name>leverageFct</name>
        <qualifiedname>QuantLib::HestonSLVProcess::leverageFct</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="61" column="25" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_heston_s_l_v_process_1a45569d9bd64838eb1d0db98a584d14f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &amp;</type>
        <definition>const Handle&lt; Quote &gt; &amp; QuantLib::HestonSLVProcess::s0</definition>
        <argsstring>() const</argsstring>
        <name>s0</name>
        <qualifiedname>QuantLib::HestonSLVProcess::s0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="65" column="22" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_heston_s_l_v_process_1ac4ba435aa5486f689e75e154aee124c3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
        <definition>const Handle&lt; YieldTermStructure &gt; &amp; QuantLib::HestonSLVProcess::dividendYield</definition>
        <argsstring>() const</argsstring>
        <name>dividendYield</name>
        <qualifiedname>QuantLib::HestonSLVProcess::dividendYield</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="66" column="22" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_heston_s_l_v_process_1a3d0778fed607447ee88e6e9f8aad7b36" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
        <definition>const Handle&lt; YieldTermStructure &gt; &amp; QuantLib::HestonSLVProcess::riskFreeRate</definition>
        <argsstring>() const</argsstring>
        <name>riskFreeRate</name>
        <qualifiedname>QuantLib::HestonSLVProcess::riskFreeRate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="69" column="22" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_heston_s_l_v_process_1a2f91000da85f74aec8c779bff1d2f8b0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        <definition>Time QuantLib::HestonSLVProcess::time</definition>
        <argsstring>(const Date &amp;d) const override</argsstring>
        <name>time</name>
        <qualifiedname>QuantLib::HestonSLVProcess::time</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a39c5f08a3779665f9185a558d2b8418d">time</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the time value corresponding to the given date in the reference system of the stochastic process.</para>
<para><simplesect kind="note"><para>As a number of processes might not need this functionality, a default implementation is given which raises an exception. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="73" column="14" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="73" bodyend="73"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_heston_s_l_v_process_1ac8f859e049ae6b13faa915f20425411c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::HestonSLVProcess::setParameters</definition>
        <argsstring>()</argsstring>
        <name>setParameters</name>
        <qualifiedname>QuantLib::HestonSLVProcess::setParameters</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonslvprocess.hpp" line="81" column="14" bodyfile="ql/processes/hestonslvprocess.cpp" bodystart="119" bodyend="126"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::HestonSLVProcess</label>
        <link refid="class_quant_lib_1_1_heston_s_l_v_process"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="3">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::StochasticProcess</label>
        <link refid="class_quant_lib_1_1_stochastic_process"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::HestonSLVProcess</label>
        <link refid="class_quant_lib_1_1_heston_s_l_v_process"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="3">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::StochasticProcess</label>
        <link refid="class_quant_lib_1_1_stochastic_process"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/processes/hestonslvprocess.hpp" line="33" column="5" bodyfile="ql/processes/hestonslvprocess.hpp" bodystart="33" bodyend="82"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1a17d2d04b61705732e4ec94101eb4d87d" prot="public" virt="virtual"><scope>QuantLib::HestonSLVProcess</scope><name>apply</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a3a92717719d8621148989905a132c5e1" prot="public" virt="virtual"><scope>QuantLib::HestonSLVProcess</scope><name>covariance</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::HestonSLVProcess</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1a4a695c61abbb7236f44d4a09d28c8aa8" prot="public" virt="virtual"><scope>QuantLib::HestonSLVProcess</scope><name>diffusion</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a98cd541abbfd37f62d10d3ec2ed214be" prot="protected" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>discretization_</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1ac4ba435aa5486f689e75e154aee124c3" prot="public" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>dividendYield</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1a4d5d47d4b50bcb5ed08686615c1cf7a7" prot="public" virt="virtual"><scope>QuantLib::HestonSLVProcess</scope><name>drift</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1a62832fa91752bd193772670a36188f7f" prot="public" virt="virtual"><scope>QuantLib::HestonSLVProcess</scope><name>evolve</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1af225d654ba08bc09bf2ecab7d787ca9b" prot="public" virt="virtual"><scope>QuantLib::HestonSLVProcess</scope><name>expectation</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1a5d347ed76b3894079c7539e79464c4e4" prot="public" virt="virtual"><scope>QuantLib::HestonSLVProcess</scope><name>factors</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1ae3f8defcdb2798142ac9ab8fb188b79a" prot="private" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>hestonProcess_</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1a6b4cbee1d15291a80baf5cb7dc9cb855" prot="public" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>HestonSLVProcess</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1adfd54e06aa8f9b29c528ff751c89a854" prot="public" virt="virtual"><scope>QuantLib::HestonSLVProcess</scope><name>initialValues</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::HestonSLVProcess</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1a9eca17529d57926b8eb408f14f91970d" prot="public" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>kappa</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1afea2ee4c81ea1d80dec54b02588c742c" prot="private" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>kappa_</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1a89a75a3c6d6879dd9f865e2f12f4b919" prot="public" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>leverageFct</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1a55488b7ca69ed0a785cad9f1e04caf7b" prot="private" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>leverageFct_</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1aabd42cde601542502a1483e83d9958d3" prot="private" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>mixedSigma_</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1a7966c0a62455b5375b1d97c3eac50c8c" prot="public" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>mixingFactor</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1a67a256d3191759be4b285706bdb53ce1" prot="private" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>mixingFactor_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::HestonSLVProcess</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::HestonSLVProcess</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::HestonSLVProcess</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::HestonSLVProcess</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::HestonSLVProcess</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1afac593901e34e22c030c5f1ec5bb29a0" prot="public" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>rho</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1afac4c3235b8a39a9553a8d29a62ae4cc" prot="private" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>rho_</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1a3d0778fed607447ee88e6e9f8aad7b36" prot="public" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>riskFreeRate</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1a45569d9bd64838eb1d0db98a584d14f9" prot="public" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>s0</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1ac8f859e049ae6b13faa915f20425411c" prot="private" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>setParameters</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1ab924a7d1ddde1eeec8274635cc78f17a" prot="public" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>sigma</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1a6f9303a24e2551ddf7c044e38d44e235" prot="private" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>sigma_</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1ace58f60b984ec130f6cf684c432bf4ed" prot="public" virt="virtual"><scope>QuantLib::HestonSLVProcess</scope><name>size</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a47e9f5540b2ca9c32650dc81d051ca86" prot="public" virt="virtual"><scope>QuantLib::HestonSLVProcess</scope><name>stdDeviation</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a2dd24b794a6b320bc60ba9e1a87bf48e" prot="protected" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>StochasticProcess</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a957ee9776d6048835106ea29ea44927f" prot="protected" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>StochasticProcess</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1a207334cb56c248c8edd76d2d5116d0dd" prot="public" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>theta</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1adbe3ff2a76ae7eae9b3c4f19b1bc6958" prot="private" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>theta_</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1a2f91000da85f74aec8c779bff1d2f8b0" prot="public" virt="virtual"><scope>QuantLib::HestonSLVProcess</scope><name>time</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1a104892cd0c8b0d5b3a83f54f5fc4fa31" prot="public" virt="virtual"><scope>QuantLib::HestonSLVProcess</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1a968de5e9e53589ec2dfc873a670cfbe8" prot="public" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>v0</name></member>
      <member refid="class_quant_lib_1_1_heston_s_l_v_process_1a3e3ebfb25c5234415105c904fb35c6b6" prot="private" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>v0_</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::HestonSLVProcess</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::HestonSLVProcess</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0e2b6a14e675db5abd0ab8965ff7b2c3" prot="public" virt="non-virtual"><scope>QuantLib::HestonSLVProcess</scope><name>~StochasticProcess</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
