<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_average_b_m_a_coupon" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::AverageBMACoupon</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_floating_rate_coupon" prot="public" virt="non-virtual">QuantLib::FloatingRateCoupon</basecompoundref>
    <includes refid="averagebmacoupon_8hpp" local="no">averagebmacoupon.hpp</includes>
    <sectiondef kind="user-defined">
      <header>Visitability</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_average_b_m_a_coupon_1a1ee454aed3a0bd8c79b3eb0a0172ad67" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_schedule" kindref="compound">Schedule</ref></type>
        <definition>Schedule QuantLib::AverageBMACoupon::fixingSchedule_</definition>
        <argsstring></argsstring>
        <name>fixingSchedule_</name>
        <qualifiedname>QuantLib::AverageBMACoupon::fixingSchedule_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/averagebmacoupon.hpp" line="78" column="18" bodyfile="ql/cashflows/averagebmacoupon.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_average_b_m_a_coupon_1ab159848d81d248d100fc8a95b3f98a6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::AverageBMACoupon::accept</definition>
        <argsstring>(AcyclicVisitor &amp;) override</argsstring>
        <name>accept</name>
        <qualifiedname>QuantLib::AverageBMACoupon::accept</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_event_1a572b6e63554be33515e60185aa8d1499">accept</reimplements>
        <param>
          <type><ref refid="class_quant_lib_1_1_acyclic_visitor" kindref="compound">AcyclicVisitor</ref> &amp;</type>
          <defname>v</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/averagebmacoupon.hpp" line="75" column="14" bodyfile="ql/cashflows/averagebmacoupon.cpp" bodystart="155" bodyend="162"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>FloatingRateCoupon interface</header>
      <memberdef kind="function" id="class_quant_lib_1_1_average_b_m_a_coupon_1a018e9678eeedc12653a7b51b613c7232" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::AverageBMACoupon::fixingDate</definition>
        <argsstring>() const override</argsstring>
        <name>fixingDate</name>
        <qualifiedname>QuantLib::AverageBMACoupon::fixingDate</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_floating_rate_coupon_1a16703eb6819bfdda25a86c97e7776358">fixingDate</reimplements>
        <briefdescription>
<para>not applicable here; use <ref refid="class_quant_lib_1_1_average_b_m_a_coupon_1a96bf3c6cb9ff4748710ed01b31df5458" kindref="member">fixingDates()</ref> instead </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/averagebmacoupon.hpp" line="60" column="14" bodyfile="ql/cashflows/averagebmacoupon.cpp" bodystart="132" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_average_b_m_a_coupon_1a96bf3c6cb9ff4748710ed01b31df5458" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt;</type>
        <definition>std::vector&lt; Date &gt; QuantLib::AverageBMACoupon::fixingDates</definition>
        <argsstring>() const</argsstring>
        <name>fixingDates</name>
        <qualifiedname>QuantLib::AverageBMACoupon::fixingDates</qualifiedname>
        <briefdescription>
<para>fixing dates of the rates to be averaged </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/averagebmacoupon.hpp" line="62" column="21" bodyfile="ql/cashflows/averagebmacoupon.cpp" bodystart="136" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_average_b_m_a_coupon_1aff9e83b663b3e1633a466509eb28aead" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::AverageBMACoupon::indexFixing</definition>
        <argsstring>() const override</argsstring>
        <name>indexFixing</name>
        <qualifiedname>QuantLib::AverageBMACoupon::indexFixing</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_floating_rate_coupon_1a49e3fcc138f632ad605486cb4756074e">indexFixing</reimplements>
        <briefdescription>
<para>not applicable here; use <ref refid="class_quant_lib_1_1_average_b_m_a_coupon_1aaf9c3dd420094648a3a34f5d67b18fb7" kindref="member">indexFixings()</ref> instead </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/averagebmacoupon.hpp" line="65" column="14" bodyfile="ql/cashflows/averagebmacoupon.cpp" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_average_b_m_a_coupon_1aaf9c3dd420094648a3a34f5d67b18fb7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt;</type>
        <definition>std::vector&lt; Rate &gt; QuantLib::AverageBMACoupon::indexFixings</definition>
        <argsstring>() const</argsstring>
        <name>indexFixings</name>
        <qualifiedname>QuantLib::AverageBMACoupon::indexFixings</qualifiedname>
        <briefdescription>
<para>fixings of the underlying index to be averaged </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/averagebmacoupon.hpp" line="67" column="21" bodyfile="ql/cashflows/averagebmacoupon.cpp" bodystart="144" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_average_b_m_a_coupon_1a9ee4c2882db5bfcb06b50f7432e2fdb0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::AverageBMACoupon::convexityAdjustment</definition>
        <argsstring>() const override</argsstring>
        <name>convexityAdjustment</name>
        <qualifiedname>QuantLib::AverageBMACoupon::convexityAdjustment</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_floating_rate_coupon_1a90978da4260ed35edc96450c3704b46f">convexityAdjustment</reimplements>
        <briefdescription>
<para>not applicable here </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/averagebmacoupon.hpp" line="70" column="14" bodyfile="ql/cashflows/averagebmacoupon.cpp" bodystart="151" bodyend="153"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_average_b_m_a_coupon_1a84bab5e4b23483cbff8bb59e35c2cba3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::AverageBMACoupon::AverageBMACoupon</definition>
        <argsstring>(const Date &amp;paymentDate, Real nominal, const Date &amp;startDate, const Date &amp;endDate, const ext::shared_ptr&lt; BMAIndex &gt; &amp;index, Real gearing=1.0, Spread spread=0.0, const Date &amp;refPeriodStart=Date(), const Date &amp;refPeriodEnd=Date(), const DayCounter &amp;dayCounter=DayCounter())</argsstring>
        <name>AverageBMACoupon</name>
        <qualifiedname>QuantLib::AverageBMACoupon::AverageBMACoupon</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>paymentDate</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nominal</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>startDate</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>endDate</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_b_m_a_index" kindref="compound">BMAIndex</ref> &gt; &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>gearing</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref></type>
          <declname>spread</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>refPeriodStart</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>refPeriodEnd</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
          <defval><ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/averagebmacoupon.hpp" line="46" column="9" bodyfile="ql/cashflows/averagebmacoupon.cpp" bodystart="102" bodyend="130"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para><ref refid="struct_quant_lib_1_1_average" kindref="compound">Average</ref> BMA coupon. </para>
    </briefdescription>
    <detaileddescription>
<para>Coupon paying a BMA index, where the coupon rate is a weighted average of relevant fixings.</para>
<para>The weighted average is computed based on the actual calendar days for which a given fixing is valid and contributing to the given interest period.</para>
<para>Before weights are computed, the fixing schedule is adjusted for the index&apos;s fixing day gap. See <ref refid="class_quant_lib_1_1_floating_rate_coupon_1a5ae0817af91111a7748e787463f25297" kindref="member">rate()</ref> method for details. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::AverageBMACoupon</label>
        <link refid="class_quant_lib_1_1_average_b_m_a_coupon"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::CashFlow</label>
        <link refid="class_quant_lib_1_1_cash_flow"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Coupon</label>
        <link refid="class_quant_lib_1_1_coupon"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Event</label>
        <link refid="class_quant_lib_1_1_event"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::FloatingRateCoupon</label>
        <link refid="class_quant_lib_1_1_floating_rate_coupon"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="8">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::AverageBMACoupon</label>
        <link refid="class_quant_lib_1_1_average_b_m_a_coupon"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::CashFlow</label>
        <link refid="class_quant_lib_1_1_cash_flow"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Coupon</label>
        <link refid="class_quant_lib_1_1_coupon"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>accrualEndDate_</edgelabel>
          <edgelabel>accrualStartDate_</edgelabel>
          <edgelabel>exCouponDate_</edgelabel>
          <edgelabel>paymentDate_</edgelabel>
          <edgelabel>refPeriodEnd_</edgelabel>
          <edgelabel>refPeriodStart_</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>QuantLib::Date</label>
        <link refid="class_quant_lib_1_1_date"/>
      </node>
      <node id="10">
        <label>QuantLib::DayCounter</label>
        <link refid="class_quant_lib_1_1_day_counter"/>
      </node>
      <node id="5">
        <label>QuantLib::Event</label>
        <link refid="class_quant_lib_1_1_event"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::FloatingRateCoupon</label>
        <link refid="class_quant_lib_1_1_floating_rate_coupon"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>dayCounter_</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="8">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
    </collaborationgraph>
    <location file="ql/cashflows/averagebmacoupon.hpp" line="44" column="5" bodyfile="ql/cashflows/averagebmacoupon.hpp" bodystart="44" bodyend="79"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_average_b_m_a_coupon_1ab159848d81d248d100fc8a95b3f98a6b" prot="public" virt="virtual"><scope>QuantLib::AverageBMACoupon</scope><name>accept</name></member>
      <member refid="class_quant_lib_1_1_coupon_1ae6b211492a4610a3e2fec3f2f430247a" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>accrualDays</name></member>
      <member refid="class_quant_lib_1_1_coupon_1a5808fa2cd843a929bb14427b16dd3bde" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>accrualEndDate</name></member>
      <member refid="class_quant_lib_1_1_coupon_1a58c14a6e0a6cc20165ff4a5289a72d41" prot="protected" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>accrualEndDate_</name></member>
      <member refid="class_quant_lib_1_1_coupon_1a971dd3951a6fca68e16d4c00fccd2eab" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>accrualPeriod</name></member>
      <member refid="class_quant_lib_1_1_coupon_1a1fc9f110182c5f201069dc3053f73deb" prot="protected" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>accrualPeriod_</name></member>
      <member refid="class_quant_lib_1_1_coupon_1aa063dce446a588713d94746a80cd0746" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>accrualStartDate</name></member>
      <member refid="class_quant_lib_1_1_coupon_1adb4da57a28a92b2a1a341f0c586aded0" prot="protected" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>accrualStartDate_</name></member>
      <member refid="class_quant_lib_1_1_floating_rate_coupon_1a31376566a50354d7d6e58e76ebd24193" prot="public" virt="virtual"><scope>QuantLib::AverageBMACoupon</scope><name>accruedAmount</name></member>
      <member refid="class_quant_lib_1_1_coupon_1acee86a8c573d57b79971329275682a29" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>accruedDays</name></member>
      <member refid="class_quant_lib_1_1_coupon_1a67ff3181d3f3c078d193c9383f7cf51b" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>accruedPeriod</name></member>
      <member refid="class_quant_lib_1_1_floating_rate_coupon_1a0d35e4e06f2e1b31e23e461dfa3a4812" prot="public" virt="virtual"><scope>QuantLib::AverageBMACoupon</scope><name>adjustedFixing</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a02070ea7442d30625992c1711030d4b8" prot="protected" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>alwaysForward_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a17c9433135a259e4776baec66204a484" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>alwaysForwardNotifications</name></member>
      <member refid="class_quant_lib_1_1_floating_rate_coupon_1aa1ac510c7ebc2cc0f8ab5906ed911049" prot="public" virt="virtual"><scope>QuantLib::AverageBMACoupon</scope><name>amount</name></member>
      <member refid="class_quant_lib_1_1_average_b_m_a_coupon_1a84bab5e4b23483cbff8bb59e35c2cba3" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>AverageBMACoupon</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a5244c7f83592375a0ea9048296435fd1" prot="protected" virt="virtual"><scope>QuantLib::AverageBMACoupon</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a58b4986a80efa18634483a92c121e26e" prot="protected" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>calculated_</name></member>
      <member refid="class_quant_lib_1_1_average_b_m_a_coupon_1a9ee4c2882db5bfcb06b50f7432e2fdb0" prot="public" virt="virtual"><scope>QuantLib::AverageBMACoupon</scope><name>convexityAdjustment</name></member>
      <member refid="class_quant_lib_1_1_floating_rate_coupon_1a901ee61ae4fafeb13eb18cd773101a55" prot="protected" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>convexityAdjustmentImpl</name></member>
      <member refid="class_quant_lib_1_1_coupon_1a37d50b6041a918e6422a0e0e9974ab05" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>Coupon</name></member>
      <member refid="class_quant_lib_1_1_coupon_1a36b31db67e84b7858c23b134c3ed9a42" prot="public" virt="virtual"><scope>QuantLib::AverageBMACoupon</scope><name>date</name></member>
      <member refid="class_quant_lib_1_1_floating_rate_coupon_1aae98ff6468452fe4c07dde9978c6193c" prot="public" virt="virtual"><scope>QuantLib::AverageBMACoupon</scope><name>dayCounter</name></member>
      <member refid="class_quant_lib_1_1_floating_rate_coupon_1abc58484b5138a7e0fb0a581326b280c5" prot="protected" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>dayCounter_</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::AverageBMACoupon</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_coupon_1a6278162ff5d79ca19655c7fbc4b702ca" prot="public" virt="virtual"><scope>QuantLib::AverageBMACoupon</scope><name>exCouponDate</name></member>
      <member refid="class_quant_lib_1_1_coupon_1a9edde82b0183dc0b0138baa423c7097e" prot="protected" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>exCouponDate_</name></member>
      <member refid="class_quant_lib_1_1_average_b_m_a_coupon_1a018e9678eeedc12653a7b51b613c7232" prot="public" virt="virtual"><scope>QuantLib::AverageBMACoupon</scope><name>fixingDate</name></member>
      <member refid="class_quant_lib_1_1_average_b_m_a_coupon_1a96bf3c6cb9ff4748710ed01b31df5458" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>fixingDates</name></member>
      <member refid="class_quant_lib_1_1_floating_rate_coupon_1a5bd01399d26793b2d33d7fda1b7c2972" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>fixingDays</name></member>
      <member refid="class_quant_lib_1_1_floating_rate_coupon_1a1d9bd541defd7907824f6bb0a4e2a3fa" prot="protected" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>fixingDays_</name></member>
      <member refid="class_quant_lib_1_1_average_b_m_a_coupon_1a1ee454aed3a0bd8c79b3eb0a0172ad67" prot="private" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>fixingSchedule_</name></member>
      <member refid="class_quant_lib_1_1_floating_rate_coupon_1a68d974956def9749960dfc0ca6e3e955" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>FloatingRateCoupon</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1afac6ee19c3107c453e1347dd8000e023" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>forwardFirstNotificationOnly</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7157f41e83f2c5d924f5c5bafda04d1d" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>freeze</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7bb721fe00c6854e602758aba629ab77" prot="protected" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>frozen_</name></member>
      <member refid="class_quant_lib_1_1_floating_rate_coupon_1a1b7a794e6101afb7c3abac1e048c5bd9" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>gearing</name></member>
      <member refid="class_quant_lib_1_1_floating_rate_coupon_1ad29e00f3edfca9edd36e7ef2be6dbc54" prot="protected" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>gearing_</name></member>
      <member refid="class_quant_lib_1_1_cash_flow_1a42691c396f43dde0b5ed37f4a014b0e8" prot="public" virt="virtual"><scope>QuantLib::AverageBMACoupon</scope><name>hasOccurred</name></member>
      <member refid="class_quant_lib_1_1_floating_rate_coupon_1a633b38b802194cab11151d273375b28c" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>index</name></member>
      <member refid="class_quant_lib_1_1_floating_rate_coupon_1a942cee113b974f9da9abc991a0da31be" prot="protected" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>index_</name></member>
      <member refid="class_quant_lib_1_1_average_b_m_a_coupon_1aff9e83b663b3e1633a466509eb28aead" prot="public" virt="virtual"><scope>QuantLib::AverageBMACoupon</scope><name>indexFixing</name></member>
      <member refid="class_quant_lib_1_1_average_b_m_a_coupon_1aaf9c3dd420094648a3a34f5d67b18fb7" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>indexFixings</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a0a7c5d42815a4e16ee2158e24dbfc748" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>isCalculated</name></member>
      <member refid="class_quant_lib_1_1_floating_rate_coupon_1a10851788351436765f2df0f633af99b3" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>isInArrears</name></member>
      <member refid="class_quant_lib_1_1_floating_rate_coupon_1a057c805d4d36c4fe75797591cf6b3045" prot="protected" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>isInArrears_</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a26f18f4ff7faaaebd8eae50e064b493e" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>LazyObject</name></member>
      <member refid="class_quant_lib_1_1_coupon_1a579b9d1341796c612126053722928bb3" prot="public" virt="virtual"><scope>QuantLib::AverageBMACoupon</scope><name>nominal</name></member>
      <member refid="class_quant_lib_1_1_coupon_1aed38f11424938b0a46bb5a0b3db94a75" prot="protected" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>nominal_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Event::"><scope>QuantLib::AverageBMACoupon</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Event::"><scope>QuantLib::AverageBMACoupon</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::AverageBMACoupon</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::AverageBMACoupon</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Event::"><scope>QuantLib::AverageBMACoupon</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::QuantLib::Observer::"><scope>QuantLib::AverageBMACoupon</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_coupon_1a27eb1806820783a5a1f8dbefa18f4c56" prot="protected" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>paymentDate_</name></member>
      <member refid="class_quant_lib_1_1_floating_rate_coupon_1a3f7ee3568dc84eb3d5a4f167a7db5d76" prot="public" virt="virtual"><scope>QuantLib::AverageBMACoupon</scope><name>performCalculations</name></member>
      <member refid="class_quant_lib_1_1_floating_rate_coupon_1a1ba5d10f22216d82b1a5c18cb65e5ec9" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>price</name></member>
      <member refid="class_quant_lib_1_1_floating_rate_coupon_1a280eafca61551df8ffa11d5f45ad739a" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>pricer</name></member>
      <member refid="class_quant_lib_1_1_floating_rate_coupon_1a125f2eeb1dda4cff807e7a2f6dbd029e" prot="protected" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>pricer_</name></member>
      <member refid="class_quant_lib_1_1_floating_rate_coupon_1a5ae0817af91111a7748e787463f25297" prot="public" virt="virtual"><scope>QuantLib::AverageBMACoupon</scope><name>rate</name></member>
      <member refid="class_quant_lib_1_1_floating_rate_coupon_1af5c62402342cd9496a2b1a0a064a1ab2" prot="protected" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>rate_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a70c9b24e50132408d8d9ce4f6674662a" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>recalculate</name></member>
      <member refid="class_quant_lib_1_1_coupon_1ad261da91ac390a467e20f48a01d29465" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>referencePeriodEnd</name></member>
      <member refid="class_quant_lib_1_1_coupon_1aa3c229434f73d8ab9e26eb70a609c0f5" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>referencePeriodStart</name></member>
      <member refid="class_quant_lib_1_1_coupon_1ae4af1ed468e66e946eda0b9026fa9e76" prot="protected" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>refPeriodEnd_</name></member>
      <member refid="class_quant_lib_1_1_coupon_1a208f7f13571a5b93f2436ceb7e0b669f" prot="protected" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>refPeriodStart_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_floating_rate_coupon_1a66bf11fb3aa4871c5149178b601438cc" prot="public" virt="virtual"><scope>QuantLib::AverageBMACoupon</scope><name>setPricer</name></member>
      <member refid="class_quant_lib_1_1_floating_rate_coupon_1a9e3b8c6e6822bb248556c3b041eab229" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>spread</name></member>
      <member refid="class_quant_lib_1_1_floating_rate_coupon_1a9b8345127fb7ccdb8d54ba41f7a877a5" prot="protected" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>spread_</name></member>
      <member refid="class_quant_lib_1_1_cash_flow_1a103a14e1657bd2d7cb6574bf6dcf96d0" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>tradingExCoupon</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a2e0e4786666453024b9d4e0761f2770b" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>unfreeze</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1adee2bf49be5c4c78736be293321a856d" prot="public" virt="virtual"><scope>QuantLib::AverageBMACoupon</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_cash_flow_1a4ac3d8fa6eeb8c307345ada96b25cecf" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>~CashFlow</name></member>
      <member refid="class_quant_lib_1_1_event_1a26cef5942731bfb52ed77e74abdcfe9f" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>~Event</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a9d719c43bb627177a90d7d12324a2d6e" prot="public" virt="non-virtual"><scope>QuantLib::AverageBMACoupon</scope><name>~LazyObject</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::AverageBMACoupon</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::AverageBMACoupon</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
