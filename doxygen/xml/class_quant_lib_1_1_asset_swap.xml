<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_asset_swap" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::AssetSwap</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_swap" prot="public" virt="non-virtual">QuantLib::Swap</basecompoundref>
    <includes refid="assetswap_8hpp" local="no">assetswap.hpp</includes>
    <innerclass refid="class_quant_lib_1_1_asset_swap_1_1arguments" prot="public">QuantLib::AssetSwap::arguments</innerclass>
    <innerclass refid="class_quant_lib_1_1_asset_swap_1_1results" prot="public">QuantLib::AssetSwap::results</innerclass>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_asset_swap_1a98785e5937645f9d104e2506b7035e5c" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;Bond&gt; QuantLib::AssetSwap::bond_</definition>
        <argsstring></argsstring>
        <name>bond_</name>
        <qualifiedname>QuantLib::AssetSwap::bond_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="109" column="25" bodyfile="ql/instruments/assetswap.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_asset_swap_1a5ce4d11970e43d52a87c2a47bb8c5a41" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AssetSwap::bondCleanPrice_</definition>
        <argsstring></argsstring>
        <name>bondCleanPrice_</name>
        <qualifiedname>QuantLib::AssetSwap::bondCleanPrice_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="110" column="14" bodyfile="ql/instruments/assetswap.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_asset_swap_1a99245ce21b01914ccd5117514c75b45e" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AssetSwap::nonParRepayment_</definition>
        <argsstring></argsstring>
        <name>nonParRepayment_</name>
        <qualifiedname>QuantLib::AssetSwap::nonParRepayment_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="110" column="30" bodyfile="ql/instruments/assetswap.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_asset_swap_1a641931861ac17a23bab15a1b5623187a" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref></type>
        <definition>Spread QuantLib::AssetSwap::spread_</definition>
        <argsstring></argsstring>
        <name>spread_</name>
        <qualifiedname>QuantLib::AssetSwap::spread_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="111" column="16" bodyfile="ql/instruments/assetswap.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_asset_swap_1ad34b289273dd9944de05ae3c17a6ad83" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::AssetSwap::parSwap_</definition>
        <argsstring></argsstring>
        <name>parSwap_</name>
        <qualifiedname>QuantLib::AssetSwap::parSwap_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="112" column="14" bodyfile="ql/instruments/assetswap.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_asset_swap_1a424be841f7244c015d192392487612f6" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::AssetSwap::upfrontDate_</definition>
        <argsstring></argsstring>
        <name>upfrontDate_</name>
        <qualifiedname>QuantLib::AssetSwap::upfrontDate_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="113" column="14" bodyfile="ql/instruments/assetswap.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_asset_swap_1ad94d0ed8c1c3a28de84e70d8846c032b" prot="private" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref></type>
        <definition>Spread QuantLib::AssetSwap::fairSpread_</definition>
        <argsstring></argsstring>
        <name>fairSpread_</name>
        <qualifiedname>QuantLib::AssetSwap::fairSpread_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="115" column="24" bodyfile="ql/instruments/assetswap.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_asset_swap_1ae50c49eb0e388fdd2cf17eeb1aafc1b1" prot="private" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AssetSwap::fairCleanPrice_</definition>
        <argsstring></argsstring>
        <name>fairCleanPrice_</name>
        <qualifiedname>QuantLib::AssetSwap::fairCleanPrice_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="116" column="22" bodyfile="ql/instruments/assetswap.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_asset_swap_1a6884ef5dc719ddeb42cdfd10d78c01e0" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AssetSwap::fairNonParRepayment_</definition>
        <argsstring></argsstring>
        <name>fairNonParRepayment_</name>
        <qualifiedname>QuantLib::AssetSwap::fairNonParRepayment_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="116" column="38" bodyfile="ql/instruments/assetswap.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_asset_swap_1a586ac6d51eee958cb28f31090174622c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::AssetSwap::AssetSwap</definition>
        <argsstring>(bool payBondCoupon, ext::shared_ptr&lt; Bond &gt; bond, Real bondCleanPrice, const ext::shared_ptr&lt; IborIndex &gt; &amp;iborIndex, Spread spread, Schedule floatSchedule=Schedule(), const DayCounter &amp;floatingDayCount=DayCounter(), bool parAssetSwap=true, Real gearing=1.0, Real nonParRepayment=Null&lt; Real &gt;(), Date dealMaturity=Date())</argsstring>
        <name>AssetSwap</name>
        <qualifiedname>QuantLib::AssetSwap::AssetSwap</qualifiedname>
        <param>
          <type>bool</type>
          <declname>payBondCoupon</declname>
        </param>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &gt;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>bondCleanPrice</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_ibor_index" kindref="compound">IborIndex</ref> &gt; &amp;</type>
          <declname>iborIndex</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref></type>
          <declname>spread</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_schedule" kindref="compound">Schedule</ref></type>
          <declname>floatSchedule</declname>
          <defval><ref refid="class_quant_lib_1_1_schedule" kindref="compound">Schedule</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>floatingDayCount</declname>
          <defval><ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>parAssetSwap</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>gearing</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nonParRepayment</declname>
          <defval><ref refid="class_quant_lib_1_1_null" kindref="compound">Null</ref>&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>dealMaturity</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the passed iborIndex is an overnight rate such as SOFR, ESTR or SONIA, the floatSchedule argument is required and will be used to build overnight-indexed coupons. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="61" column="9" bodyfile="ql/instruments/assetswap.cpp" bodystart="50" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_asset_swap_1a7afa7ae3116d95a74009688992501115" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::AssetSwap::AssetSwap</definition>
        <argsstring>(bool parAssetSwap, ext::shared_ptr&lt; Bond &gt; bond, Real bondCleanPrice, Real nonParRepayment, Real gearing, const ext::shared_ptr&lt; IborIndex &gt; &amp;iborIndex, Spread spread=0.0, const DayCounter &amp;floatingDayCount=DayCounter(), Date dealMaturity=Date(), bool payBondCoupon=false)</argsstring>
        <name>AssetSwap</name>
        <qualifiedname>QuantLib::AssetSwap::AssetSwap</qualifiedname>
        <param>
          <type>bool</type>
          <declname>parAssetSwap</declname>
        </param>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &gt;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>bondCleanPrice</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nonParRepayment</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>gearing</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_ibor_index" kindref="compound">IborIndex</ref> &gt; &amp;</type>
          <declname>iborIndex</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref></type>
          <declname>spread</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>floatingDayCount</declname>
          <defval><ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>dealMaturity</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>payBondCoupon</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000101"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use the other overload. Deprecated in version 1.37. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="77" column="9" bodyfile="ql/instruments/assetswap.cpp" bodystart="36" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_asset_swap_1ace0594777f05424296f5bd4c0b1361ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref></type>
        <definition>Spread QuantLib::AssetSwap::fairSpread</definition>
        <argsstring>() const</argsstring>
        <name>fairSpread</name>
        <qualifiedname>QuantLib::AssetSwap::fairSpread</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="89" column="16" bodyfile="ql/instruments/assetswap.cpp" bodystart="250" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_asset_swap_1ad335f6490400d9f2c2bda2fad5696771" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AssetSwap::floatingLegBPS</definition>
        <argsstring>() const</argsstring>
        <name>floatingLegBPS</name>
        <qualifiedname>QuantLib::AssetSwap::floatingLegBPS</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="90" column="14" bodyfile="ql/instruments/assetswap.cpp" bodystart="263" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_asset_swap_1a32daad643db9e3c82c7399f602d17aa2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AssetSwap::floatingLegNPV</definition>
        <argsstring>() const</argsstring>
        <name>floatingLegNPV</name>
        <qualifiedname>QuantLib::AssetSwap::floatingLegNPV</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="91" column="14" bodyfile="ql/instruments/assetswap.cpp" bodystart="270" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_asset_swap_1afcd5bfbeb424fd87d12d0899259def58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AssetSwap::fairCleanPrice</definition>
        <argsstring>() const</argsstring>
        <name>fairCleanPrice</name>
        <qualifiedname>QuantLib::AssetSwap::fairCleanPrice</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="92" column="14" bodyfile="ql/instruments/assetswap.cpp" bodystart="277" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_asset_swap_1aa627e94564b38df7fd89c0d6c24657bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AssetSwap::fairNonParRepayment</definition>
        <argsstring>() const</argsstring>
        <name>fairNonParRepayment</name>
        <qualifiedname>QuantLib::AssetSwap::fairNonParRepayment</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="93" column="14" bodyfile="ql/instruments/assetswap.cpp" bodystart="299" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_asset_swap_1acbbeffcdf7c4b17cf3dd4edcae5a3329" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::AssetSwap::parSwap</definition>
        <argsstring>() const</argsstring>
        <name>parSwap</name>
        <qualifiedname>QuantLib::AssetSwap::parSwap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="95" column="14" bodyfile="ql/instruments/assetswap.hpp" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_asset_swap_1a953f3762f6bdefb6b5f9e4edbd1e90da" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref></type>
        <definition>Spread QuantLib::AssetSwap::spread</definition>
        <argsstring>() const</argsstring>
        <name>spread</name>
        <qualifiedname>QuantLib::AssetSwap::spread</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="96" column="16" bodyfile="ql/instruments/assetswap.hpp" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_asset_swap_1a6ec130c216fa9569bce3f17a185f9b4d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AssetSwap::cleanPrice</definition>
        <argsstring>() const</argsstring>
        <name>cleanPrice</name>
        <qualifiedname>QuantLib::AssetSwap::cleanPrice</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="97" column="14" bodyfile="ql/instruments/assetswap.hpp" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_asset_swap_1acd916b36f836a220b7cd14d76a2667a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AssetSwap::nonParRepayment</definition>
        <argsstring>() const</argsstring>
        <name>nonParRepayment</name>
        <qualifiedname>QuantLib::AssetSwap::nonParRepayment</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="98" column="14" bodyfile="ql/instruments/assetswap.hpp" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_asset_swap_1a7931194d9875727f89d11f969efc23e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &gt; &amp;</type>
        <definition>const ext::shared_ptr&lt; Bond &gt; &amp; QuantLib::AssetSwap::bond</definition>
        <argsstring>() const</argsstring>
        <name>bond</name>
        <qualifiedname>QuantLib::AssetSwap::bond</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="99" column="31" bodyfile="ql/instruments/assetswap.hpp" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_asset_swap_1a3c2cc5013102503d718fd05e38eaf157" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::AssetSwap::payBondCoupon</definition>
        <argsstring>() const</argsstring>
        <name>payBondCoupon</name>
        <qualifiedname>QuantLib::AssetSwap::payBondCoupon</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="100" column="14" bodyfile="ql/instruments/assetswap.hpp" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_asset_swap_1a6b6bc119031bdc02fb8d0803011f5f12" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
        <definition>const Leg &amp; QuantLib::AssetSwap::bondLeg</definition>
        <argsstring>() const</argsstring>
        <name>bondLeg</name>
        <qualifiedname>QuantLib::AssetSwap::bondLeg</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="101" column="19" bodyfile="ql/instruments/assetswap.hpp" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_asset_swap_1a94243cd517c30f3255955c5d1d70e104" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
        <definition>const Leg &amp; QuantLib::AssetSwap::floatingLeg</definition>
        <argsstring>() const</argsstring>
        <name>floatingLeg</name>
        <qualifiedname>QuantLib::AssetSwap::floatingLeg</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="102" column="19" bodyfile="ql/instruments/assetswap.hpp" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_asset_swap_1a593c4e20b1280e28e36fda262c0a73ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::AssetSwap::setupArguments</definition>
        <argsstring>(PricingEngine::arguments *args) const override</argsstring>
        <name>setupArguments</name>
        <qualifiedname>QuantLib::AssetSwap::setupArguments</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_instrument_1af7344eebc48a1a361386e5c5a90a8fcc">setupArguments</reimplements>
        <param>
          <type><ref refid="class_quant_lib_1_1_pricing_engine_1_1arguments" kindref="compound">PricingEngine::arguments</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When a derived argument structure is defined for an instrument, this method should be overridden to fill it. This is mandatory in case a pricing engine is used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="104" column="14" bodyfile="ql/instruments/assetswap.cpp" bodystart="204" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_asset_swap_1ae4218050ff155797307b72f69876d3b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::AssetSwap::fetchResults</definition>
        <argsstring>(const PricingEngine::results *) const override</argsstring>
        <name>fetchResults</name>
        <qualifiedname>QuantLib::AssetSwap::fetchResults</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_instrument_1aebe809131db2941325d037c031bbf41b">fetchResults</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_pricing_engine_1_1results" kindref="compound">PricingEngine::results</ref> *</type>
          <defname>r</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When a derived result structure is defined for an instrument, this method should be overridden to read from it. This is mandatory in case a pricing engine is used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="105" column="14" bodyfile="ql/instruments/assetswap.cpp" bodystart="320" bodyend="332"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_asset_swap_1a17aa77ec2193f0ee77d9e2bcdb2e8640" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::AssetSwap::setupExpired</definition>
        <argsstring>() const override</argsstring>
        <name>setupExpired</name>
        <qualifiedname>QuantLib::AssetSwap::setupExpired</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_instrument_1a73d90597fcd3ff52a8aed674393ab574">setupExpired</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must leave the instrument in a consistent state when the expiration condition is met. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/assetswap.hpp" line="108" column="14" bodyfile="ql/instruments/assetswap.cpp" bodystart="313" bodyend="318"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Bullet bond vs Libor swap. </para>
    </briefdescription>
    <detaileddescription>
<para>for mechanics of par asset swap and market asset swap, refer to &quot;Introduction to Asset Swap&quot;, Lehman Brothers European Fixed Income Research - January 2000, D. O&apos;Kane</para>
<para><simplesect kind="warning"><para>bondCleanPrice must be the (forward) price at the floatSchedule start date</para>
</simplesect>
<xrefsect id="bug_1_bug000003"><xreftitle>Bug</xreftitle><xrefdescription><para>fair prices are not calculated correctly when using indexed coupons. </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::AssetSwap</label>
        <link refid="class_quant_lib_1_1_asset_swap"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Instrument</label>
        <link refid="class_quant_lib_1_1_instrument"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="6">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::Swap</label>
        <link refid="class_quant_lib_1_1_swap"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::AssetSwap</label>
        <link refid="class_quant_lib_1_1_asset_swap"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::Date</label>
        <link refid="class_quant_lib_1_1_date"/>
      </node>
      <node id="3">
        <label>QuantLib::Instrument</label>
        <link refid="class_quant_lib_1_1_instrument"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>valuationDate_</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="6">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::Swap</label>
        <link refid="class_quant_lib_1_1_swap"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/instruments/assetswap.hpp" line="51" column="5" bodyfile="ql/instruments/assetswap.hpp" bodystart="51" bodyend="117"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_instrument_1a468edb294da268b097c91bf821084c07" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>additionalResults</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a57d2b34e8625ab3d9ffa50c0c7931099" prot="protected" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>additionalResults_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a02070ea7442d30625992c1711030d4b8" prot="protected" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>alwaysForward_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a17c9433135a259e4776baec66204a484" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>alwaysForwardNotifications</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1a586ac6d51eee958cb28f31090174622c" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>AssetSwap</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1a7afa7ae3116d95a74009688992501115" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>AssetSwap</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1a7931194d9875727f89d11f969efc23e0" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>bond</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1a98785e5937645f9d104e2506b7035e5c" prot="private" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>bond_</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1a5ce4d11970e43d52a87c2a47bb8c5a41" prot="private" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>bondCleanPrice_</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1a6b6bc119031bdc02fb8d0803011f5f12" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>bondLeg</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a4c573c48f7eaead5042864ac0eb5b025" prot="protected" virt="virtual"><scope>QuantLib::AssetSwap</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a58b4986a80efa18634483a92c121e26e" prot="protected" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>calculated_</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1a6ec130c216fa9569bce3f17a185f9b4d" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>cleanPrice</name></member>
      <member refid="class_quant_lib_1_1_swap_1a6e033a19eb0f2770eefb8b06912b3abe" prot="public" virt="virtual"><scope>QuantLib::AssetSwap</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_swap_1a1c5ee95948349edd10e6f7ad842b2c4a" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>endDiscounts</name></member>
      <member refid="class_quant_lib_1_1_swap_1ac3b82c6fb8b5951424767b5e95e9a0b3" prot="protected" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>endDiscounts_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1ac548cb61c864779db09bd0fac6ae7c81" prot="protected" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>engine_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a03502fb6c606b262c25acd94ff4c1e52" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>errorEstimate</name></member>
      <member refid="class_quant_lib_1_1_instrument_1abb8f4cfa7346fab7a2f3a8c8b4da30f3" prot="protected" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>errorEstimate_</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1afcd5bfbeb424fd87d12d0899259def58" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>fairCleanPrice</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1ae50c49eb0e388fdd2cf17eeb1aafc1b1" prot="private" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>fairCleanPrice_</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1aa627e94564b38df7fd89c0d6c24657bc" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>fairNonParRepayment</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1a6884ef5dc719ddeb42cdfd10d78c01e0" prot="private" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>fairNonParRepayment_</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1ace0594777f05424296f5bd4c0b1361ae" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>fairSpread</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1ad94d0ed8c1c3a28de84e70d8846c032b" prot="private" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>fairSpread_</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1ae4218050ff155797307b72f69876d3b4" prot="public" virt="virtual"><scope>QuantLib::AssetSwap</scope><name>fetchResults</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1a94243cd517c30f3255955c5d1d70e104" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>floatingLeg</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1ad335f6490400d9f2c2bda2fad5696771" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>floatingLegBPS</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1a32daad643db9e3c82c7399f602d17aa2" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>floatingLegNPV</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1afac6ee19c3107c453e1347dd8000e023" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>forwardFirstNotificationOnly</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7157f41e83f2c5d924f5c5bafda04d1d" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>freeze</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7bb721fe00c6854e602758aba629ab77" prot="protected" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>frozen_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a5e4c746cbf7999c83dc57f87e241f1cc" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>Instrument</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a0a7c5d42815a4e16ee2158e24dbfc748" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>isCalculated</name></member>
      <member refid="class_quant_lib_1_1_swap_1aa8b6f838ad681344ecd604db48ea0b8e" prot="public" virt="virtual"><scope>QuantLib::AssetSwap</scope><name>isExpired</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a26f18f4ff7faaaebd8eae50e064b493e" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>LazyObject</name></member>
      <member refid="class_quant_lib_1_1_swap_1a6d4f202e19e6d9505ebc111f197244ae" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>leg</name></member>
      <member refid="class_quant_lib_1_1_swap_1a79494447be4eebf5caf0f0940a9b204f" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>legBPS</name></member>
      <member refid="class_quant_lib_1_1_swap_1af40f759b518542c642d71cbc262cab84" prot="protected" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>legBPS_</name></member>
      <member refid="class_quant_lib_1_1_swap_1af1ef52511fbca1b23ffddf978f678d98" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>legNPV</name></member>
      <member refid="class_quant_lib_1_1_swap_1ac85f31b7bf3b97e6c03848c64bef33af" prot="protected" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>legNPV_</name></member>
      <member refid="class_quant_lib_1_1_swap_1a153af8a79c61fda7e68e65fee4817e35" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>legs</name></member>
      <member refid="class_quant_lib_1_1_swap_1a1ca08a7d6e5957950d40383eb4cf0b63" prot="protected" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>legs_</name></member>
      <member refid="class_quant_lib_1_1_swap_1a0a9d27adbab145e513399a18852e4d4f" prot="public" virt="virtual"><scope>QuantLib::AssetSwap</scope><name>maturityDate</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1acd916b36f836a220b7cd14d76a2667a6" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>nonParRepayment</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1a99245ce21b01914ccd5117514c75b45e" prot="private" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>nonParRepayment_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a5afdd9698267cd30ddd10cf01f3487b0" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>NPV</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a997663780100d30ae59b14ac0285322d" prot="protected" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>NPV_</name></member>
      <member refid="class_quant_lib_1_1_swap_1ab698ee91db4089a0fef963f6857c1c28" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>npvDateDiscount</name></member>
      <member refid="class_quant_lib_1_1_swap_1a390b5eebe9b8a8915d393465a93809ad" prot="protected" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>npvDateDiscount_</name></member>
      <member refid="class_quant_lib_1_1_swap_1aed6ec56ad5e15f7de107e98fb1526b66" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>numberOfLegs</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::AssetSwap</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::AssetSwap</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::AssetSwap</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::AssetSwap</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::AssetSwap</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::QuantLib::Observer::"><scope>QuantLib::AssetSwap</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1acbbeffcdf7c4b17cf3dd4edcae5a3329" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>parSwap</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1ad34b289273dd9944de05ae3c17a6ad83" prot="private" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>parSwap_</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1a3c2cc5013102503d718fd05e38eaf157" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>payBondCoupon</name></member>
      <member refid="class_quant_lib_1_1_swap_1ad0806daa5b111fcb11ce521b19124b4ea31009108a6e84c98136e1053dbb41824" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>Payer</name></member>
      <member refid="class_quant_lib_1_1_swap_1a2530b88cf2c011a623c667838b8a9aa2" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>payer</name></member>
      <member refid="class_quant_lib_1_1_swap_1a82468c93e5a364d73e164df46bd50445" prot="protected" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>payer_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1aad23f546bbca156a49a95ca2bee124c4" prot="protected" virt="virtual"><scope>QuantLib::AssetSwap</scope><name>performCalculations</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a70c9b24e50132408d8d9ce4f6674662a" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>recalculate</name></member>
      <member refid="class_quant_lib_1_1_swap_1ad0806daa5b111fcb11ce521b19124b4ea04e66442c860dac71042b03c64af4831" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>Receiver</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a266c15a12160a89f4f9707db85f9fa27" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>result</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a3444386491f179f64f4f0aac24997071" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>setPricingEngine</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1a593c4e20b1280e28e36fda262c0a73ab" prot="public" virt="virtual"><scope>QuantLib::AssetSwap</scope><name>setupArguments</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1a17aa77ec2193f0ee77d9e2bcdb2e8640" prot="private" virt="virtual"><scope>QuantLib::AssetSwap</scope><name>setupExpired</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1a953f3762f6bdefb6b5f9e4edbd1e90da" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>spread</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1a641931861ac17a23bab15a1b5623187a" prot="private" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>spread_</name></member>
      <member refid="class_quant_lib_1_1_swap_1ae4df409ff659d19c6c76347d0d92c47b" prot="public" virt="virtual"><scope>QuantLib::AssetSwap</scope><name>startDate</name></member>
      <member refid="class_quant_lib_1_1_swap_1a9a138527c286814c9dba09b3242bbda2" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>startDiscounts</name></member>
      <member refid="class_quant_lib_1_1_swap_1aa235d3e00058faa863f579d9665301e4" prot="protected" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>startDiscounts_</name></member>
      <member refid="class_quant_lib_1_1_swap_1a88c4221d6c0156759c5e84c3188459c8" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>Swap</name></member>
      <member refid="class_quant_lib_1_1_swap_1a546a1d0746c86ad1fed70a0904b18024" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>Swap</name></member>
      <member refid="class_quant_lib_1_1_swap_1a953a237540a310c121aebbf8b4f7621e" prot="protected" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>Swap</name></member>
      <member refid="class_quant_lib_1_1_swap_1ad0806daa5b111fcb11ce521b19124b4e" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>Type</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a2e0e4786666453024b9d4e0761f2770b" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>unfreeze</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1adee2bf49be5c4c78736be293321a856d" prot="public" virt="virtual"><scope>QuantLib::AssetSwap</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_asset_swap_1a424be841f7244c015d192392487612f6" prot="private" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>upfrontDate_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a53a0fc1adc70b73387ad53009725835d" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>valuationDate</name></member>
      <member refid="class_quant_lib_1_1_instrument_1aa60b558fc82f022e13535360ac4a6fed" prot="protected" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>valuationDate_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a9d719c43bb627177a90d7d12324a2d6e" prot="public" virt="non-virtual"><scope>QuantLib::AssetSwap</scope><name>~LazyObject</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::AssetSwap</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::AssetSwap</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
