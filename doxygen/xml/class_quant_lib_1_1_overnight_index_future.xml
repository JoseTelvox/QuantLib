<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_overnight_index_future" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::OvernightIndexFuture</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_instrument" prot="public" virt="non-virtual">QuantLib::Instrument</basecompoundref>
    <includes refid="overnightindexfuture_8hpp" local="no">overnightindexfuture.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_overnight_index_future_1aa823600f87e5ec38f599e6ab053e7719" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_overnight_index" kindref="compound">OvernightIndex</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;OvernightIndex&gt; QuantLib::OvernightIndexFuture::overnightIndex_</definition>
        <argsstring></argsstring>
        <name>overnightIndex_</name>
        <qualifiedname>QuantLib::OvernightIndexFuture::overnightIndex_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/overnightindexfuture.hpp" line="58" column="25" bodyfile="ql/instruments/overnightindexfuture.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_overnight_index_future_1a70b1e0a39b4cbb98773a44a3d9326efd" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::OvernightIndexFuture::valueDate_</definition>
        <argsstring></argsstring>
        <name>valueDate_</name>
        <qualifiedname>QuantLib::OvernightIndexFuture::valueDate_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/overnightindexfuture.hpp" line="59" column="14" bodyfile="ql/instruments/overnightindexfuture.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_overnight_index_future_1a911921e59ac4f6183227c80c775010f9" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::OvernightIndexFuture::maturityDate_</definition>
        <argsstring></argsstring>
        <name>maturityDate_</name>
        <qualifiedname>QuantLib::OvernightIndexFuture::maturityDate_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/overnightindexfuture.hpp" line="59" column="25" bodyfile="ql/instruments/overnightindexfuture.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_overnight_index_future_1aae5c3717b08ea18192bd9665c69b8bb6" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
        <definition>Handle&lt;Quote&gt; QuantLib::OvernightIndexFuture::convexityAdjustment_</definition>
        <argsstring></argsstring>
        <name>convexityAdjustment_</name>
        <qualifiedname>QuantLib::OvernightIndexFuture::convexityAdjustment_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/overnightindexfuture.hpp" line="60" column="16" bodyfile="ql/instruments/overnightindexfuture.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_overnight_index_future_1af475061facb9d4d3c7aaadcaf045ad10" prot="private" static="no" mutable="no">
        <type><ref refid="struct_quant_lib_1_1_rate_averaging_1a62ddddd541804c42dae5d108a1ae5437" kindref="member">RateAveraging::Type</ref></type>
        <definition>RateAveraging::Type QuantLib::OvernightIndexFuture::averagingMethod_</definition>
        <argsstring></argsstring>
        <name>averagingMethod_</name>
        <qualifiedname>QuantLib::OvernightIndexFuture::averagingMethod_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/overnightindexfuture.hpp" line="61" column="29" bodyfile="ql/instruments/overnightindexfuture.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_overnight_index_future_1aa42537d7388bc599cfae36df4f602fad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::OvernightIndexFuture::OvernightIndexFuture</definition>
        <argsstring>(ext::shared_ptr&lt; OvernightIndex &gt; overnightIndex, const Date &amp;valueDate, const Date &amp;maturityDate, Handle&lt; Quote &gt; convexityAdjustment=Handle&lt; Quote &gt;(), RateAveraging::Type averagingMethod=RateAveraging::Compound)</argsstring>
        <name>OvernightIndexFuture</name>
        <qualifiedname>QuantLib::OvernightIndexFuture::OvernightIndexFuture</qualifiedname>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_overnight_index" kindref="compound">OvernightIndex</ref> &gt;</type>
          <declname>overnightIndex</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>valueDate</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>maturityDate</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
          <declname>convexityAdjustment</declname>
          <defval><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;()</defval>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_rate_averaging_1a62ddddd541804c42dae5d108a1ae5437" kindref="member">RateAveraging::Type</ref></type>
          <declname>averagingMethod</declname>
          <defval><ref refid="struct_quant_lib_1_1_rate_averaging_1a62ddddd541804c42dae5d108a1ae5437a39cddbbaf5bb1ed36127f08a87d4871f" kindref="member">RateAveraging::Compound</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/overnightindexfuture.hpp" line="41" column="9" bodyfile="ql/instruments/overnightindexfuture.cpp" bodystart="28" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_overnight_index_future_1aa8329603cc5def535adefadedc012f48" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::OvernightIndexFuture::convexityAdjustment</definition>
        <argsstring>() const</argsstring>
        <name>convexityAdjustment</name>
        <qualifiedname>QuantLib::OvernightIndexFuture::convexityAdjustment</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/overnightindexfuture.hpp" line="48" column="14" bodyfile="ql/instruments/overnightindexfuture.cpp" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_overnight_index_future_1a57f490c071b1d0b41206c3e5db0d9d6e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool QuantLib::OvernightIndexFuture::isExpired</definition>
        <argsstring>() const override</argsstring>
        <name>isExpired</name>
        <qualifiedname>QuantLib::OvernightIndexFuture::isExpired</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_instrument_1a121a2a929b179900744a58272d46aefe">isExpired</reimplements>
        <briefdescription>
<para>returns whether the instrument might have value greater than zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/overnightindexfuture.hpp" line="49" column="14" bodyfile="ql/instruments/overnightindexfuture.cpp" bodystart="136" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_overnight_index_future_1a4742a8d5e725c2f13603fc418d503ff3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_overnight_index" kindref="compound">OvernightIndex</ref> &gt; &amp;</type>
        <definition>const ext::shared_ptr&lt; OvernightIndex &gt; &amp; QuantLib::OvernightIndexFuture::overnightIndex</definition>
        <argsstring>() const</argsstring>
        <name>overnightIndex</name>
        <qualifiedname>QuantLib::OvernightIndexFuture::overnightIndex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/overnightindexfuture.hpp" line="50" column="31" bodyfile="ql/instruments/overnightindexfuture.hpp" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_overnight_index_future_1aba6c36710a12d1cda83f8869e1099e13" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::OvernightIndexFuture::valueDate</definition>
        <argsstring>() const</argsstring>
        <name>valueDate</name>
        <qualifiedname>QuantLib::OvernightIndexFuture::valueDate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/overnightindexfuture.hpp" line="51" column="14" bodyfile="ql/instruments/overnightindexfuture.hpp" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_overnight_index_future_1a4c77759773f46dc3823fcee8717ba232" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::OvernightIndexFuture::maturityDate</definition>
        <argsstring>() const</argsstring>
        <name>maturityDate</name>
        <qualifiedname>QuantLib::OvernightIndexFuture::maturityDate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/overnightindexfuture.hpp" line="52" column="14" bodyfile="ql/instruments/overnightindexfuture.hpp" bodystart="52" bodyend="52"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_overnight_index_future_1a8fa5cf47e49657f87c070d5c13b525a7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::OvernightIndexFuture::performCalculations</definition>
        <argsstring>() const override</argsstring>
        <name>performCalculations</name>
        <qualifiedname>QuantLib::OvernightIndexFuture::performCalculations</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_instrument_1aad23f546bbca156a49a95ca2bee124c4">performCalculations</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>In case a pricing engine is <bold>not</bold> used, this method must be overridden to perform the actual calculations and set any needed results. In case a pricing engine is used, the default implementation can be used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/overnightindexfuture.hpp" line="54" column="14" bodyfile="ql/instruments/overnightindexfuture.cpp" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_overnight_index_future_1a392ae73778ff565091abb8e9562667b7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::OvernightIndexFuture::rate</definition>
        <argsstring>() const</argsstring>
        <name>rate</name>
        <qualifiedname>QuantLib::OvernightIndexFuture::rate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/overnightindexfuture.hpp" line="55" column="14" bodyfile="ql/instruments/overnightindexfuture.cpp" bodystart="123" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_overnight_index_future_1a0afa5a2145e7aec193520273410b7ab8" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::OvernightIndexFuture::averagedRate</definition>
        <argsstring>() const</argsstring>
        <name>averagedRate</name>
        <qualifiedname>QuantLib::OvernightIndexFuture::averagedRate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/overnightindexfuture.hpp" line="56" column="14" bodyfile="ql/instruments/overnightindexfuture.cpp" bodystart="42" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_overnight_index_future_1ad2022ca351f87160eec238acd877ac4c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::OvernightIndexFuture::compoundedRate</definition>
        <argsstring>() const</argsstring>
        <name>compoundedRate</name>
        <qualifiedname>QuantLib::OvernightIndexFuture::compoundedRate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/overnightindexfuture.hpp" line="57" column="14" bodyfile="ql/instruments/overnightindexfuture.cpp" bodystart="75" bodyend="121"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Future on a compounded overnight index investment.</para>
<para>Compatible with SOFR futures and <ref refid="class_quant_lib_1_1_sonia" kindref="compound">Sonia</ref> futures available on CME and ICE exchanges. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QuantLib::Instrument</label>
        <link refid="class_quant_lib_1_1_instrument"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="1">
        <label>QuantLib::OvernightIndexFuture</label>
        <link refid="class_quant_lib_1_1_overnight_index_future"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>QuantLib::Date</label>
        <link refid="class_quant_lib_1_1_date"/>
      </node>
      <node id="2">
        <label>QuantLib::Instrument</label>
        <link refid="class_quant_lib_1_1_instrument"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>valuationDate_</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="1">
        <label>QuantLib::OvernightIndexFuture</label>
        <link refid="class_quant_lib_1_1_overnight_index_future"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/instruments/overnightindexfuture.hpp" line="39" column="5" bodyfile="ql/instruments/overnightindexfuture.hpp" bodystart="39" bodyend="62"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_instrument_1a468edb294da268b097c91bf821084c07" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>additionalResults</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a57d2b34e8625ab3d9ffa50c0c7931099" prot="protected" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>additionalResults_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a02070ea7442d30625992c1711030d4b8" prot="protected" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>alwaysForward_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a17c9433135a259e4776baec66204a484" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>alwaysForwardNotifications</name></member>
      <member refid="class_quant_lib_1_1_overnight_index_future_1a0afa5a2145e7aec193520273410b7ab8" prot="private" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>averagedRate</name></member>
      <member refid="class_quant_lib_1_1_overnight_index_future_1af475061facb9d4d3c7aaadcaf045ad10" prot="private" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>averagingMethod_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a4c573c48f7eaead5042864ac0eb5b025" prot="protected" virt="virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a58b4986a80efa18634483a92c121e26e" prot="protected" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>calculated_</name></member>
      <member refid="class_quant_lib_1_1_overnight_index_future_1ad2022ca351f87160eec238acd877ac4c" prot="private" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>compoundedRate</name></member>
      <member refid="class_quant_lib_1_1_overnight_index_future_1aa8329603cc5def535adefadedc012f48" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>convexityAdjustment</name></member>
      <member refid="class_quant_lib_1_1_overnight_index_future_1aae5c3717b08ea18192bd9665c69b8bb6" prot="private" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>convexityAdjustment_</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_instrument_1ac548cb61c864779db09bd0fac6ae7c81" prot="protected" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>engine_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a03502fb6c606b262c25acd94ff4c1e52" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>errorEstimate</name></member>
      <member refid="class_quant_lib_1_1_instrument_1abb8f4cfa7346fab7a2f3a8c8b4da30f3" prot="protected" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>errorEstimate_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1aebe809131db2941325d037c031bbf41b" prot="public" virt="virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>fetchResults</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1afac6ee19c3107c453e1347dd8000e023" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>forwardFirstNotificationOnly</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7157f41e83f2c5d924f5c5bafda04d1d" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>freeze</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7bb721fe00c6854e602758aba629ab77" prot="protected" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>frozen_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a5e4c746cbf7999c83dc57f87e241f1cc" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>Instrument</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a0a7c5d42815a4e16ee2158e24dbfc748" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>isCalculated</name></member>
      <member refid="class_quant_lib_1_1_overnight_index_future_1a57f490c071b1d0b41206c3e5db0d9d6e" prot="public" virt="virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>isExpired</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a26f18f4ff7faaaebd8eae50e064b493e" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>LazyObject</name></member>
      <member refid="class_quant_lib_1_1_overnight_index_future_1a4c77759773f46dc3823fcee8717ba232" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>maturityDate</name></member>
      <member refid="class_quant_lib_1_1_overnight_index_future_1a911921e59ac4f6183227c80c775010f9" prot="private" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>maturityDate_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a5afdd9698267cd30ddd10cf01f3487b0" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>NPV</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a997663780100d30ae59b14ac0285322d" prot="protected" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>NPV_</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::OvernightIndexFuture</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::OvernightIndexFuture</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::OvernightIndexFuture</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::OvernightIndexFuture</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::OvernightIndexFuture</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::QuantLib::Observer::"><scope>QuantLib::OvernightIndexFuture</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_overnight_index_future_1a4742a8d5e725c2f13603fc418d503ff3" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>overnightIndex</name></member>
      <member refid="class_quant_lib_1_1_overnight_index_future_1aa823600f87e5ec38f599e6ab053e7719" prot="private" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>overnightIndex_</name></member>
      <member refid="class_quant_lib_1_1_overnight_index_future_1aa42537d7388bc599cfae36df4f602fad" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>OvernightIndexFuture</name></member>
      <member refid="class_quant_lib_1_1_overnight_index_future_1a8fa5cf47e49657f87c070d5c13b525a7" prot="private" virt="virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>performCalculations</name></member>
      <member refid="class_quant_lib_1_1_overnight_index_future_1a392ae73778ff565091abb8e9562667b7" prot="private" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>rate</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a70c9b24e50132408d8d9ce4f6674662a" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>recalculate</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a266c15a12160a89f4f9707db85f9fa27" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>result</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a3444386491f179f64f4f0aac24997071" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>setPricingEngine</name></member>
      <member refid="class_quant_lib_1_1_instrument_1af7344eebc48a1a361386e5c5a90a8fcc" prot="public" virt="virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>setupArguments</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a73d90597fcd3ff52a8aed674393ab574" prot="protected" virt="virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>setupExpired</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a2e0e4786666453024b9d4e0761f2770b" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>unfreeze</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1adee2bf49be5c4c78736be293321a856d" prot="public" virt="virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a53a0fc1adc70b73387ad53009725835d" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>valuationDate</name></member>
      <member refid="class_quant_lib_1_1_instrument_1aa60b558fc82f022e13535360ac4a6fed" prot="protected" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>valuationDate_</name></member>
      <member refid="class_quant_lib_1_1_overnight_index_future_1aba6c36710a12d1cda83f8869e1099e13" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>valueDate</name></member>
      <member refid="class_quant_lib_1_1_overnight_index_future_1a70b1e0a39b4cbb98773a44a3d9326efd" prot="private" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>valueDate_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a9d719c43bb627177a90d7d12324a2d6e" prot="public" virt="non-virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>~LazyObject</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::OvernightIndexFuture</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
