<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="struct_quant_lib_1_1_c_p_i" kind="struct" language="C++" prot="public">
    <compoundname>QuantLib::CPI</compoundname>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="struct_quant_lib_1_1_c_p_i_1adaf018681fd1d9478c984348c82c9013" prot="public" static="no" strong="no">
        <type></type>
        <name>InterpolationType</name>
        <qualifiedname>QuantLib::CPI::InterpolationType</qualifiedname>
        <enumvalue id="struct_quant_lib_1_1_c_p_i_1adaf018681fd1d9478c984348c82c9013a75ed05f2d211630e39eda9d94d0b4577" prot="public">
          <name>AsIndex</name>
          <briefdescription>
<para>same interpolation as index </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="struct_quant_lib_1_1_c_p_i_1adaf018681fd1d9478c984348c82c9013ab80b77469b723df3e94ae494a3c5b335" prot="public">
          <name>Flat</name>
          <briefdescription>
<para>flat from previous fixing </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="struct_quant_lib_1_1_c_p_i_1adaf018681fd1d9478c984348c82c9013a4d9b7418d2f73b1844c9a9bc6f99051d" prot="public">
          <name>Linear</name>
          <briefdescription>
<para>linearly between bracketing fixings </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>when you observe an index, how do you interpolate between fixings? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/inflationindex.hpp" line="42" column="9" bodyfile="ql/indexes/inflationindex.hpp" bodystart="42" bodyend="46"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_quant_lib_1_1_c_p_i_1a2024b4a859ed7806d68d1a8778563c1e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CPI::laggedFixing</definition>
        <argsstring>(const ext::shared_ptr&lt; ZeroInflationIndex &gt; &amp;index, const Date &amp;date, const Period &amp;observationLag, InterpolationType interpolationType)</argsstring>
        <name>laggedFixing</name>
        <qualifiedname>QuantLib::CPI::laggedFixing</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_zero_inflation_index" kindref="compound">ZeroInflationIndex</ref> &gt; &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>observationLag</declname>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_c_p_i_1adaf018681fd1d9478c984348c82c9013" kindref="member">InterpolationType</ref></type>
          <declname>interpolationType</declname>
        </param>
        <briefdescription>
<para>interpolated inflation fixing </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index whose fixing should be retrieved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>date</parametername>
</parameternamelist>
<parameterdescription>
<para>The date without lag; usually, the payment date for some inflation-based coupon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationLag</parametername>
</parameternamelist>
<parameterdescription>
<para>The observation lag to be subtracted from the passed date; for instance, if the passed date is in May and the lag is three months, the inflation fixing from February (and March, in case of interpolation) will be observed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interpolationType</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpolation type (flat or linear) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/inflationindex.hpp" line="59" column="21" bodyfile="ql/indexes/inflationindex.cpp" bodystart="28" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_c_p_i_1a16145937746f8ac5578baffe4996c8b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CPI::laggedYoYRate</definition>
        <argsstring>(const ext::shared_ptr&lt; YoYInflationIndex &gt; &amp;index, const Date &amp;date, const Period &amp;observationLag, InterpolationType interpolationType)</argsstring>
        <name>laggedYoYRate</name>
        <qualifiedname>QuantLib::CPI::laggedYoYRate</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_yo_y_inflation_index" kindref="compound">YoYInflationIndex</ref> &gt; &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>observationLag</declname>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_c_p_i_1adaf018681fd1d9478c984348c82c9013" kindref="member">InterpolationType</ref></type>
          <declname>interpolationType</declname>
        </param>
        <briefdescription>
<para>interpolated year-on-year inflation rate </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index whose fixing should be retrieved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>date</parametername>
</parameternamelist>
<parameterdescription>
<para>The date without lag; usually, the payment date for some inflation-based coupon. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observationLag</parametername>
</parameternamelist>
<parameterdescription>
<para>The observation lag to be subtracted from the passed date; for instance, if the passed date is in May and the lag is three months, the year-on-year rate from February (and March, in case of interpolation) will be observed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interpolationType</parametername>
</parameternamelist>
<parameterdescription>
<para>The interpolation type (flat or linear) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/inflationindex.hpp" line="76" column="21" bodyfile="ql/indexes/inflationindex.cpp" bodystart="65" bodyend="116"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ql/indexes/inflationindex.hpp" line="39" column="5" bodyfile="ql/indexes/inflationindex.hpp" bodystart="39" bodyend="80"/>
    <listofallmembers>
      <member refid="struct_quant_lib_1_1_c_p_i_1adaf018681fd1d9478c984348c82c9013a75ed05f2d211630e39eda9d94d0b4577" prot="public" virt="non-virtual"><scope>QuantLib::CPI</scope><name>AsIndex</name></member>
      <member refid="struct_quant_lib_1_1_c_p_i_1adaf018681fd1d9478c984348c82c9013ab80b77469b723df3e94ae494a3c5b335" prot="public" virt="non-virtual"><scope>QuantLib::CPI</scope><name>Flat</name></member>
      <member refid="struct_quant_lib_1_1_c_p_i_1adaf018681fd1d9478c984348c82c9013" prot="public" virt="non-virtual"><scope>QuantLib::CPI</scope><name>InterpolationType</name></member>
      <member refid="struct_quant_lib_1_1_c_p_i_1a2024b4a859ed7806d68d1a8778563c1e" prot="public" virt="non-virtual"><scope>QuantLib::CPI</scope><name>laggedFixing</name></member>
      <member refid="struct_quant_lib_1_1_c_p_i_1a16145937746f8ac5578baffe4996c8b6" prot="public" virt="non-virtual"><scope>QuantLib::CPI</scope><name>laggedYoYRate</name></member>
      <member refid="struct_quant_lib_1_1_c_p_i_1adaf018681fd1d9478c984348c82c9013a4d9b7418d2f73b1844c9a9bc6f99051d" prot="public" virt="non-virtual"><scope>QuantLib::CPI</scope><name>Linear</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
