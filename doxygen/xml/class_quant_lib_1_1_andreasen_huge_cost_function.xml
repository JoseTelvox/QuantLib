<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_andreasen_huge_cost_function" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::AndreasenHugeCostFunction</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_cost_function" prot="public" virt="non-virtual">QuantLib::CostFunction</basecompoundref>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_andreasen_huge_cost_function_1a8aeeda9b6a14b56be3f1daca2e92059e" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>const Array QuantLib::AndreasenHugeCostFunction::marketNPVs_</definition>
        <argsstring></argsstring>
        <name>marketNPVs_</name>
        <qualifiedname>QuantLib::AndreasenHugeCostFunction::marketNPVs_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="154" column="21" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_andreasen_huge_cost_function_1a8a62cbcce115c5f46a4e455943a7eb0c" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>const Array QuantLib::AndreasenHugeCostFunction::marketVegas_</definition>
        <argsstring></argsstring>
        <name>marketVegas_</name>
        <qualifiedname>QuantLib::AndreasenHugeCostFunction::marketVegas_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="154" column="33" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_andreasen_huge_cost_function_1ad122502517f6da242c3312f29717c7b5" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>const Array QuantLib::AndreasenHugeCostFunction::lnMarketStrikes_</definition>
        <argsstring></argsstring>
        <name>lnMarketStrikes_</name>
        <qualifiedname>QuantLib::AndreasenHugeCostFunction::lnMarketStrikes_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="155" column="21" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_andreasen_huge_cost_function_1a7ff60ef8d7221bc14c21f801071ae13f" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>const Array QuantLib::AndreasenHugeCostFunction::previousNPVs_</definition>
        <argsstring></argsstring>
        <name>previousNPVs_</name>
        <qualifiedname>QuantLib::AndreasenHugeCostFunction::previousNPVs_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="155" column="38" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_andreasen_huge_cost_function_1a61e69aeee98565a6e60af09dc6ca1890" prot="private" static="no" mutable="no">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_fdm_mesher_composite" kindref="compound">FdmMesherComposite</ref> &gt;</type>
        <definition>const ext::shared_ptr&lt;FdmMesherComposite&gt; QuantLib::AndreasenHugeCostFunction::mesher_</definition>
        <argsstring></argsstring>
        <name>mesher_</name>
        <qualifiedname>QuantLib::AndreasenHugeCostFunction::mesher_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="156" column="31" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_andreasen_huge_cost_function_1add6a366545e0829d03e86924edfb3943" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>const Size QuantLib::AndreasenHugeCostFunction::nGridPoints_</definition>
        <argsstring></argsstring>
        <name>nGridPoints_</name>
        <qualifiedname>QuantLib::AndreasenHugeCostFunction::nGridPoints_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="157" column="20" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_andreasen_huge_cost_function_1a3db613ecc7952b364160d7182a0530be" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        <definition>const Time QuantLib::AndreasenHugeCostFunction::dT_</definition>
        <argsstring></argsstring>
        <name>dT_</name>
        <qualifiedname>QuantLib::AndreasenHugeCostFunction::dT_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="158" column="20" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_andreasen_huge_cost_function_1a1297bc4df972c12815130ebea71d6813" prot="private" static="no" mutable="no">
        <type>const AndreasenHugeVolatilityInterpl::InterpolationType</type>
        <definition>const AndreasenHugeVolatilityInterpl::InterpolationType QuantLib::AndreasenHugeCostFunction::interpolationType_</definition>
        <argsstring></argsstring>
        <name>interpolationType_</name>
        <qualifiedname>QuantLib::AndreasenHugeCostFunction::interpolationType_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="160" column="13" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_andreasen_huge_cost_function_1a54b2e842c9721d284f950a15a76becfa" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_quant_lib_1_1_first_derivative_op" kindref="compound">FirstDerivativeOp</ref></type>
        <definition>const FirstDerivativeOp QuantLib::AndreasenHugeCostFunction::dxMap_</definition>
        <argsstring></argsstring>
        <name>dxMap_</name>
        <qualifiedname>QuantLib::AndreasenHugeCostFunction::dxMap_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="162" column="34" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_andreasen_huge_cost_function_1a98c60ad1a460a99a1bbcde84c7e23b72" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_quant_lib_1_1_triple_band_linear_op" kindref="compound">TripleBandLinearOp</ref></type>
        <definition>const TripleBandLinearOp QuantLib::AndreasenHugeCostFunction::dxxMap_</definition>
        <argsstring></argsstring>
        <name>dxxMap_</name>
        <qualifiedname>QuantLib::AndreasenHugeCostFunction::dxxMap_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="163" column="34" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_andreasen_huge_cost_function_1ab34d54fba9644a1b9c8fb2ffe3e486e8" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_quant_lib_1_1_triple_band_linear_op" kindref="compound">TripleBandLinearOp</ref></type>
        <definition>const TripleBandLinearOp QuantLib::AndreasenHugeCostFunction::d2CdK2_</definition>
        <argsstring></argsstring>
        <name>d2CdK2_</name>
        <qualifiedname>QuantLib::AndreasenHugeCostFunction::d2CdK2_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="164" column="34" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_andreasen_huge_cost_function_1a2826da8b243fd5eac55a5e5c46fe1b50" prot="private" static="no" mutable="yes">
        <type><ref refid="class_quant_lib_1_1_triple_band_linear_op" kindref="compound">TripleBandLinearOp</ref></type>
        <definition>TripleBandLinearOp QuantLib::AndreasenHugeCostFunction::mapT_</definition>
        <argsstring></argsstring>
        <name>mapT_</name>
        <qualifiedname>QuantLib::AndreasenHugeCostFunction::mapT_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="165" column="36" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="165" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_andreasen_huge_cost_function_1a737b038ffbc449814bbab16b8f8f6642" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::AndreasenHugeCostFunction::AndreasenHugeCostFunction</definition>
        <argsstring>(Array marketNPVs, Array marketVegas, Array lnMarketStrikes, Array previousNPVs, const ext::shared_ptr&lt; FdmMesherComposite &gt; &amp;mesher, Time dT, AndreasenHugeVolatilityInterpl::InterpolationType interpolationType)</argsstring>
        <name>AndreasenHugeCostFunction</name>
        <qualifiedname>QuantLib::AndreasenHugeCostFunction::AndreasenHugeCostFunction</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
          <declname>marketNPVs</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
          <declname>marketVegas</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
          <declname>lnMarketStrikes</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
          <declname>previousNPVs</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_fdm_mesher_composite" kindref="compound">FdmMesherComposite</ref> &gt; &amp;</type>
          <declname>mesher</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dT</declname>
        </param>
        <param>
          <type>AndreasenHugeVolatilityInterpl::InterpolationType</type>
          <declname>interpolationType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="56" column="9" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="56" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_andreasen_huge_cost_function_1a8be856354a2ebe07d720c6f71ca44afd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::AndreasenHugeCostFunction::d2CdK2</definition>
        <argsstring>(const Array &amp;c) const</argsstring>
        <name>d2CdK2</name>
        <qualifiedname>QuantLib::AndreasenHugeCostFunction::d2CdK2</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="74" column="15" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_andreasen_huge_cost_function_1ae27a560b45f6d11707cc5166e49e884d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::AndreasenHugeCostFunction::solveFor</definition>
        <argsstring>(Time dT, const Array &amp;sig, const Array &amp;b) const</argsstring>
        <name>solveFor</name>
        <qualifiedname>QuantLib::AndreasenHugeCostFunction::solveFor</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dT</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="78" column="15" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="78" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_andreasen_huge_cost_function_1a6c8141a5b60ec964b7bb13c4fcf1fe22" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::AndreasenHugeCostFunction::apply</definition>
        <argsstring>(const Array &amp;c) const</argsstring>
        <name>apply</name>
        <qualifiedname>QuantLib::AndreasenHugeCostFunction::apply</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="123" column="15" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_andreasen_huge_cost_function_1a47eecac070954efce4df529dfaedf471" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::AndreasenHugeCostFunction::values</definition>
        <argsstring>(const Array &amp;sig) const override</argsstring>
        <name>values</name>
        <qualifiedname>QuantLib::AndreasenHugeCostFunction::values</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_cost_function_1ab43da17891b724c8352c01c2478d04db">values</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>method to overload to compute the cost function values in x </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="127" column="15" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="127" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_andreasen_huge_cost_function_1a364efdc87e0a69bec70703483e35e303" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::AndreasenHugeCostFunction::vegaCalibrationError</definition>
        <argsstring>(const Array &amp;sig) const</argsstring>
        <name>vegaCalibrationError</name>
        <qualifiedname>QuantLib::AndreasenHugeCostFunction::vegaCalibrationError</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="144" column="15" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="144" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_andreasen_huge_cost_function_1a59991884a3d81d0cf61957d9e22d042f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::AndreasenHugeCostFunction::initialValues</definition>
        <argsstring>() const</argsstring>
        <name>initialValues</name>
        <qualifiedname>QuantLib::AndreasenHugeCostFunction::initialValues</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="148" column="15" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="148" bodyend="150"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::AndreasenHugeCostFunction</label>
        <link refid="class_quant_lib_1_1_andreasen_huge_cost_function"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::CostFunction</label>
        <link refid="class_quant_lib_1_1_cost_function"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::AndreasenHugeCostFunction</label>
        <link refid="class_quant_lib_1_1_andreasen_huge_cost_function"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::CostFunction</label>
        <link refid="class_quant_lib_1_1_cost_function"/>
      </node>
    </collaborationgraph>
    <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="54" column="5" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="54" bodyend="166"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_andreasen_huge_cost_function_1a737b038ffbc449814bbab16b8f8f6642" prot="public" virt="non-virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>AndreasenHugeCostFunction</name></member>
      <member refid="class_quant_lib_1_1_andreasen_huge_cost_function_1a6c8141a5b60ec964b7bb13c4fcf1fe22" prot="public" virt="non-virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>apply</name></member>
      <member refid="class_quant_lib_1_1_andreasen_huge_cost_function_1a8be856354a2ebe07d720c6f71ca44afd" prot="public" virt="non-virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>d2CdK2</name></member>
      <member refid="class_quant_lib_1_1_andreasen_huge_cost_function_1ab34d54fba9644a1b9c8fb2ffe3e486e8" prot="private" virt="non-virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>d2CdK2_</name></member>
      <member refid="class_quant_lib_1_1_andreasen_huge_cost_function_1a3db613ecc7952b364160d7182a0530be" prot="private" virt="non-virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>dT_</name></member>
      <member refid="class_quant_lib_1_1_andreasen_huge_cost_function_1a54b2e842c9721d284f950a15a76becfa" prot="private" virt="non-virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>dxMap_</name></member>
      <member refid="class_quant_lib_1_1_andreasen_huge_cost_function_1a98c60ad1a460a99a1bbcde84c7e23b72" prot="private" virt="non-virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>dxxMap_</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a0dc9070b6d79cf91aef8ba48e2808263" prot="public" virt="virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>finiteDifferenceEpsilon</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1aad44fa61459514a8e55208d50716698b" prot="public" virt="virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>gradient</name></member>
      <member refid="class_quant_lib_1_1_andreasen_huge_cost_function_1a59991884a3d81d0cf61957d9e22d042f" prot="public" virt="non-virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>initialValues</name></member>
      <member refid="class_quant_lib_1_1_andreasen_huge_cost_function_1a1297bc4df972c12815130ebea71d6813" prot="private" virt="non-virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>interpolationType_</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a5bf2d8163ed5dea7ec811377e2835eca" prot="public" virt="virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>jacobian</name></member>
      <member refid="class_quant_lib_1_1_andreasen_huge_cost_function_1ad122502517f6da242c3312f29717c7b5" prot="private" virt="non-virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>lnMarketStrikes_</name></member>
      <member refid="class_quant_lib_1_1_andreasen_huge_cost_function_1a2826da8b243fd5eac55a5e5c46fe1b50" prot="private" virt="non-virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>mapT_</name></member>
      <member refid="class_quant_lib_1_1_andreasen_huge_cost_function_1a8aeeda9b6a14b56be3f1daca2e92059e" prot="private" virt="non-virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>marketNPVs_</name></member>
      <member refid="class_quant_lib_1_1_andreasen_huge_cost_function_1a8a62cbcce115c5f46a4e455943a7eb0c" prot="private" virt="non-virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>marketVegas_</name></member>
      <member refid="class_quant_lib_1_1_andreasen_huge_cost_function_1a61e69aeee98565a6e60af09dc6ca1890" prot="private" virt="non-virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>mesher_</name></member>
      <member refid="class_quant_lib_1_1_andreasen_huge_cost_function_1add6a366545e0829d03e86924edfb3943" prot="private" virt="non-virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>nGridPoints_</name></member>
      <member refid="class_quant_lib_1_1_andreasen_huge_cost_function_1a7ff60ef8d7221bc14c21f801071ae13f" prot="private" virt="non-virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>previousNPVs_</name></member>
      <member refid="class_quant_lib_1_1_andreasen_huge_cost_function_1ae27a560b45f6d11707cc5166e49e884d" prot="public" virt="non-virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>solveFor</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a2255742e3e05477d773cdf3705411661" prot="public" virt="virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>value</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1ae0c8902d6ce2e535237ae4370956d161" prot="public" virt="virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>valueAndGradient</name></member>
      <member refid="class_quant_lib_1_1_andreasen_huge_cost_function_1a47eecac070954efce4df529dfaedf471" prot="public" virt="virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>values</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a1aa00768b27a3446404b3029660c2e68" prot="public" virt="virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>valuesAndJacobian</name></member>
      <member refid="class_quant_lib_1_1_andreasen_huge_cost_function_1a364efdc87e0a69bec70703483e35e303" prot="public" virt="non-virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>vegaCalibrationError</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a04929e863b85bc26f50ad9052ba7ee73" prot="public" virt="virtual"><scope>QuantLib::AndreasenHugeCostFunction</scope><name>~CostFunction</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
