<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_make_m_c_heston_hull_white_engine" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::MakeMCHestonHullWhiteEngine</compoundname>
    <includes refid="mchestonhullwhiteengine_8hpp" local="no">mchestonhullwhiteengine.hpp</includes>
    <templateparamlist>
      <param>
        <type>class RNG</type>
        <defval><ref refid="namespace_quant_lib_1a68b9aaf5f0c17983506b1a1db8575ab0" kindref="member">PseudoRandom</ref></defval>
      </param>
      <param>
        <type>class S</type>
        <defval><ref refid="namespace_quant_lib_1ae2e788da35d2b866040a03b96227ee6e" kindref="member">Statistics</ref></defval>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a005373f25a5e95ccd52df9b7bb857f92" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_hybrid_heston_hull_white_process" kindref="compound">HybridHestonHullWhiteProcess</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;HybridHestonHullWhiteProcess&gt; QuantLib::MakeMCHestonHullWhiteEngine&lt; RNG, S &gt;::process_</definition>
        <argsstring></argsstring>
        <name>process_</name>
        <qualifiedname>QuantLib::MakeMCHestonHullWhiteEngine::process_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="87" column="25" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a7b5fc51876a9d2dca7a9c4f1adc40728" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MakeMCHestonHullWhiteEngine&lt; RNG, S &gt;::steps_</definition>
        <argsstring></argsstring>
        <name>steps_</name>
        <qualifiedname>QuantLib::MakeMCHestonHullWhiteEngine::steps_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="88" column="14" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a75fa14ab7c72c7d52869d1ead74ce26d" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MakeMCHestonHullWhiteEngine&lt; RNG, S &gt;::stepsPerYear_</definition>
        <argsstring></argsstring>
        <name>stepsPerYear_</name>
        <qualifiedname>QuantLib::MakeMCHestonHullWhiteEngine::stepsPerYear_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="88" column="21" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a2680e048e0bc55568d963bc2e8947b96" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MakeMCHestonHullWhiteEngine&lt; RNG, S &gt;::samples_</definition>
        <argsstring></argsstring>
        <name>samples_</name>
        <qualifiedname>QuantLib::MakeMCHestonHullWhiteEngine::samples_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="88" column="35" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a5797d25c68552369a3dc41cdd1da9b49" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MakeMCHestonHullWhiteEngine&lt; RNG, S &gt;::maxSamples_</definition>
        <argsstring></argsstring>
        <name>maxSamples_</name>
        <qualifiedname>QuantLib::MakeMCHestonHullWhiteEngine::maxSamples_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="88" column="44" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1ac0b9a1b9501f17475cbfa90145b3b64d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::MakeMCHestonHullWhiteEngine&lt; RNG, S &gt;::antithetic_</definition>
        <argsstring></argsstring>
        <name>antithetic_</name>
        <qualifiedname>QuantLib::MakeMCHestonHullWhiteEngine::antithetic_</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="89" column="14" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a082f8ad969b374809818b9e932e87947" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::MakeMCHestonHullWhiteEngine&lt; RNG, S &gt;::controlVariate_</definition>
        <argsstring></argsstring>
        <name>controlVariate_</name>
        <qualifiedname>QuantLib::MakeMCHestonHullWhiteEngine::controlVariate_</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="89" column="27" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a10467be4c01c4f47c5e0478d96777a0b" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::MakeMCHestonHullWhiteEngine&lt; RNG, S &gt;::tolerance_</definition>
        <argsstring></argsstring>
        <name>tolerance_</name>
        <qualifiedname>QuantLib::MakeMCHestonHullWhiteEngine::tolerance_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="90" column="14" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a5bf445c073171a9b1b3a961e5ea104b1" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
        <definition>BigNatural QuantLib::MakeMCHestonHullWhiteEngine&lt; RNG, S &gt;::seed_</definition>
        <argsstring></argsstring>
        <name>seed_</name>
        <qualifiedname>QuantLib::MakeMCHestonHullWhiteEngine::seed_</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="91" column="20" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a594b65537fb7a0a89a13039395686348" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MakeMCHestonHullWhiteEngine&lt; RNG, S &gt;::MakeMCHestonHullWhiteEngine</definition>
        <argsstring>(ext::shared_ptr&lt; HybridHestonHullWhiteProcess &gt;)</argsstring>
        <name>MakeMCHestonHullWhiteEngine</name>
        <qualifiedname>QuantLib::MakeMCHestonHullWhiteEngine::MakeMCHestonHullWhiteEngine</qualifiedname>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_hybrid_heston_hull_white_process" kindref="compound">HybridHestonHullWhiteProcess</ref> &gt;</type>
          <defname>process</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="74" column="18" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="224" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1aecaf29d04cce74e31e4708cff65a55d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine" kindref="compound">MakeMCHestonHullWhiteEngine</ref> &amp;</type>
        <definition>MakeMCHestonHullWhiteEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCHestonHullWhiteEngine&lt; RNG, S &gt;::withSteps</definition>
        <argsstring>(Size steps)</argsstring>
        <name>withSteps</name>
        <qualifiedname>QuantLib::MakeMCHestonHullWhiteEngine::withSteps</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>steps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="76" column="37" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="231" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1aeb9bde2f3938a5cbcddf649e70017784" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine" kindref="compound">MakeMCHestonHullWhiteEngine</ref> &amp;</type>
        <definition>MakeMCHestonHullWhiteEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCHestonHullWhiteEngine&lt; RNG, S &gt;::withStepsPerYear</definition>
        <argsstring>(Size steps)</argsstring>
        <name>withStepsPerYear</name>
        <qualifiedname>QuantLib::MakeMCHestonHullWhiteEngine::withStepsPerYear</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>steps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="77" column="37" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="238" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a71252813e5c70cff2cbd39bfe5acb900" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine" kindref="compound">MakeMCHestonHullWhiteEngine</ref> &amp;</type>
        <definition>MakeMCHestonHullWhiteEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCHestonHullWhiteEngine&lt; RNG, S &gt;::withAntitheticVariate</definition>
        <argsstring>(bool b=true)</argsstring>
        <name>withAntitheticVariate</name>
        <qualifiedname>QuantLib::MakeMCHestonHullWhiteEngine::withAntitheticVariate</qualifiedname>
        <param>
          <type>bool</type>
          <declname>b</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="78" column="37" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="245" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a3ffc04f0ce23d0e2da1cffd45566b63e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine" kindref="compound">MakeMCHestonHullWhiteEngine</ref> &amp;</type>
        <definition>MakeMCHestonHullWhiteEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCHestonHullWhiteEngine&lt; RNG, S &gt;::withControlVariate</definition>
        <argsstring>(bool b=true)</argsstring>
        <name>withControlVariate</name>
        <qualifiedname>QuantLib::MakeMCHestonHullWhiteEngine::withControlVariate</qualifiedname>
        <param>
          <type>bool</type>
          <declname>b</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="79" column="37" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1ab912bd54a084cafe2153f489dd7db4ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine" kindref="compound">MakeMCHestonHullWhiteEngine</ref> &amp;</type>
        <definition>MakeMCHestonHullWhiteEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCHestonHullWhiteEngine&lt; RNG, S &gt;::withSamples</definition>
        <argsstring>(Size samples)</argsstring>
        <name>withSamples</name>
        <qualifiedname>QuantLib::MakeMCHestonHullWhiteEngine::withSamples</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>samples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="80" column="37" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="259" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a6a9dd3a8b37df7fc80837b83922af77f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine" kindref="compound">MakeMCHestonHullWhiteEngine</ref> &amp;</type>
        <definition>MakeMCHestonHullWhiteEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCHestonHullWhiteEngine&lt; RNG, S &gt;::withAbsoluteTolerance</definition>
        <argsstring>(Real tolerance)</argsstring>
        <name>withAbsoluteTolerance</name>
        <qualifiedname>QuantLib::MakeMCHestonHullWhiteEngine::withAbsoluteTolerance</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="81" column="37" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="268" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a730588a0a5a7c99404e17be04975cb01" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine" kindref="compound">MakeMCHestonHullWhiteEngine</ref> &amp;</type>
        <definition>MakeMCHestonHullWhiteEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCHestonHullWhiteEngine&lt; RNG, S &gt;::withMaxSamples</definition>
        <argsstring>(Size samples)</argsstring>
        <name>withMaxSamples</name>
        <qualifiedname>QuantLib::MakeMCHestonHullWhiteEngine::withMaxSamples</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>samples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="82" column="37" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="280" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1abecbb7d1eb546b731ce60fb352e47e12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine" kindref="compound">MakeMCHestonHullWhiteEngine</ref> &amp;</type>
        <definition>MakeMCHestonHullWhiteEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCHestonHullWhiteEngine&lt; RNG, S &gt;::withSeed</definition>
        <argsstring>(BigNatural seed)</argsstring>
        <name>withSeed</name>
        <qualifiedname>QuantLib::MakeMCHestonHullWhiteEngine::withSeed</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="83" column="37" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1adcdcab62552a9ad8e69c7585eaf77feb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MakeMCHestonHullWhiteEngine&lt; RNG, S &gt;::operator ext::shared_ptr&lt; PricingEngine &gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator ext::shared_ptr&lt; PricingEngine &gt;</name>
        <qualifiedname>QuantLib::MakeMCHestonHullWhiteEngine::shared_ptr&lt; PricingEngine &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="85" column="9" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="295" bodyend="310"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Monte Carlo Heston/Hull-White engine factory. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="72" column="5" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="72" bodyend="92"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1ac0b9a1b9501f17475cbfa90145b3b64d" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCHestonHullWhiteEngine</scope><name>antithetic_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a082f8ad969b374809818b9e932e87947" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCHestonHullWhiteEngine</scope><name>controlVariate_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a594b65537fb7a0a89a13039395686348" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCHestonHullWhiteEngine</scope><name>MakeMCHestonHullWhiteEngine</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a5797d25c68552369a3dc41cdd1da9b49" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCHestonHullWhiteEngine</scope><name>maxSamples_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1adcdcab62552a9ad8e69c7585eaf77feb" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCHestonHullWhiteEngine</scope><name>operator ext::shared_ptr&lt; PricingEngine &gt;</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a005373f25a5e95ccd52df9b7bb857f92" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCHestonHullWhiteEngine</scope><name>process_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a2680e048e0bc55568d963bc2e8947b96" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCHestonHullWhiteEngine</scope><name>samples_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a5bf445c073171a9b1b3a961e5ea104b1" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCHestonHullWhiteEngine</scope><name>seed_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a7b5fc51876a9d2dca7a9c4f1adc40728" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCHestonHullWhiteEngine</scope><name>steps_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a75fa14ab7c72c7d52869d1ead74ce26d" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCHestonHullWhiteEngine</scope><name>stepsPerYear_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a10467be4c01c4f47c5e0478d96777a0b" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCHestonHullWhiteEngine</scope><name>tolerance_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a6a9dd3a8b37df7fc80837b83922af77f" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCHestonHullWhiteEngine</scope><name>withAbsoluteTolerance</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a71252813e5c70cff2cbd39bfe5acb900" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCHestonHullWhiteEngine</scope><name>withAntitheticVariate</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a3ffc04f0ce23d0e2da1cffd45566b63e" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCHestonHullWhiteEngine</scope><name>withControlVariate</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1a730588a0a5a7c99404e17be04975cb01" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCHestonHullWhiteEngine</scope><name>withMaxSamples</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1ab912bd54a084cafe2153f489dd7db4ca" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCHestonHullWhiteEngine</scope><name>withSamples</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1abecbb7d1eb546b731ce60fb352e47e12" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCHestonHullWhiteEngine</scope><name>withSeed</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1aecaf29d04cce74e31e4708cff65a55d2" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCHestonHullWhiteEngine</scope><name>withSteps</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine_1aeb9bde2f3938a5cbcddf649e70017784" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCHestonHullWhiteEngine</scope><name>withStepsPerYear</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
