<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_m_c_american_engine" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::MCAmericanEngine</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine" prot="public" virt="non-virtual">QuantLib::MCLongstaffSchwartzEngine&lt; VanillaOption::engine, SingleVariate, PseudoRandom, Statistics, PseudoRandom &gt;</basecompoundref>
    <includes refid="mcamericanengine_8hpp" local="no">mcamericanengine.hpp</includes>
    <templateparamlist>
      <param>
        <type>class RNG</type>
        <defval><ref refid="namespace_quant_lib_1a68b9aaf5f0c17983506b1a1db8575ab0" kindref="member">PseudoRandom</ref></defval>
      </param>
      <param>
        <type>class S</type>
        <defval><ref refid="namespace_quant_lib_1ae2e788da35d2b866040a03b96227ee6e" kindref="member">Statistics</ref></defval>
      </param>
      <param>
        <type>class RNG_Calibration</type>
        <defval>RNG</defval>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_m_c_american_engine_1affe689b23aad24e099ba10666e0bfd3c" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>const Size QuantLib::MCAmericanEngine&lt; RNG, S, RNG_Calibration &gt;::polynomialOrder_</definition>
        <argsstring></argsstring>
        <name>polynomialOrder_</name>
        <qualifiedname>QuantLib::MCAmericanEngine::polynomialOrder_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mcamericanengine.hpp" line="81" column="20" bodyfile="ql/pricingengines/vanilla/mcamericanengine.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_m_c_american_engine_1af251f84b18c59f4de745e10e5adcb8a6" prot="private" static="no" mutable="no">
        <type>const LsmBasisSystem::PolynomialType</type>
        <definition>const LsmBasisSystem::PolynomialType QuantLib::MCAmericanEngine&lt; RNG, S, RNG_Calibration &gt;::polynomialType_</definition>
        <argsstring></argsstring>
        <name>polynomialType_</name>
        <qualifiedname>QuantLib::MCAmericanEngine::polynomialType_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mcamericanengine.hpp" line="82" column="46" bodyfile="ql/pricingengines/vanilla/mcamericanengine.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_m_c_american_engine_1a8fc2a17422514a29307d7c08c39d7319" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MCAmericanEngine&lt; RNG, S, RNG_Calibration &gt;::MCAmericanEngine</definition>
        <argsstring>(const ext::shared_ptr&lt; GeneralizedBlackScholesProcess &gt; &amp;process, Size timeSteps, Size timeStepsPerYear, bool antitheticVariate, bool controlVariate, Size requiredSamples, Real requiredTolerance, Size maxSamples, BigNatural seed, Size polynomialOrder, LsmBasisSystem::PolynomialType polynomialType, Size nCalibrationSamples=Null&lt; Size &gt;(), const ext::optional&lt; bool &gt; &amp;antitheticVariateCalibration=ext::nullopt, BigNatural seedCalibration=Null&lt; Size &gt;())</argsstring>
        <name>MCAmericanEngine</name>
        <qualifiedname>QuantLib::MCAmericanEngine::MCAmericanEngine</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt; &amp;</type>
          <declname>process</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>timeSteps</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>timeStepsPerYear</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>antitheticVariate</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>controlVariate</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>requiredSamples</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>requiredTolerance</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxSamples</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
          <declname>seed</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>polynomialOrder</declname>
        </param>
        <param>
          <type>LsmBasisSystem::PolynomialType</type>
          <declname>polynomialType</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>nCalibrationSamples</declname>
          <defval><ref refid="class_quant_lib_1_1_null" kindref="compound">Null</ref>&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt;()</defval>
        </param>
        <param>
          <type>const ext::optional&lt; bool &gt; &amp;</type>
          <declname>antitheticVariateCalibration</declname>
          <defval>ext::nullopt</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
          <declname>seedCalibration</declname>
          <defval><ref refid="class_quant_lib_1_1_null" kindref="compound">Null</ref>&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mcamericanengine.hpp" line="56" column="9" bodyfile="ql/pricingengines/vanilla/mcamericanengine.hpp" bodystart="142" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_m_c_american_engine_1a534805fdd1cb0ff2935f44386255e16e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::MCAmericanEngine&lt; RNG, S, RNG_Calibration &gt;::calculate</definition>
        <argsstring>() const override</argsstring>
        <name>calculate</name>
        <qualifiedname>QuantLib::MCAmericanEngine::calculate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mcamericanengine.hpp" line="71" column="14" bodyfile="ql/pricingengines/vanilla/mcamericanengine.hpp" bodystart="175" bodyend="183"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_m_c_american_engine_1aac84b1adf239dca465bd98c7a2234b14" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_longstaff_schwartz_path_pricer" kindref="compound">LongstaffSchwartzPathPricer</ref>&lt; <ref refid="class_quant_lib_1_1_path" kindref="compound">Path</ref> &gt; &gt;</type>
        <definition>ext::shared_ptr&lt; LongstaffSchwartzPathPricer&lt; Path &gt; &gt; QuantLib::MCAmericanEngine&lt; RNG, S, RNG_Calibration &gt;::lsmPathPricer</definition>
        <argsstring>() const override</argsstring>
        <name>lsmPathPricer</name>
        <qualifiedname>QuantLib::MCAmericanEngine::lsmPathPricer</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a35dd247e422f003eca4582e7bc908bb9">lsmPathPricer</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mcamericanengine.hpp" line="74" column="25" bodyfile="ql/pricingengines/vanilla/mcamericanengine.hpp" bodystart="187" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_m_c_american_engine_1abed42ceec1587719cfb5064d9f6ec815" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::MCAmericanEngine&lt; RNG, S, RNG_Calibration &gt;::controlVariateValue</definition>
        <argsstring>() const override</argsstring>
        <name>controlVariateValue</name>
        <qualifiedname>QuantLib::MCAmericanEngine::controlVariateValue</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_mc_simulation_1a503ac4db5fa01aa75596c6b42d9d5832">controlVariateValue</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mcamericanengine.hpp" line="76" column="14" bodyfile="ql/pricingengines/vanilla/mcamericanengine.hpp" bodystart="246" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_m_c_american_engine_1a1386e5d4b5e92647f04251b76bddacbd" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_pricing_engine" kindref="compound">PricingEngine</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; PricingEngine &gt; QuantLib::MCAmericanEngine&lt; RNG, S, RNG_Calibration &gt;::controlPricingEngine</definition>
        <argsstring>() const override</argsstring>
        <name>controlPricingEngine</name>
        <qualifiedname>QuantLib::MCAmericanEngine::controlPricingEngine</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_mc_simulation_1ad835a3988a983d55494f911f53b78408">controlPricingEngine</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mcamericanengine.hpp" line="77" column="25" bodyfile="ql/pricingengines/vanilla/mcamericanengine.hpp" bodystart="234" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_m_c_american_engine_1a663949ba0f284901891f6b017a6d72dc" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_path_pricer" kindref="compound">PathPricer</ref>&lt; <ref refid="class_quant_lib_1_1_path" kindref="compound">Path</ref> &gt; &gt;</type>
        <definition>ext::shared_ptr&lt; PathPricer&lt; Path &gt; &gt; QuantLib::MCAmericanEngine&lt; RNG, S, RNG_Calibration &gt;::controlPathPricer</definition>
        <argsstring>() const override</argsstring>
        <name>controlPathPricer</name>
        <qualifiedname>QuantLib::MCAmericanEngine::controlPathPricer</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_mc_simulation_1ae3b7f6e12eaf228b5c65f70a721eb729">controlPathPricer</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mcamericanengine.hpp" line="78" column="25" bodyfile="ql/pricingengines/vanilla/mcamericanengine.hpp" bodystart="213" bodyend="230"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>American Monte Carlo engine. </para>
    </briefdescription>
    <detaileddescription>
<para>References:</para>
<para><xrefsect id="test_1_test000156"><xreftitle>Test</xreftitle><xrefdescription><para>the correctness of the returned value is tested by reproducing results available in web/literature </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::MCAmericanEngine&lt; RNG, S, RNG_Calibration &gt;</label>
        <link refid="class_quant_lib_1_1_m_c_american_engine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::MCLongstaffSchwartzEngine&lt; VanillaOption::engine, SingleVariate, PseudoRandom, Statistics, PseudoRandom &gt;</label>
        <link refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::McSimulation&lt; SingleVariate, PseudoRandom, Statistics &gt;</label>
        <link refid="class_quant_lib_1_1_mc_simulation"/>
      </node>
      <node id="3">
        <label>VanillaOption::engine</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::MCAmericanEngine&lt; RNG, S, RNG_Calibration &gt;</label>
        <link refid="class_quant_lib_1_1_m_c_american_engine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::MCLongstaffSchwartzEngine&lt; VanillaOption::engine, SingleVariate, PseudoRandom, Statistics, PseudoRandom &gt;</label>
        <link refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::McSimulation&lt; SingleVariate, PseudoRandom, Statistics &gt;</label>
        <link refid="class_quant_lib_1_1_mc_simulation"/>
      </node>
      <node id="3">
        <label>VanillaOption::engine</label>
      </node>
    </collaborationgraph>
    <location file="ql/pricingengines/vanilla/mcamericanengine.hpp" line="52" column="5" bodyfile="ql/pricingengines/vanilla/mcamericanengine.hpp" bodystart="54" bodyend="83"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_mc_simulation_1a06f6de1952807cb9e689619d3f48450d" prot="protected" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>antitheticVariate_</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a77d67cd9317a31cee16750a66108966f" prot="protected" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>antitheticVariateCalibration_</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a0005f50a2f3a52b03c53493718ae7b02" prot="protected" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>brownianBridge_</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1aa94b92d13b45bcb80845c4d9e515c3f7" prot="protected" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>brownianBridgeCalibration_</name></member>
      <member refid="class_quant_lib_1_1_m_c_american_engine_1a534805fdd1cb0ff2935f44386255e16e" prot="public" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1af5ccf2e30a050c14f9e30965855b4993" prot="public" virt="non-virtual" ambiguityscope="QuantLib::McSimulation&lt; SingleVariate, PseudoRandom, Statistics &gt;::"><scope>QuantLib::MCAmericanEngine</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a81f0b6c250bc8a1ba246faa3b7bbe70f" prot="protected" virt="virtual"><scope>QuantLib::MCAmericanEngine</scope><name>controlPathGenerator</name></member>
      <member refid="class_quant_lib_1_1_m_c_american_engine_1a663949ba0f284901891f6b017a6d72dc" prot="protected" virt="virtual"><scope>QuantLib::MCAmericanEngine</scope><name>controlPathPricer</name></member>
      <member refid="class_quant_lib_1_1_m_c_american_engine_1a1386e5d4b5e92647f04251b76bddacbd" prot="protected" virt="virtual"><scope>QuantLib::MCAmericanEngine</scope><name>controlPricingEngine</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a0c55429fb2a2d840cd8d358a5973cc40" prot="protected" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>controlVariate_</name></member>
      <member refid="class_quant_lib_1_1_m_c_american_engine_1abed42ceec1587719cfb5064d9f6ec815" prot="protected" virt="virtual"><scope>QuantLib::MCAmericanEngine</scope><name>controlVariateValue</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1aa74e7e1891852e5c96da544b87af083c" prot="public" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>errorEstimate</name></member>
      <member refid="class_quant_lib_1_1_m_c_american_engine_1aac84b1adf239dca465bd98c7a2234b14" prot="protected" virt="virtual"><scope>QuantLib::MCAmericanEngine</scope><name>lsmPathPricer</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1ae21c92c6196d56c6a889389268ef2075" prot="protected" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>maxError</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a10d5e5d85cc108ab976899890055e061" prot="protected" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>maxError</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1ac14e0be821d43e80061ccb880383c900" prot="protected" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>maxSamples_</name></member>
      <member refid="class_quant_lib_1_1_m_c_american_engine_1a8fc2a17422514a29307d7c08c39d7319" prot="public" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>MCAmericanEngine</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1aa19e446f2b23b29e6b892bcd365a6ec0" prot="public" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>MCLongstaffSchwartzEngine</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1afbdbf4a8ce56b1b6060c49ac91b1f55a" prot="protected" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>mcModel_</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a62e3712ee1431819cb50fd7b373e90e2" prot="protected" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>mcModelCalibration_</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a3242253b8262657e78739463a077c1d6" prot="protected" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>McSimulation</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a57bf770a4a28c3e0861ecd24c7703f60" prot="protected" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>nCalibrationSamples_</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1afdb50cd2453fa33138cbb042b2656cd4" prot="public" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>path_generator_type</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a58db30679d696da1f3c83df671441943" prot="public" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>path_generator_type_calibration</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1aa41c5f6592d62b2172fbbae3e347efc8" prot="public" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>path_pricer_type</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a157905232837fe4dbf40cf82b327bf62" prot="public" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>path_type</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a8d279f09223d2fa043d2a7ea0d3cf484" prot="protected" virt="virtual"><scope>QuantLib::MCAmericanEngine</scope><name>pathGenerator</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1aadaa6d56aad9a5ea6fdaa950d3b0e9c3" prot="protected" virt="virtual"><scope>QuantLib::MCAmericanEngine</scope><name>pathPricer</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a6544a081b9eb8951b06c2518eaa915a9" prot="protected" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>pathPricer_</name></member>
      <member refid="class_quant_lib_1_1_m_c_american_engine_1affe689b23aad24e099ba10666e0bfd3c" prot="private" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>polynomialOrder_</name></member>
      <member refid="class_quant_lib_1_1_m_c_american_engine_1af251f84b18c59f4de745e10e5adcb8a6" prot="private" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>polynomialType_</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1ac49b014d6a8d095af1f78eb0df10282d" prot="protected" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>process_</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a7b8fba774172052f2e7ec1021290cf4d" prot="protected" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>requiredSamples_</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a5810cda4fb9f4e8db1928fd258c3408d" prot="protected" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>requiredTolerance_</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a5c793e8d12a221aec4c60f022d34eb81" prot="public" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>result_type</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1aada0200a7fb38c4bc94bbcb49464d35b" prot="public" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>sampleAccumulator</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a2ccf00acb22b66f92393934522e6b9c6" prot="protected" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>seed_</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a4ddbfc2637cb8a8d0dfa0f023d613bf0" prot="protected" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>seedCalibration_</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a6cf875fef1598284e3d61407b2e187c8" prot="public" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>stats_type</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a2e1e35599cb9ec91f3ffa8d49d869eff" prot="protected" virt="virtual"><scope>QuantLib::MCAmericanEngine</scope><name>timeGrid</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a46845271d81aebb9359cff86125469a5" prot="protected" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>timeSteps_</name></member>
      <member refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine_1a78c1a6a0b3b7021abe297aafcdddd22d" prot="protected" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>timeStepsPerYear_</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a1c903a9dd586755f55377b522d99ac16" prot="public" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>value</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a06e9db2fbd3d80e6358e8494f4b6b6ea" prot="public" virt="non-virtual"><scope>QuantLib::MCAmericanEngine</scope><name>valueWithSamples</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a11624b5e53889858d9189f85e27d653d" prot="public" virt="virtual"><scope>QuantLib::MCAmericanEngine</scope><name>~McSimulation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
