<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_mf_state_process" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::MfStateProcess</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_stochastic_process1_d" prot="public" virt="non-virtual">QuantLib::StochasticProcess1D</basecompoundref>
    <includes refid="mfstateprocess_8hpp" local="no">mfstateprocess.hpp</includes>
    <sectiondef kind="user-defined">
      <header>StochasticProcess interface</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_mf_state_process_1ae20e3e2ac6ac863f787074207270294d" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::MfStateProcess::reversion_</definition>
        <argsstring></argsstring>
        <name>reversion_</name>
        <qualifiedname>QuantLib::MfStateProcess::reversion_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/mfstateprocess.hpp" line="50" column="14" bodyfile="ql/processes/mfstateprocess.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_mf_state_process_1aa9b3c16be217a24be42ed59459f4bafe" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::MfStateProcess::reversionZero_</definition>
        <argsstring></argsstring>
        <name>reversionZero_</name>
        <qualifiedname>QuantLib::MfStateProcess::reversionZero_</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/mfstateprocess.hpp" line="51" column="14" bodyfile="ql/processes/mfstateprocess.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_mf_state_process_1a57094eab5dd9056a5412a246c2b0e0e0" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        <definition>const Array&amp; QuantLib::MfStateProcess::times_</definition>
        <argsstring></argsstring>
        <name>times_</name>
        <qualifiedname>QuantLib::MfStateProcess::times_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/mfstateprocess.hpp" line="52" column="21" bodyfile="ql/processes/mfstateprocess.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_mf_state_process_1affcb027bfb7e6802a87473ad2ac417c7" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        <definition>const Array&amp; QuantLib::MfStateProcess::vols_</definition>
        <argsstring></argsstring>
        <name>vols_</name>
        <qualifiedname>QuantLib::MfStateProcess::vols_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/mfstateprocess.hpp" line="53" column="21" bodyfile="ql/processes/mfstateprocess.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_mf_state_process_1af38f12d16806d0e50e27103e533cf5d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::MfStateProcess::x0</definition>
        <argsstring>() const override</argsstring>
        <name>x0</name>
        <qualifiedname>QuantLib::MfStateProcess::x0</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process1_d_1a4a0eee3b5c6592950bd6635177f76113">x0</reimplements>
        <briefdescription>
<para>returns the initial value of the state variable </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/mfstateprocess.hpp" line="42" column="14" bodyfile="ql/processes/mfstateprocess.cpp" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_mf_state_process_1a4b41163d9f494bc2b934010d6ec0e14a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::MfStateProcess::drift</definition>
        <argsstring>(Time t, Real x) const override</argsstring>
        <name>drift</name>
        <qualifiedname>QuantLib::MfStateProcess::drift</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process1_d_1ad27eced4c2abbe7d8da5951969158e2d">drift</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the drift part of the equation, i.e. <formula id="478">$ \mu(t, x_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/mfstateprocess.hpp" line="43" column="14" bodyfile="ql/processes/mfstateprocess.cpp" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_mf_state_process_1a1cfdec39160ed0fedfd3bf8bcaba2c76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::MfStateProcess::diffusion</definition>
        <argsstring>(Time t, Real x) const override</argsstring>
        <name>diffusion</name>
        <qualifiedname>QuantLib::MfStateProcess::diffusion</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process1_d_1a66bde34ae0158d64169e39655fdfcfc0">diffusion</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the diffusion part of the equation, i.e. <formula id="479">$ \sigma(t, x_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/mfstateprocess.hpp" line="44" column="14" bodyfile="ql/processes/mfstateprocess.cpp" bodystart="46" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_mf_state_process_1ab3ed082854bf752e27c92324f0fc5991" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::MfStateProcess::expectation</definition>
        <argsstring>(Time t0, Real x0, Time dt) const override</argsstring>
        <name>expectation</name>
        <qualifiedname>QuantLib::MfStateProcess::expectation</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process1_d_1a4543779731a4ce76e9dd85f3c81752e7">expectation</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the expectation <formula id="480">$ E(x_{t_0 + \Delta t} | x_{t_0} = x_0) $</formula> of the process after a time interval <formula id="471">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/mfstateprocess.hpp" line="45" column="14" bodyfile="ql/processes/mfstateprocess.cpp" bodystart="52" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_mf_state_process_1ae6b9fe2aeff6c1c5a27284171bd5afca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::MfStateProcess::stdDeviation</definition>
        <argsstring>(Time t0, Real x0, Time dt) const override</argsstring>
        <name>stdDeviation</name>
        <qualifiedname>QuantLib::MfStateProcess::stdDeviation</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process1_d_1a3290404acdbfcbbd6bbf8b035862e803">stdDeviation</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the standard deviation <formula id="481">$ S(x_{t_0 + \Delta t} | x_{t_0} = x_0) $</formula> of the process after a time interval <formula id="471">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/mfstateprocess.hpp" line="46" column="14" bodyfile="ql/processes/mfstateprocess.cpp" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_mf_state_process_1a54ac75e434e6df00768c5c7ea39b26f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::MfStateProcess::variance</definition>
        <argsstring>(Time t0, Real x0, Time dt) const override</argsstring>
        <name>variance</name>
        <qualifiedname>QuantLib::MfStateProcess::variance</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process1_d_1afec760c46c7f53d98cea9befd7087508">variance</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the variance <formula id="482">$ V(x_{t_0 + \Delta t} | x_{t_0} = x_0) $</formula> of the process after a time interval <formula id="471">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/mfstateprocess.hpp" line="47" column="14" bodyfile="ql/processes/mfstateprocess.cpp" bodystart="60" bodyend="98"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_mf_state_process_1ae1cbd9931a6a7947aca3856b3c871233" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MfStateProcess::MfStateProcess</definition>
        <argsstring>(Real reversion, const Array &amp;times, const Array &amp;vols)</argsstring>
        <name>MfStateProcess</name>
        <qualifiedname>QuantLib::MfStateProcess::MfStateProcess</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>reversion</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>times</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>vols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/mfstateprocess.hpp" line="38" column="9" bodyfile="ql/processes/mfstateprocess.cpp" bodystart="24" bodyend="40"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Markov functional state process class. </para>
    </briefdescription>
    <detaileddescription>
<para>This class describes the process governed by <formula id="463">\[ dx = \sigma(t) e^{at} dW(t) \]</formula> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::MfStateProcess</label>
        <link refid="class_quant_lib_1_1_mf_state_process"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="3">
        <label>QuantLib::StochasticProcess</label>
        <link refid="class_quant_lib_1_1_stochastic_process"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::StochasticProcess1D</label>
        <link refid="class_quant_lib_1_1_stochastic_process1_d"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::MfStateProcess</label>
        <link refid="class_quant_lib_1_1_mf_state_process"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="3">
        <label>QuantLib::StochasticProcess</label>
        <link refid="class_quant_lib_1_1_stochastic_process"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::StochasticProcess1D</label>
        <link refid="class_quant_lib_1_1_stochastic_process1_d"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/processes/mfstateprocess.hpp" line="36" column="5" bodyfile="ql/processes/mfstateprocess.hpp" bodystart="36" bodyend="54"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a303b2e3c9243b674ac1f145c304811b7" prot="public" virt="virtual"><scope>QuantLib::MfStateProcess</scope><name>apply</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::MfStateProcess</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_mf_state_process_1a1cfdec39160ed0fedfd3bf8bcaba2c76" prot="public" virt="virtual"><scope>QuantLib::MfStateProcess</scope><name>diffusion</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1aff0e6c615f076baf4393abe860794583" prot="protected" virt="non-virtual"><scope>QuantLib::MfStateProcess</scope><name>discretization_</name></member>
      <member refid="class_quant_lib_1_1_mf_state_process_1a4b41163d9f494bc2b934010d6ec0e14a" prot="public" virt="virtual"><scope>QuantLib::MfStateProcess</scope><name>drift</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a39605ea27c7ef3a7feafed4fafcc1f90" prot="public" virt="virtual"><scope>QuantLib::MfStateProcess</scope><name>evolve</name></member>
      <member refid="class_quant_lib_1_1_mf_state_process_1ab3ed082854bf752e27c92324f0fc5991" prot="public" virt="virtual"><scope>QuantLib::MfStateProcess</scope><name>expectation</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0346d38598fb9a5a1cd58024f05081aa" prot="public" virt="virtual"><scope>QuantLib::MfStateProcess</scope><name>factors</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::MfStateProcess</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_mf_state_process_1ae1cbd9931a6a7947aca3856b3c871233" prot="public" virt="non-virtual"><scope>QuantLib::MfStateProcess</scope><name>MfStateProcess</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::MfStateProcess</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::MfStateProcess</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::MfStateProcess</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::MfStateProcess</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::MfStateProcess</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::MfStateProcess</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::MfStateProcess</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::MfStateProcess</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::MfStateProcess</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::MfStateProcess</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::MfStateProcess</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_mf_state_process_1ae20e3e2ac6ac863f787074207270294d" prot="private" virt="non-virtual"><scope>QuantLib::MfStateProcess</scope><name>reversion_</name></member>
      <member refid="class_quant_lib_1_1_mf_state_process_1aa9b3c16be217a24be42ed59459f4bafe" prot="private" virt="non-virtual"><scope>QuantLib::MfStateProcess</scope><name>reversionZero_</name></member>
      <member refid="class_quant_lib_1_1_mf_state_process_1ae6b9fe2aeff6c1c5a27284171bd5afca" prot="public" virt="virtual"><scope>QuantLib::MfStateProcess</scope><name>stdDeviation</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a2dd24b794a6b320bc60ba9e1a87bf48e" prot="protected" virt="non-virtual"><scope>QuantLib::MfStateProcess</scope><name>StochasticProcess</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a957ee9776d6048835106ea29ea44927f" prot="protected" virt="non-virtual"><scope>QuantLib::MfStateProcess</scope><name>StochasticProcess</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a8fd2dc83f956da3dd008242ee5a5c926" prot="protected" virt="non-virtual"><scope>QuantLib::MfStateProcess</scope><name>StochasticProcess1D</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a0971f058bea9a93d2ced17c685576686" prot="protected" virt="non-virtual"><scope>QuantLib::MfStateProcess</scope><name>StochasticProcess1D</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a39c5f08a3779665f9185a558d2b8418d" prot="public" virt="virtual"><scope>QuantLib::MfStateProcess</scope><name>time</name></member>
      <member refid="class_quant_lib_1_1_mf_state_process_1a57094eab5dd9056a5412a246c2b0e0e0" prot="private" virt="non-virtual"><scope>QuantLib::MfStateProcess</scope><name>times_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::MfStateProcess</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::MfStateProcess</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0f22628658fd2dc702c13c354ef3244e" prot="public" virt="virtual"><scope>QuantLib::MfStateProcess</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_mf_state_process_1a54ac75e434e6df00768c5c7ea39b26f0" prot="public" virt="virtual"><scope>QuantLib::MfStateProcess</scope><name>variance</name></member>
      <member refid="class_quant_lib_1_1_mf_state_process_1affcb027bfb7e6802a87473ad2ac417c7" prot="private" virt="non-virtual"><scope>QuantLib::MfStateProcess</scope><name>vols_</name></member>
      <member refid="class_quant_lib_1_1_mf_state_process_1af38f12d16806d0e50e27103e533cf5d8" prot="public" virt="virtual"><scope>QuantLib::MfStateProcess</scope><name>x0</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::MfStateProcess</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::MfStateProcess</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0e2b6a14e675db5abd0ab8965ff7b2c3" prot="public" virt="non-virtual"><scope>QuantLib::MfStateProcess</scope><name>~StochasticProcess</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
