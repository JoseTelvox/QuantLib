<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_latent_model_1_1_factor_sampler" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::LatentModel::FactorSampler</compoundname>
    <includes refid="latentmodel_8hpp" local="no">latentmodel.hpp</includes>
    <templateparamlist>
      <param>
        <type>class USNG</type>
      </param>
      <param>
        <type>bool</type>
        <defval>true</defval>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_latent_model_1_1_factor_sampler_1acb9796337bb458ff966f1591798b0ed1" prot="public" static="no">
        <type><ref refid="struct_quant_lib_1_1_sample" kindref="compound">Sample</ref>&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt;</type>
        <definition>typedef Sample&lt;std::vector&lt;Real&gt; &gt; QuantLib::LatentModel&lt; copulaPolicyImpl &gt;::FactorSampler&lt; USNG, bool &gt;::sample_type</definition>
        <argsstring></argsstring>
        <name>sample_type</name>
        <qualifiedname>QuantLib::LatentModel::FactorSampler::sample_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/latentmodel.hpp" line="409" column="28" bodyfile="ql/experimental/math/latentmodel.hpp" bodystart="409" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_latent_model_1_1_factor_sampler_1ad1427cc9579d806368e277d6c8b84ecf" prot="private" static="no" mutable="no">
        <type>USNG</type>
        <definition>USNG QuantLib::LatentModel&lt; copulaPolicyImpl &gt;::FactorSampler&lt; USNG, bool &gt;::sequenceGen_</definition>
        <argsstring></argsstring>
        <name>sequenceGen_</name>
        <qualifiedname>QuantLib::LatentModel::FactorSampler::sequenceGen_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/latentmodel.hpp" line="432" column="18" bodyfile="ql/experimental/math/latentmodel.hpp" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_latent_model_1_1_factor_sampler_1a3f82981ce0adc20806dfb56ffd74375f" prot="private" static="no" mutable="yes">
        <type><ref refid="struct_quant_lib_1_1_sample" kindref="compound">sample_type</ref></type>
        <definition>sample_type QuantLib::LatentModel&lt; copulaPolicyImpl &gt;::FactorSampler&lt; USNG, bool &gt;::x_</definition>
        <argsstring></argsstring>
        <name>x_</name>
        <qualifiedname>QuantLib::LatentModel::FactorSampler::x_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/latentmodel.hpp" line="433" column="33" bodyfile="ql/experimental/math/latentmodel.hpp" bodystart="433" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_latent_model_1_1_factor_sampler_1a116262caec07602e7bd2328fa05dd030" prot="private" static="no" mutable="no">
        <type>const copulaType &amp;</type>
        <definition>const copulaType&amp; QuantLib::LatentModel&lt; copulaPolicyImpl &gt;::FactorSampler&lt; USNG, bool &gt;::copula_</definition>
        <argsstring></argsstring>
        <name>copula_</name>
        <qualifiedname>QuantLib::LatentModel::FactorSampler::copula_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/latentmodel.hpp" line="435" column="30" bodyfile="ql/experimental/math/latentmodel.hpp" bodystart="435" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_latent_model_1_1_factor_sampler_1a2f3b90be7c6b16e19723cdf832e3cbf4" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::LatentModel&lt; copulaPolicyImpl &gt;::FactorSampler&lt; USNG, bool &gt;::FactorSampler</definition>
        <argsstring>(const copulaType &amp;copula, BigNatural seed=0)</argsstring>
        <name>FactorSampler</name>
        <qualifiedname>QuantLib::LatentModel::FactorSampler::FactorSampler</qualifiedname>
        <param>
          <type>const copulaType &amp;</type>
          <declname>copula</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
          <declname>seed</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/latentmodel.hpp" line="410" column="22" bodyfile="ql/experimental/math/latentmodel.hpp" bodystart="410" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_latent_model_1_1_factor_sampler_1a19208da15b662a271de638a346236c7c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="struct_quant_lib_1_1_sample" kindref="compound">sample_type</ref> &amp;</type>
        <definition>const sample_type &amp; QuantLib::LatentModel&lt; copulaPolicyImpl &gt;::FactorSampler&lt; USNG, bool &gt;::nextSequence</definition>
        <argsstring>() const</argsstring>
        <name>nextSequence</name>
        <qualifiedname>QuantLib::LatentModel::FactorSampler::nextSequence</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a sample of the factor set <formula id="148">$ M_k\,Z_i$</formula>. This method has the vocation of being specialized at particular types of the copula with a more efficient inversion to generate the random variables modelled (e.g. Box-Muller for a gaussian). Here a default implementation is provided based directly on the inversion of the cumulative distribution from the copula. Care has to be taken in potential specializations that the generator algorithm is compatible with an eventual concurrence of the simulations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/latentmodel.hpp" line="425" column="31" bodyfile="ql/experimental/math/latentmodel.hpp" bodystart="425" bodyend="430"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Allows generation or random samples of the latent variable.</para>
<para>Generates samples of all the factors in the latent model according to the given copula as random sequence. The default implementation given uses the inversion in the copula policy (which must be present). USNG is expected to be a uniform sequence generator in the default implementation. </para>
    </detaileddescription>
    <location file="ql/experimental/math/latentmodel.hpp" line="407" column="9" bodyfile="ql/experimental/math/latentmodel.hpp" bodystart="407" bodyend="436"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_latent_model_1_1_factor_sampler_1a116262caec07602e7bd2328fa05dd030" prot="private" virt="non-virtual"><scope>QuantLib::LatentModel::FactorSampler</scope><name>copula_</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1_1_factor_sampler_1a2f3b90be7c6b16e19723cdf832e3cbf4" prot="public" virt="non-virtual"><scope>QuantLib::LatentModel::FactorSampler</scope><name>FactorSampler</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1_1_factor_sampler_1a19208da15b662a271de638a346236c7c" prot="public" virt="non-virtual"><scope>QuantLib::LatentModel::FactorSampler</scope><name>nextSequence</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1_1_factor_sampler_1acb9796337bb458ff966f1591798b0ed1" prot="public" virt="non-virtual"><scope>QuantLib::LatentModel::FactorSampler</scope><name>sample_type</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1_1_factor_sampler_1ad1427cc9579d806368e277d6c8b84ecf" prot="private" virt="non-virtual"><scope>QuantLib::LatentModel::FactorSampler</scope><name>sequenceGen_</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1_1_factor_sampler_1a3f82981ce0adc20806dfb56ffd74375f" prot="private" virt="non-virtual"><scope>QuantLib::LatentModel::FactorSampler</scope><name>x_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
