<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_joint_stochastic_process" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>QuantLib::JointStochasticProcess</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_stochastic_process" prot="public" virt="non-virtual">QuantLib::StochasticProcess</basecompoundref>
    <innerclass refid="struct_quant_lib_1_1_joint_stochastic_process_1_1_caching_key" prot="private">QuantLib::JointStochasticProcess::CachingKey</innerclass>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_joint_stochastic_process_1a5c1d7d9aaec7d5015014edb616b9023d" prot="private" static="no">
        <type>std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_stochastic_process" kindref="compound">StochasticProcess</ref> &gt; &gt;::const_iterator</type>
        <definition>typedef std::vector&lt;ext::shared_ptr&lt;StochasticProcess&gt;&gt;::const_iterator QuantLib::JointStochasticProcess::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <qualifiedname>QuantLib::JointStochasticProcess::const_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="76" column="13" bodyfile="ql/processes/jointstochasticprocess.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_joint_stochastic_process_1ad96b6f3cf5ffb4d00a6ec867b4cd7980" prot="private" static="no">
        <type>std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_stochastic_process" kindref="compound">StochasticProcess</ref> &gt; &gt;::iterator</type>
        <definition>typedef std::vector&lt;ext::shared_ptr&lt;StochasticProcess&gt;&gt;::iterator QuantLib::JointStochasticProcess::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <qualifiedname>QuantLib::JointStochasticProcess::iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="79" column="13" bodyfile="ql/processes/jointstochasticprocess.hpp" bodystart="79" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_joint_stochastic_process_1a97ae9f45d085433658ce571ef94475a7" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_stochastic_process" kindref="compound">StochasticProcess</ref> &gt; &gt;</type>
        <definition>std::vector&lt;ext::shared_ptr&lt;StochasticProcess&gt; &gt; QuantLib::JointStochasticProcess::l_</definition>
        <argsstring></argsstring>
        <name>l_</name>
        <qualifiedname>QuantLib::JointStochasticProcess::l_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="70" column="21" bodyfile="ql/processes/jointstochasticprocess.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_joint_stochastic_process_1ae24f3c10e23d9e1489266e72f3999ef6" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::JointStochasticProcess::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <qualifiedname>QuantLib::JointStochasticProcess::size_</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="81" column="14" bodyfile="ql/processes/jointstochasticprocess.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_joint_stochastic_process_1a814a29dab18675a97cffeb88283296c9" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::JointStochasticProcess::factors_</definition>
        <argsstring></argsstring>
        <name>factors_</name>
        <qualifiedname>QuantLib::JointStochasticProcess::factors_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="81" column="21" bodyfile="ql/processes/jointstochasticprocess.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_joint_stochastic_process_1a1b18c56e4d5e1d1b8befe09771ce86dc" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::JointStochasticProcess::modelFactors_</definition>
        <argsstring></argsstring>
        <name>modelFactors_</name>
        <qualifiedname>QuantLib::JointStochasticProcess::modelFactors_</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="81" column="30" bodyfile="ql/processes/jointstochasticprocess.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_joint_stochastic_process_1afbbf5d5c15c51a25fdda3e59964af70f" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt;</type>
        <definition>std::vector&lt;Size&gt; QuantLib::JointStochasticProcess::vsize_</definition>
        <argsstring></argsstring>
        <name>vsize_</name>
        <qualifiedname>QuantLib::JointStochasticProcess::vsize_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="82" column="21" bodyfile="ql/processes/jointstochasticprocess.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_joint_stochastic_process_1ae5d56db70bb3e460e691f2811579f544" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt;</type>
        <definition>std::vector&lt;Size&gt; QuantLib::JointStochasticProcess::vfactors_</definition>
        <argsstring></argsstring>
        <name>vfactors_</name>
        <qualifiedname>QuantLib::JointStochasticProcess::vfactors_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="82" column="28" bodyfile="ql/processes/jointstochasticprocess.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_joint_stochastic_process_1a276d6b1dda99b3619c5d7ce49293f22c" prot="private" static="no" mutable="yes">
        <type>std::map&lt; CachingKey, <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &gt;</type>
        <definition>std::map&lt;CachingKey, Matrix&gt; QuantLib::JointStochasticProcess::correlationCache_</definition>
        <argsstring></argsstring>
        <name>correlationCache_</name>
        <qualifiedname>QuantLib::JointStochasticProcess::correlationCache_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="96" column="26" bodyfile="ql/processes/jointstochasticprocess.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_joint_stochastic_process_1a6dcf2e066b9461e74cdbfb4835de56cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::JointStochasticProcess::JointStochasticProcess</definition>
        <argsstring>(std::vector&lt; ext::shared_ptr&lt; StochasticProcess &gt; &gt; l, Size factors=Null&lt; Size &gt;())</argsstring>
        <name>JointStochasticProcess</name>
        <qualifiedname>QuantLib::JointStochasticProcess::JointStochasticProcess</qualifiedname>
        <param>
          <type>std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_stochastic_process" kindref="compound">StochasticProcess</ref> &gt; &gt;</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>factors</declname>
          <defval><ref refid="class_quant_lib_1_1_null" kindref="compound">Null</ref>&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="36" column="9" bodyfile="ql/processes/jointstochasticprocess.cpp" bodystart="31" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_joint_stochastic_process_1a1d8d99426e58b52fcf752c20fdfad80b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::JointStochasticProcess::size</definition>
        <argsstring>() const override</argsstring>
        <name>size</name>
        <qualifiedname>QuantLib::JointStochasticProcess::size</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a92e9b468d781e9ceb566d6e546113540">size</reimplements>
        <briefdescription>
<para>returns the number of dimensions of the stochastic process </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="39" column="14" bodyfile="ql/processes/jointstochasticprocess.cpp" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_joint_stochastic_process_1af8a64b9ef4002be8bc0e8995469537bf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::JointStochasticProcess::factors</definition>
        <argsstring>() const override</argsstring>
        <name>factors</name>
        <qualifiedname>QuantLib::JointStochasticProcess::factors</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a0346d38598fb9a5a1cd58024f05081aa">factors</reimplements>
        <briefdescription>
<para>returns the number of independent factors of the process </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="40" column="14" bodyfile="ql/processes/jointstochasticprocess.cpp" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_joint_stochastic_process_1ac1c1ef035fe7822d8976cbdd1c57695b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::JointStochasticProcess::initialValues</definition>
        <argsstring>() const override</argsstring>
        <name>initialValues</name>
        <qualifiedname>QuantLib::JointStochasticProcess::initialValues</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a4277a74107d071252a2445d23c90b654">initialValues</reimplements>
        <briefdescription>
<para>returns the initial values of the state variables </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="42" column="15" bodyfile="ql/processes/jointstochasticprocess.cpp" bodystart="77" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_joint_stochastic_process_1afa6901d4e0dd6885bf6788319ab0401a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::JointStochasticProcess::drift</definition>
        <argsstring>(Time t, const Array &amp;x) const override</argsstring>
        <name>drift</name>
        <qualifiedname>QuantLib::JointStochasticProcess::drift</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a467056bfaa17a1ea3debd1dc21402bb8">drift</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the drift part of the equation, i.e., <formula id="468">$ \mu(t, \mathrm{x}_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="43" column="15" bodyfile="ql/processes/jointstochasticprocess.cpp" bodystart="91" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_joint_stochastic_process_1a6c0a6402e956b5115d709c35782188eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::JointStochasticProcess::expectation</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt) const override</argsstring>
        <name>expectation</name>
        <qualifiedname>QuantLib::JointStochasticProcess::expectation</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1af225d654ba08bc09bf2ecab7d787ca9b">expectation</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the expectation  <formula id="470">$ E(\mathrm{x}_{t_0 + \Delta t}
    | \mathrm{x}_{t_0} = \mathrm{x}_0) $</formula> of the process after a time interval <formula id="471">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="44" column="15" bodyfile="ql/processes/jointstochasticprocess.cpp" bodystart="106" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_joint_stochastic_process_1adf246baf5516f08ef89e3cc30f0280fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::JointStochasticProcess::diffusion</definition>
        <argsstring>(Time t, const Array &amp;x) const override</argsstring>
        <name>diffusion</name>
        <qualifiedname>QuantLib::JointStochasticProcess::diffusion</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a45df6a954a177df19d31de5a7f2bef35">diffusion</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the diffusion part of the equation, i.e. <formula id="469">$ \sigma(t, \mathrm{x}_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="46" column="16" bodyfile="ql/processes/jointstochasticprocess.cpp" bodystart="123" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_joint_stochastic_process_1ada8e26f4c8b2bfdfe97e7770cd74f7e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::JointStochasticProcess::covariance</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt) const override</argsstring>
        <name>covariance</name>
        <qualifiedname>QuantLib::JointStochasticProcess::covariance</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a3a92717719d8621148989905a132c5e1">covariance</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the covariance  <formula id="473">$ V(\mathrm{x}_{t_0 + \Delta t}
    | \mathrm{x}_{t_0} = \mathrm{x}_0) $</formula> of the process after a time interval <formula id="471">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="47" column="16" bodyfile="ql/processes/jointstochasticprocess.cpp" bodystart="130" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_joint_stochastic_process_1a32f0e032d20bfa5aed4f1ac6228be001" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::JointStochasticProcess::stdDeviation</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt) const override</argsstring>
        <name>stdDeviation</name>
        <qualifiedname>QuantLib::JointStochasticProcess::stdDeviation</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a47e9f5540b2ca9c32650dc81d051ca86">stdDeviation</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the standard deviation  <formula id="472">$ S(\mathrm{x}_{t_0 + \Delta t}
    | \mathrm{x}_{t_0} = \mathrm{x}_0) $</formula> of the process after a time interval <formula id="471">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="48" column="16" bodyfile="ql/processes/jointstochasticprocess.cpp" bodystart="164" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_joint_stochastic_process_1a00a5a20abdfa1759b929e8e70a9d6c8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::JointStochasticProcess::apply</definition>
        <argsstring>(const Array &amp;x0, const Array &amp;dx) const override</argsstring>
        <name>apply</name>
        <qualifiedname>QuantLib::JointStochasticProcess::apply</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1ae2e3d89d3595fcd73be5e6e7e195f3e7">apply</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>dx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>applies a change to the asset value. By default, it returns <formula id="477">$ \mathrm{x} + \Delta \mathrm{x} $</formula>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="50" column="15" bodyfile="ql/processes/jointstochasticprocess.cpp" bodystart="171" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_joint_stochastic_process_1a6f5a529d85d6fb17261fc94f4005a715" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::JointStochasticProcess::evolve</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt, const Array &amp;dw) const override</argsstring>
        <name>evolve</name>
        <qualifiedname>QuantLib::JointStochasticProcess::evolve</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a8d99a715b297d5b6543b1d303a6002c0">evolve</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>dw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the asset value after a time interval  <formula id="474">$ \Delta t
$</formula> according to the given discretization. By default, it returns    <formula id="475">\[E(\mathrm{x}_0,t_0,\Delta t) +
S(\mathrm{x}_0,t_0,\Delta t) \cdot \Delta \mathrm{w}
\]</formula> where <formula id="476">$ E $</formula> is the expectation and <formula id="290">$ S $</formula> the standard deviation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="51" column="15" bodyfile="ql/processes/jointstochasticprocess.cpp" bodystart="185" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_joint_stochastic_process_1ae064f23f63a6046c4f2bf20a761d8e05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void QuantLib::JointStochasticProcess::preEvolve</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt, const Array &amp;dw) const =0</argsstring>
        <name>preEvolve</name>
        <qualifiedname>QuantLib::JointStochasticProcess::preEvolve</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>dw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="53" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_joint_stochastic_process_1abe97955665d0aeb0c1c2996934f046c4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>virtual Array QuantLib::JointStochasticProcess::postEvolve</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt, const Array &amp;dw, const Array &amp;y0) const =0</argsstring>
        <name>postEvolve</name>
        <qualifiedname>QuantLib::JointStochasticProcess::postEvolve</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>dw</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>y0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="55" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_joint_stochastic_process_1a12515c91918a9709cfb346e3d4f5dbce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespace_quant_lib_1a05e8e288a4bdedfe5b4e16d8cec14f1c" kindref="member">DiscountFactor</ref></type>
        <definition>virtual DiscountFactor QuantLib::JointStochasticProcess::numeraire</definition>
        <argsstring>(Time t, const Array &amp;x) const =0</argsstring>
        <name>numeraire</name>
        <qualifiedname>QuantLib::JointStochasticProcess::numeraire</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="59" column="32"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_joint_stochastic_process_1aee5aeb94435ddb49c021b0912155d6de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool QuantLib::JointStochasticProcess::correlationIsStateDependent</definition>
        <argsstring>() const =0</argsstring>
        <name>correlationIsStateDependent</name>
        <qualifiedname>QuantLib::JointStochasticProcess::correlationIsStateDependent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="60" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_joint_stochastic_process_1a42dc877be222c76a609c506899111816" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>virtual Matrix QuantLib::JointStochasticProcess::crossModelCorrelation</definition>
        <argsstring>(Time t0, const Array &amp;x0) const =0</argsstring>
        <name>crossModelCorrelation</name>
        <qualifiedname>QuantLib::JointStochasticProcess::crossModelCorrelation</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="61" column="24"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_joint_stochastic_process_1acfd2fa9e713df036c9aae60e0f3cd678" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_stochastic_process" kindref="compound">StochasticProcess</ref> &gt; &gt; &amp;</type>
        <definition>const std::vector&lt; ext::shared_ptr&lt; StochasticProcess &gt; &gt; &amp; QuantLib::JointStochasticProcess::constituents</definition>
        <argsstring>() const</argsstring>
        <name>constituents</name>
        <qualifiedname>QuantLib::JointStochasticProcess::constituents</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="64" column="56" bodyfile="ql/processes/jointstochasticprocess.cpp" bodystart="294" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_joint_stochastic_process_1a5048db8f885b7656ae81d178c9f23f25" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::JointStochasticProcess::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <qualifiedname>QuantLib::JointStochasticProcess::update</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_observer_1a07905c55dca858470fcf4a1aea0005aa">update</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must be implemented in derived classes. An instance of Observer does not call this method directly: instead, it will be called by the observables the instance registered with when they need to notify any changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="66" column="14" bodyfile="ql/processes/jointstochasticprocess.cpp" bodystart="304" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_joint_stochastic_process_1a5aecb784a7d9fa20116e76089eeeecdf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        <definition>Time QuantLib::JointStochasticProcess::time</definition>
        <argsstring>(const Date &amp;date) const override</argsstring>
        <name>time</name>
        <qualifiedname>QuantLib::JointStochasticProcess::time</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a39c5f08a3779665f9185a558d2b8418d">time</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the time value corresponding to the given date in the reference system of the stochastic process.</para>
<para><simplesect kind="note"><para>As a number of processes might not need this functionality, a default implementation is given which raises an exception. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="67" column="14" bodyfile="ql/processes/jointstochasticprocess.cpp" bodystart="298" bodyend="302"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_joint_stochastic_process_1afa60a49331ea84db346b01cc36bed301" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::JointStochasticProcess::slice</definition>
        <argsstring>(const Array &amp;x, Size i) const</argsstring>
        <name>slice</name>
        <qualifiedname>QuantLib::JointStochasticProcess::slice</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/jointstochasticprocess.hpp" line="71" column="15" bodyfile="ql/processes/jointstochasticprocess.cpp" bodystart="68" bodyend="75"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::JointStochasticProcess</label>
        <link refid="class_quant_lib_1_1_joint_stochastic_process"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="3">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::StochasticProcess</label>
        <link refid="class_quant_lib_1_1_stochastic_process"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::JointStochasticProcess</label>
        <link refid="class_quant_lib_1_1_joint_stochastic_process"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="3">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::StochasticProcess</label>
        <link refid="class_quant_lib_1_1_stochastic_process"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/processes/jointstochasticprocess.hpp" line="34" column="5" bodyfile="ql/processes/jointstochasticprocess.hpp" bodystart="34" bodyend="97"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1a00a5a20abdfa1759b929e8e70a9d6c8b" prot="public" virt="virtual"><scope>QuantLib::JointStochasticProcess</scope><name>apply</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1a5c1d7d9aaec7d5015014edb616b9023d" prot="private" virt="non-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>const_iterator</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1acfd2fa9e713df036c9aae60e0f3cd678" prot="public" virt="non-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>constituents</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1a276d6b1dda99b3619c5d7ce49293f22c" prot="private" virt="non-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>correlationCache_</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1aee5aeb94435ddb49c021b0912155d6de" prot="public" virt="pure-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>correlationIsStateDependent</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1ada8e26f4c8b2bfdfe97e7770cd74f7e6" prot="public" virt="virtual"><scope>QuantLib::JointStochasticProcess</scope><name>covariance</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1a42dc877be222c76a609c506899111816" prot="public" virt="pure-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>crossModelCorrelation</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::JointStochasticProcess</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1adf246baf5516f08ef89e3cc30f0280fe" prot="public" virt="virtual"><scope>QuantLib::JointStochasticProcess</scope><name>diffusion</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a98cd541abbfd37f62d10d3ec2ed214be" prot="protected" virt="non-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>discretization_</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1afa6901d4e0dd6885bf6788319ab0401a" prot="public" virt="virtual"><scope>QuantLib::JointStochasticProcess</scope><name>drift</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1a6f5a529d85d6fb17261fc94f4005a715" prot="public" virt="virtual"><scope>QuantLib::JointStochasticProcess</scope><name>evolve</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1a6c0a6402e956b5115d709c35782188eb" prot="public" virt="virtual"><scope>QuantLib::JointStochasticProcess</scope><name>expectation</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1af8a64b9ef4002be8bc0e8995469537bf" prot="public" virt="virtual"><scope>QuantLib::JointStochasticProcess</scope><name>factors</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1a814a29dab18675a97cffeb88283296c9" prot="private" virt="non-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>factors_</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1ac1c1ef035fe7822d8976cbdd1c57695b" prot="public" virt="virtual"><scope>QuantLib::JointStochasticProcess</scope><name>initialValues</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1ad96b6f3cf5ffb4d00a6ec867b4cd7980" prot="private" virt="non-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1a6dcf2e066b9461e74cdbfb4835de56cf" prot="public" virt="non-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>JointStochasticProcess</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1a97ae9f45d085433658ce571ef94475a7" prot="protected" virt="non-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>l_</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1a1b18c56e4d5e1d1b8befe09771ce86dc" prot="private" virt="non-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>modelFactors_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1a12515c91918a9709cfb346e3d4f5dbce" prot="public" virt="pure-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>numeraire</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::JointStochasticProcess</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::JointStochasticProcess</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::JointStochasticProcess</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::JointStochasticProcess</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::JointStochasticProcess</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1abe97955665d0aeb0c1c2996934f046c4" prot="public" virt="pure-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>postEvolve</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1ae064f23f63a6046c4f2bf20a761d8e05" prot="public" virt="pure-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>preEvolve</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1a1d8d99426e58b52fcf752c20fdfad80b" prot="public" virt="virtual"><scope>QuantLib::JointStochasticProcess</scope><name>size</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1ae24f3c10e23d9e1489266e72f3999ef6" prot="private" virt="non-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>size_</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1afa60a49331ea84db346b01cc36bed301" prot="protected" virt="non-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>slice</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1a32f0e032d20bfa5aed4f1ac6228be001" prot="public" virt="virtual"><scope>QuantLib::JointStochasticProcess</scope><name>stdDeviation</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a2dd24b794a6b320bc60ba9e1a87bf48e" prot="protected" virt="non-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>StochasticProcess</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a957ee9776d6048835106ea29ea44927f" prot="protected" virt="non-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>StochasticProcess</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1a5aecb784a7d9fa20116e76089eeeecdf" prot="public" virt="virtual"><scope>QuantLib::JointStochasticProcess</scope><name>time</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1a5048db8f885b7656ae81d178c9f23f25" prot="public" virt="virtual"><scope>QuantLib::JointStochasticProcess</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1ae5d56db70bb3e460e691f2811579f544" prot="private" virt="non-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>vfactors_</name></member>
      <member refid="class_quant_lib_1_1_joint_stochastic_process_1afbbf5d5c15c51a25fdda3e59964af70f" prot="private" virt="non-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>vsize_</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::JointStochasticProcess</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::JointStochasticProcess</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0e2b6a14e675db5abd0ab8965ff7b2c3" prot="public" virt="non-virtual"><scope>QuantLib::JointStochasticProcess</scope><name>~StochasticProcess</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
