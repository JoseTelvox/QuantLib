<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_gauss_kronrod_adaptive" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::GaussKronrodAdaptive</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_integrator" prot="public" virt="non-virtual">QuantLib::Integrator</basecompoundref>
    <includes refid="kronrodintegral_8hpp" local="no">kronrodintegral.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_gauss_kronrod_adaptive_1ae027ec15f0694f3a3d0f8e7e0d8defa9" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::GaussKronrodAdaptive::GaussKronrodAdaptive</definition>
        <argsstring>(Real tolerance, Size maxFunctionEvaluations=Null&lt; Size &gt;())</argsstring>
        <name>GaussKronrodAdaptive</name>
        <qualifiedname>QuantLib::GaussKronrodAdaptive::GaussKronrodAdaptive</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxFunctionEvaluations</declname>
          <defval><ref refid="class_quant_lib_1_1_null" kindref="compound">Null</ref>&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/integrals/kronrodintegral.hpp" line="87" column="18" bodyfile="ql/math/integrals/kronrodintegral.cpp" bodystart="442" bodyend="448"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_gauss_kronrod_adaptive_1acb7b34f360db599b328a2af11efa7b08" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GaussKronrodAdaptive::integrate</definition>
        <argsstring>(const std::function&lt; Real(Real)&gt; &amp;f, Real a, Real b) const override</argsstring>
        <name>integrate</name>
        <qualifiedname>QuantLib::GaussKronrodAdaptive::integrate</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_integrator_1a6ec7c11d79c2d1553de8b8e5822c0402">integrate</reimplements>
        <param>
          <type>const std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(<ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/integrals/kronrodintegral.hpp" line="90" column="14" bodyfile="ql/math/integrals/kronrodintegral.cpp" bodystart="354" bodyend="358"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_gauss_kronrod_adaptive_1ae0e60499f94c21fa09fe47512e823def" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GaussKronrodAdaptive::integrateRecursively</definition>
        <argsstring>(const std::function&lt; Real(Real)&gt; &amp;f, Real a, Real b, Real tolerance) const</argsstring>
        <name>integrateRecursively</name>
        <qualifiedname>QuantLib::GaussKronrodAdaptive::integrateRecursively</qualifiedname>
        <param>
          <type>const std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(<ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/integrals/kronrodintegral.hpp" line="93" column="16" bodyfile="ql/math/integrals/kronrodintegral.cpp" bodystart="386" bodyend="439"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Integral of a 1-dimensional function using the Gauss-Kronrod methods. </para>
    </briefdescription>
    <detaileddescription>
<para>This class provide an adaptive integration procedure using 15 points Gauss-Kronrod integration rule. This is more robust in that it allows to integrate less smooth functions (though singular functions should be integrated using dedicated algorithms) but less efficient beacuse it does not reuse precedently computed points during computation steps.</para>
<para>References:</para>
<para>Gauss-Kronrod Integration <ulink url="http://mathcssun1.emporia.edu/~oneilcat/ExperimentApplet3/ExperimentApplet3.html">http://mathcssun1.emporia.edu/~oneilcat/ExperimentApplet3/ExperimentApplet3.html</ulink></para>
<para>NMS - Numerical Analysis Library <ulink url="http://www.math.iastate.edu/burkardt/f_src/nms/nms.html">http://www.math.iastate.edu/burkardt/f_src/nms/nms.html</ulink></para>
<para><xrefsect id="test_1_test000043"><xreftitle>Test</xreftitle><xrefdescription><para>the correctness of the result is tested by checking it against known good values. </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::GaussKronrodAdaptive</label>
        <link refid="class_quant_lib_1_1_gauss_kronrod_adaptive"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::Integrator</label>
        <link refid="class_quant_lib_1_1_integrator"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::GaussKronrodAdaptive</label>
        <link refid="class_quant_lib_1_1_gauss_kronrod_adaptive"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::Integrator</label>
        <link refid="class_quant_lib_1_1_integrator"/>
      </node>
    </collaborationgraph>
    <location file="ql/math/integrals/kronrodintegral.hpp" line="85" column="5" bodyfile="ql/math/integrals/kronrodintegral.hpp" bodystart="85" bodyend="97"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_integrator_1a780bcd96e38c5cbd5674abc2a82ed204" prot="public" virt="non-virtual"><scope>QuantLib::GaussKronrodAdaptive</scope><name>absoluteAccuracy</name></member>
      <member refid="class_quant_lib_1_1_integrator_1a457e00ab72b659e9e5455ab7ef695a21" prot="public" virt="non-virtual"><scope>QuantLib::GaussKronrodAdaptive</scope><name>absoluteError</name></member>
      <member refid="class_quant_lib_1_1_gauss_kronrod_adaptive_1ae027ec15f0694f3a3d0f8e7e0d8defa9" prot="public" virt="non-virtual"><scope>QuantLib::GaussKronrodAdaptive</scope><name>GaussKronrodAdaptive</name></member>
      <member refid="class_quant_lib_1_1_integrator_1a5ec592d87089c83ed43b13dc3b89e3d5" prot="protected" virt="non-virtual"><scope>QuantLib::GaussKronrodAdaptive</scope><name>increaseNumberOfEvaluations</name></member>
      <member refid="class_quant_lib_1_1_gauss_kronrod_adaptive_1acb7b34f360db599b328a2af11efa7b08" prot="protected" virt="virtual"><scope>QuantLib::GaussKronrodAdaptive</scope><name>integrate</name></member>
      <member refid="class_quant_lib_1_1_gauss_kronrod_adaptive_1ae0e60499f94c21fa09fe47512e823def" prot="private" virt="non-virtual"><scope>QuantLib::GaussKronrodAdaptive</scope><name>integrateRecursively</name></member>
      <member refid="class_quant_lib_1_1_integrator_1a3f9e803134fa741989ca1864bf32b1be" prot="public" virt="virtual"><scope>QuantLib::GaussKronrodAdaptive</scope><name>integrationSuccess</name></member>
      <member refid="class_quant_lib_1_1_integrator_1af1b1a6639727b55ddf35989fef19376e" prot="public" virt="non-virtual"><scope>QuantLib::GaussKronrodAdaptive</scope><name>Integrator</name></member>
      <member refid="class_quant_lib_1_1_integrator_1ae33afd264a1fd8c04da749f81fd0c5da" prot="public" virt="non-virtual"><scope>QuantLib::GaussKronrodAdaptive</scope><name>maxEvaluations</name></member>
      <member refid="class_quant_lib_1_1_integrator_1a90cc40e34213c30b55e96243ed3ed484" prot="public" virt="non-virtual"><scope>QuantLib::GaussKronrodAdaptive</scope><name>numberOfEvaluations</name></member>
      <member refid="class_quant_lib_1_1_integrator_1a6ced5a1acd0d08e620198f476b4717b9" prot="public" virt="non-virtual"><scope>QuantLib::GaussKronrodAdaptive</scope><name>operator()</name></member>
      <member refid="class_quant_lib_1_1_integrator_1a73631092f9449fe296b6ac5a35a33364" prot="public" virt="non-virtual"><scope>QuantLib::GaussKronrodAdaptive</scope><name>setAbsoluteAccuracy</name></member>
      <member refid="class_quant_lib_1_1_integrator_1a4aa6a7c87024c497457607db03d80bf8" prot="protected" virt="non-virtual"><scope>QuantLib::GaussKronrodAdaptive</scope><name>setAbsoluteError</name></member>
      <member refid="class_quant_lib_1_1_integrator_1aeec56c0f0fbfe04a7c15e4766d224d44" prot="public" virt="non-virtual"><scope>QuantLib::GaussKronrodAdaptive</scope><name>setMaxEvaluations</name></member>
      <member refid="class_quant_lib_1_1_integrator_1a53c93a2ae74e97752d1c8bd176c5cb7f" prot="protected" virt="non-virtual"><scope>QuantLib::GaussKronrodAdaptive</scope><name>setNumberOfEvaluations</name></member>
      <member refid="class_quant_lib_1_1_integrator_1a56e54bf50cc21384d1f96234d5a3332a" prot="public" virt="virtual"><scope>QuantLib::GaussKronrodAdaptive</scope><name>~Integrator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
