<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_isotropic_random_walk" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::IsotropicRandomWalk</compoundname>
    <includes refid="isotropicrandomwalk_8hpp" local="no">isotropicrandomwalk.hpp</includes>
    <templateparamlist>
      <param>
        <type>class <ref refid="class_quant_lib_1_1_distribution" kindref="compound">Distribution</ref></type>
      </param>
      <param>
        <type>class Engine</type>
      </param>
    </templateparamlist>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_isotropic_random_walk_1a24937139a505fb0fceffe0e676f2690e" prot="protected" static="no" mutable="no">
        <type>Engine</type>
        <definition>Engine QuantLib::IsotropicRandomWalk&lt; Distribution, Engine &gt;::engine_</definition>
        <argsstring></argsstring>
        <name>engine_</name>
        <qualifiedname>QuantLib::IsotropicRandomWalk::engine_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/isotropicrandomwalk.hpp" line="112" column="16" bodyfile="ql/experimental/math/isotropicrandomwalk.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_isotropic_random_walk_1ae22998d34e2bc9a4e23691920e7a05be" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_distribution" kindref="compound">Distribution</ref></type>
        <definition>Distribution QuantLib::IsotropicRandomWalk&lt; Distribution, Engine &gt;::distribution_</definition>
        <argsstring></argsstring>
        <name>distribution_</name>
        <qualifiedname>QuantLib::IsotropicRandomWalk::distribution_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/isotropicrandomwalk.hpp" line="113" column="22" bodyfile="ql/experimental/math/isotropicrandomwalk.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_isotropic_random_walk_1a58c56ea9d39eb1de0577701337581c92" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_mersenne_twister_uniform_rng" kindref="compound">MersenneTwisterUniformRng</ref></type>
        <definition>MersenneTwisterUniformRng QuantLib::IsotropicRandomWalk&lt; Distribution, Engine &gt;::rng_</definition>
        <argsstring></argsstring>
        <name>rng_</name>
        <qualifiedname>QuantLib::IsotropicRandomWalk::rng_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/isotropicrandomwalk.hpp" line="114" column="35" bodyfile="ql/experimental/math/isotropicrandomwalk.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_isotropic_random_walk_1a9fb72c6d6cee461101960074b75e41a3" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::IsotropicRandomWalk&lt; Distribution, Engine &gt;::weights_</definition>
        <argsstring></argsstring>
        <name>weights_</name>
        <qualifiedname>QuantLib::IsotropicRandomWalk::weights_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/isotropicrandomwalk.hpp" line="115" column="15" bodyfile="ql/experimental/math/isotropicrandomwalk.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_isotropic_random_walk_1a752155d2d7165a5098150cb59f9982e1" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::IsotropicRandomWalk&lt; Distribution, Engine &gt;::dim_</definition>
        <argsstring></argsstring>
        <name>dim_</name>
        <qualifiedname>QuantLib::IsotropicRandomWalk::dim_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/isotropicrandomwalk.hpp" line="116" column="14" bodyfile="ql/experimental/math/isotropicrandomwalk.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_isotropic_random_walk_1afc9b2c94d9daa84ca030dad2676e6d41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::IsotropicRandomWalk&lt; Distribution, Engine &gt;::IsotropicRandomWalk</definition>
        <argsstring>(Engine eng, Distribution dist, Size dim, Array weights=Array(), unsigned long seed=0)</argsstring>
        <name>IsotropicRandomWalk</name>
        <qualifiedname>QuantLib::IsotropicRandomWalk::IsotropicRandomWalk</qualifiedname>
        <param>
          <type>Engine</type>
          <declname>eng</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_distribution" kindref="compound">Distribution</ref></type>
          <declname>dist</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>dim</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
          <declname>weights</declname>
          <defval><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref>()</defval>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>seed</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/isotropicrandomwalk.hpp" line="46" column="9" bodyfile="ql/experimental/math/isotropicrandomwalk.hpp" bodystart="46" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_isotropic_random_walk_1ae6c042426d71d416cebd599647cf2547" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void QuantLib::IsotropicRandomWalk&lt; Distribution, Engine &gt;::nextReal</definition>
        <argsstring>(InputIterator first)</argsstring>
        <name>nextReal</name>
        <qualifiedname>QuantLib::IsotropicRandomWalk::nextReal</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/isotropicrandomwalk.hpp" line="58" column="14" bodyfile="ql/experimental/math/isotropicrandomwalk.hpp" bodystart="58" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_isotropic_random_walk_1ab360444fa072fcdd966dc81610b8bfa2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::IsotropicRandomWalk&lt; Distribution, Engine &gt;::setDimension</definition>
        <argsstring>(Size dim)</argsstring>
        <name>setDimension</name>
        <qualifiedname>QuantLib::IsotropicRandomWalk::setDimension</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/isotropicrandomwalk.hpp" line="79" column="14" bodyfile="ql/experimental/math/isotropicrandomwalk.hpp" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_isotropic_random_walk_1afde494df8f657072b2af2ec50df5f65e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::IsotropicRandomWalk&lt; Distribution, Engine &gt;::setDimension</definition>
        <argsstring>(Size dim, const Array &amp;weights)</argsstring>
        <name>setDimension</name>
        <qualifiedname>QuantLib::IsotropicRandomWalk::setDimension</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/isotropicrandomwalk.hpp" line="83" column="14" bodyfile="ql/experimental/math/isotropicrandomwalk.hpp" bodystart="83" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_isotropic_random_walk_1a7c70308b3097d1dd3c54a6127a0e38bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::IsotropicRandomWalk&lt; Distribution, Engine &gt;::setDimension</definition>
        <argsstring>(Size dim, const Array &amp;lowerBound, const Array &amp;upperBound)</argsstring>
        <name>setDimension</name>
        <qualifiedname>QuantLib::IsotropicRandomWalk::setDimension</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>lowerBound</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>upperBound</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The isotropic random walk will not adjust its draw to be within the lower and upper bounds, but if the limits are provided, they are used to rescale the sphere so as to make it to an ellipsoid, with different radius in different dimensions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/isotropicrandomwalk.hpp" line="93" column="14" bodyfile="ql/experimental/math/isotropicrandomwalk.hpp" bodystart="93" bodyend="110"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Isotropic random walk. </para>
    </briefdescription>
    <detaileddescription>
<para>A variate is used to draw from a random element of a probability distribution. The draw corresponds to the radius of a d-dimensional sphere. The position on the surface of the d-dimensional sphere is randomly chosen with all points on the surface having the same probability, i.e. all directions are isotropic and the step is randomly drawn from the given variate. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="4">
        <label>QuantLib::Array</label>
        <link refid="class_quant_lib_1_1_array"/>
      </node>
      <node id="2">
        <label>QuantLib::Distribution</label>
        <link refid="class_quant_lib_1_1_distribution"/>
      </node>
      <node id="1">
        <label>QuantLib::IsotropicRandomWalk&lt; Distribution, Engine &gt;</label>
        <link refid="class_quant_lib_1_1_isotropic_random_walk"/>
        <childnode refid="2" relation="usage">
          <edgelabel>distribution_</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>rng_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>weights_</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::MersenneTwisterUniformRng</label>
        <link refid="class_quant_lib_1_1_mersenne_twister_uniform_rng"/>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/math/isotropicrandomwalk.hpp" line="44" column="5" bodyfile="ql/experimental/math/isotropicrandomwalk.hpp" bodystart="44" bodyend="117"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_isotropic_random_walk_1a752155d2d7165a5098150cb59f9982e1" prot="protected" virt="non-virtual"><scope>QuantLib::IsotropicRandomWalk</scope><name>dim_</name></member>
      <member refid="class_quant_lib_1_1_isotropic_random_walk_1ae22998d34e2bc9a4e23691920e7a05be" prot="protected" virt="non-virtual"><scope>QuantLib::IsotropicRandomWalk</scope><name>distribution_</name></member>
      <member refid="class_quant_lib_1_1_isotropic_random_walk_1a24937139a505fb0fceffe0e676f2690e" prot="protected" virt="non-virtual"><scope>QuantLib::IsotropicRandomWalk</scope><name>engine_</name></member>
      <member refid="class_quant_lib_1_1_isotropic_random_walk_1afc9b2c94d9daa84ca030dad2676e6d41" prot="public" virt="non-virtual"><scope>QuantLib::IsotropicRandomWalk</scope><name>IsotropicRandomWalk</name></member>
      <member refid="class_quant_lib_1_1_isotropic_random_walk_1ae6c042426d71d416cebd599647cf2547" prot="public" virt="non-virtual"><scope>QuantLib::IsotropicRandomWalk</scope><name>nextReal</name></member>
      <member refid="class_quant_lib_1_1_isotropic_random_walk_1a58c56ea9d39eb1de0577701337581c92" prot="protected" virt="non-virtual"><scope>QuantLib::IsotropicRandomWalk</scope><name>rng_</name></member>
      <member refid="class_quant_lib_1_1_isotropic_random_walk_1ab360444fa072fcdd966dc81610b8bfa2" prot="public" virt="non-virtual"><scope>QuantLib::IsotropicRandomWalk</scope><name>setDimension</name></member>
      <member refid="class_quant_lib_1_1_isotropic_random_walk_1afde494df8f657072b2af2ec50df5f65e" prot="public" virt="non-virtual"><scope>QuantLib::IsotropicRandomWalk</scope><name>setDimension</name></member>
      <member refid="class_quant_lib_1_1_isotropic_random_walk_1a7c70308b3097d1dd3c54a6127a0e38bb" prot="public" virt="non-virtual"><scope>QuantLib::IsotropicRandomWalk</scope><name>setDimension</name></member>
      <member refid="class_quant_lib_1_1_isotropic_random_walk_1a9fb72c6d6cee461101960074b75e41a3" prot="protected" virt="non-virtual"><scope>QuantLib::IsotropicRandomWalk</scope><name>weights_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
