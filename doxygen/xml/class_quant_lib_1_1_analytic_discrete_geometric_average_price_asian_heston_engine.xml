<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_discrete_averaging_asian_option_1_1engine" prot="public" virt="non-virtual">QuantLib::DiscreteAveragingAsianOption::engine</basecompoundref>
    <includes refid="analytic__discr__geom__av__price__heston_8hpp" local="no">analytic_discr_geom_av_price_heston.hpp</includes>
    <innerclass refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1_1_integrand" prot="public">QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::Integrand</innerclass>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a15aa6d59113c231529a2aa65492333cb" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::v0_</definition>
        <argsstring></argsstring>
        <name>v0_</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::v0_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="82" column="14" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a6e9155b24eec05091e13fbbbb95a8ed6" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::rho_</definition>
        <argsstring></argsstring>
        <name>rho_</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::rho_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="82" column="18" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a86c0a70a20fd76593b89771e9693e417" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::kappa_</definition>
        <argsstring></argsstring>
        <name>kappa_</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::kappa_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="82" column="23" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a625627ce45ed5e64861ea72f0f1e502d" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::theta_</definition>
        <argsstring></argsstring>
        <name>theta_</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::theta_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="82" column="30" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a6e900fb31060e263c4ee4cd1468a7799" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::sigma_</definition>
        <argsstring></argsstring>
        <name>sigma_</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::sigma_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="82" column="37" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1ac1779f911ba2ef2f70698ea98afc119a" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::logS0_</definition>
        <argsstring></argsstring>
        <name>logS0_</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::logS0_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="82" column="44" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a832fddfa33086a5b506efffd43c199c3" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt;</type>
        <definition>Handle&lt;YieldTermStructure&gt; QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::dividendYield_</definition>
        <argsstring></argsstring>
        <name>dividendYield_</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::dividendYield_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="83" column="16" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a77694137abe8eec49707eedc5a280be6" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt;</type>
        <definition>Handle&lt;YieldTermStructure&gt; QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::riskFreeRate_</definition>
        <argsstring></argsstring>
        <name>riskFreeRate_</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::riskFreeRate_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="84" column="16" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1aca97cf5adef83a72678dedf4b0d5576a" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
        <definition>Handle&lt;Quote&gt; QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::s0_</definition>
        <argsstring></argsstring>
        <name>s0_</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::s0_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="85" column="16" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a621b8692aca0992832062e23942daac7" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_heston_process" kindref="compound">HestonProcess</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;HestonProcess&gt; QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::process_</definition>
        <argsstring></argsstring>
        <name>process_</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::process_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="87" column="25" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1af66a1885a41bb76b4b413b4075654650" prot="private" static="no" mutable="yes">
        <type>std::map&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref>, std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt;</type>
        <definition>std::map&lt;Size, std::complex&lt;Real&gt; &gt; QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::omegaTildeLookupTable_</definition>
        <argsstring></argsstring>
        <name>omegaTildeLookupTable_</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::omegaTildeLookupTable_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="90" column="26" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a660f2f74e567275f87cca04a491cc81a" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::xiRightLimit_</definition>
        <argsstring></argsstring>
        <name>xiRightLimit_</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::xiRightLimit_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="93" column="14" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1abed82bcde5b253fdf568223ebedd638c" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_gauss_legendre_integration" kindref="compound">GaussLegendreIntegration</ref></type>
        <definition>GaussLegendreIntegration QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::integrator_</definition>
        <argsstring></argsstring>
        <name>integrator_</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::integrator_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="96" column="34" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a2ae412f483fb67a35ebf91e2a34c564d" prot="private" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::tr_t_</definition>
        <argsstring></argsstring>
        <name>tr_t_</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::tr_t_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="104" column="22" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1ad30d11a47dc4520083480a18454c4bde" prot="private" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::Tr_T_</definition>
        <argsstring></argsstring>
        <name>Tr_T_</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::Tr_T_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="105" column="22" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1ae867f79506bf12aecfc60f6af84eae00" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::tkr_tk_</definition>
        <argsstring></argsstring>
        <name>tkr_tk_</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::tkr_tk_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="106" column="29" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" bodystart="106" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1ac837c233d17eab498908d59a4e90fe80" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</definition>
        <argsstring>(ext::shared_ptr&lt; HestonProcess &gt; process, Real xiRightLimit=100.0)</argsstring>
        <name>AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</qualifiedname>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_heston_process" kindref="compound">HestonProcess</ref> &gt;</type>
          <declname>process</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>xiRightLimit</declname>
          <defval>100.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="67" column="18" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.cpp" bodystart="60" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a071213a9facfcf1ed3e0cc4a2f784e01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::calculate</definition>
        <argsstring>() const override</argsstring>
        <name>calculate</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::calculate</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_pricing_engine_1ad2be11cff80d9792f0cc8231711fcb06">calculate</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="69" column="14" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.cpp" bodystart="202" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1af0f23262f03e66c53bd36121165b9516" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::complex&lt; Real &gt; QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::Phi</definition>
        <argsstring>(std::complex&lt; Real &gt; s, std::complex&lt; Real &gt; w, Time t, Time T, Size kStar, const std::vector&lt; Time &gt; &amp;t_n, const std::vector&lt; Time &gt; &amp;tauK) const</argsstring>
        <name>Phi</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::Phi</qualifiedname>
        <param>
          <type>std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>T</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>kStar</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt; &amp;</type>
          <declname>t_n</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt; &amp;</type>
          <declname>tauK</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="72" column="22" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.cpp" bodystart="174" bodyend="200"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a2331f8293576c496d1deb015bec65d4b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::complex&lt; Real &gt; QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::F</definition>
        <argsstring>(const std::complex&lt; Real &gt; &amp;z1, const std::complex&lt; Real &gt; &amp;z2, Time tau) const</argsstring>
        <name>F</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::F</qualifiedname>
        <param>
          <type>const std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>z1</declname>
        </param>
        <param>
          <type>const std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>z2</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>tau</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="109" column="22" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.cpp" bodystart="77" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a68d93baf8fe10b3eaaecc41192a59241" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::complex&lt; Real &gt; QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::F_tilde</definition>
        <argsstring>(const std::complex&lt; Real &gt; &amp;z1, const std::complex&lt; Real &gt; &amp;z2, Time tau) const</argsstring>
        <name>F_tilde</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::F_tilde</qualifiedname>
        <param>
          <type>const std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>z1</declname>
        </param>
        <param>
          <type>const std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>z2</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>tau</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="113" column="22" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.cpp" bodystart="89" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1af6185f3311decaa42ad38cb6647d0333" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::complex&lt; Real &gt; QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::z</definition>
        <argsstring>(const std::complex&lt; Real &gt; &amp;s, const std::complex&lt; Real &gt; &amp;w, Size k, Size n) const</argsstring>
        <name>z</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::z</qualifiedname>
        <param>
          <type>const std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="118" column="22" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.cpp" bodystart="97" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a371579993fa2bc643aefb2270dc9a425" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::complex&lt; Real &gt; QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::omega</definition>
        <argsstring>(const std::complex&lt; Real &gt; &amp;s, const std::complex&lt; Real &gt; &amp;w, Size k, Size kStar, Size n) const</argsstring>
        <name>omega</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::omega</qualifiedname>
        <param>
          <type>const std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>kStar</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="123" column="22" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.cpp" bodystart="107" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1af40bc47a7d0a0075a6f0b642a0e2593c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::complex&lt; Real &gt; QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::a</definition>
        <argsstring>(const std::complex&lt; Real &gt; &amp;s, const std::complex&lt; Real &gt; &amp;w, Time t, Time T, Size kStar, const std::vector&lt; Time &gt; &amp;t_n) const</argsstring>
        <name>a</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::a</qualifiedname>
        <param>
          <type>const std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>T</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>kStar</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt; &amp;</type>
          <declname>t_n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="128" column="22" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.cpp" bodystart="118" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1ae7a2b63b5586b232da120fe1b03b2a21" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::complex&lt; Real &gt; QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::omega_tilde</definition>
        <argsstring>(const std::complex&lt; Real &gt; &amp;s, const std::complex&lt; Real &gt; &amp;w, Size k, Size kStar, Size n, const std::vector&lt; Time &gt; &amp;tauK) const</argsstring>
        <name>omega_tilde</name>
        <qualifiedname>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine::omega_tilde</qualifiedname>
        <param>
          <type>const std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>kStar</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt; &amp;</type>
          <declname>tauK</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="134" column="22" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.cpp" bodystart="140" bodyend="172"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Pricing engine for European discrete geometric average price Asian. </para>
    </briefdescription>
    <detaileddescription>
<para>This class implements a discrete geometric average price Asian option with European exercise under the Heston stochastic vol model where spot and variance follow the processes</para>
<para><formula id="27">\[\begin{array}{rcl}
dS(t, S)  &amp;=&amp; (r-d) S dt +\sqrt{v} S dW_1 \\
dv(t, S)  &amp;=&amp; \kappa (\theta - v) dt + \sigma \sqrt{v} dW_2 \\
dW_1 dW_2 &amp;=&amp; \rho dt \\
\end{array}
\]</formula></para>
<para>References:</para>
<para>Implements the analytical solution for continuous geometric Asian options developed in &quot;A Recursive Method for Discretely Monitored
Geometric Asian Option Prices&quot;, B. Kim, J. Kim, J. Kim &amp; I. S. Wee, Bull. Korean Math. Soc. 53, 733-749 (2016)</para>
<para><xrefsect id="test_1_test000005"><xreftitle>Test</xreftitle><xrefdescription><para><itemizedlist>
<listitem><para>the correctness of the returned value is tested by reproducing results in Tables 1, 2 and 3 of the paper</para>
</listitem></itemizedlist>
</para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000005"><xreftitle>Todo</xreftitle><xrefdescription><para>handle seasoned options </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</label>
        <link refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::DiscreteAveragingAsianOption::engine</label>
        <link refid="class_quant_lib_1_1_discrete_averaging_asian_option_1_1engine"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::GenericEngine&lt; DiscreteAveragingAsianOption::arguments, DiscreteAveragingAsianOption::results &gt;</label>
        <link refid="class_quant_lib_1_1_generic_engine"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="6">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="4">
        <label>QuantLib::PricingEngine</label>
        <link refid="class_quant_lib_1_1_pricing_engine"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8">
        <label>OneAssetOption::arguments</label>
      </node>
      <node id="1">
        <label>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</label>
        <link refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::DiscreteAveragingAsianOption::arguments</label>
        <link refid="class_quant_lib_1_1_discrete_averaging_asian_option_1_1arguments"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::DiscreteAveragingAsianOption::engine</label>
        <link refid="class_quant_lib_1_1_discrete_averaging_asian_option_1_1engine"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::GenericEngine&lt; DiscreteAveragingAsianOption::arguments, DiscreteAveragingAsianOption::results &gt;</label>
        <link refid="class_quant_lib_1_1_generic_engine"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>arguments_</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="6">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="4">
        <label>QuantLib::PricingEngine</label>
        <link refid="class_quant_lib_1_1_pricing_engine"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" line="64" column="5" bodyfile="ql/experimental/asian/analytic_discr_geom_av_price_heston.hpp" bodystart="65" bodyend="138"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1af40bc47a7d0a0075a6f0b642a0e2593c" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>a</name></member>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1ac837c233d17eab498908d59a4e90fe80" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1ad2371cdbafa1989afb0e4733b1212c0d" prot="protected" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>arguments_</name></member>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a071213a9facfcf1ed3e0cc4a2f784e01" prot="public" virt="virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a832fddfa33086a5b506efffd43c199c3" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>dividendYield_</name></member>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a2331f8293576c496d1deb015bec65d4b" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>F</name></member>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a68d93baf8fe10b3eaaecc41192a59241" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>F_tilde</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1ad9c6e8dc65ca072d5e6e17640d74db3e" prot="public" virt="virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>getArguments</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1aea8272ef6e5e0ea1cffadfed0454fa88" prot="public" virt="virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>getResults</name></member>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1abed82bcde5b253fdf568223ebedd638c" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>integrator_</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a86c0a70a20fd76593b89771e9693e417" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>kappa_</name></member>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1ac1779f911ba2ef2f70698ea98afc119a" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>logS0_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a371579993fa2bc643aefb2270dc9a425" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>omega</name></member>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1ae7a2b63b5586b232da120fe1b03b2a21" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>omega_tilde</name></member>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1af66a1885a41bb76b4b413b4075654650" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>omegaTildeLookupTable_</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1af0f23262f03e66c53bd36121165b9516" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>Phi</name></member>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a621b8692aca0992832062e23942daac7" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>process_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1a81c5390ba1e713e57ca87d5f841d37f2" prot="public" virt="virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>reset</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1a41281f2ea4990dbce90be1f9f2e231f6" prot="protected" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>results_</name></member>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a6e9155b24eec05091e13fbbbb95a8ed6" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>rho_</name></member>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a77694137abe8eec49707eedc5a280be6" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>riskFreeRate_</name></member>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1aca97cf5adef83a72678dedf4b0d5576a" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>s0_</name></member>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a6e900fb31060e263c4ee4cd1468a7799" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>sigma_</name></member>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a625627ce45ed5e64861ea72f0f1e502d" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>theta_</name></member>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1ae867f79506bf12aecfc60f6af84eae00" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>tkr_tk_</name></member>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1ad30d11a47dc4520083480a18454c4bde" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>Tr_T_</name></member>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a2ae412f483fb67a35ebf91e2a34c564d" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>tr_t_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1aaf5ef54d9e1abf8b1b50b48804edf3dc" prot="public" virt="virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a15aa6d59113c231529a2aa65492333cb" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>v0_</name></member>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1a660f2f74e567275f87cca04a491cc81a" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>xiRightLimit_</name></member>
      <member refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine_1af6185f3311decaa42ad38cb6647d0333" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>z</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_pricing_engine_1a66b279a54578cd7e60d402e5147eb526" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</scope><name>~PricingEngine</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
