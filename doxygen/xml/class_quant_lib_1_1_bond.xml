<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_bond" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::Bond</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_instrument" prot="public" virt="non-virtual">QuantLib::Instrument</basecompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_amortizing_cms_rate_bond" prot="public" virt="non-virtual">QuantLib::AmortizingCmsRateBond</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_amortizing_fixed_rate_bond" prot="public" virt="non-virtual">QuantLib::AmortizingFixedRateBond</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_amortizing_floating_rate_bond" prot="public" virt="non-virtual">QuantLib::AmortizingFloatingRateBond</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_c_p_i_bond" prot="public" virt="non-virtual">QuantLib::CPIBond</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_callable_bond" prot="public" virt="non-virtual">QuantLib::CallableBond</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_cat_bond" prot="public" virt="non-virtual">QuantLib::CatBond</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_cms_rate_bond" prot="public" virt="non-virtual">QuantLib::CmsRateBond</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_convertible_bond" prot="public" virt="non-virtual">QuantLib::ConvertibleBond</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_fixed_rate_bond" prot="public" virt="non-virtual">QuantLib::FixedRateBond</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_floating_rate_bond" prot="public" virt="non-virtual">QuantLib::FloatingRateBond</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_zero_coupon_bond" prot="public" virt="non-virtual">QuantLib::ZeroCouponBond</derivedcompoundref>
    <includes refid="bond_8hpp" local="no">bond.hpp</includes>
    <innerclass refid="class_quant_lib_1_1_bond_1_1arguments" prot="public">QuantLib::Bond::arguments</innerclass>
    <innerclass refid="class_quant_lib_1_1_bond_1_1engine" prot="public">QuantLib::Bond::engine</innerclass>
    <innerclass refid="class_quant_lib_1_1_bond_1_1_price" prot="public">QuantLib::Bond::Price</innerclass>
    <innerclass refid="class_quant_lib_1_1_bond_1_1results" prot="public">QuantLib::Bond::results</innerclass>
    <sectiondef kind="user-defined">
      <header>Calculations</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_bond_1a73653e4daab6f79d4e4b43959805dcf5" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref></type>
        <definition>Natural QuantLib::Bond::settlementDays_</definition>
        <argsstring></argsstring>
        <name>settlementDays_</name>
        <qualifiedname>QuantLib::Bond::settlementDays_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="298" column="17" bodyfile="ql/instruments/bond.hpp" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_bond_1abdb0f073ef7ab0446b2fcc537b338a2d" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref></type>
        <definition>Calendar QuantLib::Bond::calendar_</definition>
        <argsstring></argsstring>
        <name>calendar_</name>
        <qualifiedname>QuantLib::Bond::calendar_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="299" column="18" bodyfile="ql/instruments/bond.hpp" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_bond_1ad305a0db329332dfd086767111930dee" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt;</type>
        <definition>std::vector&lt;Date&gt; QuantLib::Bond::notionalSchedule_</definition>
        <argsstring></argsstring>
        <name>notionalSchedule_</name>
        <qualifiedname>QuantLib::Bond::notionalSchedule_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="300" column="21" bodyfile="ql/instruments/bond.hpp" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_bond_1a01aa695599f96e8bca2b44e78fd1f3cc" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::Bond::notionals_</definition>
        <argsstring></argsstring>
        <name>notionals_</name>
        <qualifiedname>QuantLib::Bond::notionals_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="301" column="21" bodyfile="ql/instruments/bond.hpp" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_bond_1a3b67d66ca4ca84900877a17c14a88fb7" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref></type>
        <definition>Leg QuantLib::Bond::cashflows_</definition>
        <argsstring></argsstring>
        <name>cashflows_</name>
        <qualifiedname>QuantLib::Bond::cashflows_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="302" column="13" bodyfile="ql/instruments/bond.hpp" bodystart="302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_bond_1aa51ead614a160da5dedaf862db8ef84e" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref></type>
        <definition>Leg QuantLib::Bond::redemptions_</definition>
        <argsstring></argsstring>
        <name>redemptions_</name>
        <qualifiedname>QuantLib::Bond::redemptions_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="303" column="13" bodyfile="ql/instruments/bond.hpp" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_bond_1a826583ebd14ee9d90e1e2864897da034" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::Bond::maturityDate_</definition>
        <argsstring></argsstring>
        <name>maturityDate_</name>
        <qualifiedname>QuantLib::Bond::maturityDate_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="305" column="14" bodyfile="ql/instruments/bond.hpp" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_bond_1a6e5b7c316a846a8f60fdfa3eed11548d" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::Bond::issueDate_</definition>
        <argsstring></argsstring>
        <name>issueDate_</name>
        <qualifiedname>QuantLib::Bond::issueDate_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="305" column="28" bodyfile="ql/instruments/bond.hpp" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_bond_1a371196d9d28a301f517ebf7126db45a2" prot="protected" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Bond::settlementValue_</definition>
        <argsstring></argsstring>
        <name>settlementValue_</name>
        <qualifiedname>QuantLib::Bond::settlementValue_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="306" column="22" bodyfile="ql/instruments/bond.hpp" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1a3eb154449d554f9b633917fac47ec23a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Bond::cleanPrice</definition>
        <argsstring>() const</argsstring>
        <name>cleanPrice</name>
        <qualifiedname>QuantLib::Bond::cleanPrice</qualifiedname>
        <briefdescription>
<para>theoretical clean price </para>
        </briefdescription>
        <detaileddescription>
<para>The default bond settlement is used for calculation.</para>
<para><simplesect kind="warning"><para>the theoretical price calculated from a flat term structure might differ slightly from the price calculated from the corresponding yield by means of the other overload of this function. If the price from a constant yield is desired, it is advisable to use such other overload. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="148" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="175" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1a3b148aba5b10f3d58f5d52ea16f01dda" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Bond::dirtyPrice</definition>
        <argsstring>() const</argsstring>
        <name>dirtyPrice</name>
        <qualifiedname>QuantLib::Bond::dirtyPrice</qualifiedname>
        <briefdescription>
<para>theoretical dirty price </para>
        </briefdescription>
        <detaileddescription>
<para>The default bond settlement is used for calculation.</para>
<para><simplesect kind="warning"><para>the theoretical price calculated from a flat term structure might differ slightly from the price calculated from the corresponding yield by means of the other overload of this function. If the price from a constant yield is desired, it is advisable to use such other overload. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="160" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="179" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1a5a19201439ca249d30573e6c0c759da2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Bond::settlementValue</definition>
        <argsstring>() const</argsstring>
        <name>settlementValue</name>
        <qualifiedname>QuantLib::Bond::settlementValue</qualifiedname>
        <briefdescription>
<para>theoretical settlement value </para>
        </briefdescription>
        <detaileddescription>
<para>The default bond settlement date is used for calculation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="164" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="187" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1aa74fece7368a248c713a554fb1942076" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::Bond::yield</definition>
        <argsstring>(const DayCounter &amp;dc, Compounding comp, Frequency freq, Real accuracy=1.0e-8, Size maxEvaluations=100, Real guess=0.05, Bond::Price::Type priceType=Bond::Price::Clean) const</argsstring>
        <name>yield</name>
        <qualifiedname>QuantLib::Bond::yield</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dc</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>freq</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.0e-8</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxEvaluations</declname>
          <defval>100</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>guess</declname>
          <defval>0.05</defval>
        </param>
        <param>
          <type>Bond::Price::Type</type>
          <declname>priceType</declname>
          <defval>Bond::Price::Clean</defval>
        </param>
        <briefdescription>
<para>theoretical bond yield </para>
        </briefdescription>
        <detaileddescription>
<para>The default bond settlement and theoretical price are used for calculation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="170" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="199" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1a2854e074dfdca6312fcb284457821df5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Bond::cleanPrice</definition>
        <argsstring>(Rate yield, const DayCounter &amp;dc, Compounding comp, Frequency freq, Date settlementDate=Date()) const</argsstring>
        <name>cleanPrice</name>
        <qualifiedname>QuantLib::Bond::cleanPrice</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>yield</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dc</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>freq</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>clean price given a yield and settlement date </para>
        </briefdescription>
        <detaileddescription>
<para>The default bond settlement is used if no date is given. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="180" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="218" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1ad6c18f3aea7e889e0e498c611445fbeb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Bond::dirtyPrice</definition>
        <argsstring>(Rate yield, const DayCounter &amp;dc, Compounding comp, Frequency freq, Date settlementDate=Date()) const</argsstring>
        <name>dirtyPrice</name>
        <qualifiedname>QuantLib::Bond::dirtyPrice</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>yield</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dc</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>freq</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>dirty price given a yield and settlement date </para>
        </briefdescription>
        <detaileddescription>
<para>The default bond settlement is used if no date is given. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="188" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="226" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1aae897f34447839310879a45f4e69b683" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Bond::settlementValue</definition>
        <argsstring>(Real cleanPrice) const</argsstring>
        <name>settlementValue</name>
        <qualifiedname>QuantLib::Bond::settlementValue</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>cleanPrice</declname>
        </param>
        <briefdescription>
<para>settlement value as a function of the clean price </para>
        </briefdescription>
        <detaileddescription>
<para>The default bond settlement date is used for calculation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="196" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1afa69fb56ae9a24d725adc2c825982357" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::Bond::yield</definition>
        <argsstring>(Real price, const DayCounter &amp;dc, Compounding comp, Frequency freq, Date settlementDate=Date(), Real accuracy=1.0e-8, Size maxEvaluations=100, Real guess=0.05, Bond::Price::Type priceType=Bond::Price::Clean) const</argsstring>
        <name>yield</name>
        <qualifiedname>QuantLib::Bond::yield</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>price</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dc</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>freq</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.0e-8</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxEvaluations</declname>
          <defval>100</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>guess</declname>
          <defval>0.05</defval>
        </param>
        <param>
          <type>Bond::Price::Type</type>
          <declname>priceType</declname>
          <defval>Bond::Price::Clean</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000102"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use the overload taking a <ref refid="class_quant_lib_1_1_bond_1_1_price" kindref="compound">Bond::Price</ref> argument instead. Deprecated in version 1.34. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="202" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="239" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1a3eba4b514302bbe824899397100c50e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::Bond::yield</definition>
        <argsstring>(Bond::Price price, const DayCounter &amp;dc, Compounding comp, Frequency freq, Date settlementDate=Date(), Real accuracy=1.0e-8, Size maxEvaluations=100, Real guess=0.05) const</argsstring>
        <name>yield</name>
        <qualifiedname>QuantLib::Bond::yield</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_bond_1_1_price" kindref="compound">Bond::Price</ref></type>
          <declname>price</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dc</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>freq</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>settlementDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.0e-8</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxEvaluations</declname>
          <defval>100</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>guess</declname>
          <defval>0.05</defval>
        </param>
        <briefdescription>
<para>yield given a price and settlement date </para>
        </briefdescription>
        <detaileddescription>
<para>The default bond settlement is used if no date is given. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="214" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="251" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1aebd407a08c0adfaa3bda7c1c3bc5686b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Bond::accruedAmount</definition>
        <argsstring>(Date d=Date()) const</argsstring>
        <name>accruedAmount</name>
        <qualifiedname>QuantLib::Bond::accruedAmount</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_b_t_p_1ad01a5278d8600e7dc2bd724bdd5d36f4">accruedAmount</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_c_c_t_e_u_1a58ec7f1b6ab798ba141047914297a7f7">accruedAmount</reimplementedby>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>d</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>accrued amount at a given date </para>
        </briefdescription>
        <detaileddescription>
<para>The default bond settlement is used if no date is given. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="225" column="22" bodyfile="ql/instruments/bond.cpp" bodystart="268" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1a0e3407e3f2f80bceeb806b446cdd0ee0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::Bond::nextCouponRate</definition>
        <argsstring>(Date d=Date()) const</argsstring>
        <name>nextCouponRate</name>
        <qualifiedname>QuantLib::Bond::nextCouponRate</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>d</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Expected next coupon: depending on (the bond and) the given date the coupon can be historic, deterministic or expected in a stochastic sense. When the bond settlement date is used the coupon is the already-fixed not-yet-paid one.</para>
<para>The current bond settlement is used if no date is given. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="235" column="22" bodyfile="ql/instruments/bond.cpp" bodystart="276" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1a0c8d6afffecbe48a2f6e1f0af6df6869" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::Bond::previousCouponRate</definition>
        <argsstring>(Date d=Date()) const</argsstring>
        <name>previousCouponRate</name>
        <qualifiedname>QuantLib::Bond::previousCouponRate</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>d</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>Previous coupon already paid at a given date. </para>
        </briefdescription>
        <detaileddescription>
<para>Expected previous coupon: depending on (the bond and) the given date the coupon can be historic, deterministic or expected in a stochastic sense. When the bond settlement date is used the coupon is the last paid one.</para>
<para>The current bond settlement is used if no date is given. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="245" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="280" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1aa9853f3e8b7f807b31e2575929d87552" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::Bond::nextCashFlowDate</definition>
        <argsstring>(Date d=Date()) const</argsstring>
        <name>nextCashFlowDate</name>
        <qualifiedname>QuantLib::Bond::nextCashFlowDate</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>d</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="247" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="284" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1a9ff7fa3a8248acae7c9c30591ec0ee28" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::Bond::previousCashFlowDate</definition>
        <argsstring>(Date d=Date()) const</argsstring>
        <name>previousCashFlowDate</name>
        <qualifiedname>QuantLib::Bond::previousCashFlowDate</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>d</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="248" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="288" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1aa86e41b660226fe375a5f0cc32e23f88" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::Bond::setupExpired</definition>
        <argsstring>() const override</argsstring>
        <name>setupExpired</name>
        <qualifiedname>QuantLib::Bond::setupExpired</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_instrument_1a73d90597fcd3ff52a8aed674393ab574">setupExpired</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must leave the instrument in a consistent state when the expiration condition is met. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="251" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="292" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1ad87ed8ba111686fd6b8277e90f9209ec" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::Bond::setupArguments</definition>
        <argsstring>(PricingEngine::arguments *) const override</argsstring>
        <name>setupArguments</name>
        <qualifiedname>QuantLib::Bond::setupArguments</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_instrument_1af7344eebc48a1a361386e5c5a90a8fcc">setupArguments</reimplements>
        <reimplementedby refid="class_quant_lib_1_1_callable_bond_1ad5336b61b2ca3ef28904d26422e2395b">setupArguments</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_cat_bond_1a99e8c971565a49e48f122e43f91b20af">setupArguments</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_convertible_bond_1abc93d5e75bd54184ab249893e8969505">setupArguments</reimplementedby>
        <param>
          <type><ref refid="class_quant_lib_1_1_pricing_engine_1_1arguments" kindref="compound">PricingEngine::arguments</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When a derived argument structure is defined for an instrument, this method should be overridden to fill it. This is mandatory in case a pricing engine is used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="252" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="297" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1a4d7a6493fade5f4f1f88bdd2b56c7138" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::Bond::fetchResults</definition>
        <argsstring>(const PricingEngine::results *) const override</argsstring>
        <name>fetchResults</name>
        <qualifiedname>QuantLib::Bond::fetchResults</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_instrument_1aebe809131db2941325d037c031bbf41b">fetchResults</reimplements>
        <reimplementedby refid="class_quant_lib_1_1_cat_bond_1a5a05dbed5849460fa4f41326161490aa">fetchResults</reimplementedby>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_pricing_engine_1_1results" kindref="compound">PricingEngine::results</ref> *</type>
          <defname>r</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When a derived result structure is defined for an instrument, this method should be overridden to read from it. This is mandatory in case a pricing engine is used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="253" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="306" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1a0c477dc3fa147e8a15c6a8a3e79e0740" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::Bond::addRedemptionsToCashflows</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;redemptions=std::vector&lt; Real &gt;())</argsstring>
        <name>addRedemptionsToCashflows</name>
        <qualifiedname>QuantLib::Bond::addRedemptionsToCashflows</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>redemptions</declname>
          <defval>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method can be called by derived classes in order to build redemption payments from the existing cash flows. It must be called after setting up the cashflows_ vector and will fill the notionalSchedule_, notionals_, and redemptions_ data members.</para>
<para>If given, the elements of the redemptions vector will multiply the amount of the redemption cash flow. The elements will be taken in base 100, i.e., a redemption equal to 100 does not modify the amount.</para>
<para><simplesect kind="pre"><para>The cashflows_ vector must contain at least one coupon and must be sorted by date. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="269" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="316" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1aa01b6ab924b0c7417f4f6e5e0d446058" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::Bond::setSingleRedemption</definition>
        <argsstring>(Real notional, Real redemption, const Date &amp;date)</argsstring>
        <name>setSingleRedemption</name>
        <qualifiedname>QuantLib::Bond::setSingleRedemption</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>notional</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>redemption</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method can be called by derived classes in order to build a bond with a single redemption payment. It will fill the notionalSchedule_, notionals_, and redemptions_ data members. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="277" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="343" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1af8923cdcd5b8357fb8af32d8b989c55d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::Bond::setSingleRedemption</definition>
        <argsstring>(Real notional, const ext::shared_ptr&lt; CashFlow &gt; &amp;redemption)</argsstring>
        <name>setSingleRedemption</name>
        <qualifiedname>QuantLib::Bond::setSingleRedemption</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>notional</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_cash_flow" kindref="compound">CashFlow</ref> &gt; &amp;</type>
          <declname>redemption</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method can be called by derived classes in order to build a bond with a single redemption payment. It will fill the notionalSchedule_, notionals_, and redemptions_ data members. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="286" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="352" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1ae5b077356ca91d3eea2022dadeb03ee0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::Bond::calculateNotionalsFromCashflows</definition>
        <argsstring>()</argsstring>
        <name>calculateNotionalsFromCashflows</name>
        <qualifiedname>QuantLib::Bond::calculateNotionalsFromCashflows</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>used internally to collect notional information from the coupons. It should not be called by derived classes, unless they already provide redemption cash flows (in which case they must set up the redemptions_ data member independently). It will fill the notionalSchedule_ and notionals_ data members. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="296" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="375" bodyend="408"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Instrument interface</header>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1a29e653651790da335c5000fed98f9426" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool QuantLib::Bond::isExpired</definition>
        <argsstring>() const override</argsstring>
        <name>isExpired</name>
        <qualifiedname>QuantLib::Bond::isExpired</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_instrument_1a121a2a929b179900744a58272d46aefe">isExpired</reimplements>
        <briefdescription>
<para>returns whether the instrument might have value greater than zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="106" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="104" bodyend="111"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Observable interface</header>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1a7ec2560eadfd56ca7e185b9bb91b99e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::Bond::deepUpdate</definition>
        <argsstring>() override</argsstring>
        <name>deepUpdate</name>
        <qualifiedname>QuantLib::Bond::deepUpdate</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183">deepUpdate</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method allows to explicitly update the instance itself and nested observers. If notifications are disabled a call to this method ensures an update of such nested observers. It should be implemented in derived classes whenever applicable </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="110" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="368" bodyend="373"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Inspectors</header>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1aae053246ae68e2593ea1640af7449c80" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref></type>
        <definition>Natural QuantLib::Bond::settlementDays</definition>
        <argsstring>() const</argsstring>
        <name>settlementDays</name>
        <qualifiedname>QuantLib::Bond::settlementDays</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="114" column="17" bodyfile="ql/instruments/bond.hpp" bodystart="332" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1aa3050d7de30989970dd3c6cd445b53dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;</type>
        <definition>const Calendar &amp; QuantLib::Bond::calendar</definition>
        <argsstring>() const</argsstring>
        <name>calendar</name>
        <qualifiedname>QuantLib::Bond::calendar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="115" column="24" bodyfile="ql/instruments/bond.hpp" bodystart="336" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1adda5ca64da20be9a916a0a96f8c26ac3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Real &gt; &amp; QuantLib::Bond::notionals</definition>
        <argsstring>() const</argsstring>
        <name>notionals</name>
        <qualifiedname>QuantLib::Bond::notionals</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="117" column="27" bodyfile="ql/instruments/bond.hpp" bodystart="340" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1a671a3d7c8c0b1db1bf85cba7a1e9473d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Bond::notional</definition>
        <argsstring>(Date d=Date()) const</argsstring>
        <name>notional</name>
        <qualifiedname>QuantLib::Bond::notional</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>d</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="118" column="22" bodyfile="ql/instruments/bond.cpp" bodystart="113" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1a904f66ebb3eba4df33ba30ec37770bb0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
        <definition>const Leg &amp; QuantLib::Bond::cashflows</definition>
        <argsstring>() const</argsstring>
        <name>cashflows</name>
        <qualifiedname>QuantLib::Bond::cashflows</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>returns all the cashflows, including the redemptions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="121" column="19" bodyfile="ql/instruments/bond.hpp" bodystart="344" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1a4e0a0d7c5bb9a85f13752ee69dc4332c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
        <definition>const Leg &amp; QuantLib::Bond::redemptions</definition>
        <argsstring>() const</argsstring>
        <name>redemptions</name>
        <qualifiedname>QuantLib::Bond::redemptions</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns just the redemption flows (not interest payments) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="123" column="19" bodyfile="ql/instruments/bond.hpp" bodystart="348" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1ad15747f06d81987db5154e02427ce434" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_cash_flow" kindref="compound">CashFlow</ref> &gt; &amp;</type>
        <definition>const ext::shared_ptr&lt; CashFlow &gt; &amp; QuantLib::Bond::redemption</definition>
        <argsstring>() const</argsstring>
        <name>redemption</name>
        <qualifiedname>QuantLib::Bond::redemption</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the redemption, if only one is defined </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="125" column="31" bodyfile="ql/instruments/bond.cpp" bodystart="141" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1aa20cefd3e28d4736122629b2d291c86e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::Bond::startDate</definition>
        <argsstring>() const</argsstring>
        <name>startDate</name>
        <qualifiedname>QuantLib::Bond::startDate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="127" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="147" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1a11c98eb10f94cfca3bf0f724a67be155" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::Bond::maturityDate</definition>
        <argsstring>() const</argsstring>
        <name>maturityDate</name>
        <qualifiedname>QuantLib::Bond::maturityDate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="128" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="151" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1a10a1ee7aea8c987c331eca201ff00e6c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::Bond::issueDate</definition>
        <argsstring>() const</argsstring>
        <name>issueDate</name>
        <qualifiedname>QuantLib::Bond::issueDate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="129" column="14" bodyfile="ql/instruments/bond.hpp" bodystart="352" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1ab2b91de576632e775e5093ccbd65c61f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::Bond::isTradable</definition>
        <argsstring>(Date d=Date()) const</argsstring>
        <name>isTradable</name>
        <qualifiedname>QuantLib::Bond::isTradable</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>d</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="131" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="158" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1a764b8113c4300acd802a63ca39523662" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::Bond::settlementDate</definition>
        <argsstring>(Date d=Date()) const</argsstring>
        <name>settlementDate</name>
        <qualifiedname>QuantLib::Bond::settlementDate</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>d</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="132" column="14" bodyfile="ql/instruments/bond.cpp" bodystart="162" bodyend="173"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1ab3b0339ab8780a8feb6974c55568b431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Bond::Bond</definition>
        <argsstring>(Natural settlementDays, Calendar calendar, const Date &amp;issueDate=Date(), const Leg &amp;coupons=Leg())</argsstring>
        <name>Bond</name>
        <qualifiedname>QuantLib::Bond::Bond</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref></type>
          <declname>settlementDays</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref></type>
          <declname>calendar</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>issueDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>coupons</declname>
          <defval><ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref>()</defval>
        </param>
        <briefdescription>
<para>constructor for amortizing or non-amortizing bonds. </para>
        </briefdescription>
        <detaileddescription>
<para>Redemptions and maturity are calculated from the coupon data, if available. Therefore, redemptions must not be included in the passed cash flows. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="83" column="9" bodyfile="ql/instruments/bond.cpp" bodystart="38" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_1a045620250d5442d6c8e96e425ed2db3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Bond::Bond</definition>
        <argsstring>(Natural settlementDays, Calendar calendar, Real faceAmount, const Date &amp;maturityDate, const Date &amp;issueDate=Date(), const Leg &amp;cashflows=Leg())</argsstring>
        <name>Bond</name>
        <qualifiedname>QuantLib::Bond::Bond</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref></type>
          <declname>settlementDays</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref></type>
          <declname>calendar</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>faceAmount</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>maturityDate</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>issueDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>cashflows</declname>
          <defval><ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref>()</defval>
        </param>
        <briefdescription>
<para>old constructor for non amortizing bonds. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>The last passed cash flow must be the bond redemption. No other cash flow can have a date later than the redemption date. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bond.hpp" line="93" column="9" bodyfile="ql/instruments/bond.cpp" bodystart="63" bodyend="102"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Base bond class. </para>
    </briefdescription>
    <detaileddescription>
<para>Derived classes must fill the uninitialized data members.</para>
<para><simplesect kind="warning"><para>Most methods assume that the cash flows are stored sorted by date, the redemption(s) being after any cash flow at the same date. In particular, if there&apos;s one single redemption, it must be the last cash flow,</para>
</simplesect>
<xrefsect id="test_1_test000018"><xreftitle>Test</xreftitle><xrefdescription><para><itemizedlist>
<listitem><para>price/yield calculations are cross-checked for consistency.</para>
</listitem><listitem><para>price/yield calculations are checked against known good values. </para>
</listitem></itemizedlist>
</para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="6">
        <label>QuantLib::AmortizingCmsRateBond</label>
        <link refid="class_quant_lib_1_1_amortizing_cms_rate_bond"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::AmortizingFixedRateBond</label>
        <link refid="class_quant_lib_1_1_amortizing_fixed_rate_bond"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QuantLib::AmortizingFloatingRateBond</label>
        <link refid="class_quant_lib_1_1_amortizing_floating_rate_bond"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>QuantLib::BTP</label>
        <link refid="class_quant_lib_1_1_b_t_p"/>
        <childnode refid="20" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::Bond</label>
        <link refid="class_quant_lib_1_1_bond"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>QuantLib::CCTEU</label>
        <link refid="class_quant_lib_1_1_c_c_t_e_u"/>
        <childnode refid="22" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>QuantLib::CPIBond</label>
        <link refid="class_quant_lib_1_1_c_p_i_bond"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>QuantLib::CallableBond</label>
        <link refid="class_quant_lib_1_1_callable_bond"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>QuantLib::CallableFixedRateBond</label>
        <link refid="class_quant_lib_1_1_callable_fixed_rate_bond"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>QuantLib::CallableZeroCouponBond</label>
        <link refid="class_quant_lib_1_1_callable_zero_coupon_bond"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>QuantLib::CatBond</label>
        <link refid="class_quant_lib_1_1_cat_bond"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>QuantLib::CmsRateBond</label>
        <link refid="class_quant_lib_1_1_cms_rate_bond"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>QuantLib::ConvertibleBond</label>
        <link refid="class_quant_lib_1_1_convertible_bond"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>QuantLib::ConvertibleFixedCouponBond</label>
        <link refid="class_quant_lib_1_1_convertible_fixed_coupon_bond"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>QuantLib::ConvertibleFloatingRateBond</label>
        <link refid="class_quant_lib_1_1_convertible_floating_rate_bond"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>QuantLib::ConvertibleZeroCouponBond</label>
        <link refid="class_quant_lib_1_1_convertible_zero_coupon_bond"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>QuantLib::FixedRateBond</label>
        <link refid="class_quant_lib_1_1_fixed_rate_bond"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>QuantLib::FloatingCatBond</label>
        <link refid="class_quant_lib_1_1_floating_cat_bond"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>QuantLib::FloatingRateBond</label>
        <link refid="class_quant_lib_1_1_floating_rate_bond"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::Instrument</label>
        <link refid="class_quant_lib_1_1_instrument"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="24">
        <label>QuantLib::ZeroCouponBond</label>
        <link refid="class_quant_lib_1_1_zero_coupon_bond"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::Bond</label>
        <link refid="class_quant_lib_1_1_bond"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>calendar_</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>issueDate_</edgelabel>
          <edgelabel>maturityDate_</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::Calendar</label>
        <link refid="class_quant_lib_1_1_calendar"/>
      </node>
      <node id="6">
        <label>QuantLib::Date</label>
        <link refid="class_quant_lib_1_1_date"/>
      </node>
      <node id="2">
        <label>QuantLib::Instrument</label>
        <link refid="class_quant_lib_1_1_instrument"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>valuationDate_</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
    </collaborationgraph>
    <location file="ql/instruments/bond.hpp" line="59" column="5" bodyfile="ql/instruments/bond.hpp" bodystart="59" bodyend="307"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_bond_1aebd407a08c0adfaa3bda7c1c3bc5686b" prot="public" virt="virtual"><scope>QuantLib::Bond</scope><name>accruedAmount</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a468edb294da268b097c91bf821084c07" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>additionalResults</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a57d2b34e8625ab3d9ffa50c0c7931099" prot="protected" virt="non-virtual"><scope>QuantLib::Bond</scope><name>additionalResults_</name></member>
      <member refid="class_quant_lib_1_1_bond_1a0c477dc3fa147e8a15c6a8a3e79e0740" prot="protected" virt="non-virtual"><scope>QuantLib::Bond</scope><name>addRedemptionsToCashflows</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a02070ea7442d30625992c1711030d4b8" prot="protected" virt="non-virtual"><scope>QuantLib::Bond</scope><name>alwaysForward_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a17c9433135a259e4776baec66204a484" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>alwaysForwardNotifications</name></member>
      <member refid="class_quant_lib_1_1_bond_1ab3b0339ab8780a8feb6974c55568b431" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>Bond</name></member>
      <member refid="class_quant_lib_1_1_bond_1a045620250d5442d6c8e96e425ed2db3c" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>Bond</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a4c573c48f7eaead5042864ac0eb5b025" prot="protected" virt="virtual"><scope>QuantLib::Bond</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a58b4986a80efa18634483a92c121e26e" prot="protected" virt="non-virtual"><scope>QuantLib::Bond</scope><name>calculated_</name></member>
      <member refid="class_quant_lib_1_1_bond_1ae5b077356ca91d3eea2022dadeb03ee0" prot="protected" virt="non-virtual"><scope>QuantLib::Bond</scope><name>calculateNotionalsFromCashflows</name></member>
      <member refid="class_quant_lib_1_1_bond_1aa3050d7de30989970dd3c6cd445b53dc" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>calendar</name></member>
      <member refid="class_quant_lib_1_1_bond_1abdb0f073ef7ab0446b2fcc537b338a2d" prot="protected" virt="non-virtual"><scope>QuantLib::Bond</scope><name>calendar_</name></member>
      <member refid="class_quant_lib_1_1_bond_1a904f66ebb3eba4df33ba30ec37770bb0" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>cashflows</name></member>
      <member refid="class_quant_lib_1_1_bond_1a3b67d66ca4ca84900877a17c14a88fb7" prot="protected" virt="non-virtual"><scope>QuantLib::Bond</scope><name>cashflows_</name></member>
      <member refid="class_quant_lib_1_1_bond_1a3eb154449d554f9b633917fac47ec23a" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>cleanPrice</name></member>
      <member refid="class_quant_lib_1_1_bond_1a2854e074dfdca6312fcb284457821df5" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>cleanPrice</name></member>
      <member refid="class_quant_lib_1_1_bond_1a7ec2560eadfd56ca7e185b9bb91b99e6" prot="public" virt="virtual"><scope>QuantLib::Bond</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_bond_1a3b148aba5b10f3d58f5d52ea16f01dda" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>dirtyPrice</name></member>
      <member refid="class_quant_lib_1_1_bond_1ad6c18f3aea7e889e0e498c611445fbeb" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>dirtyPrice</name></member>
      <member refid="class_quant_lib_1_1_instrument_1ac548cb61c864779db09bd0fac6ae7c81" prot="protected" virt="non-virtual"><scope>QuantLib::Bond</scope><name>engine_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a03502fb6c606b262c25acd94ff4c1e52" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>errorEstimate</name></member>
      <member refid="class_quant_lib_1_1_instrument_1abb8f4cfa7346fab7a2f3a8c8b4da30f3" prot="protected" virt="non-virtual"><scope>QuantLib::Bond</scope><name>errorEstimate_</name></member>
      <member refid="class_quant_lib_1_1_bond_1a4d7a6493fade5f4f1f88bdd2b56c7138" prot="protected" virt="virtual"><scope>QuantLib::Bond</scope><name>fetchResults</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1afac6ee19c3107c453e1347dd8000e023" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>forwardFirstNotificationOnly</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7157f41e83f2c5d924f5c5bafda04d1d" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>freeze</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7bb721fe00c6854e602758aba629ab77" prot="protected" virt="non-virtual"><scope>QuantLib::Bond</scope><name>frozen_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a5e4c746cbf7999c83dc57f87e241f1cc" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>Instrument</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a0a7c5d42815a4e16ee2158e24dbfc748" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>isCalculated</name></member>
      <member refid="class_quant_lib_1_1_bond_1a29e653651790da335c5000fed98f9426" prot="public" virt="virtual"><scope>QuantLib::Bond</scope><name>isExpired</name></member>
      <member refid="class_quant_lib_1_1_bond_1a10a1ee7aea8c987c331eca201ff00e6c" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>issueDate</name></member>
      <member refid="class_quant_lib_1_1_bond_1a6e5b7c316a846a8f60fdfa3eed11548d" prot="protected" virt="non-virtual"><scope>QuantLib::Bond</scope><name>issueDate_</name></member>
      <member refid="class_quant_lib_1_1_bond_1ab2b91de576632e775e5093ccbd65c61f" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>isTradable</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a26f18f4ff7faaaebd8eae50e064b493e" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>LazyObject</name></member>
      <member refid="class_quant_lib_1_1_bond_1a11c98eb10f94cfca3bf0f724a67be155" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>maturityDate</name></member>
      <member refid="class_quant_lib_1_1_bond_1a826583ebd14ee9d90e1e2864897da034" prot="protected" virt="non-virtual"><scope>QuantLib::Bond</scope><name>maturityDate_</name></member>
      <member refid="class_quant_lib_1_1_bond_1aa9853f3e8b7f807b31e2575929d87552" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>nextCashFlowDate</name></member>
      <member refid="class_quant_lib_1_1_bond_1a0e3407e3f2f80bceeb806b446cdd0ee0" prot="public" virt="virtual"><scope>QuantLib::Bond</scope><name>nextCouponRate</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_bond_1a671a3d7c8c0b1db1bf85cba7a1e9473d" prot="public" virt="virtual"><scope>QuantLib::Bond</scope><name>notional</name></member>
      <member refid="class_quant_lib_1_1_bond_1adda5ca64da20be9a916a0a96f8c26ac3" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>notionals</name></member>
      <member refid="class_quant_lib_1_1_bond_1a01aa695599f96e8bca2b44e78fd1f3cc" prot="protected" virt="non-virtual"><scope>QuantLib::Bond</scope><name>notionals_</name></member>
      <member refid="class_quant_lib_1_1_bond_1ad305a0db329332dfd086767111930dee" prot="protected" virt="non-virtual"><scope>QuantLib::Bond</scope><name>notionalSchedule_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a5afdd9698267cd30ddd10cf01f3487b0" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>NPV</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a997663780100d30ae59b14ac0285322d" prot="protected" virt="non-virtual"><scope>QuantLib::Bond</scope><name>NPV_</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::Bond</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::Bond</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::Bond</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::Bond</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::Bond</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::QuantLib::Observer::"><scope>QuantLib::Bond</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_instrument_1aad23f546bbca156a49a95ca2bee124c4" prot="protected" virt="virtual"><scope>QuantLib::Bond</scope><name>performCalculations</name></member>
      <member refid="class_quant_lib_1_1_bond_1a9ff7fa3a8248acae7c9c30591ec0ee28" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>previousCashFlowDate</name></member>
      <member refid="class_quant_lib_1_1_bond_1a0c8d6afffecbe48a2f6e1f0af6df6869" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>previousCouponRate</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a70c9b24e50132408d8d9ce4f6674662a" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>recalculate</name></member>
      <member refid="class_quant_lib_1_1_bond_1ad15747f06d81987db5154e02427ce434" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>redemption</name></member>
      <member refid="class_quant_lib_1_1_bond_1a4e0a0d7c5bb9a85f13752ee69dc4332c" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>redemptions</name></member>
      <member refid="class_quant_lib_1_1_bond_1aa51ead614a160da5dedaf862db8ef84e" prot="protected" virt="non-virtual"><scope>QuantLib::Bond</scope><name>redemptions_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a266c15a12160a89f4f9707db85f9fa27" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>result</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a3444386491f179f64f4f0aac24997071" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>setPricingEngine</name></member>
      <member refid="class_quant_lib_1_1_bond_1aa01b6ab924b0c7417f4f6e5e0d446058" prot="protected" virt="non-virtual"><scope>QuantLib::Bond</scope><name>setSingleRedemption</name></member>
      <member refid="class_quant_lib_1_1_bond_1af8923cdcd5b8357fb8af32d8b989c55d" prot="protected" virt="non-virtual"><scope>QuantLib::Bond</scope><name>setSingleRedemption</name></member>
      <member refid="class_quant_lib_1_1_bond_1a764b8113c4300acd802a63ca39523662" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>settlementDate</name></member>
      <member refid="class_quant_lib_1_1_bond_1aae053246ae68e2593ea1640af7449c80" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>settlementDays</name></member>
      <member refid="class_quant_lib_1_1_bond_1a73653e4daab6f79d4e4b43959805dcf5" prot="protected" virt="non-virtual"><scope>QuantLib::Bond</scope><name>settlementDays_</name></member>
      <member refid="class_quant_lib_1_1_bond_1a5a19201439ca249d30573e6c0c759da2" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>settlementValue</name></member>
      <member refid="class_quant_lib_1_1_bond_1aae897f34447839310879a45f4e69b683" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>settlementValue</name></member>
      <member refid="class_quant_lib_1_1_bond_1a371196d9d28a301f517ebf7126db45a2" prot="protected" virt="non-virtual"><scope>QuantLib::Bond</scope><name>settlementValue_</name></member>
      <member refid="class_quant_lib_1_1_bond_1ad87ed8ba111686fd6b8277e90f9209ec" prot="protected" virt="virtual"><scope>QuantLib::Bond</scope><name>setupArguments</name></member>
      <member refid="class_quant_lib_1_1_bond_1aa86e41b660226fe375a5f0cc32e23f88" prot="protected" virt="virtual"><scope>QuantLib::Bond</scope><name>setupExpired</name></member>
      <member refid="class_quant_lib_1_1_bond_1aa20cefd3e28d4736122629b2d291c86e" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>startDate</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a2e0e4786666453024b9d4e0761f2770b" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>unfreeze</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1adee2bf49be5c4c78736be293321a856d" prot="public" virt="virtual"><scope>QuantLib::Bond</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a53a0fc1adc70b73387ad53009725835d" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>valuationDate</name></member>
      <member refid="class_quant_lib_1_1_instrument_1aa60b558fc82f022e13535360ac4a6fed" prot="protected" virt="non-virtual"><scope>QuantLib::Bond</scope><name>valuationDate_</name></member>
      <member refid="class_quant_lib_1_1_bond_1aa74fece7368a248c713a554fb1942076" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>yield</name></member>
      <member refid="class_quant_lib_1_1_bond_1afa69fb56ae9a24d725adc2c825982357" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>yield</name></member>
      <member refid="class_quant_lib_1_1_bond_1a3eba4b514302bbe824899397100c50e5" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>yield</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a9d719c43bb627177a90d7d12324a2d6e" prot="public" virt="non-virtual"><scope>QuantLib::Bond</scope><name>~LazyObject</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::Bond</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::Bond</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
