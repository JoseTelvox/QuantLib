<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_garch11" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::Garch11</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_volatility_compositor" prot="public" virt="non-virtual">QuantLib::VolatilityCompositor</basecompoundref>
    <includes refid="garch_8hpp" local="no">garch.hpp</includes>
    <sectiondef kind="user-defined">
      <header>Additional interface</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_garch11_1a9717c3ed8004844791bde205ffc27d61" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Garch11::alpha_</definition>
        <argsstring></argsstring>
        <name>alpha_</name>
        <qualifiedname>QuantLib::Garch11::alpha_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="252" column="14" bodyfile="ql/models/volatility/garch.hpp" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_garch11_1a9ad69905a99812dffa7b9b44e0a5e2b6" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Garch11::beta_</definition>
        <argsstring></argsstring>
        <name>beta_</name>
        <qualifiedname>QuantLib::Garch11::beta_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="252" column="21" bodyfile="ql/models/volatility/garch.hpp" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_garch11_1a4587829531fcf7185f82a8e2edf3b74d" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Garch11::gamma_</definition>
        <argsstring></argsstring>
        <name>gamma_</name>
        <qualifiedname>QuantLib::Garch11::gamma_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="252" column="27" bodyfile="ql/models/volatility/garch.hpp" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_garch11_1adfdc6715d5eb58ddbb70bad0b19fe2ef" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Garch11::vl_</definition>
        <argsstring></argsstring>
        <name>vl_</name>
        <qualifiedname>QuantLib::Garch11::vl_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="252" column="34" bodyfile="ql/models/volatility/garch.hpp" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_garch11_1ae749fa06f4e782da4ebb758b238f5b27" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Garch11::logLikelihood_</definition>
        <argsstring></argsstring>
        <name>logLikelihood_</name>
        <qualifiedname>QuantLib::Garch11::logLikelihood_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="253" column="14" bodyfile="ql/models/volatility/garch.hpp" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_garch11_1a768041f45302493182ba205bf37fcba0" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_garch11_1a9b09904b2830ef0ecb6810fce7d63a82" kindref="member">Mode</ref></type>
        <definition>Mode QuantLib::Garch11::mode_</definition>
        <argsstring></argsstring>
        <name>mode_</name>
        <qualifiedname>QuantLib::Garch11::mode_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="254" column="14" bodyfile="ql/models/volatility/garch.hpp" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1a313d60d802b68da5ff656c314e9e9247" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::Garch11::calibrate</definition>
        <argsstring>(const time_series &amp;quoteSeries, OptimizationMethod &amp;method, const EndCriteria &amp;endCriteria)</argsstring>
        <name>calibrate</name>
        <qualifiedname>QuantLib::Garch11::calibrate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_time_series" kindref="compound">time_series</ref> &amp;</type>
          <declname>quoteSeries</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_optimization_method" kindref="compound">OptimizationMethod</ref> &amp;</type>
          <declname>method</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref> &amp;</type>
          <declname>endCriteria</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="92" column="14" bodyfile="ql/models/volatility/garch.hpp" bodystart="92" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1ad8999257f78fd15641b9c6ddb0029e1e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::Garch11::calibrate</definition>
        <argsstring>(const time_series &amp;quoteSeries, OptimizationMethod &amp;method, const EndCriteria &amp;endCriteria, const Array &amp;initialGuess)</argsstring>
        <name>calibrate</name>
        <qualifiedname>QuantLib::Garch11::calibrate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_time_series" kindref="compound">time_series</ref> &amp;</type>
          <declname>quoteSeries</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_optimization_method" kindref="compound">OptimizationMethod</ref> &amp;</type>
          <declname>method</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref> &amp;</type>
          <declname>endCriteria</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>initialGuess</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="100" column="14" bodyfile="ql/models/volatility/garch.hpp" bodystart="100" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1a46d34d47649d4b537bcedb346953448a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ForwardIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void QuantLib::Garch11::calibrate</definition>
        <argsstring>(ForwardIterator begin, ForwardIterator end)</argsstring>
        <name>calibrate</name>
        <qualifiedname>QuantLib::Garch11::calibrate</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="110" column="14" bodyfile="ql/models/volatility/garch.hpp" bodystart="110" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1aa73c6e4839a7175bf66b59a3045ea16a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ForwardIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void QuantLib::Garch11::calibrate</definition>
        <argsstring>(ForwardIterator begin, ForwardIterator end, OptimizationMethod &amp;method, EndCriteria endCriteria)</argsstring>
        <name>calibrate</name>
        <qualifiedname>QuantLib::Garch11::calibrate</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_optimization_method" kindref="compound">OptimizationMethod</ref> &amp;</type>
          <declname>method</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref></type>
          <declname>endCriteria</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="122" column="14" bodyfile="ql/models/volatility/garch.hpp" bodystart="122" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1a9002e667d3bb3eb1c7647f61e011fe83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ForwardIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void QuantLib::Garch11::calibrate</definition>
        <argsstring>(ForwardIterator begin, ForwardIterator end, OptimizationMethod &amp;method, EndCriteria endCriteria, const Array &amp;initialGuess)</argsstring>
        <name>calibrate</name>
        <qualifiedname>QuantLib::Garch11::calibrate</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_optimization_method" kindref="compound">OptimizationMethod</ref> &amp;</type>
          <declname>method</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref></type>
          <declname>endCriteria</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>initialGuess</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="137" column="14" bodyfile="ql/models/volatility/garch.hpp" bodystart="137" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1a241aa25e6cd416977c053f3b2cb4e708" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Garch11::forecast</definition>
        <argsstring>(Real r, Real sigma2) const</argsstring>
        <name>forecast</name>
        <qualifiedname>QuantLib::Garch11::forecast</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>sigma2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="152" column="14" bodyfile="ql/models/volatility/garch.hpp" bodystart="152" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1a852e93290a3af6a38386685f91283fca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_time_series" kindref="compound">time_series</ref></type>
        <definition>Garch11::time_series QuantLib::Garch11::calculate</definition>
        <argsstring>(const time_series &amp;quoteSeries, Real alpha, Real beta, Real omega)</argsstring>
        <name>calculate</name>
        <qualifiedname>QuantLib::Garch11::calculate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_time_series" kindref="compound">time_series</ref> &amp;</type>
          <declname>quoteSeries</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>omega</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="89" column="28" bodyfile="ql/models/volatility/garch.cpp" bodystart="374" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1a1a39992fd03e331465eb8783b7291d40" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>static Real QuantLib::Garch11::to_r2</definition>
        <argsstring>(InputIterator begin, InputIterator end, std::vector&lt; Volatility &gt; &amp;r2)</argsstring>
        <name>to_r2</name>
        <qualifiedname>QuantLib::Garch11::to_r2</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref> &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="158" column="21" bodyfile="ql/models/volatility/garch.hpp" bodystart="158" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1abcf7e43d3f153cdbf2ce0a72731b7b7c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_problem" kindref="compound">Problem</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; Problem &gt; QuantLib::Garch11::calibrate_r2</definition>
        <argsstring>(Mode mode, const std::vector&lt; Volatility &gt; &amp;r2, Real mean_r2, Real &amp;alpha, Real &amp;beta, Real &amp;omega)</argsstring>
        <name>calibrate_r2</name>
        <qualifiedname>QuantLib::Garch11::calibrate_r2</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_garch11_1a9b09904b2830ef0ecb6810fce7d63a82" kindref="member">Mode</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref> &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>mean_r2</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>omega</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calibrates GARCH for r^2 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="171" column="32" bodyfile="ql/models/volatility/garch.cpp" bodystart="393" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1a168e79ae13717a78ed7d3e840a06b69a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_problem" kindref="compound">Problem</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; Problem &gt; QuantLib::Garch11::calibrate_r2</definition>
        <argsstring>(Mode mode, const std::vector&lt; Volatility &gt; &amp;r2, Real mean_r2, OptimizationMethod &amp;method, const EndCriteria &amp;endCriteria, Real &amp;alpha, Real &amp;beta, Real &amp;omega)</argsstring>
        <name>calibrate_r2</name>
        <qualifiedname>QuantLib::Garch11::calibrate_r2</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_garch11_1a9b09904b2830ef0ecb6810fce7d63a82" kindref="member">Mode</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref> &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>mean_r2</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_optimization_method" kindref="compound">OptimizationMethod</ref> &amp;</type>
          <declname>method</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref> &amp;</type>
          <declname>endCriteria</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>omega</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calibrates GARCH for r^2 with user-defined optimization method and end criteria </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="181" column="32" bodyfile="ql/models/volatility/garch.cpp" bodystart="402" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1ad52a2571f40aa16c7fdb1f8161957c01" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_problem" kindref="compound">Problem</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; Problem &gt; QuantLib::Garch11::calibrate_r2</definition>
        <argsstring>(const std::vector&lt; Volatility &gt; &amp;r2, Real mean_r2, OptimizationMethod &amp;method, const EndCriteria &amp;endCriteria, const Array &amp;initialGuess, Real &amp;alpha, Real &amp;beta, Real &amp;omega)</argsstring>
        <name>calibrate_r2</name>
        <qualifiedname>QuantLib::Garch11::calibrate_r2</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref> &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>mean_r2</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_optimization_method" kindref="compound">OptimizationMethod</ref> &amp;</type>
          <declname>method</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref> &amp;</type>
          <declname>endCriteria</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>initialGuess</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>omega</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calibrates GARCH for r^2 with user-defined optimization method, end criteria and initial guess </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="193" column="32" bodyfile="ql/models/volatility/garch.cpp" bodystart="512" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1a21a28c75a6e31ae0a5ee274e633f5ccb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_problem" kindref="compound">Problem</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; Problem &gt; QuantLib::Garch11::calibrate_r2</definition>
        <argsstring>(const std::vector&lt; Volatility &gt; &amp;r2, OptimizationMethod &amp;method, const EndCriteria &amp;endCriteria, const Array &amp;initialGuess, Real &amp;alpha, Real &amp;beta, Real &amp;omega)</argsstring>
        <name>calibrate_r2</name>
        <qualifiedname>QuantLib::Garch11::calibrate_r2</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref> &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_optimization_method" kindref="compound">OptimizationMethod</ref> &amp;</type>
          <declname>method</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref> &amp;</type>
          <declname>endCriteria</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>initialGuess</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>omega</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calibrates GARCH for r^2 with user-defined optimization method, end criteria and initial guess </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="205" column="32" bodyfile="ql/models/volatility/garch.cpp" bodystart="502" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1aea2a278a650e27666a4d9d63011867e4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_problem" kindref="compound">Problem</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; Problem &gt; QuantLib::Garch11::calibrate_r2</definition>
        <argsstring>(const std::vector&lt; Volatility &gt; &amp;r2, Real mean_r2, OptimizationMethod &amp;method, Constraint &amp;constraints, const EndCriteria &amp;endCriteria, const Array &amp;initialGuess, Real &amp;alpha, Real &amp;beta, Real &amp;omega)</argsstring>
        <name>calibrate_r2</name>
        <qualifiedname>QuantLib::Garch11::calibrate_r2</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref> &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>mean_r2</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_optimization_method" kindref="compound">OptimizationMethod</ref> &amp;</type>
          <declname>method</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_constraint" kindref="compound">Constraint</ref> &amp;</type>
          <declname>constraints</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref> &amp;</type>
          <declname>endCriteria</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>initialGuess</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>omega</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calibrates GARCH for r^2 with user-defined optimization method, end criteria, constraints and initial guess </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="216" column="32" bodyfile="ql/models/volatility/garch.cpp" bodystart="544" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1a9d22e2e55f220265614340b49eb3488d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_problem" kindref="compound">Problem</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; Problem &gt; QuantLib::Garch11::calibrate_r2</definition>
        <argsstring>(const std::vector&lt; Volatility &gt; &amp;r2, OptimizationMethod &amp;method, Constraint &amp;constraints, const EndCriteria &amp;endCriteria, const Array &amp;initialGuess, Real &amp;alpha, Real &amp;beta, Real &amp;omega)</argsstring>
        <name>calibrate_r2</name>
        <qualifiedname>QuantLib::Garch11::calibrate_r2</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref> &gt; &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_optimization_method" kindref="compound">OptimizationMethod</ref> &amp;</type>
          <declname>method</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_constraint" kindref="compound">Constraint</ref> &amp;</type>
          <declname>constraints</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref> &amp;</type>
          <declname>endCriteria</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>initialGuess</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>omega</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="227" column="32" bodyfile="ql/models/volatility/garch.cpp" bodystart="525" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1a9d20e8bd3a6aacbd77818901491af22c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>static Real QuantLib::Garch11::costFunction</definition>
        <argsstring>(InputIterator begin, InputIterator end, Real alpha, Real beta, Real omega)</argsstring>
        <name>costFunction</name>
        <qualifiedname>QuantLib::Garch11::costFunction</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>omega</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="238" column="21" bodyfile="ql/models/volatility/garch.hpp" bodystart="238" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1aafc5560ac930688b67185ce0fc1e1e8b" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Garch11::costFunction</definition>
        <argsstring>(InputIterator begin, InputIterator end) const</argsstring>
        <name>costFunction</name>
        <qualifiedname>QuantLib::Garch11::costFunction</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="257" column="14" bodyfile="ql/models/volatility/garch.hpp" bodystart="257" bodyend="259"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Constructors</header>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1a1dc5a1401607acdce065f1b3561bd1b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Garch11::Garch11</definition>
        <argsstring>(Real a, Real b, Real vl)</argsstring>
        <name>Garch11</name>
        <qualifiedname>QuantLib::Garch11::Garch11</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>vl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="56" column="9" bodyfile="ql/models/volatility/garch.hpp" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1a5a1b03880d191cabb49abec3f8472175" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Garch11::Garch11</definition>
        <argsstring>(const time_series &amp;qs, Mode mode=BestOfTwo)</argsstring>
        <name>Garch11</name>
        <qualifiedname>QuantLib::Garch11::Garch11</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_time_series" kindref="compound">time_series</ref> &amp;</type>
          <declname>qs</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_garch11_1a9b09904b2830ef0ecb6810fce7d63a82" kindref="member">Mode</ref></type>
          <declname>mode</declname>
          <defval><ref refid="class_quant_lib_1_1_garch11_1a9b09904b2830ef0ecb6810fce7d63a82ab44424cb2731d5d9791404a71e4cd096" kindref="member">BestOfTwo</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="60" column="9" bodyfile="ql/models/volatility/garch.hpp" bodystart="60" bodyend="63"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Inspectors</header>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1a82eacc9222ae6193531d540cd8c54d04" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Garch11::alpha</definition>
        <argsstring>() const</argsstring>
        <name>alpha</name>
        <qualifiedname>QuantLib::Garch11::alpha</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="68" column="14" bodyfile="ql/models/volatility/garch.hpp" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1adfdecf67e8be7e688b5a675c48bd1fdc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Garch11::beta</definition>
        <argsstring>() const</argsstring>
        <name>beta</name>
        <qualifiedname>QuantLib::Garch11::beta</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="69" column="14" bodyfile="ql/models/volatility/garch.hpp" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1af1686d6847ca482a3b28f44c436542ca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Garch11::omega</definition>
        <argsstring>() const</argsstring>
        <name>omega</name>
        <qualifiedname>QuantLib::Garch11::omega</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="70" column="14" bodyfile="ql/models/volatility/garch.hpp" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1aac71d7428dff9e9ae833add0cafd7962" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Garch11::ltVol</definition>
        <argsstring>() const</argsstring>
        <name>ltVol</name>
        <qualifiedname>QuantLib::Garch11::ltVol</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="71" column="14" bodyfile="ql/models/volatility/garch.hpp" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1a12d6da349209306fef4f5de192a7400a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Garch11::logLikelihood</definition>
        <argsstring>() const</argsstring>
        <name>logLikelihood</name>
        <qualifiedname>QuantLib::Garch11::logLikelihood</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="72" column="14" bodyfile="ql/models/volatility/garch.hpp" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1aa00b7000e13af8b1803fbdb1a8213344" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_garch11_1a9b09904b2830ef0ecb6810fce7d63a82" kindref="member">Mode</ref></type>
        <definition>Mode QuantLib::Garch11::mode</definition>
        <argsstring>() const</argsstring>
        <name>mode</name>
        <qualifiedname>QuantLib::Garch11::mode</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="73" column="14" bodyfile="ql/models/volatility/garch.hpp" bodystart="73" bodyend="73"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>VolatilityCompositor interface</header>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1aeef60d8a847c5457a440d19e316fb6d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_time_series" kindref="compound">time_series</ref></type>
        <definition>time_series QuantLib::Garch11::calculate</definition>
        <argsstring>(const time_series &amp;quoteSeries) override</argsstring>
        <name>calculate</name>
        <qualifiedname>QuantLib::Garch11::calculate</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_volatility_compositor_1a8bbfc5686eea877f7b646a6156cfc8be">calculate</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_time_series" kindref="compound">time_series</ref> &amp;</type>
          <declname>quoteSeries</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="78" column="21" bodyfile="ql/models/volatility/garch.hpp" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_garch11_1ae961afdff5d14767bb558eac786d60a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::Garch11::calibrate</definition>
        <argsstring>(const time_series &amp;quoteSeries) override</argsstring>
        <name>calibrate</name>
        <qualifiedname>QuantLib::Garch11::calibrate</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_volatility_compositor_1a5e037cdcce33d623cc7c2e7384a9e5c3">calibrate</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_time_series" kindref="compound">time_series</ref> &amp;</type>
          <declname>quoteSeries</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="81" column="14" bodyfile="ql/models/volatility/garch.hpp" bodystart="81" bodyend="84"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_quant_lib_1_1_garch11_1a9b09904b2830ef0ecb6810fce7d63a82" prot="public" static="no" strong="no">
        <type></type>
        <name>Mode</name>
        <qualifiedname>QuantLib::Garch11::Mode</qualifiedname>
        <enumvalue id="class_quant_lib_1_1_garch11_1a9b09904b2830ef0ecb6810fce7d63a82a547f3f753622376de21d5d89f1b5e0d2" prot="public">
          <name>MomentMatchingGuess</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The initial guess is a moment matching estimates for mean(r2), acf(0), and acf(1). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_garch11_1a9b09904b2830ef0ecb6810fce7d63a82a8ad790a937644327a45f222f0675767d" prot="public">
          <name>GammaGuess</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The initial guess is an estimate of gamma based on the property: acf(i+1) = gamma*acf(i) for i &gt; 1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_garch11_1a9b09904b2830ef0ecb6810fce7d63a82ab44424cb2731d5d9791404a71e4cd096" prot="public">
          <name>BestOfTwo</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The best of the two above modes </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_garch11_1a9b09904b2830ef0ecb6810fce7d63a82a884b55c307fd372cf969afd437b1b5cd" prot="public">
          <name>DoubleOptimization</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Double optimization </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="42" column="9" bodyfile="ql/models/volatility/garch.hpp" bodystart="42" bodyend="52"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_garch11_1ae9a7b220a1aa0a55c17e713fff506c14" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_time_series" kindref="compound">TimeSeries</ref>&lt; <ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref> &gt;</type>
        <definition>typedef TimeSeries&lt;Volatility&gt; QuantLib::Garch11::time_series</definition>
        <argsstring></argsstring>
        <name>time_series</name>
        <qualifiedname>QuantLib::Garch11::time_series</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/volatility/garch.hpp" line="40" column="28" bodyfile="ql/models/volatility/garch.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>GARCH volatility model. </para>
    </briefdescription>
    <detaileddescription>
<para>Volatilities are assumed to be expressed on an annual basis. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::Garch11</label>
        <link refid="class_quant_lib_1_1_garch11"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::VolatilityCompositor</label>
        <link refid="class_quant_lib_1_1_volatility_compositor"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::Garch11</label>
        <link refid="class_quant_lib_1_1_garch11"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::VolatilityCompositor</label>
        <link refid="class_quant_lib_1_1_volatility_compositor"/>
      </node>
    </collaborationgraph>
    <location file="ql/models/volatility/garch.hpp" line="38" column="5" bodyfile="ql/models/volatility/garch.hpp" bodystart="38" bodyend="260"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_garch11_1a82eacc9222ae6193531d540cd8c54d04" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>alpha</name></member>
      <member refid="class_quant_lib_1_1_garch11_1a9717c3ed8004844791bde205ffc27d61" prot="private" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>alpha_</name></member>
      <member refid="class_quant_lib_1_1_garch11_1a9b09904b2830ef0ecb6810fce7d63a82ab44424cb2731d5d9791404a71e4cd096" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>BestOfTwo</name></member>
      <member refid="class_quant_lib_1_1_garch11_1adfdecf67e8be7e688b5a675c48bd1fdc" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>beta</name></member>
      <member refid="class_quant_lib_1_1_garch11_1a9ad69905a99812dffa7b9b44e0a5e2b6" prot="private" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>beta_</name></member>
      <member refid="class_quant_lib_1_1_garch11_1aeef60d8a847c5457a440d19e316fb6d9" prot="public" virt="virtual"><scope>QuantLib::Garch11</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_garch11_1a852e93290a3af6a38386685f91283fca" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_garch11_1ae961afdff5d14767bb558eac786d60a5" prot="public" virt="virtual"><scope>QuantLib::Garch11</scope><name>calibrate</name></member>
      <member refid="class_quant_lib_1_1_garch11_1a313d60d802b68da5ff656c314e9e9247" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>calibrate</name></member>
      <member refid="class_quant_lib_1_1_garch11_1ad8999257f78fd15641b9c6ddb0029e1e" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>calibrate</name></member>
      <member refid="class_quant_lib_1_1_garch11_1a46d34d47649d4b537bcedb346953448a" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>calibrate</name></member>
      <member refid="class_quant_lib_1_1_garch11_1aa73c6e4839a7175bf66b59a3045ea16a" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>calibrate</name></member>
      <member refid="class_quant_lib_1_1_garch11_1a9002e667d3bb3eb1c7647f61e011fe83" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>calibrate</name></member>
      <member refid="class_quant_lib_1_1_garch11_1abcf7e43d3f153cdbf2ce0a72731b7b7c" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>calibrate_r2</name></member>
      <member refid="class_quant_lib_1_1_garch11_1a168e79ae13717a78ed7d3e840a06b69a" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>calibrate_r2</name></member>
      <member refid="class_quant_lib_1_1_garch11_1ad52a2571f40aa16c7fdb1f8161957c01" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>calibrate_r2</name></member>
      <member refid="class_quant_lib_1_1_garch11_1a21a28c75a6e31ae0a5ee274e633f5ccb" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>calibrate_r2</name></member>
      <member refid="class_quant_lib_1_1_garch11_1aea2a278a650e27666a4d9d63011867e4" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>calibrate_r2</name></member>
      <member refid="class_quant_lib_1_1_garch11_1a9d22e2e55f220265614340b49eb3488d" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>calibrate_r2</name></member>
      <member refid="class_quant_lib_1_1_garch11_1a9d20e8bd3a6aacbd77818901491af22c" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>costFunction</name></member>
      <member refid="class_quant_lib_1_1_garch11_1aafc5560ac930688b67185ce0fc1e1e8b" prot="private" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>costFunction</name></member>
      <member refid="class_quant_lib_1_1_garch11_1a9b09904b2830ef0ecb6810fce7d63a82a884b55c307fd372cf969afd437b1b5cd" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>DoubleOptimization</name></member>
      <member refid="class_quant_lib_1_1_garch11_1a241aa25e6cd416977c053f3b2cb4e708" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>forecast</name></member>
      <member refid="class_quant_lib_1_1_garch11_1a4587829531fcf7185f82a8e2edf3b74d" prot="private" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>gamma_</name></member>
      <member refid="class_quant_lib_1_1_garch11_1a9b09904b2830ef0ecb6810fce7d63a82a8ad790a937644327a45f222f0675767d" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>GammaGuess</name></member>
      <member refid="class_quant_lib_1_1_garch11_1a1dc5a1401607acdce065f1b3561bd1b4" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>Garch11</name></member>
      <member refid="class_quant_lib_1_1_garch11_1a5a1b03880d191cabb49abec3f8472175" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>Garch11</name></member>
      <member refid="class_quant_lib_1_1_garch11_1a12d6da349209306fef4f5de192a7400a" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>logLikelihood</name></member>
      <member refid="class_quant_lib_1_1_garch11_1ae749fa06f4e782da4ebb758b238f5b27" prot="private" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>logLikelihood_</name></member>
      <member refid="class_quant_lib_1_1_garch11_1aac71d7428dff9e9ae833add0cafd7962" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>ltVol</name></member>
      <member refid="class_quant_lib_1_1_garch11_1a9b09904b2830ef0ecb6810fce7d63a82" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>Mode</name></member>
      <member refid="class_quant_lib_1_1_garch11_1aa00b7000e13af8b1803fbdb1a8213344" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>mode</name></member>
      <member refid="class_quant_lib_1_1_garch11_1a768041f45302493182ba205bf37fcba0" prot="private" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>mode_</name></member>
      <member refid="class_quant_lib_1_1_garch11_1a9b09904b2830ef0ecb6810fce7d63a82a547f3f753622376de21d5d89f1b5e0d2" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>MomentMatchingGuess</name></member>
      <member refid="class_quant_lib_1_1_garch11_1af1686d6847ca482a3b28f44c436542ca" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>omega</name></member>
      <member refid="class_quant_lib_1_1_garch11_1ae9a7b220a1aa0a55c17e713fff506c14" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>time_series</name></member>
      <member refid="class_quant_lib_1_1_garch11_1a1a39992fd03e331465eb8783b7291d40" prot="public" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>to_r2</name></member>
      <member refid="class_quant_lib_1_1_garch11_1adfdc6715d5eb58ddbb70bad0b19fe2ef" prot="private" virt="non-virtual"><scope>QuantLib::Garch11</scope><name>vl_</name></member>
      <member refid="class_quant_lib_1_1_volatility_compositor_1a97f8cbbc0a34cbbf7a62bae2a84d3e3d" prot="public" virt="virtual"><scope>QuantLib::Garch11</scope><name>~VolatilityCompositor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
