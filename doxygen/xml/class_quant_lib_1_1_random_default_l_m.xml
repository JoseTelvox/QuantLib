<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_random_default_l_m" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::RandomDefaultLM</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_random_l_m" prot="public" virt="non-virtual">QuantLib::RandomLM&lt; RandomDefaultLM, copulaPolicy, SobolRsg &gt;</basecompoundref>
    <includes refid="randomdefaultlatentmodel_8hpp" local="no">randomdefaultlatentmodel.hpp</includes>
    <templateparamlist>
      <param>
        <type>class copulaPolicy</type>
      </param>
      <param>
        <type>class USNG</type>
        <defval><ref refid="class_quant_lib_1_1_sobol_rsg" kindref="compound">SobolRsg</ref></defval>
      </param>
    </templateparamlist>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_random_default_l_m_1a975253cb94c27edc43dbd53e2959477e" prot="private" static="no">
        <type><ref refid="struct_quant_lib_1_1sim_event" kindref="compound">simEvent</ref>&lt; <ref refid="class_quant_lib_1_1_random_default_l_m" kindref="compound">RandomDefaultLM</ref> &gt;</type>
        <definition>typedef simEvent&lt;RandomDefaultLM&gt; QuantLib::RandomDefaultLM&lt; copulaPolicy, USNG &gt;::defaultSimEvent</definition>
        <argsstring></argsstring>
        <name>defaultSimEvent</name>
        <qualifiedname>QuantLib::RandomDefaultLM::defaultSimEvent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="809" column="26" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="809" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_random_default_l_m_1aa0358b5ad5c4fe760a05aa2b949a078f" prot="private" static="no" mutable="no">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_default_latent_model" kindref="compound">DefaultLatentModel</ref>&lt; copulaPolicy &gt; &gt;</type>
        <definition>const ext::shared_ptr&lt;DefaultLatentModel&lt;copulaPolicy&gt; &gt; QuantLib::RandomDefaultLM&lt; copulaPolicy, USNG &gt;::model_</definition>
        <argsstring></argsstring>
        <name>model_</name>
        <qualifiedname>QuantLib::RandomDefaultLM::model_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="812" column="31" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="812" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_random_default_l_m_1a79b2222462506b8ad2bb7ced403279cc" prot="private" static="no" mutable="no">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>const std::vector&lt;Real&gt; QuantLib::RandomDefaultLM&lt; copulaPolicy, USNG &gt;::recoveries_</definition>
        <argsstring></argsstring>
        <name>recoveries_</name>
        <qualifiedname>QuantLib::RandomDefaultLM::recoveries_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="813" column="27" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="813" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_random_default_l_m_1a562471bf29ef36ea57a7468cd085c9f3" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::RandomDefaultLM&lt; copulaPolicy, USNG &gt;::accuracy_</definition>
        <argsstring></argsstring>
        <name>accuracy_</name>
        <qualifiedname>QuantLib::RandomDefaultLM::accuracy_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="815" column="14" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="815" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_random_default_l_m_1af677309bccdea219098dd1c8846329e6" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> &gt;</type>
        <definition>std::vector&lt;Probability&gt; QuantLib::RandomDefaultLM&lt; copulaPolicy, USNG &gt;::horizonDefaultPs_</definition>
        <argsstring></argsstring>
        <name>horizonDefaultPs_</name>
        <qualifiedname>QuantLib::RandomDefaultLM::horizonDefaultPs_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="912" column="29" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="912" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_quant_lib_1_1_random_default_l_m_1ad7e1f58aee2f3bf59acabfb4c4410c0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class RandomLM&lt; ::QuantLib::RandomDefaultLM, copulaPolicy, USNG &gt;</definition>
        <argsstring></argsstring>
        <name>RandomLM&lt; ::QuantLib::RandomDefaultLM, copulaPolicy, USNG &gt;</name>
        <qualifiedname>QuantLib::RandomDefaultLM::RandomLM&lt; ::QuantLib::RandomDefaultLM, copulaPolicy, USNG &gt;</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_random_l_m" kindref="compound">RandomLM</ref>&lt; <ref refid="class_quant_lib_1_1_random_default_l_m" kindref="compound">::QuantLib::RandomDefaultLM</ref>, copulaPolicy, USNG &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="832" column="18" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="860" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_random_default_l_m_1ad94c6279aed1a33d94696ce146bf5f7b" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::RandomDefaultLM&lt; copulaPolicy, USNG &gt;::RandomDefaultLM</definition>
        <argsstring>(const ext::shared_ptr&lt; DefaultLatentModel&lt; copulaPolicy &gt; &gt; &amp;model, const std::vector&lt; Real &gt; &amp;recoveries=std::vector&lt; Real &gt;(), Size nSims=0, Real accuracy=1.e-6, BigNatural seed=2863311530UL)</argsstring>
        <name>RandomDefaultLM</name>
        <qualifiedname>QuantLib::RandomDefaultLM::RandomDefaultLM</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_default_latent_model" kindref="compound">DefaultLatentModel</ref>&lt; copulaPolicy &gt; &gt; &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>recoveries</declname>
          <defval>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>nSims</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.e-6</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
          <declname>seed</declname>
          <defval>2863311530UL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="818" column="16" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="818" bodyend="831"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_default_l_m_1ae4bdd8404654f9dcd03bdc686d7d437b" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::RandomDefaultLM&lt; copulaPolicy, USNG &gt;::RandomDefaultLM</definition>
        <argsstring>(const ext::shared_ptr&lt; ConstantLossLatentmodel&lt; copulaPolicy &gt; &gt; &amp;model, Size nSims=0, Real accuracy=1.e-6, BigNatural seed=2863311530UL)</argsstring>
        <name>RandomDefaultLM</name>
        <qualifiedname>QuantLib::RandomDefaultLM::RandomDefaultLM</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_constant_loss_latentmodel" kindref="compound">ConstantLossLatentmodel</ref>&lt; copulaPolicy &gt; &gt; &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>nSims</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.e-6</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
          <declname>seed</declname>
          <defval>2863311530UL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="832" column="18" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="832" bodyend="847"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_random_default_l_m_1a3dd87839d2a2fc126d188f24b70b1c12" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::RandomDefaultLM&lt; C, URNG &gt;::nextSample</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;values) const</argsstring>
        <name>nextSample</name>
        <qualifiedname>QuantLib::RandomDefaultLM::nextSample</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="862" column="14" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="920" bodyend="963"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_default_l_m_1aadd551c9240b91630a032dd5722c7cc0" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::RandomDefaultLM&lt; copulaPolicy, USNG &gt;::initDates</definition>
        <argsstring>() const</argsstring>
        <name>initDates</name>
        <qualifiedname>QuantLib::RandomDefaultLM::initDates</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="863" column="14" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="863" bodyend="876"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_default_l_m_1ad2c7eb406246eb718453533b4ce5a640" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::RandomDefaultLM&lt; copulaPolicy, USNG &gt;::getEventRecovery</definition>
        <argsstring>(const defaultSimEvent &amp;evt) const</argsstring>
        <name>getEventRecovery</name>
        <qualifiedname>QuantLib::RandomDefaultLM::getEventRecovery</qualifiedname>
        <param>
          <type>const <ref refid="struct_quant_lib_1_1sim_event" kindref="compound">defaultSimEvent</ref> &amp;</type>
          <declname>evt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="877" column="14" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="877" bodyend="879"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_default_l_m_1afeef248e85b2286a2b5494fc9beb73b5" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::RandomDefaultLM&lt; copulaPolicy, USNG &gt;::expectedRecovery</definition>
        <argsstring>(const Date &amp;, Size iName, const DefaultProbKey &amp;) const override</argsstring>
        <name>expectedRecovery</name>
        <qualifiedname>QuantLib::RandomDefaultLM::expectedRecovery</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1afd0d4637df1423173d5efc758a16f354">expectedRecovery</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_default_prob_key" kindref="compound">DefaultProbKey</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Expected RR for name conditinal to default by that date. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="880" column="14" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="880" bodyend="883"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_default_l_m_1a3c202a2c2fb916a309cde38358722e0c" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::RandomDefaultLM&lt; copulaPolicy, USNG &gt;::latentVarValue</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;factorsSample, Size iVar) const</argsstring>
        <name>latentVarValue</name>
        <qualifiedname>QuantLib::RandomDefaultLM::latentVarValue</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>factorsSample</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iVar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="885" column="14" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="885" bodyend="888"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_default_l_m_1a4a809daed0f8d61354701c0d861f5d09" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::RandomDefaultLM&lt; copulaPolicy, USNG &gt;::basketSize</definition>
        <argsstring>() const</argsstring>
        <name>basketSize</name>
        <qualifiedname>QuantLib::RandomDefaultLM::basketSize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="891" column="14" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="891" bodyend="891"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_random_default_l_m_1ad7d71ea82ce38fb499258d3a7937facb" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::RandomDefaultLM&lt; copulaPolicy, USNG &gt;::resetModel</definition>
        <argsstring>() override</argsstring>
        <name>resetModel</name>
        <qualifiedname>QuantLib::RandomDefaultLM::resetModel</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1ac32cbab626c8ba8ebb0dcace3eed4a38">resetModel</reimplements>
        <briefdescription>
<para>Concrete models do now any updates/inits they need on basket reset. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="893" column="12" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="893" bodyend="907"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Random default with deterministic recovery event type.<simplesect kind="par"><title></title><para>Stores sims results in a bitfield buffer for lean memory storage. Although strictly speaking this is not guaranteed by the compiler it amounts to reducing the memory storage by half. Some computations, like conditional statistics, precise that all sims results be available.</para>
</simplesect>
<ref refid="struct_quant_lib_1_1_default" kindref="compound">Default</ref> only latent model simulation with trivially fixed recovery amounts. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="6">
        <label>QuantLib::DefaultLossModel</label>
        <link refid="class_quant_lib_1_1_default_loss_model"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="1">
        <label>QuantLib::RandomDefaultLM&lt; copulaPolicy, USNG &gt;</label>
        <link refid="class_quant_lib_1_1_random_default_l_m"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::RandomLM&lt; RandomDefaultLM, copulaPolicy, SobolRsg &gt;</label>
        <link refid="class_quant_lib_1_1_random_l_m"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>QuantLib::DefaultLossModel</label>
        <link refid="class_quant_lib_1_1_default_loss_model"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>basket_</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>QuantLib::Handle&lt; QuantLib::Basket &gt;</label>
        <link refid="class_quant_lib_1_1_handle"/>
      </node>
      <node id="3">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="1">
        <label>QuantLib::RandomDefaultLM&lt; copulaPolicy, USNG &gt;</label>
        <link refid="class_quant_lib_1_1_random_default_l_m"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::RandomLM&lt; RandomDefaultLM, copulaPolicy, SobolRsg &gt;</label>
        <link refid="class_quant_lib_1_1_random_l_m"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::RelinkableHandle&lt; QuantLib::Basket &gt;</label>
        <link refid="class_quant_lib_1_1_relinkable_handle"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="806" column="5" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="807" bodyend="913"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_random_default_l_m_1a562471bf29ef36ea57a7468cd085c9f3" prot="private" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>accuracy_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a02070ea7442d30625992c1711030d4b8" prot="protected" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>alwaysForward_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a17c9433135a259e4776baec66204a484" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>alwaysForwardNotifications</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ad2700ffb7198321f52fdeb42e9a8e043" prot="protected" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>basket_</name></member>
      <member refid="class_quant_lib_1_1_random_default_l_m_1a4a809daed0f8d61354701c0d861f5d09" prot="protected" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>basketSize</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a5244c7f83592375a0ea9048296435fd1" prot="protected" virt="virtual"><scope>QuantLib::RandomDefaultLM</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a58b4986a80efa18634483a92c121e26e" prot="protected" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>calculated_</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a938ad1437441136c3d756fda1d626a05" prot="protected" virt="virtual"><scope>QuantLib::RandomDefaultLM</scope><name>computeHistogram</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a875e4919a85024b5fb1d23d3836530a9" prot="protected" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>copula_</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a24308965e6ede94b4f8b0ad3bc4d0f37" prot="protected" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>copulasRng_</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::RandomDefaultLM</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a65e1bf84cbd60eae162d99126abb1834" prot="protected" virt="virtual"><scope>QuantLib::RandomDefaultLM</scope><name>defaultCorrelation</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ac51090f561e4372e495bfa9edee0000b" prot="protected" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>DefaultLossModel</name></member>
      <member refid="class_quant_lib_1_1_random_default_l_m_1a975253cb94c27edc43dbd53e2959477e" prot="private" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>defaultSimEvent</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ab57e81d3fdd238c0cb19db2808bc5b59" prot="protected" virt="virtual"><scope>QuantLib::RandomDefaultLM</scope><name>densityTrancheLoss</name></member>
      <member refid="class_quant_lib_1_1_random_default_l_m_1afeef248e85b2286a2b5494fc9beb73b5" prot="protected" virt="virtual"><scope>QuantLib::RandomDefaultLM</scope><name>expectedRecovery</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a4d3026de4233c47b892cabda67feacea" prot="protected" virt="virtual"><scope>QuantLib::RandomDefaultLM</scope><name>expectedShortfall</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a517374354871d97b20e9c67b27d88e2a" prot="protected" virt="virtual"><scope>QuantLib::RandomDefaultLM</scope><name>expectedTrancheLoss</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1af984a2a4cca81e40921b84f4b873c551" prot="protected" virt="virtual"><scope>QuantLib::RandomDefaultLM</scope><name>expectedTrancheLossInterval</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1afac6ee19c3107c453e1347dd8000e023" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>forwardFirstNotificationOnly</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7157f41e83f2c5d924f5c5bafda04d1d" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>freeze</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7bb721fe00c6854e602758aba629ab77" prot="protected" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>frozen_</name></member>
      <member refid="class_quant_lib_1_1_random_default_l_m_1ad2c7eb406246eb718453533b4ce5a640" prot="protected" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>getEventRecovery</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a65756d27445e4261e8bbf377849ca2c9" prot="protected" virt="non-virtual" ambiguityscope="QuantLib::RandomLM&lt; RandomDefaultLM, copulaPolicy, SobolRsg &gt;::"><scope>QuantLib::RandomDefaultLM</scope><name>getEventRecovery</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a091504a34840eac2b14ffe005c0b6843" prot="protected" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>getSim</name></member>
      <member refid="class_quant_lib_1_1_random_default_l_m_1af677309bccdea219098dd1c8846329e6" prot="private" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>horizonDefaultPs_</name></member>
      <member refid="class_quant_lib_1_1_random_default_l_m_1aadd551c9240b91630a032dd5722c7cc0" prot="protected" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>initDates</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a0a7c5d42815a4e16ee2158e24dbfc748" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>isCalculated</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_random_default_l_m_1a3c202a2c2fb916a309cde38358722e0c" prot="protected" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>latentVarValue</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a26f18f4ff7faaaebd8eae50e064b493e" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>LazyObject</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a07ceb3783bff4c2b911f853d39d66074" prot="protected" virt="virtual"><scope>QuantLib::RandomDefaultLM</scope><name>lossDistribution</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a199660d1507c7764679e92eef833b841" prot="protected" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>maxHorizon_</name></member>
      <member refid="class_quant_lib_1_1_random_default_l_m_1aa0358b5ad5c4fe760a05aa2b949a078f" prot="private" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>model_</name></member>
      <member refid="class_quant_lib_1_1_random_default_l_m_1a3dd87839d2a2fc126d188f24b70b1c12" prot="protected" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>nextSample</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1aba4a30f98317ef5d2d71d2173c2c5869" prot="protected" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>nSims_</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a205ba9e89de18296f359864c37aa1450" prot="protected" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>numFactors_</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a02e7e50c573a4f470b302cdf7ecc3aff" prot="protected" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>numLMVars_</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::DefaultLossModel::"><scope>QuantLib::RandomDefaultLM</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::DefaultLossModel::"><scope>QuantLib::RandomDefaultLM</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::RandomDefaultLM</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::RandomDefaultLM</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::DefaultLossModel::"><scope>QuantLib::RandomDefaultLM</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::RandomLM&lt; RandomDefaultLM, copulaPolicy, SobolRsg &gt;::QuantLib::LazyObject::QuantLib::Observer::"><scope>QuantLib::RandomDefaultLM</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1ad81926f2a22d5555c4e9c6a1c4df4928" prot="protected" virt="virtual"><scope>QuantLib::RandomDefaultLM</scope><name>percentile</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1aa3b6a096daf1a894f4b06c5d6ae68934" prot="protected" virt="virtual"><scope>QuantLib::RandomDefaultLM</scope><name>percentileAndInterval</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a0ac9a7bf809a54db301b8f66f9fb3768" prot="protected" virt="virtual"><scope>QuantLib::RandomDefaultLM</scope><name>performCalculations</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a50df3747c1189bb14a9e7a938a43c1ae" prot="protected" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>performSimulations</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a4573522256974f56442feed91246249c" prot="protected" virt="virtual"><scope>QuantLib::RandomDefaultLM</scope><name>probAtLeastNEvents</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1a922ca5f0ea73b3a33420fbcfb2556e93" prot="protected" virt="virtual"><scope>QuantLib::RandomDefaultLM</scope><name>probOverLoss</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a61f890c966b50d23efc6b7c231b7c1e2" prot="protected" virt="virtual"><scope>QuantLib::RandomDefaultLM</scope><name>probsBeingNthEvent</name></member>
      <member refid="class_quant_lib_1_1_random_default_l_m_1ad94c6279aed1a33d94696ce146bf5f7b" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>RandomDefaultLM</name></member>
      <member refid="class_quant_lib_1_1_random_default_l_m_1ae4bdd8404654f9dcd03bdc686d7d437b" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>RandomDefaultLM</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1ad8368a31961fef105ee83e0aae8aca77" prot="protected" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>RandomLM</name></member>
      <member refid="class_quant_lib_1_1_random_default_l_m_1ad7e1f58aee2f3bf59acabfb4c4410c0f" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>RandomLM&lt; ::QuantLib::RandomDefaultLM, copulaPolicy, USNG &gt;</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a70c9b24e50132408d8d9ce4f6674662a" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>recalculate</name></member>
      <member refid="class_quant_lib_1_1_random_default_l_m_1a79b2222462506b8ad2bb7ced403279cc" prot="private" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>recoveries_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_random_default_l_m_1ad7d71ea82ce38fb499258d3a7937facb" prot="private" virt="virtual"><scope>QuantLib::RandomDefaultLM</scope><name>resetModel</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1adef2809f92d6028e82303b25c43c28e6" prot="protected" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>simsBuffer_</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1a467843d56b00359a8fa7d0a1017079a5" prot="protected" virt="virtual"><scope>QuantLib::RandomDefaultLM</scope><name>splitESFLevel</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a682e69146ccd628df74a73ed296e32be" prot="protected" virt="virtual"><scope>QuantLib::RandomDefaultLM</scope><name>splitVaRAndError</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a46f349953322fb99f243d90734cf2bbd" prot="protected" virt="virtual"><scope>QuantLib::RandomDefaultLM</scope><name>splitVaRLevel</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a2e0e4786666453024b9d4e0761f2770b" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>unfreeze</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1afdaffcaed2e17a3e4732f681731adf63" prot="protected" virt="virtual"><scope>QuantLib::RandomDefaultLM</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a9d719c43bb627177a90d7d12324a2d6e" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>~LazyObject</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::RandomDefaultLM</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::RandomDefaultLM</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a66930dbc082605c3eaaa132198c85585" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultLM</scope><name>~RandomLM</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
