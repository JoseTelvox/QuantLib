<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="struct_quant_lib_1_1_a_s_x" kind="struct" language="C++" prot="public">
    <compoundname>QuantLib::ASX</compoundname>
    <includes refid="asx_8hpp" local="no">asx.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4b" prot="public" static="no" strong="no">
        <type></type>
        <name>Month</name>
        <qualifiedname>QuantLib::ASX::Month</qualifiedname>
        <enumvalue id="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4bac73ad82ada51e7a62ef41566f630d51d" prot="public">
          <name>F</name>
          <initializer>=  1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4bafe296d68d43b40ca15b21b60952d07fd" prot="public">
          <name>G</name>
          <initializer>=  2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4ba9feb2206d73b308c41e4eb8361d88b31" prot="public">
          <name>H</name>
          <initializer>=  3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4badbf8640d7609ff528cd10098130c1d8b" prot="public">
          <name>J</name>
          <initializer>=  4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4baa9825adf40b38d49179fccc29e6a6de6" prot="public">
          <name>K</name>
          <initializer>=  5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4babd893c8bcbd8389b2492d93c91ea3fcc" prot="public">
          <name>M</name>
          <initializer>=  6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4ba515d8e32e15c78c509c9c74e6d0fe475" prot="public">
          <name>N</name>
          <initializer>=  7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4ba52bbadd8b56a27176350827e2169cffa" prot="public">
          <name>Q</name>
          <initializer>=  8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4ba5694a2f9f0cbe241332cb5f2a62c6ec2" prot="public">
          <name>U</name>
          <initializer>=  9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4ba8c2946263a7cd8d64a79f655ce9b0d7f" prot="public">
          <name>V</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4ba2022924f5cef963b9fe5d2756e526175" prot="public">
          <name>X</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4bab9abf172a64dc840e7a8e5e0e68f4654" prot="public">
          <name>Z</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/asx.hpp" line="37" column="9" bodyfile="ql/time/asx.hpp" bodystart="37" bodyend="40"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_quant_lib_1_1_a_s_x_1a5ae0f170d4a0804a233d09ce569fd5b4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::ASX::isASXdate</definition>
        <argsstring>(const Date &amp;d, bool mainCycle=true)</argsstring>
        <name>isASXdate</name>
        <qualifiedname>QuantLib::ASX::isASXdate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>mainCycle</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>returns whether or not the given date is an <ref refid="struct_quant_lib_1_1_a_s_x" kindref="compound">ASX</ref> date </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/asx.hpp" line="43" column="21" bodyfile="ql/time/asx.cpp" bodystart="38" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_a_s_x_1a9d96dbe865b06b4ed097b9fda9cf7b36" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::ASX::isASXcode</definition>
        <argsstring>(const std::string &amp;in, bool mainCycle=true)</argsstring>
        <name>isASXcode</name>
        <qualifiedname>QuantLib::ASX::isASXcode</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>mainCycle</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>returns whether or not the given string is an <ref refid="struct_quant_lib_1_1_a_s_x" kindref="compound">ASX</ref> code </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/asx.hpp" line="47" column="21" bodyfile="ql/time/asx.cpp" bodystart="59" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_a_s_x_1ac18cf71e53f81fe5f9c029327bd3dcd0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string QuantLib::ASX::code</definition>
        <argsstring>(const Date &amp;asxDate)</argsstring>
        <name>code</name>
        <qualifiedname>QuantLib::ASX::code</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>asxDate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the <ref refid="struct_quant_lib_1_1_a_s_x" kindref="compound">ASX</ref> code for the given date (e.g. M5 for June 12th, 2015).</para>
<para><simplesect kind="warning"><para>It raises an exception if the input date is not an <ref refid="struct_quant_lib_1_1_a_s_x" kindref="compound">ASX</ref> date </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/asx.hpp" line="56" column="28" bodyfile="ql/time/asx.cpp" bodystart="72" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_a_s_x_1aecea456469ff0cc9c935cb709341f341" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::ASX::date</definition>
        <argsstring>(const std::string &amp;asxCode, const Date &amp;referenceDate=Date())</argsstring>
        <name>date</name>
        <qualifiedname>QuantLib::ASX::date</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>asxCode</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>referenceDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the <ref refid="struct_quant_lib_1_1_a_s_x" kindref="compound">ASX</ref> date for the given <ref refid="struct_quant_lib_1_1_a_s_x" kindref="compound">ASX</ref> code (e.g. June 12th, 2015 for M5).</para>
<para><simplesect kind="warning"><para>It raises an exception if the input string is not an <ref refid="struct_quant_lib_1_1_a_s_x" kindref="compound">ASX</ref> code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/asx.hpp" line="64" column="21" bodyfile="ql/time/asx.cpp" bodystart="90" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_a_s_x_1aea2e6e3b3cdb8eb4946cee4492ae5f61" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::ASX::nextDate</definition>
        <argsstring>(const Date &amp;d=Date(), bool mainCycle=true)</argsstring>
        <name>nextDate</name>
        <qualifiedname>QuantLib::ASX::nextDate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>mainCycle</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>next <ref refid="struct_quant_lib_1_1_a_s_x" kindref="compound">ASX</ref> date following the given date </para>
        </briefdescription>
        <detaileddescription>
<para>returns the 1st delivery date for next contract listed in the Australian Securities Exchange. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/asx.hpp" line="71" column="21" bodyfile="ql/time/asx.cpp" bodystart="119" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_a_s_x_1ab48f1fbe24654f1a8b2f15e62ddfd242" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::ASX::nextDate</definition>
        <argsstring>(const std::string &amp;asxCode, bool mainCycle=true, const Date &amp;referenceDate=Date())</argsstring>
        <name>nextDate</name>
        <qualifiedname>QuantLib::ASX::nextDate</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>asxCode</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>mainCycle</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>referenceDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>next <ref refid="struct_quant_lib_1_1_a_s_x" kindref="compound">ASX</ref> date following the given <ref refid="struct_quant_lib_1_1_a_s_x" kindref="compound">ASX</ref> code </para>
        </briefdescription>
        <detaileddescription>
<para>returns the 1st delivery date for next contract listed in the Australian Securities Exchange </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/asx.hpp" line="78" column="21" bodyfile="ql/time/asx.cpp" bodystart="144" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_a_s_x_1aa9ca66680204b27c9592304a9eb8858e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string QuantLib::ASX::nextCode</definition>
        <argsstring>(const Date &amp;d=Date(), bool mainCycle=true)</argsstring>
        <name>nextCode</name>
        <qualifiedname>QuantLib::ASX::nextCode</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>mainCycle</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>next <ref refid="struct_quant_lib_1_1_a_s_x" kindref="compound">ASX</ref> code following the given date </para>
        </briefdescription>
        <detaileddescription>
<para>returns the <ref refid="struct_quant_lib_1_1_a_s_x" kindref="compound">ASX</ref> code for next contract listed in the Australian Securities Exchange </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/asx.hpp" line="86" column="28" bodyfile="ql/time/asx.cpp" bodystart="151" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_a_s_x_1a46593e75d35109ad5fdb7aa37fe37189" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string QuantLib::ASX::nextCode</definition>
        <argsstring>(const std::string &amp;asxCode, bool mainCycle=true, const Date &amp;referenceDate=Date())</argsstring>
        <name>nextCode</name>
        <qualifiedname>QuantLib::ASX::nextCode</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>asxCode</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>mainCycle</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>referenceDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>next <ref refid="struct_quant_lib_1_1_a_s_x" kindref="compound">ASX</ref> code following the given code </para>
        </briefdescription>
        <detaileddescription>
<para>returns the <ref refid="struct_quant_lib_1_1_a_s_x" kindref="compound">ASX</ref> code for next contract listed in the Australian Securities Exchange </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/asx.hpp" line="93" column="28" bodyfile="ql/time/asx.cpp" bodystart="157" bodyend="162"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Main cycle of the Australian Securities Exchange (a.k.a. <ref refid="struct_quant_lib_1_1_a_s_x" kindref="compound">ASX</ref>) months. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ql/time/asx.hpp" line="36" column="5" bodyfile="ql/time/asx.hpp" bodystart="36" bodyend="96"/>
    <listofallmembers>
      <member refid="struct_quant_lib_1_1_a_s_x_1ac18cf71e53f81fe5f9c029327bd3dcd0" prot="public" virt="non-virtual"><scope>QuantLib::ASX</scope><name>code</name></member>
      <member refid="struct_quant_lib_1_1_a_s_x_1aecea456469ff0cc9c935cb709341f341" prot="public" virt="non-virtual"><scope>QuantLib::ASX</scope><name>date</name></member>
      <member refid="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4bac73ad82ada51e7a62ef41566f630d51d" prot="public" virt="non-virtual"><scope>QuantLib::ASX</scope><name>F</name></member>
      <member refid="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4bafe296d68d43b40ca15b21b60952d07fd" prot="public" virt="non-virtual"><scope>QuantLib::ASX</scope><name>G</name></member>
      <member refid="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4ba9feb2206d73b308c41e4eb8361d88b31" prot="public" virt="non-virtual"><scope>QuantLib::ASX</scope><name>H</name></member>
      <member refid="struct_quant_lib_1_1_a_s_x_1a9d96dbe865b06b4ed097b9fda9cf7b36" prot="public" virt="non-virtual"><scope>QuantLib::ASX</scope><name>isASXcode</name></member>
      <member refid="struct_quant_lib_1_1_a_s_x_1a5ae0f170d4a0804a233d09ce569fd5b4" prot="public" virt="non-virtual"><scope>QuantLib::ASX</scope><name>isASXdate</name></member>
      <member refid="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4badbf8640d7609ff528cd10098130c1d8b" prot="public" virt="non-virtual"><scope>QuantLib::ASX</scope><name>J</name></member>
      <member refid="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4baa9825adf40b38d49179fccc29e6a6de6" prot="public" virt="non-virtual"><scope>QuantLib::ASX</scope><name>K</name></member>
      <member refid="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4babd893c8bcbd8389b2492d93c91ea3fcc" prot="public" virt="non-virtual"><scope>QuantLib::ASX</scope><name>M</name></member>
      <member refid="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4b" prot="public" virt="non-virtual"><scope>QuantLib::ASX</scope><name>Month</name></member>
      <member refid="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4ba515d8e32e15c78c509c9c74e6d0fe475" prot="public" virt="non-virtual"><scope>QuantLib::ASX</scope><name>N</name></member>
      <member refid="struct_quant_lib_1_1_a_s_x_1aa9ca66680204b27c9592304a9eb8858e" prot="public" virt="non-virtual"><scope>QuantLib::ASX</scope><name>nextCode</name></member>
      <member refid="struct_quant_lib_1_1_a_s_x_1a46593e75d35109ad5fdb7aa37fe37189" prot="public" virt="non-virtual"><scope>QuantLib::ASX</scope><name>nextCode</name></member>
      <member refid="struct_quant_lib_1_1_a_s_x_1aea2e6e3b3cdb8eb4946cee4492ae5f61" prot="public" virt="non-virtual"><scope>QuantLib::ASX</scope><name>nextDate</name></member>
      <member refid="struct_quant_lib_1_1_a_s_x_1ab48f1fbe24654f1a8b2f15e62ddfd242" prot="public" virt="non-virtual"><scope>QuantLib::ASX</scope><name>nextDate</name></member>
      <member refid="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4ba52bbadd8b56a27176350827e2169cffa" prot="public" virt="non-virtual"><scope>QuantLib::ASX</scope><name>Q</name></member>
      <member refid="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4ba5694a2f9f0cbe241332cb5f2a62c6ec2" prot="public" virt="non-virtual"><scope>QuantLib::ASX</scope><name>U</name></member>
      <member refid="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4ba8c2946263a7cd8d64a79f655ce9b0d7f" prot="public" virt="non-virtual"><scope>QuantLib::ASX</scope><name>V</name></member>
      <member refid="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4ba2022924f5cef963b9fe5d2756e526175" prot="public" virt="non-virtual"><scope>QuantLib::ASX</scope><name>X</name></member>
      <member refid="struct_quant_lib_1_1_a_s_x_1af260f1e5aa796148bcae63582978fd4bab9abf172a64dc840e7a8e5e0e68f4654" prot="public" virt="non-virtual"><scope>QuantLib::ASX</scope><name>Z</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
