<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="namespace_quant_lib" kind="namespace" language="C++">
    <compoundname>QuantLib</compoundname>
    <innerclass refid="class_quant_lib_1_1_abcd" prot="public">QuantLib::Abcd</innerclass>
    <innerclass refid="class_quant_lib_1_1_abcd_atm_vol_curve" prot="public">QuantLib::AbcdAtmVolCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_abcd_calibration" prot="public">QuantLib::AbcdCalibration</innerclass>
    <innerclass refid="class_quant_lib_1_1_abcd_function" prot="public">QuantLib::AbcdFunction</innerclass>
    <innerclass refid="class_quant_lib_1_1_abcd_interpolation" prot="public">QuantLib::AbcdInterpolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_abcd_math_function" prot="public">QuantLib::AbcdMathFunction</innerclass>
    <innerclass refid="class_quant_lib_1_1_abcd_squared" prot="public">QuantLib::AbcdSquared</innerclass>
    <innerclass refid="class_quant_lib_1_1_abcd_vol" prot="public">QuantLib::AbcdVol</innerclass>
    <innerclass refid="class_quant_lib_1_1_accounting_engine" prot="public">QuantLib::AccountingEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_actual360" prot="public">QuantLib::Actual360</innerclass>
    <innerclass refid="class_quant_lib_1_1_actual364" prot="public">QuantLib::Actual364</innerclass>
    <innerclass refid="class_quant_lib_1_1_actual36525" prot="public">QuantLib::Actual36525</innerclass>
    <innerclass refid="class_quant_lib_1_1_actual365_fixed" prot="public">QuantLib::Actual365Fixed</innerclass>
    <innerclass refid="class_quant_lib_1_1_actual366" prot="public">QuantLib::Actual366</innerclass>
    <innerclass refid="class_quant_lib_1_1_actual_actual" prot="public">QuantLib::ActualActual</innerclass>
    <innerclass refid="class_quant_lib_1_1_acyclic_visitor" prot="public">QuantLib::AcyclicVisitor</innerclass>
    <innerclass refid="class_quant_lib_1_1_adapted_path_payoff" prot="public">QuantLib::AdaptedPathPayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_adaptive_inertia" prot="public">QuantLib::AdaptiveInertia</innerclass>
    <innerclass refid="class_quant_lib_1_1_adaptive_runge_kutta" prot="public">QuantLib::AdaptiveRungeKutta</innerclass>
    <innerclass refid="class_quant_lib_1_1_additional_bootstrap_variables" prot="public">QuantLib::AdditionalBootstrapVariables</innerclass>
    <innerclass refid="class_quant_lib_1_1_additive_e_q_p_binomial_tree" prot="public">QuantLib::AdditiveEQPBinomialTree</innerclass>
    <innerclass refid="class_quant_lib_1_1_a_e_d_currency" prot="public">QuantLib::AEDCurrency</innerclass>
    <innerclass refid="struct_quant_lib_1_1_affine_hazard_rate" prot="public">QuantLib::AffineHazardRate</innerclass>
    <innerclass refid="class_quant_lib_1_1_affine_model" prot="public">QuantLib::AffineModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_akima_cubic_interpolation" prot="public">QuantLib::AkimaCubicInterpolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_ali_mikhail_haq_copula" prot="public">QuantLib::AliMikhailHaqCopula</innerclass>
    <innerclass refid="class_quant_lib_1_1_alpha_finder" prot="public">QuantLib::AlphaFinder</innerclass>
    <innerclass refid="class_quant_lib_1_1_alpha_form" prot="public">QuantLib::AlphaForm</innerclass>
    <innerclass refid="class_quant_lib_1_1_alpha_form_inverse_linear" prot="public">QuantLib::AlphaFormInverseLinear</innerclass>
    <innerclass refid="class_quant_lib_1_1_alpha_form_linear_hyperbolic" prot="public">QuantLib::AlphaFormLinearHyperbolic</innerclass>
    <innerclass refid="class_quant_lib_1_1_american_basket_path_pricer" prot="public">QuantLib::AmericanBasketPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_american_exercise" prot="public">QuantLib::AmericanExercise</innerclass>
    <innerclass refid="class_quant_lib_1_1_american_path_pricer" prot="public">QuantLib::AmericanPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_american_payoff_at_expiry" prot="public">QuantLib::AmericanPayoffAtExpiry</innerclass>
    <innerclass refid="class_quant_lib_1_1_american_payoff_at_hit" prot="public">QuantLib::AmericanPayoffAtHit</innerclass>
    <innerclass refid="class_quant_lib_1_1_amortizing_cms_rate_bond" prot="public">QuantLib::AmortizingCmsRateBond</innerclass>
    <innerclass refid="class_quant_lib_1_1_amortizing_fixed_rate_bond" prot="public">QuantLib::AmortizingFixedRateBond</innerclass>
    <innerclass refid="class_quant_lib_1_1_amortizing_floating_rate_bond" prot="public">QuantLib::AmortizingFloatingRateBond</innerclass>
    <innerclass refid="class_quant_lib_1_1_amortizing_payment" prot="public">QuantLib::AmortizingPayment</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_american_margrabe_engine" prot="public">QuantLib::AnalyticAmericanMargrabeEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_barrier_engine" prot="public">QuantLib::AnalyticBarrierEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_binary_barrier_engine" prot="public">QuantLib::AnalyticBinaryBarrierEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_binary_barrier_engine__helper" prot="public">QuantLib::AnalyticBinaryBarrierEngine_helper</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_black_vasicek_engine" prot="public">QuantLib::AnalyticBlackVasicekEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_b_s_m_hull_white_engine" prot="public">QuantLib::AnalyticBSMHullWhiteEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_cap_floor_engine" prot="public">QuantLib::AnalyticCapFloorEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_c_e_v_engine" prot="public">QuantLib::AnalyticCEVEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_cliquet_engine" prot="public">QuantLib::AnalyticCliquetEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_complex_chooser_engine" prot="public">QuantLib::AnalyticComplexChooserEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_compound_option_engine" prot="public">QuantLib::AnalyticCompoundOptionEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_continuous_fixed_lookback_engine" prot="public">QuantLib::AnalyticContinuousFixedLookbackEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_continuous_floating_lookback_engine" prot="public">QuantLib::AnalyticContinuousFloatingLookbackEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_continuous_geometric_average_price_asian_engine" prot="public">QuantLib::AnalyticContinuousGeometricAveragePriceAsianEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_continuous_geometric_average_price_asian_heston_engine" prot="public">QuantLib::AnalyticContinuousGeometricAveragePriceAsianHestonEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_continuous_partial_fixed_lookback_engine" prot="public">QuantLib::AnalyticContinuousPartialFixedLookbackEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_continuous_partial_floating_lookback_engine" prot="public">QuantLib::AnalyticContinuousPartialFloatingLookbackEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_digital_american_engine" prot="public">QuantLib::AnalyticDigitalAmericanEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_digital_american_k_o_engine" prot="public">QuantLib::AnalyticDigitalAmericanKOEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_engine" prot="public">QuantLib::AnalyticDiscreteGeometricAveragePriceAsianEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine" prot="public">QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_discrete_geometric_average_strike_asian_engine" prot="public">QuantLib::AnalyticDiscreteGeometricAverageStrikeAsianEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_dividend_european_engine" prot="public">QuantLib::AnalyticDividendEuropeanEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_double_barrier_binary_engine" prot="public">QuantLib::AnalyticDoubleBarrierBinaryEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_double_barrier_binary_engine__helper" prot="public">QuantLib::AnalyticDoubleBarrierBinaryEngine_helper</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_double_barrier_engine" prot="public">QuantLib::AnalyticDoubleBarrierEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_european_engine" prot="public">QuantLib::AnalyticEuropeanEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_european_margrabe_engine" prot="public">QuantLib::AnalyticEuropeanMargrabeEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_g_j_r_g_a_r_c_h_engine" prot="public">QuantLib::AnalyticGJRGARCHEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_h1_h_w_engine" prot="public">QuantLib::AnalyticH1HWEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_hagan_pricer" prot="public">QuantLib::AnalyticHaganPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_heston_engine" prot="public">QuantLib::AnalyticHestonEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_heston_forward_european_engine" prot="public">QuantLib::AnalyticHestonForwardEuropeanEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_heston_hull_white_engine" prot="public">QuantLib::AnalyticHestonHullWhiteEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_holder_extensible_option_engine" prot="public">QuantLib::AnalyticHolderExtensibleOptionEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_partial_time_barrier_option_engine" prot="public">QuantLib::AnalyticPartialTimeBarrierOptionEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_p_d_f_heston_engine" prot="public">QuantLib::AnalyticPDFHestonEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_performance_engine" prot="public">QuantLib::AnalyticPerformanceEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_p_t_d_heston_engine" prot="public">QuantLib::AnalyticPTDHestonEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_simple_chooser_engine" prot="public">QuantLib::AnalyticSimpleChooserEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine" prot="public">QuantLib::AnalyticTwoAssetBarrierEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_two_asset_correlation_engine" prot="public">QuantLib::AnalyticTwoAssetCorrelationEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_analytic_writer_extensible_option_engine" prot="public">QuantLib::AnalyticWriterExtensibleOptionEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_andreasen_huge_cost_function" prot="public">QuantLib::AndreasenHugeCostFunction</innerclass>
    <innerclass refid="class_quant_lib_1_1_andreasen_huge_local_vol_adapter" prot="public">QuantLib::AndreasenHugeLocalVolAdapter</innerclass>
    <innerclass refid="class_quant_lib_1_1_andreasen_huge_volatility_adapter" prot="public">QuantLib::AndreasenHugeVolatilityAdapter</innerclass>
    <innerclass refid="class_quant_lib_1_1_andreasen_huge_volatility_interpl" prot="public">QuantLib::AndreasenHugeVolatilityInterpl</innerclass>
    <innerclass refid="class_quant_lib_1_1_a_o_a_currency" prot="public">QuantLib::AOACurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_aonia" prot="public">QuantLib::Aonia</innerclass>
    <innerclass refid="class_quant_lib_1_1_argentina" prot="public">QuantLib::Argentina</innerclass>
    <innerclass refid="class_quant_lib_1_1_arithmetic_a_p_o_heston_path_pricer" prot="public">QuantLib::ArithmeticAPOHestonPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_arithmetic_a_p_o_path_pricer" prot="public">QuantLib::ArithmeticAPOPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_arithmetic_a_s_o_path_pricer" prot="public">QuantLib::ArithmeticASOPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_arithmetic_averaged_overnight_indexed_coupon_pricer" prot="public">QuantLib::ArithmeticAveragedOvernightIndexedCouponPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_arithmetic_average_o_i_s" prot="public">QuantLib::ArithmeticAverageOIS</innerclass>
    <innerclass refid="class_quant_lib_1_1_arithmetic_o_i_s_rate_helper" prot="public">QuantLib::ArithmeticOISRateHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_armijo_line_search" prot="public">QuantLib::ArmijoLineSearch</innerclass>
    <innerclass refid="class_quant_lib_1_1_array" prot="public">QuantLib::Array</innerclass>
    <innerclass refid="class_quant_lib_1_1_a_r_s_currency" prot="public">QuantLib::ARSCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_asset_or_nothing_payoff" prot="public">QuantLib::AssetOrNothingPayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_asset_swap" prot="public">QuantLib::AssetSwap</innerclass>
    <innerclass refid="class_quant_lib_1_1_asset_swap_helper" prot="public">QuantLib::AssetSwapHelper</innerclass>
    <innerclass refid="struct_quant_lib_1_1_a_s_x" prot="public">QuantLib::ASX</innerclass>
    <innerclass refid="class_quant_lib_1_1_atm_adjusted_smile_section" prot="public">QuantLib::AtmAdjustedSmileSection</innerclass>
    <innerclass refid="class_quant_lib_1_1_atm_smile_section" prot="public">QuantLib::AtmSmileSection</innerclass>
    <innerclass refid="struct_quant_lib_1_1_atomic_default" prot="public">QuantLib::AtomicDefault</innerclass>
    <innerclass refid="class_quant_lib_1_1_a_t_s_currency" prot="public">QuantLib::ATSCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_a_u_c_p_i" prot="public">QuantLib::AUCPI</innerclass>
    <innerclass refid="class_quant_lib_1_1_a_u_d_currency" prot="public">QuantLib::AUDCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_a_u_d_libor" prot="public">QuantLib::AUDLibor</innerclass>
    <innerclass refid="class_quant_lib_1_1_australia" prot="public">QuantLib::Australia</innerclass>
    <innerclass refid="class_quant_lib_1_1_australia_region" prot="public">QuantLib::AustraliaRegion</innerclass>
    <innerclass refid="class_quant_lib_1_1_austria" prot="public">QuantLib::Austria</innerclass>
    <innerclass refid="struct_quant_lib_1_1_average" prot="public">QuantLib::Average</innerclass>
    <innerclass refid="class_quant_lib_1_1_average_basket_payoff" prot="public">QuantLib::AverageBasketPayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_average_b_m_a_coupon" prot="public">QuantLib::AverageBMACoupon</innerclass>
    <innerclass refid="class_quant_lib_1_1_average_b_m_a_leg" prot="public">QuantLib::AverageBMALeg</innerclass>
    <innerclass refid="class_quant_lib_1_1_averaging_multiple_resets_pricer" prot="public">QuantLib::AveragingMultipleResetsPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_bachelier_cap_floor_engine" prot="public">QuantLib::BachelierCapFloorEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_bachelier_swaption_engine" prot="public">QuantLib::BachelierSwaptionEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_bachelier_yo_y_inflation_coupon_pricer" prot="public">QuantLib::BachelierYoYInflationCouponPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_backward_flat" prot="public">QuantLib::BackwardFlat</innerclass>
    <innerclass refid="class_quant_lib_1_1_backward_flat_interpolation" prot="public">QuantLib::BackwardFlatInterpolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_backwardflat_linear" prot="public">QuantLib::BackwardflatLinear</innerclass>
    <innerclass refid="class_quant_lib_1_1_backwardflat_linear_interpolation" prot="public">QuantLib::BackwardflatLinearInterpolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_bankruptcy_event" prot="public">QuantLib::BankruptcyEvent</innerclass>
    <innerclass refid="class_quant_lib_1_1_barone_adesi_whaley_approximation_engine" prot="public">QuantLib::BaroneAdesiWhaleyApproximationEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_barrel_unit_of_measure" prot="public">QuantLib::BarrelUnitOfMeasure</innerclass>
    <innerclass refid="struct_quant_lib_1_1_barrier" prot="public">QuantLib::Barrier</innerclass>
    <innerclass refid="class_quant_lib_1_1_barrier_option" prot="public">QuantLib::BarrierOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_barrier_path_pricer" prot="public">QuantLib::BarrierPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_base_correlation_loss_model" prot="public">QuantLib::BaseCorrelationLossModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_base_correlation_term_structure" prot="public">QuantLib::BaseCorrelationTermStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_basis_incomplete_ordered" prot="public">QuantLib::BasisIncompleteOrdered</innerclass>
    <innerclass refid="class_quant_lib_1_1_basket" prot="public">QuantLib::Basket</innerclass>
    <innerclass refid="class_quant_lib_1_1_basket_generating_engine" prot="public">QuantLib::BasketGeneratingEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_basket_option" prot="public">QuantLib::BasketOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_basket_payoff" prot="public">QuantLib::BasketPayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_bates_det_jump_engine" prot="public">QuantLib::BatesDetJumpEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_bates_det_jump_model" prot="public">QuantLib::BatesDetJumpModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_bates_double_exp_det_jump_engine" prot="public">QuantLib::BatesDoubleExpDetJumpEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_bates_double_exp_det_jump_model" prot="public">QuantLib::BatesDoubleExpDetJumpModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_bates_double_exp_engine" prot="public">QuantLib::BatesDoubleExpEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_bates_double_exp_model" prot="public">QuantLib::BatesDoubleExpModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_bates_engine" prot="public">QuantLib::BatesEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_bates_model" prot="public">QuantLib::BatesModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_bates_process" prot="public">QuantLib::BatesProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_bbsw" prot="public">QuantLib::Bbsw</innerclass>
    <innerclass refid="class_quant_lib_1_1_bbsw1_m" prot="public">QuantLib::Bbsw1M</innerclass>
    <innerclass refid="class_quant_lib_1_1_bbsw2_m" prot="public">QuantLib::Bbsw2M</innerclass>
    <innerclass refid="class_quant_lib_1_1_bbsw3_m" prot="public">QuantLib::Bbsw3M</innerclass>
    <innerclass refid="class_quant_lib_1_1_bbsw4_m" prot="public">QuantLib::Bbsw4M</innerclass>
    <innerclass refid="class_quant_lib_1_1_bbsw5_m" prot="public">QuantLib::Bbsw5M</innerclass>
    <innerclass refid="class_quant_lib_1_1_bbsw6_m" prot="public">QuantLib::Bbsw6M</innerclass>
    <innerclass refid="class_quant_lib_1_1_b_c_h_currency" prot="public">QuantLib::BCHCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_b_d_t_currency" prot="public">QuantLib::BDTCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_b_e_f_currency" prot="public">QuantLib::BEFCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_bermudan_exercise" prot="public">QuantLib::BermudanExercise</innerclass>
    <innerclass refid="class_quant_lib_1_1_bermudan_swaption_exercise_value" prot="public">QuantLib::BermudanSwaptionExerciseValue</innerclass>
    <innerclass refid="class_quant_lib_1_1_bernstein_polynomial" prot="public">QuantLib::BernsteinPolynomial</innerclass>
    <innerclass refid="class_quant_lib_1_1_bespoke_calendar" prot="public">QuantLib::BespokeCalendar</innerclass>
    <innerclass refid="class_quant_lib_1_1_beta_risk" prot="public">QuantLib::BetaRisk</innerclass>
    <innerclass refid="class_quant_lib_1_1_beta_risk_simulation" prot="public">QuantLib::BetaRiskSimulation</innerclass>
    <innerclass refid="class_quant_lib_1_1_b_f_g_s" prot="public">QuantLib::BFGS</innerclass>
    <innerclass refid="class_quant_lib_1_1_b_g_l_currency" prot="public">QuantLib::BGLCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_b_g_n_currency" prot="public">QuantLib::BGNCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_b_h_d_currency" prot="public">QuantLib::BHDCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_biased_barrier_path_pricer" prot="public">QuantLib::BiasedBarrierPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_bibor" prot="public">QuantLib::Bibor</innerclass>
    <innerclass refid="class_quant_lib_1_1_bibor1_m" prot="public">QuantLib::Bibor1M</innerclass>
    <innerclass refid="class_quant_lib_1_1_bibor1_y" prot="public">QuantLib::Bibor1Y</innerclass>
    <innerclass refid="class_quant_lib_1_1_bibor2_m" prot="public">QuantLib::Bibor2M</innerclass>
    <innerclass refid="class_quant_lib_1_1_bibor3_m" prot="public">QuantLib::Bibor3M</innerclass>
    <innerclass refid="class_quant_lib_1_1_bibor6_m" prot="public">QuantLib::Bibor6M</innerclass>
    <innerclass refid="class_quant_lib_1_1_bibor9_m" prot="public">QuantLib::Bibor9M</innerclass>
    <innerclass refid="class_quant_lib_1_1_bibor_s_w" prot="public">QuantLib::BiborSW</innerclass>
    <innerclass refid="class_quant_lib_1_1_bi_c_gstab" prot="public">QuantLib::BiCGstab</innerclass>
    <innerclass refid="struct_quant_lib_1_1_bi_c_g_stab_result" prot="public">QuantLib::BiCGStabResult</innerclass>
    <innerclass refid="class_quant_lib_1_1_bicubic" prot="public">QuantLib::Bicubic</innerclass>
    <innerclass refid="class_quant_lib_1_1_bicubic_spline" prot="public">QuantLib::BicubicSpline</innerclass>
    <innerclass refid="class_quant_lib_1_1_bilinear" prot="public">QuantLib::Bilinear</innerclass>
    <innerclass refid="class_quant_lib_1_1_bilinear_interpolation" prot="public">QuantLib::BilinearInterpolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_binomial_barrier_engine" prot="public">QuantLib::BinomialBarrierEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_binomial_convertible_engine" prot="public">QuantLib::BinomialConvertibleEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_binomial_distribution" prot="public">QuantLib::BinomialDistribution</innerclass>
    <innerclass refid="class_quant_lib_1_1_binomial_double_barrier_engine" prot="public">QuantLib::BinomialDoubleBarrierEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_binomial_loss_model" prot="public">QuantLib::BinomialLossModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_binomial_probability_of_at_least_n_events" prot="public">QuantLib::BinomialProbabilityOfAtLeastNEvents</innerclass>
    <innerclass refid="class_quant_lib_1_1_binomial_tree" prot="public">QuantLib::BinomialTree</innerclass>
    <innerclass refid="class_quant_lib_1_1_binomial_vanilla_engine" prot="public">QuantLib::BinomialVanillaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_bisection" prot="public">QuantLib::Bisection</innerclass>
    <innerclass refid="class_quant_lib_1_1_bivariate_cumulative_normal_distribution_dr78" prot="public">QuantLib::BivariateCumulativeNormalDistributionDr78</innerclass>
    <innerclass refid="class_quant_lib_1_1_bivariate_cumulative_normal_distribution_we04_d_p" prot="public">QuantLib::BivariateCumulativeNormalDistributionWe04DP</innerclass>
    <innerclass refid="class_quant_lib_1_1_bivariate_cumulative_student_distribution" prot="public">QuantLib::BivariateCumulativeStudentDistribution</innerclass>
    <innerclass refid="class_quant_lib_1_1_bjerksund_stensland_approximation_engine" prot="public">QuantLib::BjerksundStenslandApproximationEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_bjerksund_stensland_spread_engine" prot="public">QuantLib::BjerksundStenslandSpreadEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_bkbm" prot="public">QuantLib::Bkbm</innerclass>
    <innerclass refid="class_quant_lib_1_1_bkbm1_m" prot="public">QuantLib::Bkbm1M</innerclass>
    <innerclass refid="class_quant_lib_1_1_bkbm2_m" prot="public">QuantLib::Bkbm2M</innerclass>
    <innerclass refid="class_quant_lib_1_1_bkbm3_m" prot="public">QuantLib::Bkbm3M</innerclass>
    <innerclass refid="class_quant_lib_1_1_bkbm4_m" prot="public">QuantLib::Bkbm4M</innerclass>
    <innerclass refid="class_quant_lib_1_1_bkbm5_m" prot="public">QuantLib::Bkbm5M</innerclass>
    <innerclass refid="class_quant_lib_1_1_bkbm6_m" prot="public">QuantLib::Bkbm6M</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_atm_vol_curve" prot="public">QuantLib::BlackAtmVolCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_calculator" prot="public">QuantLib::BlackCalculator</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_calibration_helper" prot="public">QuantLib::BlackCalibrationHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_callable_fixed_rate_bond_engine" prot="public">QuantLib::BlackCallableFixedRateBondEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_callable_zero_coupon_bond_engine" prot="public">QuantLib::BlackCallableZeroCouponBondEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_cap_floor_engine" prot="public">QuantLib::BlackCapFloorEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_cds_option_engine" prot="public">QuantLib::BlackCdsOptionEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_constant_vol" prot="public">QuantLib::BlackConstantVol</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_delta_calculator" prot="public">QuantLib::BlackDeltaCalculator</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_delta_premium_adjusted_max_strike_class" prot="public">QuantLib::BlackDeltaPremiumAdjustedMaxStrikeClass</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_delta_premium_adjusted_solver_class" prot="public">QuantLib::BlackDeltaPremiumAdjustedSolverClass</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_ibor_coupon_pricer" prot="public">QuantLib::BlackIborCouponPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_ibor_quanto_coupon_pricer" prot="public">QuantLib::BlackIborQuantoCouponPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_implied_std_dev_helper" prot="public">QuantLib::BlackImpliedStdDevHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_karasinski" prot="public">QuantLib::BlackKarasinski</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_process" prot="public">QuantLib::BlackProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_scholes_calculator" prot="public">QuantLib::BlackScholesCalculator</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_scholes_lattice" prot="public">QuantLib::BlackScholesLattice</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_scholes_merton_process" prot="public">QuantLib::BlackScholesMertonProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_scholes_process" prot="public">QuantLib::BlackScholesProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_swaption_engine" prot="public">QuantLib::BlackSwaptionEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_variance_curve" prot="public">QuantLib::BlackVarianceCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_variance_surface" prot="public">QuantLib::BlackVarianceSurface</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_variance_term_structure" prot="public">QuantLib::BlackVarianceTermStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_volatility_term_structure" prot="public">QuantLib::BlackVolatilityTermStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_vol_surface" prot="public">QuantLib::BlackVolSurface</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_vol_term_structure" prot="public">QuantLib::BlackVolTermStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_black_yo_y_inflation_coupon_pricer" prot="public">QuantLib::BlackYoYInflationCouponPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_b_m_a_index" prot="public">QuantLib::BMAIndex</innerclass>
    <innerclass refid="class_quant_lib_1_1_b_m_a_swap" prot="public">QuantLib::BMASwap</innerclass>
    <innerclass refid="class_quant_lib_1_1_b_m_a_swap_rate_helper" prot="public">QuantLib::BMASwapRateHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_bond" prot="public">QuantLib::Bond</innerclass>
    <innerclass refid="class_quant_lib_1_1_bond_forward" prot="public">QuantLib::BondForward</innerclass>
    <innerclass refid="struct_quant_lib_1_1_bond_functions" prot="public">QuantLib::BondFunctions</innerclass>
    <innerclass refid="class_quant_lib_1_1_bond_helper" prot="public">QuantLib::BondHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_bootstrap_error" prot="public">QuantLib::BootstrapError</innerclass>
    <innerclass refid="class_quant_lib_1_1_bootstrap_helper" prot="public">QuantLib::BootstrapHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_botswana" prot="public">QuantLib::Botswana</innerclass>
    <innerclass refid="class_quant_lib_1_1_boundary_condition" prot="public">QuantLib::BoundaryCondition</innerclass>
    <innerclass refid="class_quant_lib_1_1_boundary_condition_scheme_helper" prot="public">QuantLib::BoundaryConditionSchemeHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_boundary_constraint" prot="public">QuantLib::BoundaryConstraint</innerclass>
    <innerclass refid="class_quant_lib_1_1_box_muller_gaussian_rng" prot="public">QuantLib::BoxMullerGaussianRng</innerclass>
    <innerclass refid="class_quant_lib_1_1_brazil" prot="public">QuantLib::Brazil</innerclass>
    <innerclass refid="class_quant_lib_1_1_brent" prot="public">QuantLib::Brent</innerclass>
    <innerclass refid="class_quant_lib_1_1_b_r_l_currency" prot="public">QuantLib::BRLCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_brownian_bridge" prot="public">QuantLib::BrownianBridge</innerclass>
    <innerclass refid="class_quant_lib_1_1_brownian_generator" prot="public">QuantLib::BrownianGenerator</innerclass>
    <innerclass refid="class_quant_lib_1_1_brownian_generator_factory" prot="public">QuantLib::BrownianGeneratorFactory</innerclass>
    <innerclass refid="class_quant_lib_1_1_b_s_m_operator" prot="public">QuantLib::BSMOperator</innerclass>
    <innerclass refid="class_quant_lib_1_1_b_s_m_r_n_d_calculator" prot="public">QuantLib::BSMRNDCalculator</innerclass>
    <innerclass refid="class_quant_lib_1_1_b_spline" prot="public">QuantLib::BSpline</innerclass>
    <innerclass refid="class_quant_lib_1_1_b_t_c_currency" prot="public">QuantLib::BTCCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_b_t_p" prot="public">QuantLib::BTP</innerclass>
    <innerclass refid="class_quant_lib_1_1_burley2020_sobol_brownian_bridge_rsg" prot="public">QuantLib::Burley2020SobolBrownianBridgeRsg</innerclass>
    <innerclass refid="class_quant_lib_1_1_burley2020_sobol_brownian_generator" prot="public">QuantLib::Burley2020SobolBrownianGenerator</innerclass>
    <innerclass refid="class_quant_lib_1_1_burley2020_sobol_brownian_generator_factory" prot="public">QuantLib::Burley2020SobolBrownianGeneratorFactory</innerclass>
    <innerclass refid="class_quant_lib_1_1_burley2020_sobol_rsg" prot="public">QuantLib::Burley2020SobolRsg</innerclass>
    <innerclass refid="class_quant_lib_1_1_business252" prot="public">QuantLib::Business252</innerclass>
    <innerclass refid="class_quant_lib_1_1_b_w_p_currency" prot="public">QuantLib::BWPCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_b_y_r_currency" prot="public">QuantLib::BYRCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_a_d_currency" prot="public">QuantLib::CADCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_a_d_libor" prot="public">QuantLib::CADLibor</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_a_d_libor_o_n" prot="public">QuantLib::CADLiborON</innerclass>
    <innerclass refid="class_quant_lib_1_1_calendar" prot="public">QuantLib::Calendar</innerclass>
    <innerclass refid="class_quant_lib_1_1_calibrated_model" prot="public">QuantLib::CalibratedModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_calibration_helper" prot="public">QuantLib::CalibrationHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_callability" prot="public">QuantLib::Callability</innerclass>
    <innerclass refid="class_quant_lib_1_1_callable_bond" prot="public">QuantLib::CallableBond</innerclass>
    <innerclass refid="class_quant_lib_1_1_callable_bond_constant_volatility" prot="public">QuantLib::CallableBondConstantVolatility</innerclass>
    <innerclass refid="class_quant_lib_1_1_callable_bond_volatility_structure" prot="public">QuantLib::CallableBondVolatilityStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_callable_fixed_rate_bond" prot="public">QuantLib::CallableFixedRateBond</innerclass>
    <innerclass refid="class_quant_lib_1_1_callable_zero_coupon_bond" prot="public">QuantLib::CallableZeroCouponBond</innerclass>
    <innerclass refid="class_quant_lib_1_1_call_specified_multi_product" prot="public">QuantLib::CallSpecifiedMultiProduct</innerclass>
    <innerclass refid="class_quant_lib_1_1_call_specified_pathwise_multi_product" prot="public">QuantLib::CallSpecifiedPathwiseMultiProduct</innerclass>
    <innerclass refid="class_quant_lib_1_1_canada" prot="public">QuantLib::Canada</innerclass>
    <innerclass refid="class_quant_lib_1_1_cap" prot="public">QuantLib::Cap</innerclass>
    <innerclass refid="class_quant_lib_1_1_cap_floor" prot="public">QuantLib::CapFloor</innerclass>
    <innerclass refid="class_quant_lib_1_1_cap_floor_term_volatility_structure" prot="public">QuantLib::CapFloorTermVolatilityStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_cap_floor_term_vol_curve" prot="public">QuantLib::CapFloorTermVolCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_cap_floor_term_vol_surface" prot="public">QuantLib::CapFloorTermVolSurface</innerclass>
    <innerclass refid="class_quant_lib_1_1_cap_helper" prot="public">QuantLib::CapHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_caplet_variance_curve" prot="public">QuantLib::CapletVarianceCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_capped_floored_cms_coupon" prot="public">QuantLib::CappedFlooredCmsCoupon</innerclass>
    <innerclass refid="class_quant_lib_1_1_capped_floored_cms_spread_coupon" prot="public">QuantLib::CappedFlooredCmsSpreadCoupon</innerclass>
    <innerclass refid="class_quant_lib_1_1_capped_floored_coupon" prot="public">QuantLib::CappedFlooredCoupon</innerclass>
    <innerclass refid="class_quant_lib_1_1_capped_floored_ibor_coupon" prot="public">QuantLib::CappedFlooredIborCoupon</innerclass>
    <innerclass refid="class_quant_lib_1_1_capped_floored_yo_y_inflation_coupon" prot="public">QuantLib::CappedFlooredYoYInflationCoupon</innerclass>
    <innerclass refid="class_quant_lib_1_1_cap_pseudo_derivative" prot="public">QuantLib::CapPseudoDerivative</innerclass>
    <innerclass refid="class_quant_lib_1_1_cash_flow" prot="public">QuantLib::CashFlow</innerclass>
    <innerclass refid="class_quant_lib_1_1_cash_flows" prot="public">QuantLib::CashFlows</innerclass>
    <innerclass refid="class_quant_lib_1_1_cash_or_nothing_payoff" prot="public">QuantLib::CashOrNothingPayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_cat_bond" prot="public">QuantLib::CatBond</innerclass>
    <innerclass refid="class_quant_lib_1_1_cat_risk" prot="public">QuantLib::CatRisk</innerclass>
    <innerclass refid="class_quant_lib_1_1_cat_simulation" prot="public">QuantLib::CatSimulation</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_c_t_e_u" prot="public">QuantLib::CCTEU</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_d_o" prot="public">QuantLib::CDO</innerclass>
    <innerclass refid="class_quant_lib_1_1_cdor" prot="public">QuantLib::Cdor</innerclass>
    <innerclass refid="class_quant_lib_1_1_cds_helper" prot="public">QuantLib::CdsHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_cds_option" prot="public">QuantLib::CdsOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_ceiling_truncation" prot="public">QuantLib::CeilingTruncation</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_e_v_calculator" prot="public">QuantLib::CEVCalculator</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_e_v_r_n_d_calculator" prot="public">QuantLib::CEVRNDCalculator</innerclass>
    <innerclass refid="class_quant_lib_1_1_chebyshev_interpolation" prot="public">QuantLib::ChebyshevInterpolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_h_f_currency" prot="public">QuantLib::CHFCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_h_f_libor" prot="public">QuantLib::CHFLibor</innerclass>
    <innerclass refid="class_quant_lib_1_1_chf_libor_swap_isda_fix" prot="public">QuantLib::ChfLiborSwapIsdaFix</innerclass>
    <innerclass refid="class_quant_lib_1_1_chile" prot="public">QuantLib::Chile</innerclass>
    <innerclass refid="class_quant_lib_1_1_china" prot="public">QuantLib::China</innerclass>
    <innerclass refid="class_quant_lib_1_1_choi_asian_engine" prot="public">QuantLib::ChoiAsianEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_choi_basket_engine" prot="public">QuantLib::ChoiBasketEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_claim" prot="public">QuantLib::Claim</innerclass>
    <innerclass refid="class_quant_lib_1_1_clayton_copula" prot="public">QuantLib::ClaytonCopula</innerclass>
    <innerclass refid="class_quant_lib_1_1_clayton_copula_rng" prot="public">QuantLib::ClaytonCopulaRng</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_l_f_currency" prot="public">QuantLib::CLFCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_l_gaussian_rng" prot="public">QuantLib::CLGaussianRng</innerclass>
    <innerclass refid="class_quant_lib_1_1_cliquet_option" prot="public">QuantLib::CliquetOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_clone" prot="public">QuantLib::Clone</innerclass>
    <innerclass refid="class_quant_lib_1_1_closest_rounding" prot="public">QuantLib::ClosestRounding</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_l_p_currency" prot="public">QuantLib::CLPCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_clubs_topology" prot="public">QuantLib::ClubsTopology</innerclass>
    <innerclass refid="class_quant_lib_1_1_cms_coupon" prot="public">QuantLib::CmsCoupon</innerclass>
    <innerclass refid="class_quant_lib_1_1_cms_coupon_pricer" prot="public">QuantLib::CmsCouponPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_cms_leg" prot="public">QuantLib::CmsLeg</innerclass>
    <innerclass refid="class_quant_lib_1_1_cms_market" prot="public">QuantLib::CmsMarket</innerclass>
    <innerclass refid="class_quant_lib_1_1_cms_market_calibration" prot="public">QuantLib::CmsMarketCalibration</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_m_s_m_m_drift_calculator" prot="public">QuantLib::CMSMMDriftCalculator</innerclass>
    <innerclass refid="class_quant_lib_1_1_cms_rate_bond" prot="public">QuantLib::CmsRateBond</innerclass>
    <innerclass refid="class_quant_lib_1_1_cms_spread_coupon" prot="public">QuantLib::CmsSpreadCoupon</innerclass>
    <innerclass refid="class_quant_lib_1_1_cms_spread_coupon_pricer" prot="public">QuantLib::CmsSpreadCouponPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_cms_spread_leg" prot="public">QuantLib::CmsSpreadLeg</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_m_swap_curve_state" prot="public">QuantLib::CMSwapCurveState</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_n_h_currency" prot="public">QuantLib::CNHCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_n_y_currency" prot="public">QuantLib::CNYCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_collar" prot="public">QuantLib::Collar</innerclass>
    <innerclass refid="class_quant_lib_1_1_combined_cost_function" prot="public">QuantLib::CombinedCostFunction</innerclass>
    <innerclass refid="class_quant_lib_1_1_commodity" prot="public">QuantLib::Commodity</innerclass>
    <innerclass refid="class_quant_lib_1_1_commodity_cash_flow" prot="public">QuantLib::CommodityCashFlow</innerclass>
    <innerclass refid="class_quant_lib_1_1_commodity_curve" prot="public">QuantLib::CommodityCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_commodity_index" prot="public">QuantLib::CommodityIndex</innerclass>
    <innerclass refid="class_quant_lib_1_1_commodity_pricing_helper" prot="public">QuantLib::CommodityPricingHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_commodity_settings" prot="public">QuantLib::CommoditySettings</innerclass>
    <innerclass refid="class_quant_lib_1_1_commodity_type" prot="public">QuantLib::CommodityType</innerclass>
    <innerclass refid="class_quant_lib_1_1_commodity_unit_cost" prot="public">QuantLib::CommodityUnitCost</innerclass>
    <innerclass refid="class_quant_lib_1_1_complex_chooser_option" prot="public">QuantLib::ComplexChooserOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_composite_constraint" prot="public">QuantLib::CompositeConstraint</innerclass>
    <innerclass refid="class_quant_lib_1_1_composite_instrument" prot="public">QuantLib::CompositeInstrument</innerclass>
    <innerclass refid="class_quant_lib_1_1_composite_quote" prot="public">QuantLib::CompositeQuote</innerclass>
    <innerclass refid="class_quant_lib_1_1_composite_zero_yield_structure" prot="public">QuantLib::CompositeZeroYieldStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_compounding_multiple_resets_pricer" prot="public">QuantLib::CompoundingMultipleResetsPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_compounding_overnight_indexed_coupon_pricer" prot="public">QuantLib::CompoundingOvernightIndexedCouponPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_compound_option" prot="public">QuantLib::CompoundOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_concentrating1d_mesher" prot="public">QuantLib::Concentrating1dMesher</innerclass>
    <innerclass refid="class_quant_lib_1_1_conjugate_gradient" prot="public">QuantLib::ConjugateGradient</innerclass>
    <innerclass refid="class_quant_lib_1_1_constant_cap_floor_term_volatility" prot="public">QuantLib::ConstantCapFloorTermVolatility</innerclass>
    <innerclass refid="class_quant_lib_1_1_constant_c_p_i_volatility" prot="public">QuantLib::ConstantCPIVolatility</innerclass>
    <innerclass refid="class_quant_lib_1_1_constant_estimator" prot="public">QuantLib::ConstantEstimator</innerclass>
    <innerclass refid="class_quant_lib_1_1_constant_loss_latentmodel" prot="public">QuantLib::ConstantLossLatentmodel</innerclass>
    <innerclass refid="class_quant_lib_1_1_constant_loss_model" prot="public">QuantLib::ConstantLossModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_constant_optionlet_volatility" prot="public">QuantLib::ConstantOptionletVolatility</innerclass>
    <innerclass refid="class_quant_lib_1_1_constant_parameter" prot="public">QuantLib::ConstantParameter</innerclass>
    <innerclass refid="class_quant_lib_1_1_constant_recovery_model" prot="public">QuantLib::ConstantRecoveryModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_constant_swaption_volatility" prot="public">QuantLib::ConstantSwaptionVolatility</innerclass>
    <innerclass refid="class_quant_lib_1_1_constant_yo_y_optionlet_volatility" prot="public">QuantLib::ConstantYoYOptionletVolatility</innerclass>
    <innerclass refid="class_quant_lib_1_1_const_notional_cross_currency_basis_swap_rate_helper" prot="public">QuantLib::ConstNotionalCrossCurrencyBasisSwapRateHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_constrained_evolver" prot="public">QuantLib::ConstrainedEvolver</innerclass>
    <innerclass refid="class_quant_lib_1_1_constraint" prot="public">QuantLib::Constraint</innerclass>
    <innerclass refid="class_quant_lib_1_1_continuous_arithmetic_asian_levy_engine" prot="public">QuantLib::ContinuousArithmeticAsianLevyEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_continuous_arithmetic_asian_vecer_engine" prot="public">QuantLib::ContinuousArithmeticAsianVecerEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_continuous_averaging_asian_option" prot="public">QuantLib::ContinuousAveragingAsianOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_continuous_fixed_lookback_option" prot="public">QuantLib::ContinuousFixedLookbackOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_continuous_floating_lookback_option" prot="public">QuantLib::ContinuousFloatingLookbackOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_continuous_partial_fixed_lookback_option" prot="public">QuantLib::ContinuousPartialFixedLookbackOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_continuous_partial_floating_lookback_option" prot="public">QuantLib::ContinuousPartialFloatingLookbackOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_convergence_statistics" prot="public">QuantLib::ConvergenceStatistics</innerclass>
    <innerclass refid="class_quant_lib_1_1_convertible_bond" prot="public">QuantLib::ConvertibleBond</innerclass>
    <innerclass refid="class_quant_lib_1_1_convertible_fixed_coupon_bond" prot="public">QuantLib::ConvertibleFixedCouponBond</innerclass>
    <innerclass refid="class_quant_lib_1_1_convertible_floating_rate_bond" prot="public">QuantLib::ConvertibleFloatingRateBond</innerclass>
    <innerclass refid="class_quant_lib_1_1_convertible_zero_coupon_bond" prot="public">QuantLib::ConvertibleZeroCouponBond</innerclass>
    <innerclass refid="class_quant_lib_1_1_convex_monotone" prot="public">QuantLib::ConvexMonotone</innerclass>
    <innerclass refid="class_quant_lib_1_1_convex_monotone_interpolation" prot="public">QuantLib::ConvexMonotoneInterpolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_o_p_currency" prot="public">QuantLib::COPCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_corra" prot="public">QuantLib::Corra</innerclass>
    <innerclass refid="class_quant_lib_1_1_correlation_term_structure" prot="public">QuantLib::CorrelationTermStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_o_s_heston_engine" prot="public">QuantLib::COSHestonEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_cost_function" prot="public">QuantLib::CostFunction</innerclass>
    <innerclass refid="class_quant_lib_1_1_coterminal_swap_curve_state" prot="public">QuantLib::CoterminalSwapCurveState</innerclass>
    <innerclass refid="class_quant_lib_1_1_cot_swap_from_fwd_correlation" prot="public">QuantLib::CotSwapFromFwdCorrelation</innerclass>
    <innerclass refid="class_quant_lib_1_1_cot_swap_to_fwd_adapter" prot="public">QuantLib::CotSwapToFwdAdapter</innerclass>
    <innerclass refid="class_quant_lib_1_1_cot_swap_to_fwd_adapter_factory" prot="public">QuantLib::CotSwapToFwdAdapterFactory</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_o_u_currency" prot="public">QuantLib::COUCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_counterparty_adj_swap_engine" prot="public">QuantLib::CounterpartyAdjSwapEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_coupon" prot="public">QuantLib::Coupon</innerclass>
    <innerclass refid="class_quant_lib_1_1_covariance_decomposition" prot="public">QuantLib::CovarianceDecomposition</innerclass>
    <innerclass refid="class_quant_lib_1_1_cox_ingersoll_ross" prot="public">QuantLib::CoxIngersollRoss</innerclass>
    <innerclass refid="class_quant_lib_1_1_cox_ingersoll_ross_process" prot="public">QuantLib::CoxIngersollRossProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_cox_ross_rubinstein" prot="public">QuantLib::CoxRossRubinstein</innerclass>
    <innerclass refid="struct_quant_lib_1_1_c_p_i" prot="public">QuantLib::CPI</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_p_i_bond" prot="public">QuantLib::CPIBond</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_p_i_bond_helper" prot="public">QuantLib::CPIBondHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_p_i_cap_floor" prot="public">QuantLib::CPICapFloor</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface" prot="public">QuantLib::CPICapFloorTermPriceSurface</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_p_i_cash_flow" prot="public">QuantLib::CPICashFlow</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_p_i_coupon" prot="public">QuantLib::CPICoupon</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_p_i_coupon_pricer" prot="public">QuantLib::CPICouponPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_p_i_leg" prot="public">QuantLib::CPILeg</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_p_i_swap" prot="public">QuantLib::CPISwap</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_p_i_volatility_surface" prot="public">QuantLib::CPIVolatilitySurface</innerclass>
    <innerclass refid="class_quant_lib_1_1_craig_sneyd_scheme" prot="public">QuantLib::CraigSneydScheme</innerclass>
    <innerclass refid="class_quant_lib_1_1_crank_nicolson" prot="public">QuantLib::CrankNicolson</innerclass>
    <innerclass refid="class_quant_lib_1_1_crank_nicolson_scheme" prot="public">QuantLib::CrankNicolsonScheme</innerclass>
    <innerclass refid="class_quant_lib_1_1_credit_default_swap" prot="public">QuantLib::CreditDefaultSwap</innerclass>
    <innerclass refid="class_quant_lib_1_1_credit_risk_plus" prot="public">QuantLib::CreditRiskPlus</innerclass>
    <innerclass refid="class_quant_lib_1_1_cross_currency_basis_swap_rate_helper_base" prot="public">QuantLib::CrossCurrencyBasisSwapRateHelperBase</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_t_s_m_m_caplet_alpha_form_calibration" prot="public">QuantLib::CTSMMCapletAlphaFormCalibration</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_t_s_m_m_caplet_calibration" prot="public">QuantLib::CTSMMCapletCalibration</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_t_s_m_m_caplet_max_homogeneity_calibration" prot="public">QuantLib::CTSMMCapletMaxHomogeneityCalibration</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_t_s_m_m_caplet_original_calibration" prot="public">QuantLib::CTSMMCapletOriginalCalibration</innerclass>
    <innerclass refid="class_quant_lib_1_1_cubic" prot="public">QuantLib::Cubic</innerclass>
    <innerclass refid="class_quant_lib_1_1_cubic_b_splines_fitting" prot="public">QuantLib::CubicBSplinesFitting</innerclass>
    <innerclass refid="class_quant_lib_1_1_cubic_interpolation" prot="public">QuantLib::CubicInterpolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_cubic_natural_spline" prot="public">QuantLib::CubicNaturalSpline</innerclass>
    <innerclass refid="class_quant_lib_1_1_cubic_spline_overshooting_minimization1" prot="public">QuantLib::CubicSplineOvershootingMinimization1</innerclass>
    <innerclass refid="class_quant_lib_1_1_cubic_spline_overshooting_minimization2" prot="public">QuantLib::CubicSplineOvershootingMinimization2</innerclass>
    <innerclass refid="class_quant_lib_1_1_cumulative_behrens_fisher" prot="public">QuantLib::CumulativeBehrensFisher</innerclass>
    <innerclass refid="class_quant_lib_1_1_cumulative_binomial_distribution" prot="public">QuantLib::CumulativeBinomialDistribution</innerclass>
    <innerclass refid="class_quant_lib_1_1_cumulative_chi_square_distribution" prot="public">QuantLib::CumulativeChiSquareDistribution</innerclass>
    <innerclass refid="class_quant_lib_1_1_cumulative_gamma_distribution" prot="public">QuantLib::CumulativeGammaDistribution</innerclass>
    <innerclass refid="class_quant_lib_1_1_cumulative_normal_distribution" prot="public">QuantLib::CumulativeNormalDistribution</innerclass>
    <innerclass refid="class_quant_lib_1_1_cumulative_poisson_distribution" prot="public">QuantLib::CumulativePoissonDistribution</innerclass>
    <innerclass refid="class_quant_lib_1_1_cumulative_student_distribution" prot="public">QuantLib::CumulativeStudentDistribution</innerclass>
    <innerclass refid="class_quant_lib_1_1_curiously_recurring_template" prot="public">QuantLib::CuriouslyRecurringTemplate</innerclass>
    <innerclass refid="class_quant_lib_1_1_currency" prot="public">QuantLib::Currency</innerclass>
    <innerclass refid="class_quant_lib_1_1_curve_state" prot="public">QuantLib::CurveState</innerclass>
    <innerclass refid="class_quant_lib_1_1_custom_region" prot="public">QuantLib::CustomRegion</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_y_p_currency" prot="public">QuantLib::CYPCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_czech_republic" prot="public">QuantLib::CzechRepublic</innerclass>
    <innerclass refid="class_quant_lib_1_1_c_z_k_currency" prot="public">QuantLib::CZKCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_daily_tenor_c_h_f_libor" prot="public">QuantLib::DailyTenorCHFLibor</innerclass>
    <innerclass refid="class_quant_lib_1_1_daily_tenor_e_u_r_libor" prot="public">QuantLib::DailyTenorEURLibor</innerclass>
    <innerclass refid="class_quant_lib_1_1_daily_tenor_g_b_p_libor" prot="public">QuantLib::DailyTenorGBPLibor</innerclass>
    <innerclass refid="class_quant_lib_1_1_daily_tenor_j_p_y_libor" prot="public">QuantLib::DailyTenorJPYLibor</innerclass>
    <innerclass refid="class_quant_lib_1_1_daily_tenor_libor" prot="public">QuantLib::DailyTenorLibor</innerclass>
    <innerclass refid="class_quant_lib_1_1_daily_tenor_u_s_d_libor" prot="public">QuantLib::DailyTenorUSDLibor</innerclass>
    <innerclass refid="class_quant_lib_1_1_d_a_s_h_currency" prot="public">QuantLib::DASHCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_date" prot="public">QuantLib::Date</innerclass>
    <innerclass refid="class_quant_lib_1_1_dated_o_i_s_rate_helper" prot="public">QuantLib::DatedOISRateHelper</innerclass>
    <innerclass refid="struct_quant_lib_1_1_date_generation" prot="public">QuantLib::DateGeneration</innerclass>
    <innerclass refid="class_quant_lib_1_1_date_interval" prot="public">QuantLib::DateInterval</innerclass>
    <innerclass refid="class_quant_lib_1_1_date_parser" prot="public">QuantLib::DateParser</innerclass>
    <innerclass refid="class_quant_lib_1_1_day_counter" prot="public">QuantLib::DayCounter</innerclass>
    <innerclass refid="class_quant_lib_1_1_decreasing_gaussian_walk" prot="public">QuantLib::DecreasingGaussianWalk</innerclass>
    <innerclass refid="class_quant_lib_1_1_decreasing_inertia" prot="public">QuantLib::DecreasingInertia</innerclass>
    <innerclass refid="struct_quant_lib_1_1_default" prot="public">QuantLib::Default</innerclass>
    <innerclass refid="struct_quant_lib_1_1_default_density" prot="public">QuantLib::DefaultDensity</innerclass>
    <innerclass refid="class_quant_lib_1_1_default_density_structure" prot="public">QuantLib::DefaultDensityStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_default_event" prot="public">QuantLib::DefaultEvent</innerclass>
    <innerclass refid="class_quant_lib_1_1_default_latent_model" prot="public">QuantLib::DefaultLatentModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_default_log_cubic" prot="public">QuantLib::DefaultLogCubic</innerclass>
    <innerclass refid="class_quant_lib_1_1_default_log_mixed_linear_cubic" prot="public">QuantLib::DefaultLogMixedLinearCubic</innerclass>
    <innerclass refid="class_quant_lib_1_1_default_loss_model" prot="public">QuantLib::DefaultLossModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_default_probability_term_structure" prot="public">QuantLib::DefaultProbabilityTermStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_default_prob_key" prot="public">QuantLib::DefaultProbKey</innerclass>
    <innerclass refid="class_quant_lib_1_1_default_type" prot="public">QuantLib::DefaultType</innerclass>
    <innerclass refid="class_quant_lib_1_1_delta_vol_quote" prot="public">QuantLib::DeltaVolQuote</innerclass>
    <innerclass refid="class_quant_lib_1_1_d_e_m_currency" prot="public">QuantLib::DEMCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_deng_li_zhou_basket_engine" prot="public">QuantLib::DengLiZhouBasketEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_denmark" prot="public">QuantLib::Denmark</innerclass>
    <innerclass refid="class_quant_lib_1_1_deposit_rate_helper" prot="public">QuantLib::DepositRateHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_derived_quote" prot="public">QuantLib::DerivedQuote</innerclass>
    <innerclass refid="class_quant_lib_1_1_destr" prot="public">QuantLib::Destr</innerclass>
    <innerclass refid="class_quant_lib_1_1_differential_evolution" prot="public">QuantLib::DifferentialEvolution</innerclass>
    <innerclass refid="class_quant_lib_1_1_digital_cms_coupon" prot="public">QuantLib::DigitalCmsCoupon</innerclass>
    <innerclass refid="class_quant_lib_1_1_digital_cms_leg" prot="public">QuantLib::DigitalCmsLeg</innerclass>
    <innerclass refid="class_quant_lib_1_1_digital_cms_spread_coupon" prot="public">QuantLib::DigitalCmsSpreadCoupon</innerclass>
    <innerclass refid="class_quant_lib_1_1_digital_cms_spread_leg" prot="public">QuantLib::DigitalCmsSpreadLeg</innerclass>
    <innerclass refid="class_quant_lib_1_1_digital_coupon" prot="public">QuantLib::DigitalCoupon</innerclass>
    <innerclass refid="class_quant_lib_1_1_digital_ibor_coupon" prot="public">QuantLib::DigitalIborCoupon</innerclass>
    <innerclass refid="class_quant_lib_1_1_digital_ibor_leg" prot="public">QuantLib::DigitalIborLeg</innerclass>
    <innerclass refid="class_quant_lib_1_1_digital_notional_risk" prot="public">QuantLib::DigitalNotionalRisk</innerclass>
    <innerclass refid="class_quant_lib_1_1_digital_path_pricer" prot="public">QuantLib::DigitalPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_digital_replication" prot="public">QuantLib::DigitalReplication</innerclass>
    <innerclass refid="class_quant_lib_1_1_dirichlet_b_c" prot="public">QuantLib::DirichletBC</innerclass>
    <innerclass refid="struct_quant_lib_1_1_discount" prot="public">QuantLib::Discount</innerclass>
    <innerclass refid="class_quant_lib_1_1_discounting_bond_engine" prot="public">QuantLib::DiscountingBondEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_discounting_swap_engine" prot="public">QuantLib::DiscountingSwapEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_discrepancy_statistics" prot="public">QuantLib::DiscrepancyStatistics</innerclass>
    <innerclass refid="class_quant_lib_1_1_discrete_averaging_asian_option" prot="public">QuantLib::DiscreteAveragingAsianOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_discrete_simpson_integral" prot="public">QuantLib::DiscreteSimpsonIntegral</innerclass>
    <innerclass refid="class_quant_lib_1_1_discrete_simpson_integrator" prot="public">QuantLib::DiscreteSimpsonIntegrator</innerclass>
    <innerclass refid="class_quant_lib_1_1_discrete_trapezoid_integral" prot="public">QuantLib::DiscreteTrapezoidIntegral</innerclass>
    <innerclass refid="class_quant_lib_1_1_discrete_trapezoid_integrator" prot="public">QuantLib::DiscreteTrapezoidIntegrator</innerclass>
    <innerclass refid="class_quant_lib_1_1_discretized_asset" prot="public">QuantLib::DiscretizedAsset</innerclass>
    <innerclass refid="class_quant_lib_1_1_discretized_barrier_option" prot="public">QuantLib::DiscretizedBarrierOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_discretized_callable_fixed_rate_bond" prot="public">QuantLib::DiscretizedCallableFixedRateBond</innerclass>
    <innerclass refid="class_quant_lib_1_1_discretized_cap_floor" prot="public">QuantLib::DiscretizedCapFloor</innerclass>
    <innerclass refid="class_quant_lib_1_1_discretized_convertible" prot="public">QuantLib::DiscretizedConvertible</innerclass>
    <innerclass refid="class_quant_lib_1_1_discretized_derman_kani_barrier_option" prot="public">QuantLib::DiscretizedDermanKaniBarrierOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_discretized_derman_kani_double_barrier_option" prot="public">QuantLib::DiscretizedDermanKaniDoubleBarrierOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_discretized_discount_bond" prot="public">QuantLib::DiscretizedDiscountBond</innerclass>
    <innerclass refid="class_quant_lib_1_1_discretized_double_barrier_option" prot="public">QuantLib::DiscretizedDoubleBarrierOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_discretized_option" prot="public">QuantLib::DiscretizedOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_discretized_swap" prot="public">QuantLib::DiscretizedSwap</innerclass>
    <innerclass refid="class_quant_lib_1_1_discretized_swaption" prot="public">QuantLib::DiscretizedSwaption</innerclass>
    <innerclass refid="class_quant_lib_1_1_discretized_vanilla_option" prot="public">QuantLib::DiscretizedVanillaOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_distribution" prot="public">QuantLib::Distribution</innerclass>
    <innerclass refid="class_quant_lib_1_1_distribution_random_walk" prot="public">QuantLib::DistributionRandomWalk</innerclass>
    <innerclass refid="class_quant_lib_1_1_dividend" prot="public">QuantLib::Dividend</innerclass>
    <innerclass refid="class_quant_lib_1_1_d_k_k_currency" prot="public">QuantLib::DKKCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_d_k_k_libor" prot="public">QuantLib::DKKLibor</innerclass>
    <innerclass refid="class_quant_lib_1_1_d_minus" prot="public">QuantLib::DMinus</innerclass>
    <innerclass refid="struct_quant_lib_1_1_double_barrier" prot="public">QuantLib::DoubleBarrier</innerclass>
    <innerclass refid="class_quant_lib_1_1_double_barrier_option" prot="public">QuantLib::DoubleBarrierOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_double_barrier_path_pricer" prot="public">QuantLib::DoubleBarrierPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_double_sticky_ratchet_payoff" prot="public">QuantLib::DoubleStickyRatchetPayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_doubling_convergence_steps" prot="public">QuantLib::DoublingConvergenceSteps</innerclass>
    <innerclass refid="class_quant_lib_1_1_douglas_scheme" prot="public">QuantLib::DouglasScheme</innerclass>
    <innerclass refid="class_quant_lib_1_1_down_rounding" prot="public">QuantLib::DownRounding</innerclass>
    <innerclass refid="class_quant_lib_1_1_d_plus" prot="public">QuantLib::DPlus</innerclass>
    <innerclass refid="class_quant_lib_1_1_d_plus_d_minus" prot="public">QuantLib::DPlusDMinus</innerclass>
    <innerclass refid="class_quant_lib_1_1_dq_fp_equation" prot="public">QuantLib::DqFpEquation</innerclass>
    <innerclass refid="class_quant_lib_1_1_dq_fp_equation___a" prot="public">QuantLib::DqFpEquation_A</innerclass>
    <innerclass refid="class_quant_lib_1_1_dq_fp_equation___b" prot="public">QuantLib::DqFpEquation_B</innerclass>
    <innerclass refid="struct_quant_lib_1_1_duration" prot="public">QuantLib::Duration</innerclass>
    <innerclass refid="class_quant_lib_1_1_dyn_prog_v_p_p_intrinsic_value_engine" prot="public">QuantLib::DynProgVPPIntrinsicValueEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_d_zero" prot="public">QuantLib::DZero</innerclass>
    <innerclass refid="struct_quant_lib_1_1earlier__than" prot="public">QuantLib::earlier_than</innerclass>
    <innerclass refid="struct_quant_lib_1_1earlier__than_3_01_cash_flow_01_4" prot="public">QuantLib::earlier_than&lt; CashFlow &gt;</innerclass>
    <innerclass refid="struct_quant_lib_1_1earlier__than_3_01_default_event_01_4" prot="public">QuantLib::earlier_than&lt; DefaultEvent &gt;</innerclass>
    <innerclass refid="struct_quant_lib_1_1earlier__than_3_01ext_1_1shared__ptr_3_01_t_01_4_01_4" prot="public">QuantLib::earlier_than&lt; ext::shared_ptr&lt; T &gt; &gt;</innerclass>
    <innerclass refid="class_quant_lib_1_1_early_exercise" prot="public">QuantLib::EarlyExercise</innerclass>
    <innerclass refid="class_quant_lib_1_1_early_exercise_path_pricer" prot="public">QuantLib::EarlyExercisePathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_early_exercise_traits" prot="public">QuantLib::EarlyExerciseTraits</innerclass>
    <innerclass refid="class_quant_lib_1_1_early_exercise_traits_3_01_multi_path_01_4" prot="public">QuantLib::EarlyExerciseTraits&lt; MultiPath &gt;</innerclass>
    <innerclass refid="class_quant_lib_1_1_early_exercise_traits_3_01_path_01_4" prot="public">QuantLib::EarlyExerciseTraits&lt; Path &gt;</innerclass>
    <innerclass refid="struct_quant_lib_1_1_e_c_b" prot="public">QuantLib::ECB</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_e_k_currency" prot="public">QuantLib::EEKCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_g_p_currency" prot="public">QuantLib::EGPCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_end_criteria" prot="public">QuantLib::EndCriteria</innerclass>
    <innerclass refid="class_quant_lib_1_1_end_euler_discretization" prot="public">QuantLib::EndEulerDiscretization</innerclass>
    <innerclass refid="class_quant_lib_1_1_energy_basis_swap" prot="public">QuantLib::EnergyBasisSwap</innerclass>
    <innerclass refid="class_quant_lib_1_1_energy_commodity" prot="public">QuantLib::EnergyCommodity</innerclass>
    <innerclass refid="struct_quant_lib_1_1_energy_daily_position" prot="public">QuantLib::EnergyDailyPosition</innerclass>
    <innerclass refid="class_quant_lib_1_1_energy_future" prot="public">QuantLib::EnergyFuture</innerclass>
    <innerclass refid="class_quant_lib_1_1_energy_swap" prot="public">QuantLib::EnergySwap</innerclass>
    <innerclass refid="class_quant_lib_1_1_energy_vanilla_swap" prot="public">QuantLib::EnergyVanillaSwap</innerclass>
    <innerclass refid="class_quant_lib_1_1_eonia" prot="public">QuantLib::Eonia</innerclass>
    <innerclass refid="class_quant_lib_1_1_equal_jumps_binomial_tree" prot="public">QuantLib::EqualJumpsBinomialTree</innerclass>
    <innerclass refid="class_quant_lib_1_1_equal_probabilities_binomial_tree" prot="public">QuantLib::EqualProbabilitiesBinomialTree</innerclass>
    <innerclass refid="class_quant_lib_1_1_equity_cash_flow" prot="public">QuantLib::EquityCashFlow</innerclass>
    <innerclass refid="class_quant_lib_1_1_equity_cash_flow_pricer" prot="public">QuantLib::EquityCashFlowPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_equity_f_x_vol_surface" prot="public">QuantLib::EquityFXVolSurface</innerclass>
    <innerclass refid="class_quant_lib_1_1_equity_index" prot="public">QuantLib::EquityIndex</innerclass>
    <innerclass refid="class_quant_lib_1_1_equity_quanto_cash_flow_pricer" prot="public">QuantLib::EquityQuantoCashFlowPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_equity_total_return_swap" prot="public">QuantLib::EquityTotalReturnSwap</innerclass>
    <innerclass refid="class_quant_lib_1_1_error" prot="public">QuantLib::Error</innerclass>
    <innerclass refid="class_quant_lib_1_1_error_function" prot="public">QuantLib::ErrorFunction</innerclass>
    <innerclass refid="class_quant_lib_1_1_escrowed_dividend_adjustment" prot="public">QuantLib::EscrowedDividendAdjustment</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_s_p_currency" prot="public">QuantLib::ESPCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_estr" prot="public">QuantLib::Estr</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_t_b_currency" prot="public">QuantLib::ETBCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_t_c_currency" prot="public">QuantLib::ETCCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_t_h_currency" prot="public">QuantLib::ETHCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_u_h_i_c_p" prot="public">QuantLib::EUHICP</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_u_h_i_c_p_x_t" prot="public">QuantLib::EUHICPXT</innerclass>
    <innerclass refid="class_quant_lib_1_1_euler_discretization" prot="public">QuantLib::EulerDiscretization</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_u_r_currency" prot="public">QuantLib::EURCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_u_region" prot="public">QuantLib::EURegion</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor" prot="public">QuantLib::Euribor</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor10_m" prot="public">QuantLib::Euribor10M</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor11_m" prot="public">QuantLib::Euribor11M</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor1_m" prot="public">QuantLib::Euribor1M</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor1_w" prot="public">QuantLib::Euribor1W</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor1_y" prot="public">QuantLib::Euribor1Y</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor2_m" prot="public">QuantLib::Euribor2M</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor2_w" prot="public">QuantLib::Euribor2W</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor365" prot="public">QuantLib::Euribor365</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor365__10_m" prot="public">QuantLib::Euribor365_10M</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor365__11_m" prot="public">QuantLib::Euribor365_11M</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor365__1_m" prot="public">QuantLib::Euribor365_1M</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor365__1_y" prot="public">QuantLib::Euribor365_1Y</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor365__2_m" prot="public">QuantLib::Euribor365_2M</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor365__2_w" prot="public">QuantLib::Euribor365_2W</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor365__3_m" prot="public">QuantLib::Euribor365_3M</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor365__3_w" prot="public">QuantLib::Euribor365_3W</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor365__4_m" prot="public">QuantLib::Euribor365_4M</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor365__5_m" prot="public">QuantLib::Euribor365_5M</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor365__6_m" prot="public">QuantLib::Euribor365_6M</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor365__7_m" prot="public">QuantLib::Euribor365_7M</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor365__8_m" prot="public">QuantLib::Euribor365_8M</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor365__9_m" prot="public">QuantLib::Euribor365_9M</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor365___s_w" prot="public">QuantLib::Euribor365_SW</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor3_m" prot="public">QuantLib::Euribor3M</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor3_w" prot="public">QuantLib::Euribor3W</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor4_m" prot="public">QuantLib::Euribor4M</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor5_m" prot="public">QuantLib::Euribor5M</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor6_m" prot="public">QuantLib::Euribor6M</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor7_m" prot="public">QuantLib::Euribor7M</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor8_m" prot="public">QuantLib::Euribor8M</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor9_m" prot="public">QuantLib::Euribor9M</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor_swap_ifr_fix" prot="public">QuantLib::EuriborSwapIfrFix</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor_swap_isda_fix_a" prot="public">QuantLib::EuriborSwapIsdaFixA</innerclass>
    <innerclass refid="class_quant_lib_1_1_euribor_swap_isda_fix_b" prot="public">QuantLib::EuriborSwapIsdaFixB</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_u_r_libor" prot="public">QuantLib::EURLibor</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_u_r_libor10_m" prot="public">QuantLib::EURLibor10M</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_u_r_libor11_m" prot="public">QuantLib::EURLibor11M</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_u_r_libor1_m" prot="public">QuantLib::EURLibor1M</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_u_r_libor1_y" prot="public">QuantLib::EURLibor1Y</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_u_r_libor2_m" prot="public">QuantLib::EURLibor2M</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_u_r_libor2_w" prot="public">QuantLib::EURLibor2W</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_u_r_libor3_m" prot="public">QuantLib::EURLibor3M</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_u_r_libor4_m" prot="public">QuantLib::EURLibor4M</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_u_r_libor5_m" prot="public">QuantLib::EURLibor5M</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_u_r_libor6_m" prot="public">QuantLib::EURLibor6M</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_u_r_libor7_m" prot="public">QuantLib::EURLibor7M</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_u_r_libor8_m" prot="public">QuantLib::EURLibor8M</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_u_r_libor9_m" prot="public">QuantLib::EURLibor9M</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_u_r_libor_o_n" prot="public">QuantLib::EURLiborON</innerclass>
    <innerclass refid="class_quant_lib_1_1_e_u_r_libor_s_w" prot="public">QuantLib::EURLiborSW</innerclass>
    <innerclass refid="class_quant_lib_1_1_eur_libor_swap_ifr_fix" prot="public">QuantLib::EurLiborSwapIfrFix</innerclass>
    <innerclass refid="class_quant_lib_1_1_eur_libor_swap_isda_fix_a" prot="public">QuantLib::EurLiborSwapIsdaFixA</innerclass>
    <innerclass refid="class_quant_lib_1_1_eur_libor_swap_isda_fix_b" prot="public">QuantLib::EurLiborSwapIsdaFixB</innerclass>
    <innerclass refid="class_quant_lib_1_1_eurodollar_futures_implied_std_dev_quote" prot="public">QuantLib::EurodollarFuturesImpliedStdDevQuote</innerclass>
    <innerclass refid="class_quant_lib_1_1_european_exercise" prot="public">QuantLib::EuropeanExercise</innerclass>
    <innerclass refid="class_quant_lib_1_1_european_g_j_r_g_a_r_c_h_path_pricer" prot="public">QuantLib::EuropeanGJRGARCHPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_european_heston_path_pricer" prot="public">QuantLib::EuropeanHestonPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_european_multi_path_pricer" prot="public">QuantLib::EuropeanMultiPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_european_option" prot="public">QuantLib::EuropeanOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_european_path_multi_path_pricer" prot="public">QuantLib::EuropeanPathMultiPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_european_path_pricer" prot="public">QuantLib::EuropeanPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_event" prot="public">QuantLib::Event</innerclass>
    <innerclass refid="class_quant_lib_1_1_event_payment_offset" prot="public">QuantLib::EventPaymentOffset</innerclass>
    <innerclass refid="class_quant_lib_1_1_event_set" prot="public">QuantLib::EventSet</innerclass>
    <innerclass refid="class_quant_lib_1_1_event_set_simulation" prot="public">QuantLib::EventSetSimulation</innerclass>
    <innerclass refid="class_quant_lib_1_1_everest_multi_path_pricer" prot="public">QuantLib::EverestMultiPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_everest_option" prot="public">QuantLib::EverestOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_evolution_description" prot="public">QuantLib::EvolutionDescription</innerclass>
    <innerclass refid="class_quant_lib_1_1_exchange_contract" prot="public">QuantLib::ExchangeContract</innerclass>
    <innerclass refid="class_quant_lib_1_1_exchange_rate" prot="public">QuantLib::ExchangeRate</innerclass>
    <innerclass refid="class_quant_lib_1_1_exchange_rate_manager" prot="public">QuantLib::ExchangeRateManager</innerclass>
    <innerclass refid="class_quant_lib_1_1_exercise" prot="public">QuantLib::Exercise</innerclass>
    <innerclass refid="class_quant_lib_1_1_exercise_adapter" prot="public">QuantLib::ExerciseAdapter</innerclass>
    <innerclass refid="class_quant_lib_1_1_exercise_strategy" prot="public">QuantLib::ExerciseStrategy</innerclass>
    <innerclass refid="class_quant_lib_1_1_explicit_euler" prot="public">QuantLib::ExplicitEuler</innerclass>
    <innerclass refid="class_quant_lib_1_1_explicit_euler_scheme" prot="public">QuantLib::ExplicitEulerScheme</innerclass>
    <innerclass refid="class_quant_lib_1_1_exponential_fitting_heston_engine" prot="public">QuantLib::ExponentialFittingHestonEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_exponential_forward_correlation" prot="public">QuantLib::ExponentialForwardCorrelation</innerclass>
    <innerclass refid="class_quant_lib_1_1_exponential_intensity" prot="public">QuantLib::ExponentialIntensity</innerclass>
    <innerclass refid="class_quant_lib_1_1_exponential_jump1d_mesher" prot="public">QuantLib::ExponentialJump1dMesher</innerclass>
    <innerclass refid="class_quant_lib_1_1_exponential_splines_fitting" prot="public">QuantLib::ExponentialSplinesFitting</innerclass>
    <innerclass refid="class_quant_lib_1_1_exp_sinh_integral" prot="public">QuantLib::ExpSinhIntegral</innerclass>
    <innerclass refid="class_quant_lib_1_1_extended_additive_e_q_p_binomial_tree" prot="public">QuantLib::ExtendedAdditiveEQPBinomialTree</innerclass>
    <innerclass refid="class_quant_lib_1_1_extended_binomial_tree" prot="public">QuantLib::ExtendedBinomialTree</innerclass>
    <innerclass refid="class_quant_lib_1_1_extended_black_scholes_merton_process" prot="public">QuantLib::ExtendedBlackScholesMertonProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_extended_black_variance_curve" prot="public">QuantLib::ExtendedBlackVarianceCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_extended_black_variance_surface" prot="public">QuantLib::ExtendedBlackVarianceSurface</innerclass>
    <innerclass refid="class_quant_lib_1_1_extended_cox_ingersoll_ross" prot="public">QuantLib::ExtendedCoxIngersollRoss</innerclass>
    <innerclass refid="class_quant_lib_1_1_extended_cox_ross_rubinstein" prot="public">QuantLib::ExtendedCoxRossRubinstein</innerclass>
    <innerclass refid="class_quant_lib_1_1_extended_equal_jumps_binomial_tree" prot="public">QuantLib::ExtendedEqualJumpsBinomialTree</innerclass>
    <innerclass refid="class_quant_lib_1_1_extended_equal_probabilities_binomial_tree" prot="public">QuantLib::ExtendedEqualProbabilitiesBinomialTree</innerclass>
    <innerclass refid="class_quant_lib_1_1_extended_jarrow_rudd" prot="public">QuantLib::ExtendedJarrowRudd</innerclass>
    <innerclass refid="class_quant_lib_1_1_extended_joshi4" prot="public">QuantLib::ExtendedJoshi4</innerclass>
    <innerclass refid="class_quant_lib_1_1_extended_leisen_reimer" prot="public">QuantLib::ExtendedLeisenReimer</innerclass>
    <innerclass refid="class_quant_lib_1_1_extended_ornstein_uhlenbeck_process" prot="public">QuantLib::ExtendedOrnsteinUhlenbeckProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_extended_tian" prot="public">QuantLib::ExtendedTian</innerclass>
    <innerclass refid="class_quant_lib_1_1_extended_trigeorgis" prot="public">QuantLib::ExtendedTrigeorgis</innerclass>
    <innerclass refid="class_quant_lib_1_1_ext_o_u_with_jumps_process" prot="public">QuantLib::ExtOUWithJumpsProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_extrapolator" prot="public">QuantLib::Extrapolator</innerclass>
    <innerclass refid="class_quant_lib_1_1_face_value_accrual_claim" prot="public">QuantLib::FaceValueAccrualClaim</innerclass>
    <innerclass refid="class_quant_lib_1_1_face_value_claim" prot="public">QuantLib::FaceValueClaim</innerclass>
    <innerclass refid="class_quant_lib_1_1_factorial" prot="public">QuantLib::Factorial</innerclass>
    <innerclass refid="class_quant_lib_1_1_factor_spreaded_hazard_rate_curve" prot="public">QuantLib::FactorSpreadedHazardRateCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_failure_to_pay" prot="public">QuantLib::FailureToPay</innerclass>
    <innerclass refid="class_quant_lib_1_1_failure_to_pay_event" prot="public">QuantLib::FailureToPayEvent</innerclass>
    <innerclass refid="class_quant_lib_1_1_false_position" prot="public">QuantLib::FalsePosition</innerclass>
    <innerclass refid="class_quant_lib_1_1_farlie_gumbel_morgenstern_copula" prot="public">QuantLib::FarlieGumbelMorgensternCopula</innerclass>
    <innerclass refid="class_quant_lib_1_1_farlie_gumbel_morgenstern_copula_rng" prot="public">QuantLib::FarlieGumbelMorgensternCopulaRng</innerclass>
    <innerclass refid="class_quant_lib_1_1_fast_fourier_transform" prot="public">QuantLib::FastFourierTransform</innerclass>
    <innerclass refid="class_quant_lib_1_1_faure_rsg" prot="public">QuantLib::FaureRsg</innerclass>
    <innerclass refid="class_quant_lib_1_1_fd2d_black_scholes_vanilla_engine" prot="public">QuantLib::Fd2dBlackScholesVanillaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fd_bates_vanilla_engine" prot="public">QuantLib::FdBatesVanillaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fd_black_scholes_asian_engine" prot="public">QuantLib::FdBlackScholesAsianEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fd_black_scholes_barrier_engine" prot="public">QuantLib::FdBlackScholesBarrierEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fd_black_scholes_rebate_engine" prot="public">QuantLib::FdBlackScholesRebateEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fd_black_scholes_shout_engine" prot="public">QuantLib::FdBlackScholesShoutEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fd_black_scholes_vanilla_engine" prot="public">QuantLib::FdBlackScholesVanillaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fd_c_e_v_vanilla_engine" prot="public">QuantLib::FdCEVVanillaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fd_c_i_r_vanilla_engine" prot="public">QuantLib::FdCIRVanillaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fd_ext_o_u_jump_vanilla_engine" prot="public">QuantLib::FdExtOUJumpVanillaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fd_g2_swaption_engine" prot="public">QuantLib::FdG2SwaptionEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fd_heston_barrier_engine" prot="public">QuantLib::FdHestonBarrierEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fd_heston_double_barrier_engine" prot="public">QuantLib::FdHestonDoubleBarrierEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fd_heston_hull_white_vanilla_engine" prot="public">QuantLib::FdHestonHullWhiteVanillaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fd_heston_rebate_engine" prot="public">QuantLib::FdHestonRebateEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fd_heston_vanilla_engine" prot="public">QuantLib::FdHestonVanillaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fd_hull_white_swaption_engine" prot="public">QuantLib::FdHullWhiteSwaptionEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fd_kluge_ext_o_u_spread_engine" prot="public">QuantLib::FdKlugeExtOUSpreadEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm1_dim_solver" prot="public">QuantLib::Fdm1DimSolver</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm1d_mesher" prot="public">QuantLib::Fdm1dMesher</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm2d_black_scholes_op" prot="public">QuantLib::Fdm2dBlackScholesOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm2d_black_scholes_solver" prot="public">QuantLib::Fdm2dBlackScholesSolver</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm2_dim_solver" prot="public">QuantLib::Fdm2DimSolver</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm3_dim_solver" prot="public">QuantLib::Fdm3DimSolver</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_affine_model_swap_inner_value" prot="public">QuantLib::FdmAffineModelSwapInnerValue</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_affine_model_term_structure" prot="public">QuantLib::FdmAffineModelTermStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_american_step_condition" prot="public">QuantLib::FdmAmericanStepCondition</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_arithmetic_average_condition" prot="public">QuantLib::FdmArithmeticAverageCondition</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_backward_solver" prot="public">QuantLib::FdmBackwardSolver</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_bates_op" prot="public">QuantLib::FdmBatesOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_bates_solver" prot="public">QuantLib::FdmBatesSolver</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_bermudan_step_condition" prot="public">QuantLib::FdmBermudanStepCondition</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_black_scholes_fwd_op" prot="public">QuantLib::FdmBlackScholesFwdOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_black_scholes_mesher" prot="public">QuantLib::FdmBlackScholesMesher</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_black_scholes_multi_strike_mesher" prot="public">QuantLib::FdmBlackScholesMultiStrikeMesher</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_black_scholes_op" prot="public">QuantLib::FdmBlackScholesOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_black_scholes_solver" prot="public">QuantLib::FdmBlackScholesSolver</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_cell_averaging_inner_value" prot="public">QuantLib::FdmCellAveragingInnerValue</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_c_e_v1d_mesher" prot="public">QuantLib::FdmCEV1dMesher</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_c_e_v_op" prot="public">QuantLib::FdmCEVOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_c_i_r_equity_part" prot="public">QuantLib::FdmCIREquityPart</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_c_i_r_mixed_part" prot="public">QuantLib::FdmCIRMixedPart</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_c_i_r_op" prot="public">QuantLib::FdmCIROp</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_c_i_r_rates_part" prot="public">QuantLib::FdmCIRRatesPart</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_c_i_r_solver" prot="public">QuantLib::FdmCIRSolver</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_dirichlet_boundary" prot="public">QuantLib::FdmDirichletBoundary</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_discount_dirichlet_boundary" prot="public">QuantLib::FdmDiscountDirichletBoundary</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_dividend_handler" prot="public">QuantLib::FdmDividendHandler</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_dupire1d_op" prot="public">QuantLib::FdmDupire1dOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_escrowed_log_inner_value_calculator" prot="public">QuantLib::FdmEscrowedLogInnerValueCalculator</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_exp_ext_o_u_inner_value_calculator" prot="public">QuantLib::FdmExpExtOUInnerValueCalculator</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_extended_ornstein_uhlenbeck_op" prot="public">QuantLib::FdmExtendedOrnsteinUhlenbeckOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_ext_o_u_jump_model_inner_value" prot="public">QuantLib::FdmExtOUJumpModelInnerValue</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_ext_o_u_jump_op" prot="public">QuantLib::FdmExtOUJumpOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_ext_o_u_jump_solver" prot="public">QuantLib::FdmExtOUJumpSolver</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_g2_op" prot="public">QuantLib::FdmG2Op</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_g2_solver" prot="public">QuantLib::FdmG2Solver</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_heston_equity_part" prot="public">QuantLib::FdmHestonEquityPart</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_heston_fwd_op" prot="public">QuantLib::FdmHestonFwdOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_heston_greens_fct" prot="public">QuantLib::FdmHestonGreensFct</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_heston_hull_white_equity_part" prot="public">QuantLib::FdmHestonHullWhiteEquityPart</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_heston_hull_white_op" prot="public">QuantLib::FdmHestonHullWhiteOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_heston_hull_white_solver" prot="public">QuantLib::FdmHestonHullWhiteSolver</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_heston_local_volatility_variance_mesher" prot="public">QuantLib::FdmHestonLocalVolatilityVarianceMesher</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_heston_op" prot="public">QuantLib::FdmHestonOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_heston_solver" prot="public">QuantLib::FdmHestonSolver</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_heston_variance_mesher" prot="public">QuantLib::FdmHestonVarianceMesher</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_heston_variance_part" prot="public">QuantLib::FdmHestonVariancePart</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_hull_white_op" prot="public">QuantLib::FdmHullWhiteOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_hull_white_solver" prot="public">QuantLib::FdmHullWhiteSolver</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_indices_on_boundary" prot="public">QuantLib::FdmIndicesOnBoundary</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_inner_value_calculator" prot="public">QuantLib::FdmInnerValueCalculator</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_kluge_ext_o_u_op" prot="public">QuantLib::FdmKlugeExtOUOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_kluge_ext_o_u_solver" prot="public">QuantLib::FdmKlugeExtOUSolver</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_linear_op" prot="public">QuantLib::FdmLinearOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_linear_op_composite" prot="public">QuantLib::FdmLinearOpComposite</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_linear_op_iterator" prot="public">QuantLib::FdmLinearOpIterator</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_linear_op_layout" prot="public">QuantLib::FdmLinearOpLayout</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_local_vol_fwd_op" prot="public">QuantLib::FdmLocalVolFwdOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_log_basket_inner_value" prot="public">QuantLib::FdmLogBasketInnerValue</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_log_inner_value" prot="public">QuantLib::FdmLogInnerValue</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_mesher" prot="public">QuantLib::FdmMesher</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_mesher_composite" prot="public">QuantLib::FdmMesherComposite</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_mesher_integral" prot="public">QuantLib::FdmMesherIntegral</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_ndim_solver" prot="public">QuantLib::FdmNdimSolver</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_ornstein_uhlenbeck_op" prot="public">QuantLib::FdmOrnsteinUhlenbeckOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_quanto_helper" prot="public">QuantLib::FdmQuantoHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_sabr_op" prot="public">QuantLib::FdmSabrOp</innerclass>
    <innerclass refid="struct_quant_lib_1_1_fdm_scheme_desc" prot="public">QuantLib::FdmSchemeDesc</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_shout_log_inner_value_calculator" prot="public">QuantLib::FdmShoutLogInnerValueCalculator</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_simple2d_b_s_solver" prot="public">QuantLib::FdmSimple2dBSSolver</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_simple2d_ext_o_u_solver" prot="public">QuantLib::FdmSimple2dExtOUSolver</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_simple3d_ext_o_u_jump_solver" prot="public">QuantLib::FdmSimple3dExtOUJumpSolver</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_simple_process1d_mesher" prot="public">QuantLib::FdmSimpleProcess1dMesher</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_simple_storage_condition" prot="public">QuantLib::FdmSimpleStorageCondition</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_simple_swing_condition" prot="public">QuantLib::FdmSimpleSwingCondition</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_snapshot_condition" prot="public">QuantLib::FdmSnapshotCondition</innerclass>
    <innerclass refid="struct_quant_lib_1_1_fdm_solver_desc" prot="public">QuantLib::FdmSolverDesc</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_spread_payoff_inner_value" prot="public">QuantLib::FdmSpreadPayoffInnerValue</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_square_root_fwd_op" prot="public">QuantLib::FdmSquareRootFwdOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_step_condition_composite" prot="public">QuantLib::FdmStepConditionComposite</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_time_dep_dirichlet_boundary" prot="public">QuantLib::FdmTimeDepDirichletBoundary</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_v_p_p_start_limit_step_condition" prot="public">QuantLib::FdmVPPStartLimitStepCondition</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_v_p_p_step_condition" prot="public">QuantLib::FdmVPPStepCondition</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_v_p_p_step_condition_factory" prot="public">QuantLib::FdmVPPStepConditionFactory</innerclass>
    <innerclass refid="struct_quant_lib_1_1_fdm_v_p_p_step_condition_mesher" prot="public">QuantLib::FdmVPPStepConditionMesher</innerclass>
    <innerclass refid="struct_quant_lib_1_1_fdm_v_p_p_step_condition_params" prot="public">QuantLib::FdmVPPStepConditionParams</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_wiener_op" prot="public">QuantLib::FdmWienerOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_zabr_op" prot="public">QuantLib::FdmZabrOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_zabr_underlying_part" prot="public">QuantLib::FdmZabrUnderlyingPart</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_zabr_volatility_part" prot="public">QuantLib::FdmZabrVolatilityPart</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdm_zero_inner_value" prot="public">QuantLib::FdmZeroInnerValue</innerclass>
    <innerclass refid="class_quant_lib_1_1_fdndim_black_scholes_vanilla_engine" prot="public">QuantLib::FdndimBlackScholesVanillaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fd_ornstein_uhlenbeck_vanilla_engine" prot="public">QuantLib::FdOrnsteinUhlenbeckVanillaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fd_sabr_vanilla_engine" prot="public">QuantLib::FdSabrVanillaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fd_simple_b_s_swing_engine" prot="public">QuantLib::FdSimpleBSSwingEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fd_simple_ext_o_u_jump_swing_engine" prot="public">QuantLib::FdSimpleExtOUJumpSwingEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fd_simple_ext_o_u_storage_engine" prot="public">QuantLib::FdSimpleExtOUStorageEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fd_simple_kluge_ext_o_u_v_p_p_engine" prot="public">QuantLib::FdSimpleKlugeExtOUVPPEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_fed_funds" prot="public">QuantLib::FedFunds</innerclass>
    <innerclass refid="class_quant_lib_1_1_f_f_t_engine" prot="public">QuantLib::FFTEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_f_f_t_vanilla_engine" prot="public">QuantLib::FFTVanillaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_f_f_t_variance_gamma_engine" prot="public">QuantLib::FFTVarianceGammaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_filon_integral" prot="public">QuantLib::FilonIntegral</innerclass>
    <innerclass refid="class_quant_lib_1_1_f_i_m_currency" prot="public">QuantLib::FIMCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_finite_difference_model" prot="public">QuantLib::FiniteDifferenceModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_finite_difference_newton_safe" prot="public">QuantLib::FiniteDifferenceNewtonSafe</innerclass>
    <innerclass refid="class_quant_lib_1_1_finland" prot="public">QuantLib::Finland</innerclass>
    <innerclass refid="class_quant_lib_1_1_firefly_algorithm" prot="public">QuantLib::FireflyAlgorithm</innerclass>
    <innerclass refid="class_quant_lib_1_1_first_derivative_op" prot="public">QuantLib::FirstDerivativeOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_fitted_bond_discount_curve" prot="public">QuantLib::FittedBondDiscountCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_fixed_dividend" prot="public">QuantLib::FixedDividend</innerclass>
    <innerclass refid="class_quant_lib_1_1_fixed_local_vol_surface" prot="public">QuantLib::FixedLocalVolSurface</innerclass>
    <innerclass refid="class_quant_lib_1_1_fixed_rate_bond" prot="public">QuantLib::FixedRateBond</innerclass>
    <innerclass refid="class_quant_lib_1_1_fixed_rate_bond_helper" prot="public">QuantLib::FixedRateBondHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_fixed_rate_coupon" prot="public">QuantLib::FixedRateCoupon</innerclass>
    <innerclass refid="class_quant_lib_1_1_fixed_rate_leg" prot="public">QuantLib::FixedRateLeg</innerclass>
    <innerclass refid="class_quant_lib_1_1_fixed_vs_floating_swap" prot="public">QuantLib::FixedVsFloatingSwap</innerclass>
    <innerclass refid="class_quant_lib_1_1_flat_extrapolator2_d" prot="public">QuantLib::FlatExtrapolator2D</innerclass>
    <innerclass refid="class_quant_lib_1_1_flat_forward" prot="public">QuantLib::FlatForward</innerclass>
    <innerclass refid="class_quant_lib_1_1_flat_hazard_rate" prot="public">QuantLib::FlatHazardRate</innerclass>
    <innerclass refid="class_quant_lib_1_1_flat_smile_section" prot="public">QuantLib::FlatSmileSection</innerclass>
    <innerclass refid="class_quant_lib_1_1_flat_vol" prot="public">QuantLib::FlatVol</innerclass>
    <innerclass refid="class_quant_lib_1_1_flat_vol_factory" prot="public">QuantLib::FlatVolFactory</innerclass>
    <innerclass refid="class_quant_lib_1_1_float_float_swap" prot="public">QuantLib::FloatFloatSwap</innerclass>
    <innerclass refid="class_quant_lib_1_1_float_float_swaption" prot="public">QuantLib::FloatFloatSwaption</innerclass>
    <innerclass refid="class_quant_lib_1_1_floating_cat_bond" prot="public">QuantLib::FloatingCatBond</innerclass>
    <innerclass refid="class_quant_lib_1_1_floating_rate_bond" prot="public">QuantLib::FloatingRateBond</innerclass>
    <innerclass refid="class_quant_lib_1_1_floating_rate_coupon" prot="public">QuantLib::FloatingRateCoupon</innerclass>
    <innerclass refid="class_quant_lib_1_1_floating_rate_coupon_pricer" prot="public">QuantLib::FloatingRateCouponPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_floating_type_payoff" prot="public">QuantLib::FloatingTypePayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_floor" prot="public">QuantLib::Floor</innerclass>
    <innerclass refid="class_quant_lib_1_1_floor_truncation" prot="public">QuantLib::FloorTruncation</innerclass>
    <innerclass refid="class_quant_lib_1_1_forde_heston_expansion" prot="public">QuantLib::FordeHestonExpansion</innerclass>
    <innerclass refid="class_quant_lib_1_1_forward" prot="public">QuantLib::Forward</innerclass>
    <innerclass refid="class_quant_lib_1_1_forward_european_b_s_path_pricer" prot="public">QuantLib::ForwardEuropeanBSPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_forward_european_heston_path_pricer" prot="public">QuantLib::ForwardEuropeanHestonPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_forward_flat" prot="public">QuantLib::ForwardFlat</innerclass>
    <innerclass refid="class_quant_lib_1_1_forward_flat_interpolation" prot="public">QuantLib::ForwardFlatInterpolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_forward_measure_process" prot="public">QuantLib::ForwardMeasureProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_forward_measure_process1_d" prot="public">QuantLib::ForwardMeasureProcess1D</innerclass>
    <innerclass refid="class_quant_lib_1_1_forward_option_arguments" prot="public">QuantLib::ForwardOptionArguments</innerclass>
    <innerclass refid="class_quant_lib_1_1_forward_performance_vanilla_engine" prot="public">QuantLib::ForwardPerformanceVanillaEngine</innerclass>
    <innerclass refid="struct_quant_lib_1_1_forward_rate" prot="public">QuantLib::ForwardRate</innerclass>
    <innerclass refid="class_quant_lib_1_1_forward_rate_agreement" prot="public">QuantLib::ForwardRateAgreement</innerclass>
    <innerclass refid="class_quant_lib_1_1_forward_rate_structure" prot="public">QuantLib::ForwardRateStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_forward_spreaded_term_structure" prot="public">QuantLib::ForwardSpreadedTermStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_forward_swap_quote" prot="public">QuantLib::ForwardSwapQuote</innerclass>
    <innerclass refid="class_quant_lib_1_1_forward_type_payoff" prot="public">QuantLib::ForwardTypePayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_forward_value_quote" prot="public">QuantLib::ForwardValueQuote</innerclass>
    <innerclass refid="class_quant_lib_1_1_forward_vanilla_engine" prot="public">QuantLib::ForwardVanillaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_forward_vanilla_option" prot="public">QuantLib::ForwardVanillaOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_fractional_dividend" prot="public">QuantLib::FractionalDividend</innerclass>
    <innerclass refid="class_quant_lib_1_1_france" prot="public">QuantLib::France</innerclass>
    <innerclass refid="class_quant_lib_1_1_france_region" prot="public">QuantLib::FranceRegion</innerclass>
    <innerclass refid="class_quant_lib_1_1_frank_copula" prot="public">QuantLib::FrankCopula</innerclass>
    <innerclass refid="class_quant_lib_1_1_frank_copula_rng" prot="public">QuantLib::FrankCopulaRng</innerclass>
    <innerclass refid="class_quant_lib_1_1_fra_rate_helper" prot="public">QuantLib::FraRateHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_f_r_f_currency" prot="public">QuantLib::FRFCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_f_r_h_i_c_p" prot="public">QuantLib::FRHICP</innerclass>
    <innerclass refid="class_quant_lib_1_1_fritsch_butland_cubic" prot="public">QuantLib::FritschButlandCubic</innerclass>
    <innerclass refid="class_quant_lib_1_1_fritsch_butland_log_cubic" prot="public">QuantLib::FritschButlandLogCubic</innerclass>
    <innerclass refid="class_quant_lib_1_1_frobenius_cost_function" prot="public">QuantLib::FrobeniusCostFunction</innerclass>
    <innerclass refid="struct_quant_lib_1_1_futures" prot="public">QuantLib::Futures</innerclass>
    <innerclass refid="class_quant_lib_1_1_futures_conv_adjustment_quote" prot="public">QuantLib::FuturesConvAdjustmentQuote</innerclass>
    <innerclass refid="class_quant_lib_1_1_futures_rate_helper" prot="public">QuantLib::FuturesRateHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_fwd_period_adapter" prot="public">QuantLib::FwdPeriodAdapter</innerclass>
    <innerclass refid="class_quant_lib_1_1_fwd_to_cot_swap_adapter" prot="public">QuantLib::FwdToCotSwapAdapter</innerclass>
    <innerclass refid="class_quant_lib_1_1_fwd_to_cot_swap_adapter_factory" prot="public">QuantLib::FwdToCotSwapAdapterFactory</innerclass>
    <innerclass refid="class_quant_lib_1_1_fx_swap_rate_helper" prot="public">QuantLib::FxSwapRateHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_g2" prot="public">QuantLib::G2</innerclass>
    <innerclass refid="class_quant_lib_1_1_g2_forward_process" prot="public">QuantLib::G2ForwardProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_g2_process" prot="public">QuantLib::G2Process</innerclass>
    <innerclass refid="class_quant_lib_1_1_g2_swaption_engine" prot="public">QuantLib::G2SwaptionEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_galambos_copula" prot="public">QuantLib::GalambosCopula</innerclass>
    <innerclass refid="class_quant_lib_1_1_gallon_unit_of_measure" prot="public">QuantLib::GallonUnitOfMeasure</innerclass>
    <innerclass refid="class_quant_lib_1_1_gamma_function" prot="public">QuantLib::GammaFunction</innerclass>
    <innerclass refid="class_quant_lib_1_1_gap_payoff" prot="public">QuantLib::GapPayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_garch11" prot="public">QuantLib::Garch11</innerclass>
    <innerclass refid="class_quant_lib_1_1_garman_klass_abstract" prot="public">QuantLib::GarmanKlassAbstract</innerclass>
    <innerclass refid="class_quant_lib_1_1_garman_klass_open_close" prot="public">QuantLib::GarmanKlassOpenClose</innerclass>
    <innerclass refid="class_quant_lib_1_1_garman_klass_sigma1" prot="public">QuantLib::GarmanKlassSigma1</innerclass>
    <innerclass refid="class_quant_lib_1_1_garman_klass_sigma3" prot="public">QuantLib::GarmanKlassSigma3</innerclass>
    <innerclass refid="class_quant_lib_1_1_garman_klass_sigma4" prot="public">QuantLib::GarmanKlassSigma4</innerclass>
    <innerclass refid="class_quant_lib_1_1_garman_klass_sigma5" prot="public">QuantLib::GarmanKlassSigma5</innerclass>
    <innerclass refid="class_quant_lib_1_1_garman_klass_sigma6" prot="public">QuantLib::GarmanKlassSigma6</innerclass>
    <innerclass refid="class_quant_lib_1_1_garman_klass_simple_sigma" prot="public">QuantLib::GarmanKlassSimpleSigma</innerclass>
    <innerclass refid="class_quant_lib_1_1_garman_kohlagen_process" prot="public">QuantLib::GarmanKohlagenProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_gauss_chebyshev2nd_integration" prot="public">QuantLib::GaussChebyshev2ndIntegration</innerclass>
    <innerclass refid="class_quant_lib_1_1_gauss_chebyshev2nd_polynomial" prot="public">QuantLib::GaussChebyshev2ndPolynomial</innerclass>
    <innerclass refid="class_quant_lib_1_1_gauss_chebyshev_integration" prot="public">QuantLib::GaussChebyshevIntegration</innerclass>
    <innerclass refid="class_quant_lib_1_1_gauss_chebyshev_polynomial" prot="public">QuantLib::GaussChebyshevPolynomial</innerclass>
    <innerclass refid="class_quant_lib_1_1_gauss_gegenbauer_integration" prot="public">QuantLib::GaussGegenbauerIntegration</innerclass>
    <innerclass refid="class_quant_lib_1_1_gauss_gegenbauer_polynomial" prot="public">QuantLib::GaussGegenbauerPolynomial</innerclass>
    <innerclass refid="class_quant_lib_1_1_gauss_hermite_integration" prot="public">QuantLib::GaussHermiteIntegration</innerclass>
    <innerclass refid="class_quant_lib_1_1_gauss_hermite_polynomial" prot="public">QuantLib::GaussHermitePolynomial</innerclass>
    <innerclass refid="class_quant_lib_1_1_gauss_hyperbolic_integration" prot="public">QuantLib::GaussHyperbolicIntegration</innerclass>
    <innerclass refid="class_quant_lib_1_1_gauss_hyperbolic_polynomial" prot="public">QuantLib::GaussHyperbolicPolynomial</innerclass>
    <innerclass refid="class_quant_lib_1_1_gaussian1d_cap_floor_engine" prot="public">QuantLib::Gaussian1dCapFloorEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_gaussian1d_float_float_swaption_engine" prot="public">QuantLib::Gaussian1dFloatFloatSwaptionEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_gaussian1d_jamshidian_swaption_engine" prot="public">QuantLib::Gaussian1dJamshidianSwaptionEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_gaussian1d_model" prot="public">QuantLib::Gaussian1dModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_gaussian1d_nonstandard_swaption_engine" prot="public">QuantLib::Gaussian1dNonstandardSwaptionEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_gaussian1d_smile_section" prot="public">QuantLib::Gaussian1dSmileSection</innerclass>
    <innerclass refid="class_quant_lib_1_1_gaussian1d_swaption_engine" prot="public">QuantLib::Gaussian1dSwaptionEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_gaussian1d_swaption_volatility" prot="public">QuantLib::Gaussian1dSwaptionVolatility</innerclass>
    <innerclass refid="class_quant_lib_1_1_gaussian_copula" prot="public">QuantLib::GaussianCopula</innerclass>
    <innerclass refid="struct_quant_lib_1_1_gaussian_copula_policy" prot="public">QuantLib::GaussianCopulaPolicy</innerclass>
    <innerclass refid="class_quant_lib_1_1_gaussian_kernel" prot="public">QuantLib::GaussianKernel</innerclass>
    <innerclass refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model" prot="public">QuantLib::GaussianLHPLossModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_gaussian_orthogonal_polynomial" prot="public">QuantLib::GaussianOrthogonalPolynomial</innerclass>
    <innerclass refid="class_quant_lib_1_1_gaussian_quad_multidim_integrator" prot="public">QuantLib::GaussianQuadMultidimIntegrator</innerclass>
    <innerclass refid="class_quant_lib_1_1_gaussian_quadrature" prot="public">QuantLib::GaussianQuadrature</innerclass>
    <innerclass refid="class_quant_lib_1_1_gaussian_random_default_model" prot="public">QuantLib::GaussianRandomDefaultModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_gaussian_walk" prot="public">QuantLib::GaussianWalk</innerclass>
    <innerclass refid="class_quant_lib_1_1_gauss_jacobi_integration" prot="public">QuantLib::GaussJacobiIntegration</innerclass>
    <innerclass refid="class_quant_lib_1_1_gauss_jacobi_polynomial" prot="public">QuantLib::GaussJacobiPolynomial</innerclass>
    <innerclass refid="class_quant_lib_1_1_gauss_kronrod_adaptive" prot="public">QuantLib::GaussKronrodAdaptive</innerclass>
    <innerclass refid="class_quant_lib_1_1_gauss_kronrod_non_adaptive" prot="public">QuantLib::GaussKronrodNonAdaptive</innerclass>
    <innerclass refid="class_quant_lib_1_1_gauss_laguerre_cosine_polynomial" prot="public">QuantLib::GaussLaguerreCosinePolynomial</innerclass>
    <innerclass refid="class_quant_lib_1_1_gauss_laguerre_integration" prot="public">QuantLib::GaussLaguerreIntegration</innerclass>
    <innerclass refid="class_quant_lib_1_1_gauss_laguerre_polynomial" prot="public">QuantLib::GaussLaguerrePolynomial</innerclass>
    <innerclass refid="class_quant_lib_1_1_gauss_laguerre_sine_polynomial" prot="public">QuantLib::GaussLaguerreSinePolynomial</innerclass>
    <innerclass refid="class_quant_lib_1_1_gauss_laguerre_trigonometric_base" prot="public">QuantLib::GaussLaguerreTrigonometricBase</innerclass>
    <innerclass refid="class_quant_lib_1_1_gauss_legendre_integration" prot="public">QuantLib::GaussLegendreIntegration</innerclass>
    <innerclass refid="class_quant_lib_1_1_gauss_legendre_polynomial" prot="public">QuantLib::GaussLegendrePolynomial</innerclass>
    <innerclass refid="class_quant_lib_1_1_gauss_lobatto_integral" prot="public">QuantLib::GaussLobattoIntegral</innerclass>
    <innerclass refid="class_quant_lib_1_1_gauss_non_central_chi_squared_polynomial" prot="public">QuantLib::GaussNonCentralChiSquaredPolynomial</innerclass>
    <innerclass refid="class_quant_lib_1_1_g_b_p_currency" prot="public">QuantLib::GBPCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_g_b_p_libor" prot="public">QuantLib::GBPLibor</innerclass>
    <innerclass refid="class_quant_lib_1_1_g_b_p_libor_o_n" prot="public">QuantLib::GBPLiborON</innerclass>
    <innerclass refid="class_quant_lib_1_1_gbp_libor_swap_isda_fix" prot="public">QuantLib::GbpLiborSwapIsdaFix</innerclass>
    <innerclass refid="class_quant_lib_1_1_g_b_s_m_r_n_d_calculator" prot="public">QuantLib::GBSMRNDCalculator</innerclass>
    <innerclass refid="class_quant_lib_1_1_g_e_l_currency" prot="public">QuantLib::GELCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_geman_roncoroni_process" prot="public">QuantLib::GemanRoncoroniProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_generalized_black_scholes_process" prot="public">QuantLib::GeneralizedBlackScholesProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_generalized_hull_white" prot="public">QuantLib::GeneralizedHullWhite</innerclass>
    <innerclass refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process" prot="public">QuantLib::GeneralizedOrnsteinUhlenbeckProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_general_linear_least_squares" prot="public">QuantLib::GeneralLinearLeastSquares</innerclass>
    <innerclass refid="class_quant_lib_1_1_general_statistics" prot="public">QuantLib::GeneralStatistics</innerclass>
    <innerclass refid="class_quant_lib_1_1_generic_c_p_i" prot="public">QuantLib::GenericCPI</innerclass>
    <innerclass refid="class_quant_lib_1_1_generic_engine" prot="public">QuantLib::GenericEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_generic_gaussian_statistics" prot="public">QuantLib::GenericGaussianStatistics</innerclass>
    <innerclass refid="struct_quant_lib_1_1_generic_low_discrepancy" prot="public">QuantLib::GenericLowDiscrepancy</innerclass>
    <innerclass refid="class_quant_lib_1_1_generic_model_engine" prot="public">QuantLib::GenericModelEngine</innerclass>
    <innerclass refid="struct_quant_lib_1_1_generic_pseudo_random" prot="public">QuantLib::GenericPseudoRandom</innerclass>
    <innerclass refid="class_quant_lib_1_1_generic_region" prot="public">QuantLib::GenericRegion</innerclass>
    <innerclass refid="class_quant_lib_1_1_generic_risk_statistics" prot="public">QuantLib::GenericRiskStatistics</innerclass>
    <innerclass refid="class_quant_lib_1_1_generic_sequence_statistics" prot="public">QuantLib::GenericSequenceStatistics</innerclass>
    <innerclass refid="class_quant_lib_1_1_generic_time_setter" prot="public">QuantLib::GenericTimeSetter</innerclass>
    <innerclass refid="class_quant_lib_1_1_geometric_a_p_o_heston_path_pricer" prot="public">QuantLib::GeometricAPOHestonPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_geometric_a_p_o_path_pricer" prot="public">QuantLib::GeometricAPOPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_geometric_brownian_motion_process" prot="public">QuantLib::GeometricBrownianMotionProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_germany" prot="public">QuantLib::Germany</innerclass>
    <innerclass refid="class_quant_lib_1_1_g_function" prot="public">QuantLib::GFunction</innerclass>
    <innerclass refid="class_quant_lib_1_1_g_function_factory" prot="public">QuantLib::GFunctionFactory</innerclass>
    <innerclass refid="class_quant_lib_1_1_g_h_s_currency" prot="public">QuantLib::GHSCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_g_j_r_g_a_r_c_h_model" prot="public">QuantLib::GJRGARCHModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_g_j_r_g_a_r_c_h_process" prot="public">QuantLib::GJRGARCHProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_global_bootstrap" prot="public">QuantLib::GlobalBootstrap</innerclass>
    <innerclass refid="class_quant_lib_1_1_global_topology" prot="public">QuantLib::GlobalTopology</innerclass>
    <innerclass refid="class_quant_lib_1_1_glued1d_mesher" prot="public">QuantLib::Glued1dMesher</innerclass>
    <innerclass refid="class_quant_lib_1_1_g_m_r_e_s" prot="public">QuantLib::GMRES</innerclass>
    <innerclass refid="struct_quant_lib_1_1_g_m_r_e_s_result" prot="public">QuantLib::GMRESResult</innerclass>
    <innerclass refid="class_quant_lib_1_1_goldstein_line_search" prot="public">QuantLib::GoldsteinLineSearch</innerclass>
    <innerclass refid="class_quant_lib_1_1_g_r_d_currency" prot="public">QuantLib::GRDCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_greeks" prot="public">QuantLib::Greeks</innerclass>
    <innerclass refid="class_quant_lib_1_1_grid_model_local_vol_surface" prot="public">QuantLib::GridModelLocalVolSurface</innerclass>
    <innerclass refid="class_quant_lib_1_1_gsr" prot="public">QuantLib::Gsr</innerclass>
    <innerclass refid="class_quant_lib_1_1_gsr_process" prot="public">QuantLib::GsrProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_gumbel_copula" prot="public">QuantLib::GumbelCopula</innerclass>
    <innerclass refid="class_quant_lib_1_1_hagan_irregular_swaption_engine" prot="public">QuantLib::HaganIrregularSwaptionEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_hagan_pricer" prot="public">QuantLib::HaganPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_halley" prot="public">QuantLib::Halley</innerclass>
    <innerclass refid="class_quant_lib_1_1_halton_rsg" prot="public">QuantLib::HaltonRsg</innerclass>
    <innerclass refid="class_quant_lib_1_1_handle" prot="public">QuantLib::Handle</innerclass>
    <innerclass refid="class_quant_lib_1_1_harmonic_cubic" prot="public">QuantLib::HarmonicCubic</innerclass>
    <innerclass refid="class_quant_lib_1_1_harmonic_log_cubic" prot="public">QuantLib::HarmonicLogCubic</innerclass>
    <innerclass refid="struct_quant_lib_1_1_hazard_rate" prot="public">QuantLib::HazardRate</innerclass>
    <innerclass refid="class_quant_lib_1_1_hazard_rate_structure" prot="public">QuantLib::HazardRateStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_heston_black_vol_surface" prot="public">QuantLib::HestonBlackVolSurface</innerclass>
    <innerclass refid="class_quant_lib_1_1_heston_expansion" prot="public">QuantLib::HestonExpansion</innerclass>
    <innerclass refid="class_quant_lib_1_1_heston_expansion_engine" prot="public">QuantLib::HestonExpansionEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_heston_hull_white_path_pricer" prot="public">QuantLib::HestonHullWhitePathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_heston_model" prot="public">QuantLib::HestonModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_heston_model_helper" prot="public">QuantLib::HestonModelHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_heston_process" prot="public">QuantLib::HestonProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_heston_r_n_d_calculator" prot="public">QuantLib::HestonRNDCalculator</innerclass>
    <innerclass refid="class_quant_lib_1_1_heston_s_l_v_f_d_m_model" prot="public">QuantLib::HestonSLVFDMModel</innerclass>
    <innerclass refid="struct_quant_lib_1_1_heston_s_l_v_fokker_planck_fdm_params" prot="public">QuantLib::HestonSLVFokkerPlanckFdmParams</innerclass>
    <innerclass refid="class_quant_lib_1_1_heston_s_l_v_m_c_model" prot="public">QuantLib::HestonSLVMCModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_heston_s_l_v_process" prot="public">QuantLib::HestonSLVProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_himalaya_multi_path_pricer" prot="public">QuantLib::HimalayaMultiPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_himalaya_option" prot="public">QuantLib::HimalayaOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_histogram" prot="public">QuantLib::Histogram</innerclass>
    <innerclass refid="class_quant_lib_1_1_historical_forward_rates_analysis" prot="public">QuantLib::HistoricalForwardRatesAnalysis</innerclass>
    <innerclass refid="class_quant_lib_1_1_historical_forward_rates_analysis_impl" prot="public">QuantLib::HistoricalForwardRatesAnalysisImpl</innerclass>
    <innerclass refid="class_quant_lib_1_1_historical_rates_analysis" prot="public">QuantLib::HistoricalRatesAnalysis</innerclass>
    <innerclass refid="class_quant_lib_1_1_h_k_d_currency" prot="public">QuantLib::HKDCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_holder_extensible_option" prot="public">QuantLib::HolderExtensibleOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_homogeneous_pool_loss_model" prot="public">QuantLib::HomogeneousPoolLossModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_hong_kong" prot="public">QuantLib::HongKong</innerclass>
    <innerclass refid="class_quant_lib_1_1_householder_reflection" prot="public">QuantLib::HouseholderReflection</innerclass>
    <innerclass refid="class_quant_lib_1_1_householder_transformation" prot="public">QuantLib::HouseholderTransformation</innerclass>
    <innerclass refid="class_quant_lib_1_1_h_r_k_currency" prot="public">QuantLib::HRKCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_h_u_f_currency" prot="public">QuantLib::HUFCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_hull_white" prot="public">QuantLib::HullWhite</innerclass>
    <innerclass refid="class_quant_lib_1_1_hull_white_forward_process" prot="public">QuantLib::HullWhiteForwardProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_hull_white_process" prot="public">QuantLib::HullWhiteProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_hundsdorfer_scheme" prot="public">QuantLib::HundsdorferScheme</innerclass>
    <innerclass refid="class_quant_lib_1_1_hungary" prot="public">QuantLib::Hungary</innerclass>
    <innerclass refid="class_quant_lib_1_1_husler_reiss_copula" prot="public">QuantLib::HuslerReissCopula</innerclass>
    <innerclass refid="class_quant_lib_1_1_hybrid_heston_hull_white_process" prot="public">QuantLib::HybridHestonHullWhiteProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_hybrid_simulated_annealing" prot="public">QuantLib::HybridSimulatedAnnealing</innerclass>
    <innerclass refid="class_quant_lib_1_1_ibor_coupon" prot="public">QuantLib::IborCoupon</innerclass>
    <innerclass refid="class_quant_lib_1_1_ibor_coupon_pricer" prot="public">QuantLib::IborCouponPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_ibor_ibor_basis_swap_rate_helper" prot="public">QuantLib::IborIborBasisSwapRateHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_ibor_index" prot="public">QuantLib::IborIndex</innerclass>
    <innerclass refid="class_quant_lib_1_1_ibor_leg" prot="public">QuantLib::IborLeg</innerclass>
    <innerclass refid="class_quant_lib_1_1_ibor_leg_cash_flows" prot="public">QuantLib::IborLegCashFlows</innerclass>
    <innerclass refid="class_quant_lib_1_1_iceland" prot="public">QuantLib::Iceland</innerclass>
    <innerclass refid="class_quant_lib_1_1_i_d_r_currency" prot="public">QuantLib::IDRCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_i_e_p_currency" prot="public">QuantLib::IEPCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_i_l_s_currency" prot="public">QuantLib::ILSCurrency</innerclass>
    <innerclass refid="struct_quant_lib_1_1_i_m_m" prot="public">QuantLib::IMM</innerclass>
    <innerclass refid="class_quant_lib_1_1_implicit_euler" prot="public">QuantLib::ImplicitEuler</innerclass>
    <innerclass refid="class_quant_lib_1_1_implicit_euler_scheme" prot="public">QuantLib::ImplicitEulerScheme</innerclass>
    <innerclass refid="class_quant_lib_1_1_implied_std_dev_quote" prot="public">QuantLib::ImpliedStdDevQuote</innerclass>
    <innerclass refid="class_quant_lib_1_1_implied_term_structure" prot="public">QuantLib::ImpliedTermStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_implied_vol_term_structure" prot="public">QuantLib::ImpliedVolTermStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_incremental_statistics" prot="public">QuantLib::IncrementalStatistics</innerclass>
    <innerclass refid="class_quant_lib_1_1_independent_copula" prot="public">QuantLib::IndependentCopula</innerclass>
    <innerclass refid="class_quant_lib_1_1_index" prot="public">QuantLib::Index</innerclass>
    <innerclass refid="class_quant_lib_1_1_indexed_cash_flow" prot="public">QuantLib::IndexedCashFlow</innerclass>
    <innerclass refid="class_quant_lib_1_1_index_manager" prot="public">QuantLib::IndexManager</innerclass>
    <innerclass refid="class_quant_lib_1_1_india" prot="public">QuantLib::India</innerclass>
    <innerclass refid="class_quant_lib_1_1_indonesia" prot="public">QuantLib::Indonesia</innerclass>
    <innerclass refid="class_quant_lib_1_1_inflation_coupon" prot="public">QuantLib::InflationCoupon</innerclass>
    <innerclass refid="class_quant_lib_1_1_inflation_coupon_pricer" prot="public">QuantLib::InflationCouponPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_inflation_index" prot="public">QuantLib::InflationIndex</innerclass>
    <innerclass refid="class_quant_lib_1_1_inflation_term_structure" prot="public">QuantLib::InflationTermStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_inhomogeneous_pool_loss_model" prot="public">QuantLib::InhomogeneousPoolLossModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_i_n_r_currency" prot="public">QuantLib::INRCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_instrument" prot="public">QuantLib::Instrument</innerclass>
    <innerclass refid="class_quant_lib_1_1_integral_c_d_o_engine" prot="public">QuantLib::IntegralCDOEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_integral_cds_engine" prot="public">QuantLib::IntegralCdsEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_integral_engine" prot="public">QuantLib::IntegralEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_integral_heston_variance_option_engine" prot="public">QuantLib::IntegralHestonVarianceOptionEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_integral_ntd_engine" prot="public">QuantLib::IntegralNtdEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_integration_base" prot="public">QuantLib::IntegrationBase</innerclass>
    <innerclass refid="class_quant_lib_1_1_integration_base_3_01_gaussian_quad_multidim_integrator_01_4" prot="public">QuantLib::IntegrationBase&lt; GaussianQuadMultidimIntegrator &gt;</innerclass>
    <innerclass refid="class_quant_lib_1_1_integration_base_3_01_multidim_integral_01_4" prot="public">QuantLib::IntegrationBase&lt; MultidimIntegral &gt;</innerclass>
    <innerclass refid="class_quant_lib_1_1_integrator" prot="public">QuantLib::Integrator</innerclass>
    <innerclass refid="class_quant_lib_1_1_interest_rate" prot="public">QuantLib::InterestRate</innerclass>
    <innerclass refid="class_quant_lib_1_1_interest_rate_index" prot="public">QuantLib::InterestRateIndex</innerclass>
    <innerclass refid="class_quant_lib_1_1_interest_rate_vol_surface" prot="public">QuantLib::InterestRateVolSurface</innerclass>
    <innerclass refid="class_quant_lib_1_1_interpolated_affine_hazard_rate_curve" prot="public">QuantLib::InterpolatedAffineHazardRateCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_interpolated_c_p_i_cap_floor_term_price_surface" prot="public">QuantLib::InterpolatedCPICapFloorTermPriceSurface</innerclass>
    <innerclass refid="class_quant_lib_1_1_interpolated_curve" prot="public">QuantLib::InterpolatedCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_interpolated_default_density_curve" prot="public">QuantLib::InterpolatedDefaultDensityCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_interpolated_discount_curve" prot="public">QuantLib::InterpolatedDiscountCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_interpolated_forward_curve" prot="public">QuantLib::InterpolatedForwardCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_interpolated_hazard_rate_curve" prot="public">QuantLib::InterpolatedHazardRateCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_interpolated_piecewise_forward_spreaded_term_structure" prot="public">QuantLib::InterpolatedPiecewiseForwardSpreadedTermStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_interpolated_piecewise_zero_spreaded_term_structure" prot="public">QuantLib::InterpolatedPiecewiseZeroSpreadedTermStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_interpolated_simple_zero_curve" prot="public">QuantLib::InterpolatedSimpleZeroCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_interpolated_smile_section" prot="public">QuantLib::InterpolatedSmileSection</innerclass>
    <innerclass refid="class_quant_lib_1_1_interpolated_survival_probability_curve" prot="public">QuantLib::InterpolatedSurvivalProbabilityCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_interpolated_swaption_volatility_cube" prot="public">QuantLib::InterpolatedSwaptionVolatilityCube</innerclass>
    <innerclass refid="class_quant_lib_1_1_interpolated_yo_y_cap_floor_term_price_surface" prot="public">QuantLib::InterpolatedYoYCapFloorTermPriceSurface</innerclass>
    <innerclass refid="class_quant_lib_1_1_interpolated_yo_y_inflation_curve" prot="public">QuantLib::InterpolatedYoYInflationCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_interpolated_yo_y_optionlet_stripper" prot="public">QuantLib::InterpolatedYoYOptionletStripper</innerclass>
    <innerclass refid="class_quant_lib_1_1_interpolated_yo_y_optionlet_volatility_curve" prot="public">QuantLib::InterpolatedYoYOptionletVolatilityCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_interpolated_zero_curve" prot="public">QuantLib::InterpolatedZeroCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_interpolated_zero_inflation_curve" prot="public">QuantLib::InterpolatedZeroInflationCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_interpolating_c_p_i_cap_floor_engine" prot="public">QuantLib::InterpolatingCPICapFloorEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_interpolation" prot="public">QuantLib::Interpolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_interpolation2_d" prot="public">QuantLib::Interpolation2D</innerclass>
    <innerclass refid="class_quant_lib_1_1_interpolation_parameter" prot="public">QuantLib::InterpolationParameter</innerclass>
    <innerclass refid="class_quant_lib_1_1_interval_price" prot="public">QuantLib::IntervalPrice</innerclass>
    <innerclass refid="class_quant_lib_1_1_inverse_cumulative_behrens_fisher" prot="public">QuantLib::InverseCumulativeBehrensFisher</innerclass>
    <innerclass refid="class_quant_lib_1_1_inverse_cumulative_normal" prot="public">QuantLib::InverseCumulativeNormal</innerclass>
    <innerclass refid="class_quant_lib_1_1_inverse_cumulative_poisson" prot="public">QuantLib::InverseCumulativePoisson</innerclass>
    <innerclass refid="class_quant_lib_1_1_inverse_cumulative_rng" prot="public">QuantLib::InverseCumulativeRng</innerclass>
    <innerclass refid="class_quant_lib_1_1_inverse_cumulative_rsg" prot="public">QuantLib::InverseCumulativeRsg</innerclass>
    <innerclass refid="class_quant_lib_1_1_inverse_cumulative_student" prot="public">QuantLib::InverseCumulativeStudent</innerclass>
    <innerclass refid="class_quant_lib_1_1_inverse_law_square_intensity" prot="public">QuantLib::InverseLawSquareIntensity</innerclass>
    <innerclass refid="class_quant_lib_1_1_inverse_non_central_cumulative_chi_square_distribution" prot="public">QuantLib::InverseNonCentralCumulativeChiSquareDistribution</innerclass>
    <innerclass refid="class_quant_lib_1_1_i_q_d_currency" prot="public">QuantLib::IQDCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_i_r_r_currency" prot="public">QuantLib::IRRCurrency</innerclass>
    <innerclass refid="struct_quant_lib_1_1_irregular_settlement" prot="public">QuantLib::IrregularSettlement</innerclass>
    <innerclass refid="class_quant_lib_1_1_irregular_swap" prot="public">QuantLib::IrregularSwap</innerclass>
    <innerclass refid="class_quant_lib_1_1_irregular_swaption" prot="public">QuantLib::IrregularSwaption</innerclass>
    <innerclass refid="class_quant_lib_1_1_isda_cds_engine" prot="public">QuantLib::IsdaCdsEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_i_s_k_currency" prot="public">QuantLib::ISKCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_isotropic_random_walk" prot="public">QuantLib::IsotropicRandomWalk</innerclass>
    <innerclass refid="class_quant_lib_1_1_israel" prot="public">QuantLib::Israel</innerclass>
    <innerclass refid="class_quant_lib_1_1_issuer" prot="public">QuantLib::Issuer</innerclass>
    <innerclass refid="class_quant_lib_1_1_italy" prot="public">QuantLib::Italy</innerclass>
    <innerclass refid="class_quant_lib_1_1_iterative_bootstrap" prot="public">QuantLib::IterativeBootstrap</innerclass>
    <innerclass refid="class_quant_lib_1_1_i_t_l_currency" prot="public">QuantLib::ITLCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_jamshidian_swaption_engine" prot="public">QuantLib::JamshidianSwaptionEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_japan" prot="public">QuantLib::Japan</innerclass>
    <innerclass refid="class_quant_lib_1_1_jarrow_rudd" prot="public">QuantLib::JarrowRudd</innerclass>
    <innerclass refid="class_quant_lib_1_1_jibar" prot="public">QuantLib::Jibar</innerclass>
    <innerclass refid="class_quant_lib_1_1_j_o_d_currency" prot="public">QuantLib::JODCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_joint_calendar" prot="public">QuantLib::JointCalendar</innerclass>
    <innerclass refid="class_quant_lib_1_1_joint_stochastic_process" prot="public">QuantLib::JointStochasticProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_joshi4" prot="public">QuantLib::Joshi4</innerclass>
    <innerclass refid="class_quant_lib_1_1_j_p_y_currency" prot="public">QuantLib::JPYCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_j_p_y_libor" prot="public">QuantLib::JPYLibor</innerclass>
    <innerclass refid="class_quant_lib_1_1_jpy_libor_swap_isda_fix_am" prot="public">QuantLib::JpyLiborSwapIsdaFixAm</innerclass>
    <innerclass refid="class_quant_lib_1_1_jpy_libor_swap_isda_fix_pm" prot="public">QuantLib::JpyLiborSwapIsdaFixPm</innerclass>
    <innerclass refid="class_quant_lib_1_1_jump_diffusion_engine" prot="public">QuantLib::JumpDiffusionEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_ju_quadratic_approximation_engine" prot="public">QuantLib::JuQuadraticApproximationEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_kahale_smile_section" prot="public">QuantLib::KahaleSmileSection</innerclass>
    <innerclass refid="class_quant_lib_1_1_kerkhof_seasonality" prot="public">QuantLib::KerkhofSeasonality</innerclass>
    <innerclass refid="class_quant_lib_1_1_kernel_function" prot="public">QuantLib::KernelFunction</innerclass>
    <innerclass refid="class_quant_lib_1_1_kernel_interpolation" prot="public">QuantLib::KernelInterpolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_kernel_interpolation2_d" prot="public">QuantLib::KernelInterpolation2D</innerclass>
    <innerclass refid="class_quant_lib_1_1_k_e_s_currency" prot="public">QuantLib::KESCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_kilolitre_unit_of_measure" prot="public">QuantLib::KilolitreUnitOfMeasure</innerclass>
    <innerclass refid="class_quant_lib_1_1_k_interpolated_yo_y_optionlet_volatility_surface" prot="public">QuantLib::KInterpolatedYoYOptionletVolatilitySurface</innerclass>
    <innerclass refid="class_quant_lib_1_1_kirk_engine" prot="public">QuantLib::KirkEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_kirk_spread_option_engine" prot="public">QuantLib::KirkSpreadOptionEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_kluge_ext_o_u_process" prot="public">QuantLib::KlugeExtOUProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_k_neighbors" prot="public">QuantLib::KNeighbors</innerclass>
    <innerclass refid="class_quant_lib_1_1_knuth_uniform_rng" prot="public">QuantLib::KnuthUniformRng</innerclass>
    <innerclass refid="class_quant_lib_1_1_kofr" prot="public">QuantLib::Kofr</innerclass>
    <innerclass refid="class_quant_lib_1_1_kruger_cubic" prot="public">QuantLib::KrugerCubic</innerclass>
    <innerclass refid="class_quant_lib_1_1_kruger_log" prot="public">QuantLib::KrugerLog</innerclass>
    <innerclass refid="class_quant_lib_1_1_kruger_log_cubic" prot="public">QuantLib::KrugerLogCubic</innerclass>
    <innerclass refid="class_quant_lib_1_1_kruger_log_mixed_linear_cubic" prot="public">QuantLib::KrugerLogMixedLinearCubic</innerclass>
    <innerclass refid="class_quant_lib_1_1_k_r_w_currency" prot="public">QuantLib::KRWCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_k_w_d_currency" prot="public">QuantLib::KWDCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_k_z_t_currency" prot="public">QuantLib::KZTCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_lagrange_interpolation" prot="public">QuantLib::LagrangeInterpolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_laplace_interpolation" prot="public">QuantLib::LaplaceInterpolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_last_fixing_quote" prot="public">QuantLib::LastFixingQuote</innerclass>
    <innerclass refid="class_quant_lib_1_1_latent_model" prot="public">QuantLib::LatentModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_lattice" prot="public">QuantLib::Lattice</innerclass>
    <innerclass refid="class_quant_lib_1_1_lattice_rsg" prot="public">QuantLib::LatticeRsg</innerclass>
    <innerclass refid="class_quant_lib_1_1_lattice_rule" prot="public">QuantLib::LatticeRule</innerclass>
    <innerclass refid="class_quant_lib_1_1_lattice_short_rate_model_engine" prot="public">QuantLib::LatticeShortRateModelEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_lazy_object" prot="public">QuantLib::LazyObject</innerclass>
    <innerclass refid="class_quant_lib_1_1_least_square_function" prot="public">QuantLib::LeastSquareFunction</innerclass>
    <innerclass refid="class_quant_lib_1_1_least_square_problem" prot="public">QuantLib::LeastSquareProblem</innerclass>
    <innerclass refid="class_quant_lib_1_1_lecuyer_uniform_rng" prot="public">QuantLib::LecuyerUniformRng</innerclass>
    <innerclass refid="class_quant_lib_1_1_leisen_reimer" prot="public">QuantLib::LeisenReimer</innerclass>
    <innerclass refid="class_quant_lib_1_1_levenberg_marquardt" prot="public">QuantLib::LevenbergMarquardt</innerclass>
    <innerclass refid="class_quant_lib_1_1_levy_flight_distribution" prot="public">QuantLib::LevyFlightDistribution</innerclass>
    <innerclass refid="class_quant_lib_1_1_levy_flight_inertia" prot="public">QuantLib::LevyFlightInertia</innerclass>
    <innerclass refid="class_quant_lib_1_1_levy_flight_walk" prot="public">QuantLib::LevyFlightWalk</innerclass>
    <innerclass refid="class_quant_lib_1_1_lfm_covariance_parameterization" prot="public">QuantLib::LfmCovarianceParameterization</innerclass>
    <innerclass refid="class_quant_lib_1_1_lfm_covariance_proxy" prot="public">QuantLib::LfmCovarianceProxy</innerclass>
    <innerclass refid="class_quant_lib_1_1_lfm_hull_white_parameterization" prot="public">QuantLib::LfmHullWhiteParameterization</innerclass>
    <innerclass refid="class_quant_lib_1_1_lfm_swaption_engine" prot="public">QuantLib::LfmSwaptionEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_libor" prot="public">QuantLib::Libor</innerclass>
    <innerclass refid="class_quant_lib_1_1_libor_forward_model" prot="public">QuantLib::LiborForwardModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_libor_forward_model_process" prot="public">QuantLib::LiborForwardModelProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_linear" prot="public">QuantLib::Linear</innerclass>
    <innerclass refid="class_quant_lib_1_1_linear_flat" prot="public">QuantLib::LinearFlat</innerclass>
    <innerclass refid="class_quant_lib_1_1_linear_flat_interpolation" prot="public">QuantLib::LinearFlatInterpolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_linear_interpolation" prot="public">QuantLib::LinearInterpolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_linear_least_squares_regression" prot="public">QuantLib::LinearLeastSquaresRegression</innerclass>
    <innerclass refid="class_quant_lib_1_1_linear_regression" prot="public">QuantLib::LinearRegression</innerclass>
    <innerclass refid="class_quant_lib_1_1_linear_tsr_pricer" prot="public">QuantLib::LinearTsrPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_line_search" prot="public">QuantLib::LineSearch</innerclass>
    <innerclass refid="class_quant_lib_1_1_line_search_based_method" prot="public">QuantLib::LineSearchBasedMethod</innerclass>
    <innerclass refid="class_quant_lib_1_1_litre_unit_of_measure" prot="public">QuantLib::LitreUnitOfMeasure</innerclass>
    <innerclass refid="class_quant_lib_1_1_l_k_r_currency" prot="public">QuantLib::LKRCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_lm_const_wrapper_correlation_model" prot="public">QuantLib::LmConstWrapperCorrelationModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_lm_const_wrapper_volatility_model" prot="public">QuantLib::LmConstWrapperVolatilityModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_lm_correlation_model" prot="public">QuantLib::LmCorrelationModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_lm_exponential_correlation_model" prot="public">QuantLib::LmExponentialCorrelationModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_lm_ext_linear_exponential_vol_model" prot="public">QuantLib::LmExtLinearExponentialVolModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_lm_fixed_volatility_model" prot="public">QuantLib::LmFixedVolatilityModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_l_m_integration" prot="public">QuantLib::LMIntegration</innerclass>
    <innerclass refid="class_quant_lib_1_1_lm_linear_exponential_correlation_model" prot="public">QuantLib::LmLinearExponentialCorrelationModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_lm_linear_exponential_volatility_model" prot="public">QuantLib::LmLinearExponentialVolatilityModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_l_m_m_curve_state" prot="public">QuantLib::LMMCurveState</innerclass>
    <innerclass refid="class_quant_lib_1_1_l_m_m_drift_calculator" prot="public">QuantLib::LMMDriftCalculator</innerclass>
    <innerclass refid="class_quant_lib_1_1_l_m_m_normal_drift_calculator" prot="public">QuantLib::LMMNormalDriftCalculator</innerclass>
    <innerclass refid="class_quant_lib_1_1_lm_volatility_model" prot="public">QuantLib::LmVolatilityModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_local_bootstrap" prot="public">QuantLib::LocalBootstrap</innerclass>
    <innerclass refid="class_quant_lib_1_1_local_constant_vol" prot="public">QuantLib::LocalConstantVol</innerclass>
    <innerclass refid="class_quant_lib_1_1_local_volatility_estimator" prot="public">QuantLib::LocalVolatilityEstimator</innerclass>
    <innerclass refid="class_quant_lib_1_1_local_vol_curve" prot="public">QuantLib::LocalVolCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_local_vol_r_n_d_calculator" prot="public">QuantLib::LocalVolRNDCalculator</innerclass>
    <innerclass refid="class_quant_lib_1_1_local_vol_surface" prot="public">QuantLib::LocalVolSurface</innerclass>
    <innerclass refid="class_quant_lib_1_1_local_vol_term_structure" prot="public">QuantLib::LocalVolTermStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_log_cubic" prot="public">QuantLib::LogCubic</innerclass>
    <innerclass refid="class_quant_lib_1_1_log_cubic_interpolation" prot="public">QuantLib::LogCubicInterpolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_log_cubic_natural_spline" prot="public">QuantLib::LogCubicNaturalSpline</innerclass>
    <innerclass refid="class_quant_lib_1_1_log_grid" prot="public">QuantLib::LogGrid</innerclass>
    <innerclass refid="class_quant_lib_1_1_log_linear" prot="public">QuantLib::LogLinear</innerclass>
    <innerclass refid="class_quant_lib_1_1_log_linear_interpolation" prot="public">QuantLib::LogLinearInterpolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_log_mixed_linear_cubic" prot="public">QuantLib::LogMixedLinearCubic</innerclass>
    <innerclass refid="class_quant_lib_1_1_log_mixed_linear_cubic_interpolation" prot="public">QuantLib::LogMixedLinearCubicInterpolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_log_mixed_linear_cubic_natural_spline" prot="public">QuantLib::LogMixedLinearCubicNaturalSpline</innerclass>
    <innerclass refid="class_quant_lib_1_1_lognormal_cms_spread_pricer" prot="public">QuantLib::LognormalCmsSpreadPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_log_normal_cm_swap_rate_pc" prot="public">QuantLib::LogNormalCmSwapRatePc</innerclass>
    <innerclass refid="class_quant_lib_1_1_log_normal_cot_swap_rate_pc" prot="public">QuantLib::LogNormalCotSwapRatePc</innerclass>
    <innerclass refid="class_quant_lib_1_1_log_normal_fwd_rate_balland" prot="public">QuantLib::LogNormalFwdRateBalland</innerclass>
    <innerclass refid="class_quant_lib_1_1_log_normal_fwd_rate_euler" prot="public">QuantLib::LogNormalFwdRateEuler</innerclass>
    <innerclass refid="class_quant_lib_1_1_log_normal_fwd_rate_euler_constrained" prot="public">QuantLib::LogNormalFwdRateEulerConstrained</innerclass>
    <innerclass refid="class_quant_lib_1_1_log_normal_fwd_ratei_balland" prot="public">QuantLib::LogNormalFwdRateiBalland</innerclass>
    <innerclass refid="class_quant_lib_1_1_log_normal_fwd_rate_ipc" prot="public">QuantLib::LogNormalFwdRateIpc</innerclass>
    <innerclass refid="class_quant_lib_1_1_log_normal_fwd_rate_pc" prot="public">QuantLib::LogNormalFwdRatePc</innerclass>
    <innerclass refid="class_quant_lib_1_1_log_parabolic" prot="public">QuantLib::LogParabolic</innerclass>
    <innerclass refid="class_quant_lib_1_1_longstaff_schwartz_exercise_strategy" prot="public">QuantLib::LongstaffSchwartzExerciseStrategy</innerclass>
    <innerclass refid="class_quant_lib_1_1_longstaff_schwartz_multi_path_pricer" prot="public">QuantLib::LongstaffSchwartzMultiPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_longstaff_schwartz_path_pricer" prot="public">QuantLib::LongstaffSchwartzPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_lookback_fixed_path_pricer" prot="public">QuantLib::LookbackFixedPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_lookback_floating_path_pricer" prot="public">QuantLib::LookbackFloatingPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_lookback_partial_fixed_path_pricer" prot="public">QuantLib::LookbackPartialFixedPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_lookback_partial_floating_path_pricer" prot="public">QuantLib::LookbackPartialFloatingPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_loss" prot="public">QuantLib::Loss</innerclass>
    <innerclass refid="class_quant_lib_1_1_loss_dist" prot="public">QuantLib::LossDist</innerclass>
    <innerclass refid="class_quant_lib_1_1_loss_dist_binomial" prot="public">QuantLib::LossDistBinomial</innerclass>
    <innerclass refid="class_quant_lib_1_1_loss_dist_bucketing" prot="public">QuantLib::LossDistBucketing</innerclass>
    <innerclass refid="class_quant_lib_1_1_loss_dist_homogeneous" prot="public">QuantLib::LossDistHomogeneous</innerclass>
    <innerclass refid="class_quant_lib_1_1_loss_dist_monte_carlo" prot="public">QuantLib::LossDistMonteCarlo</innerclass>
    <innerclass refid="class_quant_lib_1_1_lot_unit_of_measure" prot="public">QuantLib::LotUnitOfMeasure</innerclass>
    <innerclass refid="class_quant_lib_1_1_l_p_p2_heston_expansion" prot="public">QuantLib::LPP2HestonExpansion</innerclass>
    <innerclass refid="class_quant_lib_1_1_l_p_p3_heston_expansion" prot="public">QuantLib::LPP3HestonExpansion</innerclass>
    <innerclass refid="class_quant_lib_1_1_lsm_basis_system" prot="public">QuantLib::LsmBasisSystem</innerclass>
    <innerclass refid="class_quant_lib_1_1_l_t_c_currency" prot="public">QuantLib::LTCCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_l_t_l_currency" prot="public">QuantLib::LTLCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_l_u_f_currency" prot="public">QuantLib::LUFCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_l_v_l_currency" prot="public">QuantLib::LVLCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_a_d_currency" prot="public">QuantLib::MADCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_maddock_cumulative_normal" prot="public">QuantLib::MaddockCumulativeNormal</innerclass>
    <innerclass refid="class_quant_lib_1_1_maddock_inverse_cumulative_normal" prot="public">QuantLib::MaddockInverseCumulativeNormal</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_arithmetic_average_o_i_s" prot="public">QuantLib::MakeArithmeticAverageOIS</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_cap_floor" prot="public">QuantLib::MakeCapFloor</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_cms" prot="public">QuantLib::MakeCms</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_credit_default_swap" prot="public">QuantLib::MakeCreditDefaultSwap</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_fd_black_scholes_vanilla_engine" prot="public">QuantLib::MakeFdBlackScholesVanillaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_fd_c_i_r_vanilla_engine" prot="public">QuantLib::MakeFdCIRVanillaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_fd_heston_vanilla_engine" prot="public">QuantLib::MakeFdHestonVanillaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_american_basket_engine" prot="public">QuantLib::MakeMCAmericanBasketEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_american_engine" prot="public">QuantLib::MakeMCAmericanEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_american_path_engine" prot="public">QuantLib::MakeMCAmericanPathEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_barrier_engine" prot="public">QuantLib::MakeMCBarrierEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_digital_engine" prot="public">QuantLib::MakeMCDigitalEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_p_engine" prot="public">QuantLib::MakeMCDiscreteArithmeticAPEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_p_heston_engine" prot="public">QuantLib::MakeMCDiscreteArithmeticAPHestonEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine" prot="public">QuantLib::MakeMCDiscreteArithmeticASEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_discrete_geometric_a_p_engine" prot="public">QuantLib::MakeMCDiscreteGeometricAPEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_discrete_geometric_a_p_heston_engine" prot="public">QuantLib::MakeMCDiscreteGeometricAPHestonEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_double_barrier_engine" prot="public">QuantLib::MakeMCDoubleBarrierEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_european_basket_engine" prot="public">QuantLib::MakeMCEuropeanBasketEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_european_engine" prot="public">QuantLib::MakeMCEuropeanEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_european_g_j_r_g_a_r_c_h_engine" prot="public">QuantLib::MakeMCEuropeanGJRGARCHEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_european_heston_engine" prot="public">QuantLib::MakeMCEuropeanHestonEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_everest_engine" prot="public">QuantLib::MakeMCEverestEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_forward_european_b_s_engine" prot="public">QuantLib::MakeMCForwardEuropeanBSEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_forward_european_heston_engine" prot="public">QuantLib::MakeMCForwardEuropeanHestonEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_heston_hull_white_engine" prot="public">QuantLib::MakeMCHestonHullWhiteEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_himalaya_engine" prot="public">QuantLib::MakeMCHimalayaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine" prot="public">QuantLib::MakeMCHullWhiteCapFloorEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_lookback_engine" prot="public">QuantLib::MakeMCLookbackEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_pagoda_engine" prot="public">QuantLib::MakeMCPagodaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_path_basket_engine" prot="public">QuantLib::MakeMCPathBasketEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_performance_engine" prot="public">QuantLib::MakeMCPerformanceEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_m_c_variance_swap_engine" prot="public">QuantLib::MakeMCVarianceSwapEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_o_i_s" prot="public">QuantLib::MakeOIS</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_schedule" prot="public">QuantLib::MakeSchedule</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_swaption" prot="public">QuantLib::MakeSwaption</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_vanilla_swap" prot="public">QuantLib::MakeVanillaSwap</innerclass>
    <innerclass refid="class_quant_lib_1_1_make_yo_y_inflation_cap_floor" prot="public">QuantLib::MakeYoYInflationCapFloor</innerclass>
    <innerclass refid="class_quant_lib_1_1_manipulate_distribution" prot="public">QuantLib::ManipulateDistribution</innerclass>
    <innerclass refid="class_quant_lib_1_1_margrabe_option" prot="public">QuantLib::MargrabeOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_market_model" prot="public">QuantLib::MarketModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_market_model_basis_system" prot="public">QuantLib::MarketModelBasisSystem</innerclass>
    <innerclass refid="class_quant_lib_1_1_market_model_cash_rebate" prot="public">QuantLib::MarketModelCashRebate</innerclass>
    <innerclass refid="class_quant_lib_1_1_market_model_composite" prot="public">QuantLib::MarketModelComposite</innerclass>
    <innerclass refid="class_quant_lib_1_1_market_model_discounter" prot="public">QuantLib::MarketModelDiscounter</innerclass>
    <innerclass refid="class_quant_lib_1_1_market_model_evolver" prot="public">QuantLib::MarketModelEvolver</innerclass>
    <innerclass refid="class_quant_lib_1_1_market_model_exercise_value" prot="public">QuantLib::MarketModelExerciseValue</innerclass>
    <innerclass refid="class_quant_lib_1_1_market_model_factory" prot="public">QuantLib::MarketModelFactory</innerclass>
    <innerclass refid="class_quant_lib_1_1_market_model_multi_product" prot="public">QuantLib::MarketModelMultiProduct</innerclass>
    <innerclass refid="class_quant_lib_1_1_market_model_node_data_provider" prot="public">QuantLib::MarketModelNodeDataProvider</innerclass>
    <innerclass refid="class_quant_lib_1_1_market_model_parametric_exercise" prot="public">QuantLib::MarketModelParametricExercise</innerclass>
    <innerclass refid="class_quant_lib_1_1_market_model_pathwise_cash_rebate" prot="public">QuantLib::MarketModelPathwiseCashRebate</innerclass>
    <innerclass refid="class_quant_lib_1_1_market_model_pathwise_coterminal_swaptions_deflated" prot="public">QuantLib::MarketModelPathwiseCoterminalSwaptionsDeflated</innerclass>
    <innerclass refid="class_quant_lib_1_1_market_model_pathwise_coterminal_swaptions_numerical_deflated" prot="public">QuantLib::MarketModelPathwiseCoterminalSwaptionsNumericalDeflated</innerclass>
    <innerclass refid="class_quant_lib_1_1_market_model_pathwise_discounter" prot="public">QuantLib::MarketModelPathwiseDiscounter</innerclass>
    <innerclass refid="class_quant_lib_1_1_market_model_pathwise_inverse_floater" prot="public">QuantLib::MarketModelPathwiseInverseFloater</innerclass>
    <innerclass refid="class_quant_lib_1_1_market_model_pathwise_multi_caplet" prot="public">QuantLib::MarketModelPathwiseMultiCaplet</innerclass>
    <innerclass refid="class_quant_lib_1_1_market_model_pathwise_multi_deflated_cap" prot="public">QuantLib::MarketModelPathwiseMultiDeflatedCap</innerclass>
    <innerclass refid="class_quant_lib_1_1_market_model_pathwise_multi_deflated_caplet" prot="public">QuantLib::MarketModelPathwiseMultiDeflatedCaplet</innerclass>
    <innerclass refid="class_quant_lib_1_1_market_model_pathwise_multi_product" prot="public">QuantLib::MarketModelPathwiseMultiProduct</innerclass>
    <innerclass refid="class_quant_lib_1_1_market_model_pathwise_swap" prot="public">QuantLib::MarketModelPathwiseSwap</innerclass>
    <innerclass refid="class_quant_lib_1_1_market_model_vol_process" prot="public">QuantLib::MarketModelVolProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_market_quoted_option_pricer" prot="public">QuantLib::MarketQuotedOptionPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_markov_functional" prot="public">QuantLib::MarkovFunctional</innerclass>
    <innerclass refid="class_quant_lib_1_1_marshall_olkin_copula" prot="public">QuantLib::MarshallOlkinCopula</innerclass>
    <innerclass refid="class_quant_lib_1_1_matrix" prot="public">QuantLib::Matrix</innerclass>
    <innerclass refid="class_quant_lib_1_1_max_basket_payoff" prot="public">QuantLib::MaxBasketPayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_max_copula" prot="public">QuantLib::MaxCopula</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_b_unit_of_measure" prot="public">QuantLib::MBUnitOfMeasure</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_american_basket_engine" prot="public">QuantLib::MCAmericanBasketEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_american_engine" prot="public">QuantLib::MCAmericanEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_american_path_engine" prot="public">QuantLib::MCAmericanPathEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_barrier_engine" prot="public">QuantLib::MCBarrierEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_digital_engine" prot="public">QuantLib::MCDigitalEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_discrete_arithmetic_a_p_engine" prot="public">QuantLib::MCDiscreteArithmeticAPEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_discrete_arithmetic_a_p_heston_engine" prot="public">QuantLib::MCDiscreteArithmeticAPHestonEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_discrete_arithmetic_a_s_engine" prot="public">QuantLib::MCDiscreteArithmeticASEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_discrete_averaging_asian_engine_base" prot="public">QuantLib::MCDiscreteAveragingAsianEngineBase</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_discrete_geometric_a_p_engine" prot="public">QuantLib::MCDiscreteGeometricAPEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_discrete_geometric_a_p_heston_engine" prot="public">QuantLib::MCDiscreteGeometricAPHestonEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_double_barrier_engine" prot="public">QuantLib::MCDoubleBarrierEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_european_basket_engine" prot="public">QuantLib::MCEuropeanBasketEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_european_engine" prot="public">QuantLib::MCEuropeanEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_european_g_j_r_g_a_r_c_h_engine" prot="public">QuantLib::MCEuropeanGJRGARCHEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_european_heston_engine" prot="public">QuantLib::MCEuropeanHestonEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_everest_engine" prot="public">QuantLib::MCEverestEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_forward_european_b_s_engine" prot="public">QuantLib::MCForwardEuropeanBSEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_forward_european_heston_engine" prot="public">QuantLib::MCForwardEuropeanHestonEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_forward_vanilla_engine" prot="public">QuantLib::MCForwardVanillaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_heston_hull_white_engine" prot="public">QuantLib::MCHestonHullWhiteEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_himalaya_engine" prot="public">QuantLib::MCHimalayaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_hull_white_cap_floor_engine" prot="public">QuantLib::MCHullWhiteCapFloorEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_longstaff_schwartz_engine" prot="public">QuantLib::MCLongstaffSchwartzEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_longstaff_schwartz_path_engine" prot="public">QuantLib::MCLongstaffSchwartzPathEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_lookback_engine" prot="public">QuantLib::MCLookbackEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_pagoda_engine" prot="public">QuantLib::MCPagodaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_path_basket_engine" prot="public">QuantLib::MCPathBasketEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_performance_engine" prot="public">QuantLib::MCPerformanceEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_mc_simulation" prot="public">QuantLib::McSimulation</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_vanilla_engine" prot="public">QuantLib::MCVanillaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_c_variance_swap_engine" prot="public">QuantLib::MCVarianceSwapEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_mean_reverting_pricer" prot="public">QuantLib::MeanRevertingPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_mersenne_twister_uniform_rng" prot="public">QuantLib::MersenneTwisterUniformRng</innerclass>
    <innerclass refid="class_quant_lib_1_1_merton76_process" prot="public">QuantLib::Merton76Process</innerclass>
    <innerclass refid="class_quant_lib_1_1_method_of_lines_scheme" prot="public">QuantLib::MethodOfLinesScheme</innerclass>
    <innerclass refid="class_quant_lib_1_1_mexico" prot="public">QuantLib::Mexico</innerclass>
    <innerclass refid="class_quant_lib_1_1_mf_state_process" prot="public">QuantLib::MfStateProcess</innerclass>
    <innerclass refid="struct_quant_lib_1_1_mid_point" prot="public">QuantLib::MidPoint</innerclass>
    <innerclass refid="class_quant_lib_1_1_mid_point_c_d_o_engine" prot="public">QuantLib::MidPointCDOEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_mid_point_cds_engine" prot="public">QuantLib::MidPointCdsEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_min_basket_payoff" prot="public">QuantLib::MinBasketPayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_min_copula" prot="public">QuantLib::MinCopula</innerclass>
    <innerclass refid="struct_quant_lib_1_1_mixed_interpolation" prot="public">QuantLib::MixedInterpolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_mixed_linear_cubic" prot="public">QuantLib::MixedLinearCubic</innerclass>
    <innerclass refid="class_quant_lib_1_1_mixed_linear_cubic_interpolation" prot="public">QuantLib::MixedLinearCubicInterpolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_mixed_linear_cubic_natural_spline" prot="public">QuantLib::MixedLinearCubicNaturalSpline</innerclass>
    <innerclass refid="class_quant_lib_1_1_mixed_linear_fritsch_butland_cubic" prot="public">QuantLib::MixedLinearFritschButlandCubic</innerclass>
    <innerclass refid="class_quant_lib_1_1_mixed_linear_kruger_cubic" prot="public">QuantLib::MixedLinearKrugerCubic</innerclass>
    <innerclass refid="class_quant_lib_1_1_mixed_linear_monotonic_cubic_natural_spline" prot="public">QuantLib::MixedLinearMonotonicCubicNaturalSpline</innerclass>
    <innerclass refid="class_quant_lib_1_1_mixed_linear_monotonic_parabolic" prot="public">QuantLib::MixedLinearMonotonicParabolic</innerclass>
    <innerclass refid="class_quant_lib_1_1_mixed_linear_parabolic" prot="public">QuantLib::MixedLinearParabolic</innerclass>
    <innerclass refid="class_quant_lib_1_1_mixed_scheme" prot="public">QuantLib::MixedScheme</innerclass>
    <innerclass refid="class_quant_lib_1_1_modified_craig_sneyd_scheme" prot="public">QuantLib::ModifiedCraigSneydScheme</innerclass>
    <innerclass refid="class_quant_lib_1_1_mod_triple_band_linear_op" prot="public">QuantLib::ModTripleBandLinearOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_moment_based_gaussian_polynomial" prot="public">QuantLib::MomentBasedGaussianPolynomial</innerclass>
    <innerclass refid="class_quant_lib_1_1_money" prot="public">QuantLib::Money</innerclass>
    <innerclass refid="class_quant_lib_1_1_monotonic_cubic_natural_spline" prot="public">QuantLib::MonotonicCubicNaturalSpline</innerclass>
    <innerclass refid="class_quant_lib_1_1_monotonic_log_cubic" prot="public">QuantLib::MonotonicLogCubic</innerclass>
    <innerclass refid="class_quant_lib_1_1_monotonic_log_cubic_natural_spline" prot="public">QuantLib::MonotonicLogCubicNaturalSpline</innerclass>
    <innerclass refid="class_quant_lib_1_1_monotonic_log_mixed_linear_cubic" prot="public">QuantLib::MonotonicLogMixedLinearCubic</innerclass>
    <innerclass refid="class_quant_lib_1_1_monotonic_log_parabolic" prot="public">QuantLib::MonotonicLogParabolic</innerclass>
    <innerclass refid="class_quant_lib_1_1_monotonic_parabolic" prot="public">QuantLib::MonotonicParabolic</innerclass>
    <innerclass refid="class_quant_lib_1_1_monte_carlo_cat_bond_engine" prot="public">QuantLib::MonteCarloCatBondEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_monte_carlo_model" prot="public">QuantLib::MonteCarloModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_more_greeks" prot="public">QuantLib::MoreGreeks</innerclass>
    <innerclass refid="class_quant_lib_1_1_moro_inverse_cumulative_normal" prot="public">QuantLib::MoroInverseCumulativeNormal</innerclass>
    <innerclass refid="class_quant_lib_1_1_mosprime" prot="public">QuantLib::Mosprime</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_t_brownian_generator" prot="public">QuantLib::MTBrownianGenerator</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_t_brownian_generator_factory" prot="public">QuantLib::MTBrownianGeneratorFactory</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_t_l_currency" prot="public">QuantLib::MTLCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_mt_m_cross_currency_basis_swap_rate_helper" prot="public">QuantLib::MtMCrossCurrencyBasisSwapRateHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_t_unit_of_measure" prot="public">QuantLib::MTUnitOfMeasure</innerclass>
    <innerclass refid="class_quant_lib_1_1_multi_asset_option" prot="public">QuantLib::MultiAssetOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_multi_cubic_spline" prot="public">QuantLib::MultiCubicSpline</innerclass>
    <innerclass refid="class_quant_lib_1_1_multi_dim_gaussian_integration" prot="public">QuantLib::MultiDimGaussianIntegration</innerclass>
    <innerclass refid="class_quant_lib_1_1_multidim_integral" prot="public">QuantLib::MultidimIntegral</innerclass>
    <innerclass refid="class_quant_lib_1_1_multi_path" prot="public">QuantLib::MultiPath</innerclass>
    <innerclass refid="class_quant_lib_1_1_multi_path_generator" prot="public">QuantLib::MultiPathGenerator</innerclass>
    <innerclass refid="class_quant_lib_1_1_multiple_resets_coupon" prot="public">QuantLib::MultipleResetsCoupon</innerclass>
    <innerclass refid="class_quant_lib_1_1_multiple_resets_leg" prot="public">QuantLib::MultipleResetsLeg</innerclass>
    <innerclass refid="class_quant_lib_1_1_multiple_resets_pricer" prot="public">QuantLib::MultipleResetsPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_multiplicative_price_seasonality" prot="public">QuantLib::MultiplicativePriceSeasonality</innerclass>
    <innerclass refid="class_quant_lib_1_1_multi_product_composite" prot="public">QuantLib::MultiProductComposite</innerclass>
    <innerclass refid="class_quant_lib_1_1_multi_product_multi_step" prot="public">QuantLib::MultiProductMultiStep</innerclass>
    <innerclass refid="class_quant_lib_1_1_multi_product_one_step" prot="public">QuantLib::MultiProductOneStep</innerclass>
    <innerclass refid="class_quant_lib_1_1_multi_product_pathwise_wrapper" prot="public">QuantLib::MultiProductPathwiseWrapper</innerclass>
    <innerclass refid="class_quant_lib_1_1_multi_step_coinitial_swaps" prot="public">QuantLib::MultiStepCoinitialSwaps</innerclass>
    <innerclass refid="class_quant_lib_1_1_multi_step_coterminal_swaps" prot="public">QuantLib::MultiStepCoterminalSwaps</innerclass>
    <innerclass refid="class_quant_lib_1_1_multi_step_coterminal_swaptions" prot="public">QuantLib::MultiStepCoterminalSwaptions</innerclass>
    <innerclass refid="class_quant_lib_1_1_multi_step_forwards" prot="public">QuantLib::MultiStepForwards</innerclass>
    <innerclass refid="class_quant_lib_1_1_multi_step_inverse_floater" prot="public">QuantLib::MultiStepInverseFloater</innerclass>
    <innerclass refid="class_quant_lib_1_1_multi_step_nothing" prot="public">QuantLib::MultiStepNothing</innerclass>
    <innerclass refid="class_quant_lib_1_1_multi_step_optionlets" prot="public">QuantLib::MultiStepOptionlets</innerclass>
    <innerclass refid="class_quant_lib_1_1_multi_step_period_caplet_swaptions" prot="public">QuantLib::MultiStepPeriodCapletSwaptions</innerclass>
    <innerclass refid="class_quant_lib_1_1_multi_step_ratchet" prot="public">QuantLib::MultiStepRatchet</innerclass>
    <innerclass refid="class_quant_lib_1_1_multi_step_swap" prot="public">QuantLib::MultiStepSwap</innerclass>
    <innerclass refid="class_quant_lib_1_1_multi_step_swaption" prot="public">QuantLib::MultiStepSwaption</innerclass>
    <innerclass refid="class_quant_lib_1_1_multi_step_tarn" prot="public">QuantLib::MultiStepTarn</innerclass>
    <innerclass refid="struct_quant_lib_1_1_multi_variate" prot="public">QuantLib::MultiVariate</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_u_r_currency" prot="public">QuantLib::MURCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_x_n_currency" prot="public">QuantLib::MXNCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_x_v_currency" prot="public">QuantLib::MXVCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_m_y_r_currency" prot="public">QuantLib::MYRCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_nelson_siegel_fitting" prot="public">QuantLib::NelsonSiegelFitting</innerclass>
    <innerclass refid="class_quant_lib_1_1_neumann_b_c" prot="public">QuantLib::NeumannBC</innerclass>
    <innerclass refid="class_quant_lib_1_1_newton" prot="public">QuantLib::Newton</innerclass>
    <innerclass refid="class_quant_lib_1_1_newton_safe" prot="public">QuantLib::NewtonSafe</innerclass>
    <innerclass refid="class_quant_lib_1_1_new_zealand" prot="public">QuantLib::NewZealand</innerclass>
    <innerclass refid="class_quant_lib_1_1_n_g_n_currency" prot="public">QuantLib::NGNCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_nine_point_linear_op" prot="public">QuantLib::NinePointLinearOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_n_l_g_currency" prot="public">QuantLib::NLGCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_no_arb_sabr" prot="public">QuantLib::NoArbSabr</innerclass>
    <innerclass refid="class_quant_lib_1_1_no_arb_sabr_interpolated_smile_section" prot="public">QuantLib::NoArbSabrInterpolatedSmileSection</innerclass>
    <innerclass refid="class_quant_lib_1_1_no_arb_sabr_interpolation" prot="public">QuantLib::NoArbSabrInterpolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_no_arb_sabr_model" prot="public">QuantLib::NoArbSabrModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_no_arb_sabr_smile_section" prot="public">QuantLib::NoArbSabrSmileSection</innerclass>
    <innerclass refid="class_quant_lib_1_1_no_constraint" prot="public">QuantLib::NoConstraint</innerclass>
    <innerclass refid="struct_quant_lib_1_1_node_data" prot="public">QuantLib::NodeData</innerclass>
    <innerclass refid="class_quant_lib_1_1_no_except_local_vol_surface" prot="public">QuantLib::NoExceptLocalVolSurface</innerclass>
    <innerclass refid="class_quant_lib_1_1_n_o_k_currency" prot="public">QuantLib::NOKCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_non_central_cumulative_chi_square_distribution" prot="public">QuantLib::NonCentralCumulativeChiSquareDistribution</innerclass>
    <innerclass refid="class_quant_lib_1_1_non_central_cumulative_chi_square_sankaran_approx" prot="public">QuantLib::NonCentralCumulativeChiSquareSankaranApprox</innerclass>
    <innerclass refid="class_quant_lib_1_1_nonhomogeneous_boundary_constraint" prot="public">QuantLib::NonhomogeneousBoundaryConstraint</innerclass>
    <innerclass refid="class_quant_lib_1_1_non_linear_least_square" prot="public">QuantLib::NonLinearLeastSquare</innerclass>
    <innerclass refid="class_quant_lib_1_1_nonstandard_swap" prot="public">QuantLib::NonstandardSwap</innerclass>
    <innerclass refid="class_quant_lib_1_1_nonstandard_swaption" prot="public">QuantLib::NonstandardSwaption</innerclass>
    <innerclass refid="class_quant_lib_1_1_no_offset" prot="public">QuantLib::NoOffset</innerclass>
    <innerclass refid="class_quant_lib_1_1_normal_c_l_v_model" prot="public">QuantLib::NormalCLVModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_normal_distribution" prot="public">QuantLib::NormalDistribution</innerclass>
    <innerclass refid="class_quant_lib_1_1_normal_fwd_rate_pc" prot="public">QuantLib::NormalFwdRatePc</innerclass>
    <innerclass refid="class_quant_lib_1_1_north_america_corp_default_key" prot="public">QuantLib::NorthAmericaCorpDefaultKey</innerclass>
    <innerclass refid="class_quant_lib_1_1_norway" prot="public">QuantLib::Norway</innerclass>
    <innerclass refid="class_quant_lib_1_1_nothing_exercise_value" prot="public">QuantLib::NothingExerciseValue</innerclass>
    <innerclass refid="class_quant_lib_1_1_notional_path" prot="public">QuantLib::NotionalPath</innerclass>
    <innerclass refid="class_quant_lib_1_1_notional_risk" prot="public">QuantLib::NotionalRisk</innerclass>
    <innerclass refid="class_quant_lib_1_1_n_p_r_currency" prot="public">QuantLib::NPRCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_nth_order_derivative_op" prot="public">QuantLib::NthOrderDerivativeOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_nth_to_default" prot="public">QuantLib::NthToDefault</innerclass>
    <innerclass refid="class_quant_lib_1_1_null" prot="public">QuantLib::Null</innerclass>
    <innerclass refid="struct_quant_lib_1_1null__deleter" prot="public">QuantLib::null_deleter</innerclass>
    <innerclass refid="class_quant_lib_1_1_null_calendar" prot="public">QuantLib::NullCalendar</innerclass>
    <innerclass refid="class_quant_lib_1_1_null_commodity_type" prot="public">QuantLib::NullCommodityType</innerclass>
    <innerclass refid="class_quant_lib_1_1_null_condition" prot="public">QuantLib::NullCondition</innerclass>
    <innerclass refid="class_quant_lib_1_1_null_parameter" prot="public">QuantLib::NullParameter</innerclass>
    <innerclass refid="class_quant_lib_1_1_null_payoff" prot="public">QuantLib::NullPayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_numerical_differentiation" prot="public">QuantLib::NumericalDifferentiation</innerclass>
    <innerclass refid="class_quant_lib_1_1_numeric_hagan_pricer" prot="public">QuantLib::NumericHaganPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_n_z_d_currency" prot="public">QuantLib::NZDCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_n_z_d_libor" prot="public">QuantLib::NZDLibor</innerclass>
    <innerclass refid="class_quant_lib_1_1_nzocr" prot="public">QuantLib::Nzocr</innerclass>
    <innerclass refid="class_quant_lib_1_1_observable" prot="public">QuantLib::Observable</innerclass>
    <innerclass refid="class_quant_lib_1_1_observable_settings" prot="public">QuantLib::ObservableSettings</innerclass>
    <innerclass refid="class_quant_lib_1_1_observable_value" prot="public">QuantLib::ObservableValue</innerclass>
    <innerclass refid="class_quant_lib_1_1_observer" prot="public">QuantLib::Observer</innerclass>
    <innerclass refid="class_quant_lib_1_1_o_i_s_rate_helper" prot="public">QuantLib::OISRateHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_o_m_r_currency" prot="public">QuantLib::OMRCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_one_asset_option" prot="public">QuantLib::OneAssetOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_one_day_counter" prot="public">QuantLib::OneDayCounter</innerclass>
    <innerclass refid="class_quant_lib_1_1_one_factor_affine_model" prot="public">QuantLib::OneFactorAffineModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_one_factor_affine_survival_structure" prot="public">QuantLib::OneFactorAffineSurvivalStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_one_factor_copula" prot="public">QuantLib::OneFactorCopula</innerclass>
    <innerclass refid="class_quant_lib_1_1_one_factor_gaussian_copula" prot="public">QuantLib::OneFactorGaussianCopula</innerclass>
    <innerclass refid="class_quant_lib_1_1_one_factor_gaussian_student_copula" prot="public">QuantLib::OneFactorGaussianStudentCopula</innerclass>
    <innerclass refid="class_quant_lib_1_1_one_factor_model" prot="public">QuantLib::OneFactorModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_one_factor_student_copula" prot="public">QuantLib::OneFactorStudentCopula</innerclass>
    <innerclass refid="class_quant_lib_1_1_one_factor_student_gaussian_copula" prot="public">QuantLib::OneFactorStudentGaussianCopula</innerclass>
    <innerclass refid="class_quant_lib_1_1_one_step_coinitial_swaps" prot="public">QuantLib::OneStepCoinitialSwaps</innerclass>
    <innerclass refid="class_quant_lib_1_1_one_step_coterminal_swaps" prot="public">QuantLib::OneStepCoterminalSwaps</innerclass>
    <innerclass refid="class_quant_lib_1_1_one_step_forwards" prot="public">QuantLib::OneStepForwards</innerclass>
    <innerclass refid="class_quant_lib_1_1_one_step_optionlets" prot="public">QuantLib::OneStepOptionlets</innerclass>
    <innerclass refid="class_quant_lib_1_1_operator_splitting_spread_engine" prot="public">QuantLib::OperatorSplittingSpreadEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_operator_traits" prot="public">QuantLib::OperatorTraits</innerclass>
    <innerclass refid="class_quant_lib_1_1_optimization_method" prot="public">QuantLib::OptimizationMethod</innerclass>
    <innerclass refid="class_quant_lib_1_1_option" prot="public">QuantLib::Option</innerclass>
    <innerclass refid="class_quant_lib_1_1_optionlet_stripper" prot="public">QuantLib::OptionletStripper</innerclass>
    <innerclass refid="class_quant_lib_1_1_optionlet_stripper1" prot="public">QuantLib::OptionletStripper1</innerclass>
    <innerclass refid="class_quant_lib_1_1_optionlet_stripper2" prot="public">QuantLib::OptionletStripper2</innerclass>
    <innerclass refid="class_quant_lib_1_1_optionlet_volatility_structure" prot="public">QuantLib::OptionletVolatilityStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_ornstein_uhlenbeck_process" prot="public">QuantLib::OrnsteinUhlenbeckProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_orthogonalized_bump_finder" prot="public">QuantLib::OrthogonalizedBumpFinder</innerclass>
    <innerclass refid="class_quant_lib_1_1_orthogonal_projections" prot="public">QuantLib::OrthogonalProjections</innerclass>
    <innerclass refid="class_quant_lib_1_1_overnight_ibor_basis_swap_rate_helper" prot="public">QuantLib::OvernightIborBasisSwapRateHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_overnight_index" prot="public">QuantLib::OvernightIndex</innerclass>
    <innerclass refid="class_quant_lib_1_1_overnight_indexed_coupon" prot="public">QuantLib::OvernightIndexedCoupon</innerclass>
    <innerclass refid="class_quant_lib_1_1_overnight_indexed_swap" prot="public">QuantLib::OvernightIndexedSwap</innerclass>
    <innerclass refid="class_quant_lib_1_1_overnight_indexed_swap_index" prot="public">QuantLib::OvernightIndexedSwapIndex</innerclass>
    <innerclass refid="class_quant_lib_1_1_overnight_index_future" prot="public">QuantLib::OvernightIndexFuture</innerclass>
    <innerclass refid="class_quant_lib_1_1_overnight_index_future_rate_helper" prot="public">QuantLib::OvernightIndexFutureRateHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_overnight_leg" prot="public">QuantLib::OvernightLeg</innerclass>
    <innerclass refid="class_quant_lib_1_1_p12_hat_integrand" prot="public">QuantLib::P12HatIntegrand</innerclass>
    <innerclass refid="class_quant_lib_1_1_p12_integrand" prot="public">QuantLib::P12Integrand</innerclass>
    <innerclass refid="class_quant_lib_1_1_pagoda_multi_path_pricer" prot="public">QuantLib::PagodaMultiPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_pagoda_option" prot="public">QuantLib::PagodaOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_parabolic" prot="public">QuantLib::Parabolic</innerclass>
    <innerclass refid="class_quant_lib_1_1_parameter" prot="public">QuantLib::Parameter</innerclass>
    <innerclass refid="class_quant_lib_1_1_parameters_transformation" prot="public">QuantLib::ParametersTransformation</innerclass>
    <innerclass refid="class_quant_lib_1_1_parametric_exercise" prot="public">QuantLib::ParametricExercise</innerclass>
    <innerclass refid="class_quant_lib_1_1_parametric_exercise_adapter" prot="public">QuantLib::ParametricExerciseAdapter</innerclass>
    <innerclass refid="class_quant_lib_1_1_parkinson_sigma" prot="public">QuantLib::ParkinsonSigma</innerclass>
    <innerclass refid="struct_quant_lib_1_1_partial_barrier" prot="public">QuantLib::PartialBarrier</innerclass>
    <innerclass refid="class_quant_lib_1_1_partial_time_barrier_option" prot="public">QuantLib::PartialTimeBarrierOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_particle_swarm_optimization" prot="public">QuantLib::ParticleSwarmOptimization</innerclass>
    <innerclass refid="class_quant_lib_1_1_pascal_triangle" prot="public">QuantLib::PascalTriangle</innerclass>
    <innerclass refid="class_quant_lib_1_1_path" prot="public">QuantLib::Path</innerclass>
    <innerclass refid="class_quant_lib_1_1_path_generator" prot="public">QuantLib::PathGenerator</innerclass>
    <innerclass refid="class_quant_lib_1_1_path_multi_asset_option" prot="public">QuantLib::PathMultiAssetOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_path_payoff" prot="public">QuantLib::PathPayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_path_pricer" prot="public">QuantLib::PathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_pathwise_accounting_engine" prot="public">QuantLib::PathwiseAccountingEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_pathwise_vegas_accounting_engine" prot="public">QuantLib::PathwiseVegasAccountingEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_pathwise_vegas_outer_accounting_engine" prot="public">QuantLib::PathwiseVegasOuterAccountingEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_payment_term" prot="public">QuantLib::PaymentTerm</innerclass>
    <innerclass refid="class_quant_lib_1_1_payoff" prot="public">QuantLib::Payoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_pde_b_s_m" prot="public">QuantLib::PdeBSM</innerclass>
    <innerclass refid="class_quant_lib_1_1_pde_constant_coeff" prot="public">QuantLib::PdeConstantCoeff</innerclass>
    <innerclass refid="class_quant_lib_1_1_pde_operator" prot="public">QuantLib::PdeOperator</innerclass>
    <innerclass refid="class_quant_lib_1_1_pde_second_order_parabolic" prot="public">QuantLib::PdeSecondOrderParabolic</innerclass>
    <innerclass refid="class_quant_lib_1_1_p_e_h_currency" prot="public">QuantLib::PEHCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_p_e_i_currency" prot="public">QuantLib::PEICurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_penalty_function" prot="public">QuantLib::PenaltyFunction</innerclass>
    <innerclass refid="class_quant_lib_1_1_p_e_n_currency" prot="public">QuantLib::PENCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_percentage_strike_payoff" prot="public">QuantLib::PercentageStrikePayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_performance_option_path_pricer" prot="public">QuantLib::PerformanceOptionPathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_period" prot="public">QuantLib::Period</innerclass>
    <innerclass refid="class_quant_lib_1_1_period_parser" prot="public">QuantLib::PeriodParser</innerclass>
    <innerclass refid="class_quant_lib_1_1_perturbative_barrier_option_engine" prot="public">QuantLib::PerturbativeBarrierOptionEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_p_h_p_currency" prot="public">QuantLib::PHPCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_piecewise_constant_abcd_variance" prot="public">QuantLib::PiecewiseConstantAbcdVariance</innerclass>
    <innerclass refid="class_quant_lib_1_1_piecewise_constant_correlation" prot="public">QuantLib::PiecewiseConstantCorrelation</innerclass>
    <innerclass refid="class_quant_lib_1_1_piecewise_constant_parameter" prot="public">QuantLib::PiecewiseConstantParameter</innerclass>
    <innerclass refid="class_quant_lib_1_1_piecewise_constant_variance" prot="public">QuantLib::PiecewiseConstantVariance</innerclass>
    <innerclass refid="class_quant_lib_1_1_piecewise_default_curve" prot="public">QuantLib::PiecewiseDefaultCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_piecewise_integral" prot="public">QuantLib::PiecewiseIntegral</innerclass>
    <innerclass refid="class_quant_lib_1_1_piecewise_time_dependent_heston_model" prot="public">QuantLib::PiecewiseTimeDependentHestonModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_piecewise_yield_curve" prot="public">QuantLib::PiecewiseYieldCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_piecewise_yo_y_inflation_curve" prot="public">QuantLib::PiecewiseYoYInflationCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_piecewise_yo_y_optionlet_volatility_curve" prot="public">QuantLib::PiecewiseYoYOptionletVolatilityCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_piecewise_zero_inflation_curve" prot="public">QuantLib::PiecewiseZeroInflationCurve</innerclass>
    <innerclass refid="struct_quant_lib_1_1_pillar" prot="public">QuantLib::Pillar</innerclass>
    <innerclass refid="class_quant_lib_1_1_p_k_r_currency" prot="public">QuantLib::PKRCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_plackett_copula" prot="public">QuantLib::PlackettCopula</innerclass>
    <innerclass refid="class_quant_lib_1_1_plain_vanilla_payoff" prot="public">QuantLib::PlainVanillaPayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_p_l_n_currency" prot="public">QuantLib::PLNCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_poisson_distribution" prot="public">QuantLib::PoissonDistribution</innerclass>
    <innerclass refid="class_quant_lib_1_1_poland" prot="public">QuantLib::Poland</innerclass>
    <innerclass refid="class_quant_lib_1_1_polar_student_t_rng" prot="public">QuantLib::PolarStudentTRng</innerclass>
    <innerclass refid="class_quant_lib_1_1_polynomial" prot="public">QuantLib::Polynomial</innerclass>
    <innerclass refid="class_quant_lib_1_1_polynomial2_d_spline" prot="public">QuantLib::Polynomial2DSpline</innerclass>
    <innerclass refid="class_quant_lib_1_1_polynomial_function" prot="public">QuantLib::PolynomialFunction</innerclass>
    <innerclass refid="class_quant_lib_1_1_pool" prot="public">QuantLib::Pool</innerclass>
    <innerclass refid="struct_quant_lib_1_1_position" prot="public">QuantLib::Position</innerclass>
    <innerclass refid="class_quant_lib_1_1_positive_constraint" prot="public">QuantLib::PositiveConstraint</innerclass>
    <innerclass refid="class_quant_lib_1_1_predefined1d_mesher" prot="public">QuantLib::Predefined1dMesher</innerclass>
    <innerclass refid="class_quant_lib_1_1_pribor" prot="public">QuantLib::Pribor</innerclass>
    <innerclass refid="class_quant_lib_1_1_pricing_engine" prot="public">QuantLib::PricingEngine</innerclass>
    <innerclass refid="struct_quant_lib_1_1_pricing_error" prot="public">QuantLib::PricingError</innerclass>
    <innerclass refid="class_quant_lib_1_1_pricing_period" prot="public">QuantLib::PricingPeriod</innerclass>
    <innerclass refid="class_quant_lib_1_1_prime_numbers" prot="public">QuantLib::PrimeNumbers</innerclass>
    <innerclass refid="struct_quant_lib_1_1_probability_always_downhill" prot="public">QuantLib::ProbabilityAlwaysDownhill</innerclass>
    <innerclass refid="class_quant_lib_1_1_probability_boltzmann" prot="public">QuantLib::ProbabilityBoltzmann</innerclass>
    <innerclass refid="class_quant_lib_1_1_probability_boltzmann_downhill" prot="public">QuantLib::ProbabilityBoltzmannDownhill</innerclass>
    <innerclass refid="class_quant_lib_1_1_probability_of_at_least_n_events" prot="public">QuantLib::ProbabilityOfAtLeastNEvents</innerclass>
    <innerclass refid="class_quant_lib_1_1_probability_of_n_events" prot="public">QuantLib::ProbabilityOfNEvents</innerclass>
    <innerclass refid="class_quant_lib_1_1_problem" prot="public">QuantLib::Problem</innerclass>
    <innerclass refid="class_quant_lib_1_1_projected_constraint" prot="public">QuantLib::ProjectedConstraint</innerclass>
    <innerclass refid="class_quant_lib_1_1_projected_cost_function" prot="public">QuantLib::ProjectedCostFunction</innerclass>
    <innerclass refid="class_quant_lib_1_1_projection" prot="public">QuantLib::Projection</innerclass>
    <innerclass refid="class_quant_lib_1_1_proportional_notional_risk" prot="public">QuantLib::ProportionalNotionalRisk</innerclass>
    <innerclass refid="struct_quant_lib_1_1_protection" prot="public">QuantLib::Protection</innerclass>
    <innerclass refid="class_quant_lib_1_1_proxy_greek_engine" prot="public">QuantLib::ProxyGreekEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_proxy_ibor" prot="public">QuantLib::ProxyIbor</innerclass>
    <innerclass refid="class_quant_lib_1_1_pseudo_root_facade" prot="public">QuantLib::PseudoRootFacade</innerclass>
    <innerclass refid="class_quant_lib_1_1_p_t_e_currency" prot="public">QuantLib::PTECurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_q_a_r_currency" prot="public">QuantLib::QARCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_qd_fp_american_engine" prot="public">QuantLib::QdFpAmericanEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_qd_fp_iteration_scheme" prot="public">QuantLib::QdFpIterationScheme</innerclass>
    <innerclass refid="class_quant_lib_1_1_qd_fp_legendre_scheme" prot="public">QuantLib::QdFpLegendreScheme</innerclass>
    <innerclass refid="class_quant_lib_1_1_qd_fp_legendre_tanh_sinh_scheme" prot="public">QuantLib::QdFpLegendreTanhSinhScheme</innerclass>
    <innerclass refid="class_quant_lib_1_1_qd_fp_tanh_sinh_iteration_scheme" prot="public">QuantLib::QdFpTanhSinhIterationScheme</innerclass>
    <innerclass refid="class_quant_lib_1_1_qd_plus_american_engine" prot="public">QuantLib::QdPlusAmericanEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_qd_plus_boundary_evaluator" prot="public">QuantLib::QdPlusBoundaryEvaluator</innerclass>
    <innerclass refid="class_quant_lib_1_1quadratic" prot="public">QuantLib::quadratic</innerclass>
    <innerclass refid="class_quant_lib_1_1_quantity" prot="public">QuantLib::Quantity</innerclass>
    <innerclass refid="class_quant_lib_1_1_quanto_barrier_option" prot="public">QuantLib::QuantoBarrierOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_quanto_double_barrier_option" prot="public">QuantLib::QuantoDoubleBarrierOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_quanto_engine" prot="public">QuantLib::QuantoEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_quanto_forward_vanilla_option" prot="public">QuantLib::QuantoForwardVanillaOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_quanto_option_results" prot="public">QuantLib::QuantoOptionResults</innerclass>
    <innerclass refid="class_quant_lib_1_1_quanto_term_structure" prot="public">QuantLib::QuantoTermStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_quanto_vanilla_option" prot="public">QuantLib::QuantoVanillaOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_quote" prot="public">QuantLib::Quote</innerclass>
    <innerclass refid="class_quant_lib_1_1_random_default_l_m" prot="public">QuantLib::RandomDefaultLM</innerclass>
    <innerclass refid="class_quant_lib_1_1_random_default_model" prot="public">QuantLib::RandomDefaultModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_randomized_l_d_s" prot="public">QuantLib::RandomizedLDS</innerclass>
    <innerclass refid="class_quant_lib_1_1_random_l_m" prot="public">QuantLib::RandomLM</innerclass>
    <innerclass refid="class_quant_lib_1_1_random_loss_l_m" prot="public">QuantLib::RandomLossLM</innerclass>
    <innerclass refid="class_quant_lib_1_1_random_sequence_generator" prot="public">QuantLib::RandomSequenceGenerator</innerclass>
    <innerclass refid="class_quant_lib_1_1_range_accrual_floaters_coupon" prot="public">QuantLib::RangeAccrualFloatersCoupon</innerclass>
    <innerclass refid="class_quant_lib_1_1_range_accrual_leg" prot="public">QuantLib::RangeAccrualLeg</innerclass>
    <innerclass refid="class_quant_lib_1_1_range_accrual_pricer" prot="public">QuantLib::RangeAccrualPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_range_accrual_pricer_by_bgm" prot="public">QuantLib::RangeAccrualPricerByBgm</innerclass>
    <innerclass refid="class_quant_lib_1_1_ranlux64_uniform_rng" prot="public">QuantLib::Ranlux64UniformRng</innerclass>
    <innerclass refid="class_quant_lib_1_1_ratchet_max_payoff" prot="public">QuantLib::RatchetMaxPayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_ratchet_min_payoff" prot="public">QuantLib::RatchetMinPayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_ratchet_payoff" prot="public">QuantLib::RatchetPayoff</innerclass>
    <innerclass refid="struct_quant_lib_1_1_rate_averaging" prot="public">QuantLib::RateAveraging</innerclass>
    <innerclass refid="class_quant_lib_1_1_rate_pseudo_root_jacobian" prot="public">QuantLib::RatePseudoRootJacobian</innerclass>
    <innerclass refid="class_quant_lib_1_1_rate_pseudo_root_jacobian_all_elements" prot="public">QuantLib::RatePseudoRootJacobianAllElements</innerclass>
    <innerclass refid="class_quant_lib_1_1_rate_pseudo_root_jacobian_numerical" prot="public">QuantLib::RatePseudoRootJacobianNumerical</innerclass>
    <innerclass refid="class_quant_lib_1_1_reannealing_finite_differences" prot="public">QuantLib::ReannealingFiniteDifferences</innerclass>
    <innerclass refid="struct_quant_lib_1_1_reannealing_trivial" prot="public">QuantLib::ReannealingTrivial</innerclass>
    <innerclass refid="class_quant_lib_1_1_rebated_exercise" prot="public">QuantLib::RebatedExercise</innerclass>
    <innerclass refid="class_quant_lib_1_1_recovery_rate_model" prot="public">QuantLib::RecoveryRateModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_recovery_rate_quote" prot="public">QuantLib::RecoveryRateQuote</innerclass>
    <innerclass refid="class_quant_lib_1_1_recursive_loss_model" prot="public">QuantLib::RecursiveLossModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_redemption" prot="public">QuantLib::Redemption</innerclass>
    <innerclass refid="class_quant_lib_1_1_region" prot="public">QuantLib::Region</innerclass>
    <innerclass refid="class_quant_lib_1_1_relative_date_bootstrap_helper" prot="public">QuantLib::RelativeDateBootstrapHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_relinkable_handle" prot="public">QuantLib::RelinkableHandle</innerclass>
    <innerclass refid="class_quant_lib_1_1_rendistato_basket" prot="public">QuantLib::RendistatoBasket</innerclass>
    <innerclass refid="class_quant_lib_1_1_rendistato_calculator" prot="public">QuantLib::RendistatoCalculator</innerclass>
    <innerclass refid="class_quant_lib_1_1_rendistato_equivalent_swap_length_quote" prot="public">QuantLib::RendistatoEquivalentSwapLengthQuote</innerclass>
    <innerclass refid="class_quant_lib_1_1_rendistato_equivalent_swap_spread_quote" prot="public">QuantLib::RendistatoEquivalentSwapSpreadQuote</innerclass>
    <innerclass refid="class_quant_lib_1_1_replicating_variance_swap_engine" prot="public">QuantLib::ReplicatingVarianceSwapEngine</innerclass>
    <innerclass refid="struct_quant_lib_1_1_replication" prot="public">QuantLib::Replication</innerclass>
    <innerclass refid="struct_quant_lib_1_1_restructuring" prot="public">QuantLib::Restructuring</innerclass>
    <innerclass refid="class_quant_lib_1_1_richardson_extrapolation" prot="public">QuantLib::RichardsonExtrapolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_ridder" prot="public">QuantLib::Ridder</innerclass>
    <innerclass refid="class_quant_lib_1_1_risk_neutral_density_calculator" prot="public">QuantLib::RiskNeutralDensityCalculator</innerclass>
    <innerclass refid="class_quant_lib_1_1_risky_asset_swap" prot="public">QuantLib::RiskyAssetSwap</innerclass>
    <innerclass refid="class_quant_lib_1_1_risky_asset_swap_option" prot="public">QuantLib::RiskyAssetSwapOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_risky_bond_engine" prot="public">QuantLib::RiskyBondEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_robor" prot="public">QuantLib::Robor</innerclass>
    <innerclass refid="class_quant_lib_1_1_r_o_l_currency" prot="public">QuantLib::ROLCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_romania" prot="public">QuantLib::Romania</innerclass>
    <innerclass refid="class_quant_lib_1_1_r_o_n_currency" prot="public">QuantLib::RONCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_rounding" prot="public">QuantLib::Rounding</innerclass>
    <innerclass refid="class_quant_lib_1_1_r_s_d_currency" prot="public">QuantLib::RSDCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_r_u_b_currency" prot="public">QuantLib::RUBCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_russia" prot="public">QuantLib::Russia</innerclass>
    <innerclass refid="class_quant_lib_1_1_s_a_b_r" prot="public">QuantLib::SABR</innerclass>
    <innerclass refid="class_quant_lib_1_1_sabr_interpolated_smile_section" prot="public">QuantLib::SabrInterpolatedSmileSection</innerclass>
    <innerclass refid="class_quant_lib_1_1_s_a_b_r_interpolation" prot="public">QuantLib::SABRInterpolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_sabr_smile_section" prot="public">QuantLib::SabrSmileSection</innerclass>
    <innerclass refid="class_quant_lib_1_1_sabr_vol_surface" prot="public">QuantLib::SabrVolSurface</innerclass>
    <innerclass refid="class_quant_lib_1_1_s_a_b_r_vol_term_structure" prot="public">QuantLib::SABRVolTermStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_saddle_point_loss_model" prot="public">QuantLib::SaddlePointLossModel</innerclass>
    <innerclass refid="struct_quant_lib_1_1_salvaging_algorithm" prot="public">QuantLib::SalvagingAlgorithm</innerclass>
    <innerclass refid="struct_quant_lib_1_1_sample" prot="public">QuantLib::Sample</innerclass>
    <innerclass refid="class_quant_lib_1_1_sampler_cauchy" prot="public">QuantLib::SamplerCauchy</innerclass>
    <innerclass refid="class_quant_lib_1_1_sampler_gaussian" prot="public">QuantLib::SamplerGaussian</innerclass>
    <innerclass refid="class_quant_lib_1_1_sampler_log_normal" prot="public">QuantLib::SamplerLogNormal</innerclass>
    <innerclass refid="class_quant_lib_1_1_sampler_mirror_gaussian" prot="public">QuantLib::SamplerMirrorGaussian</innerclass>
    <innerclass refid="class_quant_lib_1_1_sampler_ring_gaussian" prot="public">QuantLib::SamplerRingGaussian</innerclass>
    <innerclass refid="class_quant_lib_1_1_sampler_very_fast_annealing" prot="public">QuantLib::SamplerVeryFastAnnealing</innerclass>
    <innerclass refid="class_quant_lib_1_1_s_a_r_currency" prot="public">QuantLib::SARCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_saudi_arabia" prot="public">QuantLib::SaudiArabia</innerclass>
    <innerclass refid="class_quant_lib_1_1_saved_settings" prot="public">QuantLib::SavedSettings</innerclass>
    <innerclass refid="class_quant_lib_1_1_schedule" prot="public">QuantLib::Schedule</innerclass>
    <innerclass refid="class_quant_lib_1_1_seasonality" prot="public">QuantLib::Seasonality</innerclass>
    <innerclass refid="class_quant_lib_1_1_secant" prot="public">QuantLib::Secant</innerclass>
    <innerclass refid="class_quant_lib_1_1_second_derivative_op" prot="public">QuantLib::SecondDerivativeOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_second_order_mixed_derivative_op" prot="public">QuantLib::SecondOrderMixedDerivativeOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_seed_generator" prot="public">QuantLib::SeedGenerator</innerclass>
    <innerclass refid="class_quant_lib_1_1_segment_integral" prot="public">QuantLib::SegmentIntegral</innerclass>
    <innerclass refid="class_quant_lib_1_1_s_e_k_currency" prot="public">QuantLib::SEKCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_s_e_k_libor" prot="public">QuantLib::SEKLibor</innerclass>
    <innerclass refid="class_quant_lib_1_1_settings" prot="public">QuantLib::Settings</innerclass>
    <innerclass refid="struct_quant_lib_1_1_settlement" prot="public">QuantLib::Settlement</innerclass>
    <innerclass refid="class_quant_lib_1_1_s_g_d_currency" prot="public">QuantLib::SGDCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_shibor" prot="public">QuantLib::Shibor</innerclass>
    <innerclass refid="class_quant_lib_1_1_short_rate_model" prot="public">QuantLib::ShortRateModel</innerclass>
    <innerclass refid="struct_quant_lib_1_1sim_event" prot="public">QuantLib::simEvent</innerclass>
    <innerclass refid="struct_quant_lib_1_1sim_event_3_01_random_default_l_m_3_01copula_policy_00_01_u_s_n_g_01_4_01_4" prot="public">QuantLib::simEvent&lt; RandomDefaultLM&lt; copulaPolicy, USNG &gt; &gt;</innerclass>
    <innerclass refid="struct_quant_lib_1_1sim_event_3_01_random_loss_l_m_3_01copula_policy_00_01_u_s_n_g_01_4_01_4" prot="public">QuantLib::simEvent&lt; RandomLossLM&lt; copulaPolicy, USNG &gt; &gt;</innerclass>
    <innerclass refid="class_quant_lib_1_1_simple_cash_flow" prot="public">QuantLib::SimpleCashFlow</innerclass>
    <innerclass refid="class_quant_lib_1_1_simple_chooser_option" prot="public">QuantLib::SimpleChooserOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_simple_cost_function" prot="public">QuantLib::SimpleCostFunction</innerclass>
    <innerclass refid="class_quant_lib_1_1_simple_day_counter" prot="public">QuantLib::SimpleDayCounter</innerclass>
    <innerclass refid="class_quant_lib_1_1_simple_local_estimator" prot="public">QuantLib::SimpleLocalEstimator</innerclass>
    <innerclass refid="class_quant_lib_1_1_simple_polynomial_fitting" prot="public">QuantLib::SimplePolynomialFitting</innerclass>
    <innerclass refid="class_quant_lib_1_1_simple_quote" prot="public">QuantLib::SimpleQuote</innerclass>
    <innerclass refid="class_quant_lib_1_1_simple_quote_variables" prot="public">QuantLib::SimpleQuoteVariables</innerclass>
    <innerclass refid="class_quant_lib_1_1_simple_random_inertia" prot="public">QuantLib::SimpleRandomInertia</innerclass>
    <innerclass refid="class_quant_lib_1_1_simplex" prot="public">QuantLib::Simplex</innerclass>
    <innerclass refid="struct_quant_lib_1_1_simple_zero_yield" prot="public">QuantLib::SimpleZeroYield</innerclass>
    <innerclass refid="class_quant_lib_1_1_simpson_integral" prot="public">QuantLib::SimpsonIntegral</innerclass>
    <innerclass refid="class_quant_lib_1_1_simulated_annealing" prot="public">QuantLib::SimulatedAnnealing</innerclass>
    <innerclass refid="class_quant_lib_1_1_singapore" prot="public">QuantLib::Singapore</innerclass>
    <innerclass refid="class_quant_lib_1_1_single_factor_bsm_basket_engine" prot="public">QuantLib::SingleFactorBsmBasketEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_single_product_composite" prot="public">QuantLib::SingleProductComposite</innerclass>
    <innerclass refid="class_quant_lib_1_1_singleton" prot="public">QuantLib::Singleton</innerclass>
    <innerclass refid="struct_quant_lib_1_1_single_variate" prot="public">QuantLib::SingleVariate</innerclass>
    <innerclass refid="class_quant_lib_1_1_s_i_t_currency" prot="public">QuantLib::SITCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_s_k_k_currency" prot="public">QuantLib::SKKCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_slovakia" prot="public">QuantLib::Slovakia</innerclass>
    <innerclass refid="class_quant_lib_1_1_smile_section" prot="public">QuantLib::SmileSection</innerclass>
    <innerclass refid="class_quant_lib_1_1_smile_section_utils" prot="public">QuantLib::SmileSectionUtils</innerclass>
    <innerclass refid="class_quant_lib_1_1_s_m_m_drift_calculator" prot="public">QuantLib::SMMDriftCalculator</innerclass>
    <innerclass refid="class_quant_lib_1_1_sobol_brownian_bridge_rsg" prot="public">QuantLib::SobolBrownianBridgeRsg</innerclass>
    <innerclass refid="class_quant_lib_1_1_sobol_brownian_generator" prot="public">QuantLib::SobolBrownianGenerator</innerclass>
    <innerclass refid="class_quant_lib_1_1_sobol_brownian_generator_base" prot="public">QuantLib::SobolBrownianGeneratorBase</innerclass>
    <innerclass refid="class_quant_lib_1_1_sobol_brownian_generator_factory" prot="public">QuantLib::SobolBrownianGeneratorFactory</innerclass>
    <innerclass refid="class_quant_lib_1_1_sobol_rsg" prot="public">QuantLib::SobolRsg</innerclass>
    <innerclass refid="class_quant_lib_1_1_sofr" prot="public">QuantLib::Sofr</innerclass>
    <innerclass refid="class_quant_lib_1_1_sofr_future_rate_helper" prot="public">QuantLib::SofrFutureRateHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_soft_callability" prot="public">QuantLib::SoftCallability</innerclass>
    <innerclass refid="class_quant_lib_1_1_solver1_d" prot="public">QuantLib::Solver1D</innerclass>
    <innerclass refid="class_quant_lib_1_1_sonia" prot="public">QuantLib::Sonia</innerclass>
    <innerclass refid="class_quant_lib_1_1_south_africa" prot="public">QuantLib::SouthAfrica</innerclass>
    <innerclass refid="class_quant_lib_1_1_south_korea" prot="public">QuantLib::SouthKorea</innerclass>
    <innerclass refid="class_quant_lib_1_1_sparse_i_l_u_preconditioner" prot="public">QuantLib::SparseILUPreconditioner</innerclass>
    <innerclass refid="class_quant_lib_1_1_sphere_cylinder_optimizer" prot="public">QuantLib::SphereCylinderOptimizer</innerclass>
    <innerclass refid="class_quant_lib_1_1_spot_recovery_latent_model" prot="public">QuantLib::SpotRecoveryLatentModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_spread_basket_payoff" prot="public">QuantLib::SpreadBasketPayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_spread_black_scholes_vanilla_engine" prot="public">QuantLib::SpreadBlackScholesVanillaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_spread_cds_helper" prot="public">QuantLib::SpreadCdsHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_spreaded_hazard_rate_curve" prot="public">QuantLib::SpreadedHazardRateCurve</innerclass>
    <innerclass refid="class_quant_lib_1_1_spreaded_optionlet_volatility" prot="public">QuantLib::SpreadedOptionletVolatility</innerclass>
    <innerclass refid="class_quant_lib_1_1_spreaded_smile_section" prot="public">QuantLib::SpreadedSmileSection</innerclass>
    <innerclass refid="class_quant_lib_1_1_spreaded_swaption_volatility" prot="public">QuantLib::SpreadedSwaptionVolatility</innerclass>
    <innerclass refid="class_quant_lib_1_1_spread_fitting_method" prot="public">QuantLib::SpreadFittingMethod</innerclass>
    <innerclass refid="class_quant_lib_1_1_spread_option" prot="public">QuantLib::SpreadOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_square_root_andersen" prot="public">QuantLib::SquareRootAndersen</innerclass>
    <innerclass refid="class_quant_lib_1_1_square_root_c_l_v_model" prot="public">QuantLib::SquareRootCLVModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_square_root_process" prot="public">QuantLib::SquareRootProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_square_root_process_r_n_d_calculator" prot="public">QuantLib::SquareRootProcessRNDCalculator</innerclass>
    <innerclass refid="class_quant_lib_1_1_stats_holder" prot="public">QuantLib::StatsHolder</innerclass>
    <innerclass refid="class_quant_lib_1_1_steepest_descent" prot="public">QuantLib::SteepestDescent</innerclass>
    <innerclass refid="class_quant_lib_1_1step__iterator" prot="public">QuantLib::step_iterator</innerclass>
    <innerclass refid="class_quant_lib_1_1_step_condition" prot="public">QuantLib::StepCondition</innerclass>
    <innerclass refid="class_quant_lib_1_1_sticky_max_payoff" prot="public">QuantLib::StickyMaxPayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_sticky_min_payoff" prot="public">QuantLib::StickyMinPayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_sticky_payoff" prot="public">QuantLib::StickyPayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_stochastic_collocation_inv_c_d_f" prot="public">QuantLib::StochasticCollocationInvCDF</innerclass>
    <innerclass refid="class_quant_lib_1_1_stochastic_process" prot="public">QuantLib::StochasticProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_stochastic_process1_d" prot="public">QuantLib::StochasticProcess1D</innerclass>
    <innerclass refid="class_quant_lib_1_1_stochastic_process_array" prot="public">QuantLib::StochasticProcessArray</innerclass>
    <innerclass refid="class_quant_lib_1_1_stock" prot="public">QuantLib::Stock</innerclass>
    <innerclass refid="class_quant_lib_1_1_striked_type_payoff" prot="public">QuantLib::StrikedTypePayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_stripped_capped_floored_coupon" prot="public">QuantLib::StrippedCappedFlooredCoupon</innerclass>
    <innerclass refid="class_quant_lib_1_1_stripped_capped_floored_coupon_leg" prot="public">QuantLib::StrippedCappedFlooredCouponLeg</innerclass>
    <innerclass refid="class_quant_lib_1_1_stripped_optionlet" prot="public">QuantLib::StrippedOptionlet</innerclass>
    <innerclass refid="class_quant_lib_1_1_stripped_optionlet_adapter" prot="public">QuantLib::StrippedOptionletAdapter</innerclass>
    <innerclass refid="class_quant_lib_1_1_stripped_optionlet_base" prot="public">QuantLib::StrippedOptionletBase</innerclass>
    <innerclass refid="class_quant_lib_1_1_student_distribution" prot="public">QuantLib::StudentDistribution</innerclass>
    <innerclass refid="class_quant_lib_1_1_stulz_engine" prot="public">QuantLib::StulzEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_sub_periods_leg" prot="public">QuantLib::SubPeriodsLeg</innerclass>
    <innerclass refid="class_quant_lib_1_1_suo_wang_double_barrier_engine" prot="public">QuantLib::SuoWangDoubleBarrierEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_super_fund_payoff" prot="public">QuantLib::SuperFundPayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_super_share_payoff" prot="public">QuantLib::SuperSharePayoff</innerclass>
    <innerclass refid="struct_quant_lib_1_1_survival_probability" prot="public">QuantLib::SurvivalProbability</innerclass>
    <innerclass refid="class_quant_lib_1_1_survival_probability_structure" prot="public">QuantLib::SurvivalProbabilityStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_s_v_d" prot="public">QuantLib::SVD</innerclass>
    <innerclass refid="class_quant_lib_1_1_s_v_d_d_fwd_rate_pc" prot="public">QuantLib::SVDDFwdRatePc</innerclass>
    <innerclass refid="class_quant_lib_1_1_svensson_fitting" prot="public">QuantLib::SvenssonFitting</innerclass>
    <innerclass refid="class_quant_lib_1_1_svi" prot="public">QuantLib::Svi</innerclass>
    <innerclass refid="class_quant_lib_1_1_svi_interpolated_smile_section" prot="public">QuantLib::SviInterpolatedSmileSection</innerclass>
    <innerclass refid="class_quant_lib_1_1_svi_interpolation" prot="public">QuantLib::SviInterpolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_svi_smile_section" prot="public">QuantLib::SviSmileSection</innerclass>
    <innerclass refid="class_quant_lib_1_1_swap" prot="public">QuantLib::Swap</innerclass>
    <innerclass refid="class_quant_lib_1_1_swap_basis_system" prot="public">QuantLib::SwapBasisSystem</innerclass>
    <innerclass refid="class_quant_lib_1_1_swap_cash_flows" prot="public">QuantLib::SwapCashFlows</innerclass>
    <innerclass refid="class_quant_lib_1_1_swap_forward_basis_system" prot="public">QuantLib::SwapForwardBasisSystem</innerclass>
    <innerclass refid="class_quant_lib_1_1_swap_forward_mappings" prot="public">QuantLib::SwapForwardMappings</innerclass>
    <innerclass refid="class_quant_lib_1_1_swap_index" prot="public">QuantLib::SwapIndex</innerclass>
    <innerclass refid="class_quant_lib_1_1_swap_rate_helper" prot="public">QuantLib::SwapRateHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_swap_rate_trigger" prot="public">QuantLib::SwapRateTrigger</innerclass>
    <innerclass refid="class_quant_lib_1_1_swap_spread_index" prot="public">QuantLib::SwapSpreadIndex</innerclass>
    <innerclass refid="class_quant_lib_1_1_swaption" prot="public">QuantLib::Swaption</innerclass>
    <innerclass refid="class_quant_lib_1_1_swaption_cash_flows" prot="public">QuantLib::SwaptionCashFlows</innerclass>
    <innerclass refid="class_quant_lib_1_1_swaption_helper" prot="public">QuantLib::SwaptionHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_swaption_pseudo_derivative" prot="public">QuantLib::SwaptionPseudoDerivative</innerclass>
    <innerclass refid="class_quant_lib_1_1_swaption_volatility_cube" prot="public">QuantLib::SwaptionVolatilityCube</innerclass>
    <innerclass refid="class_quant_lib_1_1_swaption_volatility_discrete" prot="public">QuantLib::SwaptionVolatilityDiscrete</innerclass>
    <innerclass refid="class_quant_lib_1_1_swaption_volatility_matrix" prot="public">QuantLib::SwaptionVolatilityMatrix</innerclass>
    <innerclass refid="class_quant_lib_1_1_swaption_volatility_structure" prot="public">QuantLib::SwaptionVolatilityStructure</innerclass>
    <innerclass refid="struct_quant_lib_1_1_swaption_vol_cube_no_arb_sabr_model" prot="public">QuantLib::SwaptionVolCubeNoArbSabrModel</innerclass>
    <innerclass refid="struct_quant_lib_1_1_swaption_vol_cube_sabr_model" prot="public">QuantLib::SwaptionVolCubeSabrModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_sweden" prot="public">QuantLib::Sweden</innerclass>
    <innerclass refid="class_quant_lib_1_1_swestr" prot="public">QuantLib::Swestr</innerclass>
    <innerclass refid="class_quant_lib_1_1_swing_exercise" prot="public">QuantLib::SwingExercise</innerclass>
    <innerclass refid="class_quant_lib_1_1_switzerland" prot="public">QuantLib::Switzerland</innerclass>
    <innerclass refid="class_quant_lib_1_1_symmetric_schur_decomposition" prot="public">QuantLib::SymmetricSchurDecomposition</innerclass>
    <innerclass refid="class_quant_lib_1_1_synthetic_c_d_o" prot="public">QuantLib::SyntheticCDO</innerclass>
    <innerclass refid="class_quant_lib_1_1_tabulated_gauss_legendre" prot="public">QuantLib::TabulatedGaussLegendre</innerclass>
    <innerclass refid="class_quant_lib_1_1_taiwan" prot="public">QuantLib::Taiwan</innerclass>
    <innerclass refid="class_quant_lib_1_1_tanh_sinh_integral" prot="public">QuantLib::TanhSinhIntegral</innerclass>
    <innerclass refid="class_quant_lib_1_1_t_a_r_g_e_t" prot="public">QuantLib::TARGET</innerclass>
    <innerclass refid="class_quant_lib_1_1_t_copula_policy" prot="public">QuantLib::TCopulaPolicy</innerclass>
    <innerclass refid="class_quant_lib_1_1_temperature_boltzmann" prot="public">QuantLib::TemperatureBoltzmann</innerclass>
    <innerclass refid="class_quant_lib_1_1_temperature_cauchy" prot="public">QuantLib::TemperatureCauchy</innerclass>
    <innerclass refid="class_quant_lib_1_1_temperature_cauchy1_d" prot="public">QuantLib::TemperatureCauchy1D</innerclass>
    <innerclass refid="class_quant_lib_1_1_temperature_exponential" prot="public">QuantLib::TemperatureExponential</innerclass>
    <innerclass refid="class_quant_lib_1_1_temperature_very_fast_annealing" prot="public">QuantLib::TemperatureVeryFastAnnealing</innerclass>
    <innerclass refid="class_quant_lib_1_1_tenor_optionlet_v_t_s" prot="public">QuantLib::TenorOptionletVTS</innerclass>
    <innerclass refid="class_quant_lib_1_1_tenor_swaption_v_t_s" prot="public">QuantLib::TenorSwaptionVTS</innerclass>
    <innerclass refid="class_quant_lib_1_1_term_structure" prot="public">QuantLib::TermStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_term_structure_consistent_model" prot="public">QuantLib::TermStructureConsistentModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_term_structure_fitting_parameter" prot="public">QuantLib::TermStructureFittingParameter</innerclass>
    <innerclass refid="class_quant_lib_1_1_thailand" prot="public">QuantLib::Thailand</innerclass>
    <innerclass refid="class_quant_lib_1_1_t_h_b_currency" prot="public">QuantLib::THBCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_t_h_b_f_i_x" prot="public">QuantLib::THBFIX</innerclass>
    <innerclass refid="class_quant_lib_1_1_thirty360" prot="public">QuantLib::Thirty360</innerclass>
    <innerclass refid="class_quant_lib_1_1_thirty365" prot="public">QuantLib::Thirty365</innerclass>
    <innerclass refid="class_quant_lib_1_1_tian" prot="public">QuantLib::Tian</innerclass>
    <innerclass refid="class_quant_lib_1_1_tibor" prot="public">QuantLib::Tibor</innerclass>
    <innerclass refid="class_quant_lib_1_1_time_basket" prot="public">QuantLib::TimeBasket</innerclass>
    <innerclass refid="class_quant_lib_1_1_time_grid" prot="public">QuantLib::TimeGrid</innerclass>
    <innerclass refid="class_quant_lib_1_1_time_homogeneous_forward_correlation" prot="public">QuantLib::TimeHomogeneousForwardCorrelation</innerclass>
    <innerclass refid="class_quant_lib_1_1_time_series" prot="public">QuantLib::TimeSeries</innerclass>
    <innerclass refid="class_quant_lib_1_1_t_n_d_currency" prot="public">QuantLib::TNDCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_tokyo_kilolitre_unit_of_measure" prot="public">QuantLib::TokyoKilolitreUnitOfMeasure</innerclass>
    <innerclass refid="class_quant_lib_1_1_tona" prot="public">QuantLib::Tona</innerclass>
    <innerclass refid="class_quant_lib_1_1_tqr_eigen_decomposition" prot="public">QuantLib::TqrEigenDecomposition</innerclass>
    <innerclass refid="class_quant_lib_1_1_transformed_grid" prot="public">QuantLib::TransformedGrid</innerclass>
    <innerclass refid="class_quant_lib_1_1_trapezoid_integral" prot="public">QuantLib::TrapezoidIntegral</innerclass>
    <innerclass refid="class_quant_lib_1_1_t_r_b_d_f2" prot="public">QuantLib::TRBDF2</innerclass>
    <innerclass refid="class_quant_lib_1_1_tr_b_d_f2_scheme" prot="public">QuantLib::TrBDF2Scheme</innerclass>
    <innerclass refid="class_quant_lib_1_1_tree" prot="public">QuantLib::Tree</innerclass>
    <innerclass refid="class_quant_lib_1_1_tree_callable_fixed_rate_bond_engine" prot="public">QuantLib::TreeCallableFixedRateBondEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_tree_callable_zero_coupon_bond_engine" prot="public">QuantLib::TreeCallableZeroCouponBondEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_tree_cap_floor_engine" prot="public">QuantLib::TreeCapFloorEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_tree_lattice" prot="public">QuantLib::TreeLattice</innerclass>
    <innerclass refid="class_quant_lib_1_1_tree_lattice1_d" prot="public">QuantLib::TreeLattice1D</innerclass>
    <innerclass refid="class_quant_lib_1_1_tree_lattice2_d" prot="public">QuantLib::TreeLattice2D</innerclass>
    <innerclass refid="class_quant_lib_1_1_tree_swaption_engine" prot="public">QuantLib::TreeSwaptionEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_tree_vanilla_swap_engine" prot="public">QuantLib::TreeVanillaSwapEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_tridiagonal_operator" prot="public">QuantLib::TridiagonalOperator</innerclass>
    <innerclass refid="class_quant_lib_1_1_trigeorgis" prot="public">QuantLib::Trigeorgis</innerclass>
    <innerclass refid="class_quant_lib_1_1_triggered_swap_exercise" prot="public">QuantLib::TriggeredSwapExercise</innerclass>
    <innerclass refid="class_quant_lib_1_1_trinomial_tree" prot="public">QuantLib::TrinomialTree</innerclass>
    <innerclass refid="class_quant_lib_1_1_triple_band_linear_op" prot="public">QuantLib::TripleBandLinearOp</innerclass>
    <innerclass refid="class_quant_lib_1_1_trivial_inertia" prot="public">QuantLib::TrivialInertia</innerclass>
    <innerclass refid="class_quant_lib_1_1_t_r_l_currency" prot="public">QuantLib::TRLCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_t_r_libor" prot="public">QuantLib::TRLibor</innerclass>
    <innerclass refid="class_quant_lib_1_1_t_r_y_currency" prot="public">QuantLib::TRYCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_tsiveriotis_fernandes_lattice" prot="public">QuantLib::TsiveriotisFernandesLattice</innerclass>
    <innerclass refid="class_quant_lib_1_1_t_t_d_currency" prot="public">QuantLib::TTDCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_turkey" prot="public">QuantLib::Turkey</innerclass>
    <innerclass refid="class_quant_lib_1_1_turnbull_wakeman_asian_engine" prot="public">QuantLib::TurnbullWakemanAsianEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_t_w_d_currency" prot="public">QuantLib::TWDCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_two_asset_barrier_option" prot="public">QuantLib::TwoAssetBarrierOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_two_asset_correlation_option" prot="public">QuantLib::TwoAssetCorrelationOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_two_dimensional_integral" prot="public">QuantLib::TwoDimensionalIntegral</innerclass>
    <innerclass refid="class_quant_lib_1_1_two_factor_model" prot="public">QuantLib::TwoFactorModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_type_payoff" prot="public">QuantLib::TypePayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_u_a_h_currency" prot="public">QuantLib::UAHCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_u_g_x_currency" prot="public">QuantLib::UGXCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_u_k_h_i_c_p" prot="public">QuantLib::UKHICP</innerclass>
    <innerclass refid="class_quant_lib_1_1_ukraine" prot="public">QuantLib::Ukraine</innerclass>
    <innerclass refid="class_quant_lib_1_1_u_k_region" prot="public">QuantLib::UKRegion</innerclass>
    <innerclass refid="class_quant_lib_1_1_u_k_r_p_i" prot="public">QuantLib::UKRPI</innerclass>
    <innerclass refid="class_quant_lib_1_1_ultimate_forward_term_structure" prot="public">QuantLib::UltimateForwardTermStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_uniform1d_mesher" prot="public">QuantLib::Uniform1dMesher</innerclass>
    <innerclass refid="class_quant_lib_1_1_uniform_grid_mesher" prot="public">QuantLib::UniformGridMesher</innerclass>
    <innerclass refid="class_quant_lib_1_1_unit_displaced_black_yo_y_inflation_coupon_pricer" prot="public">QuantLib::UnitDisplacedBlackYoYInflationCouponPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_united_kingdom" prot="public">QuantLib::UnitedKingdom</innerclass>
    <innerclass refid="class_quant_lib_1_1_united_states" prot="public">QuantLib::UnitedStates</innerclass>
    <innerclass refid="class_quant_lib_1_1_unit_of_measure" prot="public">QuantLib::UnitOfMeasure</innerclass>
    <innerclass refid="class_quant_lib_1_1_unit_of_measure_conversion" prot="public">QuantLib::UnitOfMeasureConversion</innerclass>
    <innerclass refid="class_quant_lib_1_1_unit_of_measure_conversion_manager" prot="public">QuantLib::UnitOfMeasureConversionManager</innerclass>
    <innerclass refid="class_quant_lib_1_1_upfront_cds_helper" prot="public">QuantLib::UpfrontCdsHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_upper_bound_engine" prot="public">QuantLib::UpperBoundEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_up_rounding" prot="public">QuantLib::UpRounding</innerclass>
    <innerclass refid="class_quant_lib_1_1_u_s_c_p_i" prot="public">QuantLib::USCPI</innerclass>
    <innerclass refid="class_quant_lib_1_1_u_s_d_currency" prot="public">QuantLib::USDCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_u_s_d_libor" prot="public">QuantLib::USDLibor</innerclass>
    <innerclass refid="class_quant_lib_1_1_u_s_d_libor_o_n" prot="public">QuantLib::USDLiborON</innerclass>
    <innerclass refid="class_quant_lib_1_1_usd_libor_swap_isda_fix_am" prot="public">QuantLib::UsdLiborSwapIsdaFixAm</innerclass>
    <innerclass refid="class_quant_lib_1_1_usd_libor_swap_isda_fix_pm" prot="public">QuantLib::UsdLiborSwapIsdaFixPm</innerclass>
    <innerclass refid="class_quant_lib_1_1_u_s_region" prot="public">QuantLib::USRegion</innerclass>
    <innerclass refid="class_quant_lib_1_1_u_y_u_currency" prot="public">QuantLib::UYUCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_vanilla_forward_payoff" prot="public">QuantLib::VanillaForwardPayoff</innerclass>
    <innerclass refid="class_quant_lib_1_1_vanilla_option" prot="public">QuantLib::VanillaOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_vanilla_option_pricer" prot="public">QuantLib::VanillaOptionPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_vanilla_storage_option" prot="public">QuantLib::VanillaStorageOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_vanilla_swap" prot="public">QuantLib::VanillaSwap</innerclass>
    <innerclass refid="class_quant_lib_1_1_vanilla_swing_option" prot="public">QuantLib::VanillaSwingOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_vanilla_v_p_p_option" prot="public">QuantLib::VanillaVPPOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_vanna_volga" prot="public">QuantLib::VannaVolga</innerclass>
    <innerclass refid="class_quant_lib_1_1_vanna_volga_barrier_engine" prot="public">QuantLib::VannaVolgaBarrierEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_vanna_volga_double_barrier_engine" prot="public">QuantLib::VannaVolgaDoubleBarrierEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_vanna_volga_interpolation" prot="public">QuantLib::VannaVolgaInterpolation</innerclass>
    <innerclass refid="class_quant_lib_1_1_variance_gamma_engine" prot="public">QuantLib::VarianceGammaEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_variance_gamma_model" prot="public">QuantLib::VarianceGammaModel</innerclass>
    <innerclass refid="class_quant_lib_1_1_variance_gamma_process" prot="public">QuantLib::VarianceGammaProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_variance_option" prot="public">QuantLib::VarianceOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_variance_path_pricer" prot="public">QuantLib::VariancePathPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_variance_swap" prot="public">QuantLib::VarianceSwap</innerclass>
    <innerclass refid="class_quant_lib_1_1_vasicek" prot="public">QuantLib::Vasicek</innerclass>
    <innerclass refid="class_quant_lib_1_1_v_e_b_currency" prot="public">QuantLib::VEBCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_vega_bump_cluster" prot="public">QuantLib::VegaBumpCluster</innerclass>
    <innerclass refid="class_quant_lib_1_1_vega_bump_collection" prot="public">QuantLib::VegaBumpCollection</innerclass>
    <innerclass refid="class_quant_lib_1_1_vega_stressed_black_scholes_process" prot="public">QuantLib::VegaStressedBlackScholesProcess</innerclass>
    <innerclass refid="class_quant_lib_1_1_visitor" prot="public">QuantLib::Visitor</innerclass>
    <innerclass refid="class_quant_lib_1_1_v_n_d_currency" prot="public">QuantLib::VNDCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_volatility_bump_instrument_jacobian" prot="public">QuantLib::VolatilityBumpInstrumentJacobian</innerclass>
    <innerclass refid="class_quant_lib_1_1_volatility_compositor" prot="public">QuantLib::VolatilityCompositor</innerclass>
    <innerclass refid="class_quant_lib_1_1_volatility_cube" prot="public">QuantLib::VolatilityCube</innerclass>
    <innerclass refid="class_quant_lib_1_1_volatility_interpolation_specifier" prot="public">QuantLib::VolatilityInterpolationSpecifier</innerclass>
    <innerclass refid="class_quant_lib_1_1_volatility_interpolation_specifierabcd" prot="public">QuantLib::VolatilityInterpolationSpecifierabcd</innerclass>
    <innerclass refid="class_quant_lib_1_1_volatility_term_structure" prot="public">QuantLib::VolatilityTermStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_weekends_only" prot="public">QuantLib::WeekendsOnly</innerclass>
    <innerclass refid="class_quant_lib_1_1_wibor" prot="public">QuantLib::Wibor</innerclass>
    <innerclass refid="class_quant_lib_1_1_writer_extensible_option" prot="public">QuantLib::WriterExtensibleOption</innerclass>
    <innerclass refid="class_quant_lib_1_1_xabr_swaption_volatility_cube" prot="public">QuantLib::XabrSwaptionVolatilityCube</innerclass>
    <innerclass refid="class_quant_lib_1_1_x_o_f_currency" prot="public">QuantLib::XOFCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_xoshiro256_star_star_uniform_rng" prot="public">QuantLib::Xoshiro256StarStarUniformRng</innerclass>
    <innerclass refid="class_quant_lib_1_1_x_r_p_currency" prot="public">QuantLib::XRPCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_year_on_year_inflation_swap" prot="public">QuantLib::YearOnYearInflationSwap</innerclass>
    <innerclass refid="class_quant_lib_1_1_year_on_year_inflation_swap_helper" prot="public">QuantLib::YearOnYearInflationSwapHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_yield_term_structure" prot="public">QuantLib::YieldTermStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_yo_y_cap_floor_term_price_surface" prot="public">QuantLib::YoYCapFloorTermPriceSurface</innerclass>
    <innerclass refid="class_quant_lib_1_1_yo_y_inflation_bachelier_cap_floor_engine" prot="public">QuantLib::YoYInflationBachelierCapFloorEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_yo_y_inflation_black_cap_floor_engine" prot="public">QuantLib::YoYInflationBlackCapFloorEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_yo_y_inflation_cap" prot="public">QuantLib::YoYInflationCap</innerclass>
    <innerclass refid="class_quant_lib_1_1_yo_y_inflation_cap_floor" prot="public">QuantLib::YoYInflationCapFloor</innerclass>
    <innerclass refid="class_quant_lib_1_1_yo_y_inflation_cap_floor_engine" prot="public">QuantLib::YoYInflationCapFloorEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_yo_y_inflation_collar" prot="public">QuantLib::YoYInflationCollar</innerclass>
    <innerclass refid="class_quant_lib_1_1_yo_y_inflation_coupon" prot="public">QuantLib::YoYInflationCoupon</innerclass>
    <innerclass refid="class_quant_lib_1_1_yo_y_inflation_coupon_pricer" prot="public">QuantLib::YoYInflationCouponPricer</innerclass>
    <innerclass refid="class_quant_lib_1_1_yo_y_inflation_floor" prot="public">QuantLib::YoYInflationFloor</innerclass>
    <innerclass refid="class_quant_lib_1_1_yo_y_inflation_index" prot="public">QuantLib::YoYInflationIndex</innerclass>
    <innerclass refid="class_quant_lib_1_1yoy_inflation_leg" prot="public">QuantLib::yoyInflationLeg</innerclass>
    <innerclass refid="class_quant_lib_1_1_yo_y_inflation_term_structure" prot="public">QuantLib::YoYInflationTermStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_yo_y_inflation_traits" prot="public">QuantLib::YoYInflationTraits</innerclass>
    <innerclass refid="class_quant_lib_1_1_yo_y_inflation_unit_displaced_black_cap_floor_engine" prot="public">QuantLib::YoYInflationUnitDisplacedBlackCapFloorEngine</innerclass>
    <innerclass refid="class_quant_lib_1_1_yo_y_inflation_volatility_traits" prot="public">QuantLib::YoYInflationVolatilityTraits</innerclass>
    <innerclass refid="class_quant_lib_1_1_yo_y_optionlet_helper" prot="public">QuantLib::YoYOptionletHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_yo_y_optionlet_stripper" prot="public">QuantLib::YoYOptionletStripper</innerclass>
    <innerclass refid="class_quant_lib_1_1_yo_y_optionlet_volatility_surface" prot="public">QuantLib::YoYOptionletVolatilitySurface</innerclass>
    <innerclass refid="class_quant_lib_1_1_y_y_a_u_c_p_i" prot="public">QuantLib::YYAUCPI</innerclass>
    <innerclass refid="class_quant_lib_1_1_y_y_e_u_h_i_c_p" prot="public">QuantLib::YYEUHICP</innerclass>
    <innerclass refid="class_quant_lib_1_1_y_y_e_u_h_i_c_p_x_t" prot="public">QuantLib::YYEUHICPXT</innerclass>
    <innerclass refid="class_quant_lib_1_1_y_y_f_r_h_i_c_p" prot="public">QuantLib::YYFRHICP</innerclass>
    <innerclass refid="class_quant_lib_1_1_y_y_generic_c_p_i" prot="public">QuantLib::YYGenericCPI</innerclass>
    <innerclass refid="class_quant_lib_1_1_y_y_u_k_r_p_i" prot="public">QuantLib::YYUKRPI</innerclass>
    <innerclass refid="class_quant_lib_1_1_y_y_u_s_c_p_i" prot="public">QuantLib::YYUSCPI</innerclass>
    <innerclass refid="class_quant_lib_1_1_y_y_z_a_c_p_i" prot="public">QuantLib::YYZACPI</innerclass>
    <innerclass refid="class_quant_lib_1_1_zabr" prot="public">QuantLib::Zabr</innerclass>
    <innerclass refid="struct_quant_lib_1_1_zabr_full_fd" prot="public">QuantLib::ZabrFullFd</innerclass>
    <innerclass refid="class_quant_lib_1_1_zabr_interpolated_smile_section" prot="public">QuantLib::ZabrInterpolatedSmileSection</innerclass>
    <innerclass refid="class_quant_lib_1_1_zabr_interpolation" prot="public">QuantLib::ZabrInterpolation</innerclass>
    <innerclass refid="struct_quant_lib_1_1_zabr_local_volatility" prot="public">QuantLib::ZabrLocalVolatility</innerclass>
    <innerclass refid="class_quant_lib_1_1_zabr_model" prot="public">QuantLib::ZabrModel</innerclass>
    <innerclass refid="struct_quant_lib_1_1_zabr_short_maturity_lognormal" prot="public">QuantLib::ZabrShortMaturityLognormal</innerclass>
    <innerclass refid="struct_quant_lib_1_1_zabr_short_maturity_normal" prot="public">QuantLib::ZabrShortMaturityNormal</innerclass>
    <innerclass refid="class_quant_lib_1_1_zabr_smile_section" prot="public">QuantLib::ZabrSmileSection</innerclass>
    <innerclass refid="class_quant_lib_1_1_z_a_c_p_i" prot="public">QuantLib::ZACPI</innerclass>
    <innerclass refid="class_quant_lib_1_1_z_a_r_currency" prot="public">QuantLib::ZARCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_z_a_region" prot="public">QuantLib::ZARegion</innerclass>
    <innerclass refid="class_quant_lib_1_1_z_e_c_currency" prot="public">QuantLib::ZECCurrency</innerclass>
    <innerclass refid="class_quant_lib_1_1_zero_condition" prot="public">QuantLib::ZeroCondition</innerclass>
    <innerclass refid="class_quant_lib_1_1_zero_coupon_bond" prot="public">QuantLib::ZeroCouponBond</innerclass>
    <innerclass refid="class_quant_lib_1_1_zero_coupon_inflation_swap" prot="public">QuantLib::ZeroCouponInflationSwap</innerclass>
    <innerclass refid="class_quant_lib_1_1_zero_coupon_inflation_swap_helper" prot="public">QuantLib::ZeroCouponInflationSwapHelper</innerclass>
    <innerclass refid="class_quant_lib_1_1_zero_coupon_swap" prot="public">QuantLib::ZeroCouponSwap</innerclass>
    <innerclass refid="class_quant_lib_1_1_zero_inflation_cash_flow" prot="public">QuantLib::ZeroInflationCashFlow</innerclass>
    <innerclass refid="class_quant_lib_1_1_zero_inflation_index" prot="public">QuantLib::ZeroInflationIndex</innerclass>
    <innerclass refid="class_quant_lib_1_1_zero_inflation_term_structure" prot="public">QuantLib::ZeroInflationTermStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_zero_inflation_traits" prot="public">QuantLib::ZeroInflationTraits</innerclass>
    <innerclass refid="class_quant_lib_1_1_zero_spreaded_term_structure" prot="public">QuantLib::ZeroSpreadedTermStructure</innerclass>
    <innerclass refid="struct_quant_lib_1_1_zero_yield" prot="public">QuantLib::ZeroYield</innerclass>
    <innerclass refid="class_quant_lib_1_1_zero_yield_structure" prot="public">QuantLib::ZeroYieldStructure</innerclass>
    <innerclass refid="class_quant_lib_1_1_zibor" prot="public">QuantLib::Zibor</innerclass>
    <innerclass refid="struct_quant_lib_1_1_ziggurat" prot="public">QuantLib::Ziggurat</innerclass>
    <innerclass refid="class_quant_lib_1_1_ziggurat_gaussian_rng" prot="public">QuantLib::ZigguratGaussianRng</innerclass>
    <innerclass refid="class_quant_lib_1_1_ziggurat_rng" prot="public">QuantLib::ZigguratRng</innerclass>
    <innerclass refid="class_quant_lib_1_1_z_m_w_currency" prot="public">QuantLib::ZMWCurrency</innerclass>
    <innernamespace refid="namespace_quant_lib_1_1chebyshev__interpolation__detail">QuantLib::chebyshev_interpolation_detail</innernamespace>
    <innernamespace refid="namespace_quant_lib_1_1detail">QuantLib::detail</innernamespace>
    <innernamespace refid="namespace_quant_lib_1_1details">QuantLib::details</innernamespace>
    <innernamespace refid="namespace_quant_lib_1_1exponential__integrals__helper">QuantLib::exponential_integrals_helper</innernamespace>
    <innernamespace refid="namespace_quant_lib_1_1_exponential_integral">QuantLib::ExponentialIntegral</innernamespace>
    <innernamespace refid="namespace_quant_lib_1_1ext">QuantLib::ext</innernamespace>
    <innernamespace refid="namespace_quant_lib_1_1_forward_forward_mappings">QuantLib::ForwardForwardMappings</innernamespace>
    <innernamespace refid="namespace_quant_lib_1_1io">QuantLib::io</innernamespace>
    <innernamespace refid="namespace_quant_lib_1_1_latent_model_01">QuantLib::LatentModel </innernamespace>
    <innernamespace refid="namespace_quant_lib_1_1_latent_model_integration_type">QuantLib::LatentModelIntegrationType</innernamespace>
    <innernamespace refid="namespace_quant_lib_1_1_m_i_n_p_a_c_k">QuantLib::MINPACK</innernamespace>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" prot="public" static="no" strong="no">
        <type></type>
        <name>Compounding</name>
        <qualifiedname>QuantLib::Compounding</qualifiedname>
        <enumvalue id="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265ba82b011cf5024ff4e4031afa165185934" prot="public">
          <name>Simple</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para><formula id="23">$ 1+rt $</formula> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265bad20ee0c1742383b76eabab94f8d05709" prot="public">
          <name>Compounded</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para><formula id="24">$ (1+r)^t $</formula> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265baae77494393cf12a7dd3634b002d4ffda" prot="public">
          <name>Continuous</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para><formula id="25">$ e^{rt} $</formula> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265ba362e6db944d3ceec628d3b537d877c43" prot="public">
          <name>SimpleThenCompounded</name>
          <briefdescription>
<para>Simple up to the first period then Compounded. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265ba03eaf561978a8027e1cf8d6e38c5a890" prot="public">
          <name>CompoundedThenSimple</name>
          <briefdescription>
<para>Compounded up to the first period then Simple. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Interest rate coumpounding rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/compounding.hpp" line="32" column="5" bodyfile="ql/compounding.hpp" bodystart="32" bodyend="37"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_quant_lib_1a197bfb2321381d9a5d8c94b56f6ef6cf" prot="public" static="no" strong="no">
        <type></type>
        <name>Seniority</name>
        <qualifiedname>QuantLib::Seniority</qualifiedname>
        <enumvalue id="namespace_quant_lib_1a197bfb2321381d9a5d8c94b56f6ef6cfab081f37316c77e97296057524c883524" prot="public">
          <name>SecDom</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a197bfb2321381d9a5d8c94b56f6ef6cfadf665f17be37d083bf9c0675b782248c" prot="public">
          <name>SnrFor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a197bfb2321381d9a5d8c94b56f6ef6cfaafabc1088b0cdef92fa92cc9a7b1ca4c" prot="public">
          <name>SubLT2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a197bfb2321381d9a5d8c94b56f6ef6cfa00e43f0d558e060646e89ef9d20e383a" prot="public">
          <name>JrSubT2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a197bfb2321381d9a5d8c94b56f6ef6cfa853f2b792b2795b4f2f325b12149a1f5" prot="public">
          <name>PrefT1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a197bfb2321381d9a5d8c94b56f6ef6cfac75db076701a6745cf80b4d64b9587cc" prot="public">
          <name>NoSeniority</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a197bfb2321381d9a5d8c94b56f6ef6cfa09ed49f488602704cae68ce6c72c3a11" prot="public">
          <name>SeniorSec</name>
          <initializer>= SecDom</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a197bfb2321381d9a5d8c94b56f6ef6cfa6a956a1780d2dc4c1e2ba2ff54cfb658" prot="public">
          <name>SeniorUnSec</name>
          <initializer>= SnrFor</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a197bfb2321381d9a5d8c94b56f6ef6cfa50f06d376cf85dac8aa6f447c2523afd" prot="public">
          <name>SubTier1</name>
          <initializer>= PrefT1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a197bfb2321381d9a5d8c94b56f6ef6cfa2c40613c13725caec345a295cf93a8ab" prot="public">
          <name>SubUpperTier2</name>
          <initializer>= JrSubT2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a197bfb2321381d9a5d8c94b56f6ef6cfa73a413fd1aa0bd2bf38226c5b42a23b4" prot="public">
          <name>SubLoweTier2</name>
          <initializer>= SubLT2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para><ref refid="namespace_quant_lib_1a197bfb2321381d9a5d8c94b56f6ef6cf" kindref="member">Seniority</ref> of a bond. </para>
        </briefdescription>
        <detaileddescription>
<para>They are also ISDA tier/seniorities used for CDS conventional spreads. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/defaulttype.hpp" line="37" column="5" bodyfile="ql/experimental/credit/defaulttype.hpp" bodystart="37" bodyend="51"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" prot="public" static="no" strong="no">
        <type></type>
        <name>SensitivityAnalysis</name>
        <qualifiedname>QuantLib::SensitivityAnalysis</qualifiedname>
        <enumvalue id="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98ab15aaf59c49e58dd9c86b7bfcf97494e" prot="public">
          <name>OneSide</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98a0c9c9434e7599c935e5f73e109651f3b" prot="public">
          <name>Centered</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Finite differences calculation. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000029"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Out of scope; copy this enumeration in your codebase if needed. Deprecated in version 1.36. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/risk/sensitivityanalysis.hpp" line="44" column="5" bodyfile="ql/experimental/risk/sensitivityanalysis.hpp" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_quant_lib_1ab37ae561efe2ca1a584783cdf6f788ae" prot="public" static="no" strong="no">
        <type></type>
        <name>PriceType</name>
        <qualifiedname>QuantLib::PriceType</qualifiedname>
        <enumvalue id="namespace_quant_lib_1ab37ae561efe2ca1a584783cdf6f788aea83437d33bc4b1a3d8c9efc57c038f08b" prot="public">
          <name>Bid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bid price. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1ab37ae561efe2ca1a584783cdf6f788aeaf68b3d067cad56b0bb1821fe9dc54683" prot="public">
          <name>Ask</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Ask price. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1ab37ae561efe2ca1a584783cdf6f788aeadddead60b7479c480f5568fd83c3ad28" prot="public">
          <name>Last</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Last price. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1ab37ae561efe2ca1a584783cdf6f788aea07580597d502680bb030d9da769558b4" prot="public">
          <name>Close</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Close price. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1ab37ae561efe2ca1a584783cdf6f788aea8b528fc03ff259071c405fb2a9a403f1" prot="public">
          <name>Mid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mid price, calculated as the arithmetic average of bid and ask prices. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1ab37ae561efe2ca1a584783cdf6f788aea319bf9f8eaa8afee20ca53e70644dc63" prot="public">
          <name>MidEquivalent</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mid equivalent price, calculated as a) the arithmetic average of bid and ask prices when both are available; b) either the bid or the ask price if any of them is available; c) the last price; or d) the close price. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1ab37ae561efe2ca1a584783cdf6f788aea8cd7df1dd3d25e15365b6ee274a56305" prot="public">
          <name>MidSafe</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Safe Mid price, returns the mid price only if both bid and ask are available. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Price types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/prices.hpp" line="35" column="5" bodyfile="ql/prices.hpp" bodystart="35" bodyend="49"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_quant_lib_1a9cc70200e3da47b3a8ae48ea7cb7c6aa" prot="public" static="no" strong="no">
        <type></type>
        <name>VolatilityType</name>
        <qualifiedname>QuantLib::VolatilityType</qualifiedname>
        <enumvalue id="namespace_quant_lib_1a9cc70200e3da47b3a8ae48ea7cb7c6aaa4da757689cbff988551677ee053353e5" prot="public">
          <name>ShiftedLognormal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a9cc70200e3da47b3a8ae48ea7cb7c6aaa18fdc84f0266af57c92f40038dc59835" prot="public">
          <name>Normal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/volatilitytype.hpp" line="32" column="5" bodyfile="ql/termstructures/volatility/volatilitytype.hpp" bodystart="32" bodyend="32"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881" prot="public" static="no" strong="no">
        <type></type>
        <name>BusinessDayConvention</name>
        <qualifiedname>QuantLib::BusinessDayConvention</qualifiedname>
        <enumvalue id="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881ad881bac893a17d75191f0041eefda956" prot="public">
          <name>Following</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Choose the first business day after the given holiday. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881aaa730fc5548402fd95e95f1c57f9a535" prot="public">
          <name>ModifiedFollowing</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Choose the first business day after the given holiday unless it belongs to a different month, in which case choose the first business day before the holiday. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881a4fc14cfd1593e872bbe3c8a4429d1a1f" prot="public">
          <name>Preceding</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Choose the first business day before the given holiday. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881a9b4da4fc0dfcb46d879645f8501ab645" prot="public">
          <name>ModifiedPreceding</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Choose the first business day before the given holiday unless it belongs to a different month, in which case choose the first business day after the holiday. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881a6a9f8f55985b149ed0c336c23bf03667" prot="public">
          <name>Unadjusted</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Do not adjust. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881a248a27cb448948bf67124edc19a58e8c" prot="public">
          <name>HalfMonthModifiedFollowing</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Choose the first business day after the given holiday unless that day crosses the mid-month (15th) or the end of month, in which case choose the first business day before the holiday. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881aa6c83e096b1da365ee4944baa6f38cfa" prot="public">
          <name>Nearest</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Choose the nearest business day to the given holiday. If both the preceding and following business days are equally far away, default to following business day. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Business <ref refid="namespace_quant_lib_1a7354a4ac9189352870cbb0cb998e0bd4" kindref="member">Day</ref> conventions. </para>
        </briefdescription>
        <detaileddescription>
<para>These conventions specify the algorithm used to adjust a date in case it is not a valid business day. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/businessdayconvention.hpp" line="41" column="5" bodyfile="ql/time/businessdayconvention.hpp" bodystart="41" bodyend="70"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_quant_lib_1a91eac26c144c1e949a46dd75edac3e03" prot="public" static="no" strong="no">
        <type></type>
        <name>JointCalendarRule</name>
        <qualifiedname>QuantLib::JointCalendarRule</qualifiedname>
        <enumvalue id="namespace_quant_lib_1a91eac26c144c1e949a46dd75edac3e03a694fa565dbb77959e6ba59db99cbc617" prot="public">
          <name>JoinHolidays</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A date is a holiday for the joint calendar if it is a holiday for any of the given calendars </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a91eac26c144c1e949a46dd75edac3e03a80aeb17e0e0cd1d6890b2913a45aefe6" prot="public">
          <name>JoinBusinessDays</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A date is a business day for the joint calendar if it is a business day for any of the given calendars </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>rules for joining calendars </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/calendars/jointcalendar.hpp" line="33" column="5" bodyfile="ql/time/calendars/jointcalendar.hpp" bodystart="33" bodyend="43"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4" prot="public" static="no" strong="no">
        <type></type>
        <name>Month</name>
        <qualifiedname>QuantLib::Month</qualifiedname>
        <enumvalue id="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4a2c2c73e76831dec3bfead45af4e7e293" prot="public">
          <name>January</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4a3f87835e65eb79538ed8df9dac30e8e9" prot="public">
          <name>February</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4a982c9e93cf4b41f4b71b5c256df6191c" prot="public">
          <name>March</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4a5a127587551e502c20dd25f3cb95c670" prot="public">
          <name>April</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4ab7f0de9de43d10d9740019f24a55b001" prot="public">
          <name>May</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4a88068fdc3953ea6e86797179bb2f7d70" prot="public">
          <name>June</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4a6e2eb13b444eddc908b702f9e3030b15" prot="public">
          <name>July</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4a296c9233a021e0f88646d10cfba16888" prot="public">
          <name>August</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4ad4e26bc88f6e25cf9e31ba9400771d49" prot="public">
          <name>September</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4a11958aa29b8f50ce93f5d5f6f86c545f" prot="public">
          <name>October</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4acb4e488d1e8bac8be4f273d27e102b61" prot="public">
          <name>November</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4ad4988bf6760edb92c088bb47d4b61dc5" prot="public">
          <name>December</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4a457c3d6657917c0414293ce6754833b8" prot="public">
          <name>Jan</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4a3d6dae4a84cb8f0701574e6fe4877b69" prot="public">
          <name>Feb</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4a9423a6f4fbf54c61ee104ecdb148534b" prot="public">
          <name>Mar</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4aa95877840fe6dfb27996d4fc4c458abc" prot="public">
          <name>Apr</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4a9239fe34697e9ee89623abf0e43c1247" prot="public">
          <name>Jun</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4a88808a65bd354ff767dcda5830b5bb78" prot="public">
          <name>Jul</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4a086af941ae1ee2a1aed911ff9d6c737d" prot="public">
          <name>Aug</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4a76af2c385b98542daf200e8a3b79695c" prot="public">
          <name>Sep</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4a387573c3eab5da802b5e4fb3858b4efc" prot="public">
          <name>Oct</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4a550739cdbe8dbe77d47fc5ba98ec0821" prot="public">
          <name>Nov</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4a902aa90a18751b6719b08669d21d44ae" prot="public">
          <name>Dec</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para><ref refid="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4" kindref="member">Month</ref> names. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="57" column="5" bodyfile="ql/time/date.hpp" bodystart="57" bodyend="80"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" prot="public" static="no" strong="no">
        <type></type>
        <name>Frequency</name>
        <qualifiedname>QuantLib::Frequency</qualifiedname>
        <enumvalue id="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4aae04188e899e91092d93c66f5c071c10a" prot="public">
          <name>NoFrequency</name>
          <initializer>= -1</initializer>
          <briefdescription>
<para>null frequency </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4aa2d996c8102a0ad3aff8481e4745da342" prot="public">
          <name>Once</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>only once, e.g., a zero-coupon </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4aac6003519ba84c016466307b35221e4cf" prot="public">
          <name>Annual</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>once a year </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4aa42f77cc0a4f660a207fe2e743601350b" prot="public">
          <name>Semiannual</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>twice a year </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4aa6b6b2cce89e2ca091fd758562fcf4efd" prot="public">
          <name>EveryFourthMonth</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>every fourth month </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4aa128af3894a995861df674f940dfc9182" prot="public">
          <name>Quarterly</name>
          <initializer>= 4</initializer>
          <briefdescription>
<para>every third month </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4aa0488c3f8abdd2b0928d82026aa83f820" prot="public">
          <name>Bimonthly</name>
          <initializer>= 6</initializer>
          <briefdescription>
<para>every second month </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4aa4880ecc06ab77951b9e412bffce54bcc" prot="public">
          <name>Monthly</name>
          <initializer>= 12</initializer>
          <briefdescription>
<para>once a month </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4aa9f2e5e117ef7d4476d4e68f1a3b8b686" prot="public">
          <name>EveryFourthWeek</name>
          <initializer>= 13</initializer>
          <briefdescription>
<para>every fourth week </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4aa130e66366fab228ccb63744d611d4a34" prot="public">
          <name>Biweekly</name>
          <initializer>= 26</initializer>
          <briefdescription>
<para>every second week </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4aaa26d25f89765abb5991c11da044154e8" prot="public">
          <name>Weekly</name>
          <initializer>= 52</initializer>
          <briefdescription>
<para>once a week </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4aa6f587e1a2ffe021368830ea9d66db57e" prot="public">
          <name>Daily</name>
          <initializer>= 365</initializer>
          <briefdescription>
<para>once a day </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4aaabe847a4e077cb73df13269cccbebd80" prot="public">
          <name>OtherFrequency</name>
          <initializer>= 999</initializer>
          <briefdescription>
<para>some other unknown frequency </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> of events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/frequency.hpp" line="37" column="5" bodyfile="ql/time/frequency.hpp" bodystart="37" bodyend="50"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_quant_lib_1a6cdac5e2dae1e972076cc8e3302e4ad3" prot="public" static="no" strong="no">
        <type></type>
        <name>TimeUnit</name>
        <qualifiedname>QuantLib::TimeUnit</qualifiedname>
        <enumvalue id="namespace_quant_lib_1a6cdac5e2dae1e972076cc8e3302e4ad3ac2d73aad1a6496a6481563e7b5e62b36" prot="public">
          <name>Days</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a6cdac5e2dae1e972076cc8e3302e4ad3abfe6416a9a483125b6b22548c1ff3947" prot="public">
          <name>Weeks</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a6cdac5e2dae1e972076cc8e3302e4ad3a3d158b618e2bf6e66da9aca81f706dae" prot="public">
          <name>Months</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a6cdac5e2dae1e972076cc8e3302e4ad3ae2d856134531729a1696e66bebeafb32" prot="public">
          <name>Years</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a6cdac5e2dae1e972076cc8e3302e4ad3a1e03bf732fbb6356f297f4766528dc23" prot="public">
          <name>Hours</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a6cdac5e2dae1e972076cc8e3302e4ad3a2ba434f5f52baf58c8e99e75c095b528" prot="public">
          <name>Minutes</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a6cdac5e2dae1e972076cc8e3302e4ad3a0e19e43c4c19000b900d33015c64be1a" prot="public">
          <name>Seconds</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a6cdac5e2dae1e972076cc8e3302e4ad3a57ff062a5f22b3b38ceaeaf3e9e0e919" prot="public">
          <name>Milliseconds</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a6cdac5e2dae1e972076cc8e3302e4ad3a137726dab52609c9475af297e0eb74f6" prot="public">
          <name>Microseconds</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Units used to describe time periods. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/timeunit.hpp" line="37" column="5" bodyfile="ql/time/timeunit.hpp" bodystart="37" bodyend="46"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_quant_lib_1a04474aebb0bea95bba2f1dcbdd8a27a6" prot="public" static="no" strong="no">
        <type></type>
        <name>Weekday</name>
        <qualifiedname>QuantLib::Weekday</qualifiedname>
        <enumvalue id="namespace_quant_lib_1a04474aebb0bea95bba2f1dcbdd8a27a6a6276c6480efe5dff72b2ded9b08045e3" prot="public">
          <name>Sunday</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a04474aebb0bea95bba2f1dcbdd8a27a6a343f0198d8acd83e1c107d54ff1894c5" prot="public">
          <name>Monday</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a04474aebb0bea95bba2f1dcbdd8a27a6a63b8da2448dd3be7feb6369119d4795b" prot="public">
          <name>Tuesday</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a04474aebb0bea95bba2f1dcbdd8a27a6a82560a361ba61b99299e185e7f298b50" prot="public">
          <name>Wednesday</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a04474aebb0bea95bba2f1dcbdd8a27a6a6018f190eda6c2550956d8a73e12b91e" prot="public">
          <name>Thursday</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a04474aebb0bea95bba2f1dcbdd8a27a6a0414532d5d35575576577f13d0005599" prot="public">
          <name>Friday</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a04474aebb0bea95bba2f1dcbdd8a27a6a5057b5122f5d5e92e76e8824f664c8bc" prot="public">
          <name>Saturday</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a04474aebb0bea95bba2f1dcbdd8a27a6a9cd72a7efe1fe31c2f07c5f94d24ba89" prot="public">
          <name>Sun</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a04474aebb0bea95bba2f1dcbdd8a27a6a024eac8b78a99ce129ac382c53b115ba" prot="public">
          <name>Mon</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a04474aebb0bea95bba2f1dcbdd8a27a6ac1d8f19a11962d922cf9f7efa643d99a" prot="public">
          <name>Tue</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a04474aebb0bea95bba2f1dcbdd8a27a6af09606b00728538eec8687ecc8dad130" prot="public">
          <name>Wed</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a04474aebb0bea95bba2f1dcbdd8a27a6a058b7db05f160070f18c29cfff08ba0a" prot="public">
          <name>Thu</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a04474aebb0bea95bba2f1dcbdd8a27a6a9ae720e18595ffcecddaf5103ce954eb" prot="public">
          <name>Fri</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_quant_lib_1a04474aebb0bea95bba2f1dcbdd8a27a6afaf90e2f28470dadffe6e18c7bd78a7d" prot="public">
          <name>Sat</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="namespace_quant_lib_1a7354a4ac9189352870cbb0cb998e0bd4" kindref="member">Day</ref>&apos;s serial number MOD 7; WEEKDAY Excel function is the same except for Sunday = 7. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/weekday.hpp" line="41" column="5" bodyfile="ql/time/weekday.hpp" bodystart="41" bodyend="55"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" prot="public" static="no">
        <type>std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_cash_flow" kindref="compound">CashFlow</ref> &gt; &gt;</type>
        <definition>typedef std::vector&lt;ext::shared_ptr&lt;CashFlow&gt; &gt; QuantLib::Leg</definition>
        <argsstring></argsstring>
        <name>Leg</name>
        <qualifiedname>QuantLib::Leg</qualifiedname>
        <briefdescription>
<para>Sequence of cash-flows. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflow.hpp" line="78" column="25" bodyfile="ql/cashflow.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a3196129d3f811280b103721dfef66585" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_multiple_resets_coupon" kindref="compound">MultipleResetsCoupon</ref></type>
        <definition>typedef MultipleResetsCoupon QuantLib::SubPeriodsCoupon</definition>
        <argsstring></argsstring>
        <name>SubPeriodsCoupon</name>
        <qualifiedname>QuantLib::SubPeriodsCoupon</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Renamed to <ref refid="class_quant_lib_1_1_multiple_resets_coupon" kindref="compound">MultipleResetsCoupon</ref>. Deprecated in version 1.37. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/multipleresetscoupon.hpp" line="118" column="34" bodyfile="ql/cashflows/multipleresetscoupon.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a2e6f80fabd8719564fdf60881ad5fec7" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_multiple_resets_pricer" kindref="compound">MultipleResetsPricer</ref></type>
        <definition>typedef MultipleResetsPricer QuantLib::SubPeriodsPricer</definition>
        <argsstring></argsstring>
        <name>SubPeriodsPricer</name>
        <qualifiedname>QuantLib::SubPeriodsPricer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000004"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Renamed to <ref refid="class_quant_lib_1_1_multiple_resets_pricer" kindref="compound">MultipleResetsPricer</ref>. Deprecated in version 1.37. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/multipleresetscoupon.hpp" line="139" column="34" bodyfile="ql/cashflows/multipleresetscoupon.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a31555691a6fab9b538e0e50b0a0cc9f1" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_averaging_multiple_resets_pricer" kindref="compound">AveragingMultipleResetsPricer</ref></type>
        <definition>typedef AveragingMultipleResetsPricer QuantLib::AveragingRatePricer</definition>
        <argsstring></argsstring>
        <name>AveragingRatePricer</name>
        <qualifiedname>QuantLib::AveragingRatePricer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000005"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Renamed to <ref refid="class_quant_lib_1_1_averaging_multiple_resets_pricer" kindref="compound">AveragingMultipleResetsPricer</ref>. Deprecated in version 1.37. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/multipleresetscoupon.hpp" line="150" column="43" bodyfile="ql/cashflows/multipleresetscoupon.hpp" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a24227fc2ee2a782bc70b4cfbfcd6816f" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_compounding_multiple_resets_pricer" kindref="compound">CompoundingMultipleResetsPricer</ref></type>
        <definition>typedef CompoundingMultipleResetsPricer QuantLib::CompoundingRatePricer</definition>
        <argsstring></argsstring>
        <name>CompoundingRatePricer</name>
        <qualifiedname>QuantLib::CompoundingRatePricer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000006"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Renamed to <ref refid="class_quant_lib_1_1_compounding_multiple_resets_pricer" kindref="compound">CompoundingMultipleResetsPricer</ref>. Deprecated in version 1.37. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/multipleresetscoupon.hpp" line="161" column="45" bodyfile="ql/cashflows/multipleresetscoupon.hpp" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1ad211234c82a9ee63a1604e3472c7b62e" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_tenor_optionlet_v_t_s_1_1_correlation_structure" kindref="compound">TenorOptionletVTS::CorrelationStructure</ref></type>
        <definition>typedef TenorOptionletVTS::CorrelationStructure QuantLib::TenorOptionletVTSCorrelationStructure</definition>
        <argsstring></argsstring>
        <name>TenorOptionletVTSCorrelationStructure</name>
        <qualifiedname>QuantLib::TenorOptionletVTSCorrelationStructure</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/basismodels/tenoroptionletvts.hpp" line="133" column="53" bodyfile="ql/experimental/basismodels/tenoroptionletvts.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a0fe7be3e32d2ec837a2b965abe2fba6a" prot="public" static="no">
        <type>std::map&lt; std::string, ext::any &gt;</type>
        <definition>typedef std::map&lt;std::string, ext::any&gt; QuantLib::SecondaryCosts</definition>
        <argsstring></argsstring>
        <name>SecondaryCosts</name>
        <qualifiedname>QuantLib::SecondaryCosts</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodity.hpp" line="36" column="22" bodyfile="ql/experimental/commodities/commodity.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a1b8a512d65aea3e5b234a677aabcd93c" prot="public" static="no">
        <type>std::map&lt; std::string, <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &gt;</type>
        <definition>typedef std::map&lt;std::string, Money&gt; QuantLib::SecondaryCostAmounts</definition>
        <argsstring></argsstring>
        <name>SecondaryCostAmounts</name>
        <qualifiedname>QuantLib::SecondaryCostAmounts</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodity.hpp" line="37" column="22" bodyfile="ql/experimental/commodities/commodity.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a4b72499fb8125597633901f82f0c3d48" prot="public" static="no">
        <type>std::vector&lt; <ref refid="struct_quant_lib_1_1_pricing_error" kindref="compound">PricingError</ref> &gt;</type>
        <definition>typedef std::vector&lt;PricingError&gt; QuantLib::PricingErrors</definition>
        <argsstring></argsstring>
        <name>PricingErrors</name>
        <qualifiedname>QuantLib::PricingErrors</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodity.hpp" line="55" column="25" bodyfile="ql/experimental/commodities/commodity.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a1d740f3c87a3274d83f858b5c3f5f759" prot="public" static="no">
        <type>std::map&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>, ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_commodity_cash_flow" kindref="compound">CommodityCashFlow</ref> &gt; &gt;</type>
        <definition>typedef std::map&lt;Date, ext::shared_ptr&lt;CommodityCashFlow&gt; &gt; QuantLib::CommodityCashFlows</definition>
        <argsstring></argsstring>
        <name>CommodityCashFlows</name>
        <qualifiedname>QuantLib::CommodityCashFlows</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycashflow.hpp" line="87" column="60" bodyfile="ql/experimental/commodities/commoditycashflow.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a8c6f50d4ddec41276a32919b5429c1ce" prot="public" static="no">
        <type>std::map&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>, <ref refid="struct_quant_lib_1_1_energy_daily_position" kindref="compound">EnergyDailyPosition</ref> &gt;</type>
        <definition>typedef std::map&lt;Date, EnergyDailyPosition&gt; QuantLib::EnergyDailyPositions</definition>
        <argsstring></argsstring>
        <name>EnergyDailyPositions</name>
        <qualifiedname>QuantLib::EnergyDailyPositions</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/energycommodity.hpp" line="52" column="22" bodyfile="ql/experimental/commodities/energycommodity.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1aaa36488131de1b1a159f4ae175792584" prot="public" static="no">
        <type>std::map&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>, <ref refid="class_quant_lib_1_1_exchange_contract" kindref="compound">ExchangeContract</ref> &gt;</type>
        <definition>typedef std::map&lt;Date, ExchangeContract&gt; QuantLib::ExchangeContracts</definition>
        <argsstring></argsstring>
        <name>ExchangeContracts</name>
        <qualifiedname>QuantLib::ExchangeContracts</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/exchangecontract.hpp" line="75" column="22" bodyfile="ql/experimental/commodities/exchangecontract.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a7054e4b1e12ba1618829651d50ce149e" prot="public" static="no">
        <type>std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_pricing_period" kindref="compound">PricingPeriod</ref> &gt; &gt;</type>
        <definition>typedef std::vector&lt;ext::shared_ptr&lt;PricingPeriod&gt; &gt; QuantLib::PricingPeriods</definition>
        <argsstring></argsstring>
        <name>PricingPeriods</name>
        <qualifiedname>QuantLib::PricingPeriods</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/pricingperiod.hpp" line="51" column="25" bodyfile="ql/experimental/commodities/pricingperiod.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1ad3959af856d8e48b185d53352e94bed2" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_base_correlation_loss_model" kindref="compound">BaseCorrelationLossModel</ref>&lt; <ref refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model" kindref="compound">GaussianLHPLossModel</ref>, <ref refid="class_quant_lib_1_1_bilinear_interpolation" kindref="compound">BilinearInterpolation</ref> &gt;</type>
        <definition>typedef BaseCorrelationLossModel&lt;GaussianLHPLossModel, BilinearInterpolation&gt; QuantLib::GaussianLHPFlatBCLM</definition>
        <argsstring></argsstring>
        <name>GaussianLHPFlatBCLM</name>
        <qualifiedname>QuantLib::GaussianLHPFlatBCLM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basecorrelationlossmodel.hpp" line="289" column="2" bodyfile="ql/experimental/credit/basecorrelationlossmodel.hpp" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1ad79372d552dd824f167cf3905dc2e976" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_binomial_loss_model" kindref="compound">BinomialLossModel</ref>&lt; <ref refid="class_quant_lib_1_1_constant_loss_latentmodel" kindref="compound">GaussianConstantLossLM</ref> &gt;</type>
        <definition>typedef BinomialLossModel&lt;GaussianConstantLossLM&gt; QuantLib::GaussianBinomialLossModel</definition>
        <argsstring></argsstring>
        <name>GaussianBinomialLossModel</name>
        <qualifiedname>QuantLib::GaussianBinomialLossModel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/binomiallossmodel.hpp" line="414" column="31" bodyfile="ql/experimental/credit/binomiallossmodel.hpp" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1abd72c47732038ecd2b3da6a700ccfbcc" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_binomial_loss_model" kindref="compound">BinomialLossModel</ref>&lt; <ref refid="class_quant_lib_1_1_constant_loss_latentmodel" kindref="compound">TConstantLossLM</ref> &gt;</type>
        <definition>typedef BinomialLossModel&lt;TConstantLossLM&gt; QuantLib::TBinomialLossModel</definition>
        <argsstring></argsstring>
        <name>TBinomialLossModel</name>
        <qualifiedname>QuantLib::TBinomialLossModel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/binomiallossmodel.hpp" line="415" column="31" bodyfile="ql/experimental/credit/binomiallossmodel.hpp" bodystart="415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1ada774ab6e16a65f77575761d8046e516" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_constant_loss_latentmodel" kindref="compound">ConstantLossLatentmodel</ref>&lt; <ref refid="struct_quant_lib_1_1_gaussian_copula_policy" kindref="compound">GaussianCopulaPolicy</ref> &gt;</type>
        <definition>typedef ConstantLossLatentmodel&lt;GaussianCopulaPolicy&gt; QuantLib::GaussianConstantLossLM</definition>
        <argsstring></argsstring>
        <name>GaussianConstantLossLM</name>
        <qualifiedname>QuantLib::GaussianConstantLossLM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/constantlosslatentmodel.hpp" line="106" column="9" bodyfile="ql/experimental/credit/constantlosslatentmodel.hpp" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1aaf665fbdcc944c64cf6a580205064879" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_constant_loss_latentmodel" kindref="compound">ConstantLossLatentmodel</ref>&lt; <ref refid="class_quant_lib_1_1_t_copula_policy" kindref="compound">TCopulaPolicy</ref> &gt;</type>
        <definition>typedef ConstantLossLatentmodel&lt;TCopulaPolicy&gt; QuantLib::TConstantLossLM</definition>
        <argsstring></argsstring>
        <name>TConstantLossLM</name>
        <qualifiedname>QuantLib::TConstantLossLM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/constantlosslatentmodel.hpp" line="107" column="37" bodyfile="ql/experimental/credit/constantlosslatentmodel.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a9e6c327fb944abadc02fbaec2f7faad6" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_default_latent_model" kindref="compound">DefaultLatentModel</ref>&lt; <ref refid="struct_quant_lib_1_1_gaussian_copula_policy" kindref="compound">GaussianCopulaPolicy</ref> &gt;</type>
        <definition>typedef DefaultLatentModel&lt;GaussianCopulaPolicy&gt; QuantLib::GaussianDefProbLM</definition>
        <argsstring></argsstring>
        <name>GaussianDefProbLM</name>
        <qualifiedname>QuantLib::GaussianDefProbLM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" line="323" column="32" bodyfile="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a92c90fab607618ba6c76e5798096af46" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_default_latent_model" kindref="compound">DefaultLatentModel</ref>&lt; <ref refid="class_quant_lib_1_1_t_copula_policy" kindref="compound">TCopulaPolicy</ref> &gt;</type>
        <definition>typedef DefaultLatentModel&lt;TCopulaPolicy&gt; QuantLib::TDefProbLM</definition>
        <argsstring></argsstring>
        <name>TDefProbLM</name>
        <qualifiedname>QuantLib::TDefProbLM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" line="324" column="32" bodyfile="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a774c4f5bff51109ad043b554a4fac184" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_homogeneous_pool_loss_model" kindref="compound">HomogeneousPoolLossModel</ref>&lt; <ref refid="struct_quant_lib_1_1_gaussian_copula_policy" kindref="compound">GaussianCopulaPolicy</ref> &gt;</type>
        <definition>typedef HomogeneousPoolLossModel&lt;GaussianCopulaPolicy&gt; QuantLib::HomogGaussPoolLossModel</definition>
        <argsstring></argsstring>
        <name>HomogGaussPoolLossModel</name>
        <qualifiedname>QuantLib::HomogGaussPoolLossModel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/homogeneouspooldef.hpp" line="100" column="9" bodyfile="ql/experimental/credit/homogeneouspooldef.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1ac571516859e9f6afa303c5320a8a0cd7" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_homogeneous_pool_loss_model" kindref="compound">HomogeneousPoolLossModel</ref>&lt; <ref refid="class_quant_lib_1_1_t_copula_policy" kindref="compound">TCopulaPolicy</ref> &gt;</type>
        <definition>typedef HomogeneousPoolLossModel&lt;TCopulaPolicy&gt; QuantLib::HomogTPoolLossModel</definition>
        <argsstring></argsstring>
        <name>HomogTPoolLossModel</name>
        <qualifiedname>QuantLib::HomogTPoolLossModel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/homogeneouspooldef.hpp" line="101" column="38" bodyfile="ql/experimental/credit/homogeneouspooldef.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a309245c5cba96815b981744f3e72869f" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_inhomogeneous_pool_loss_model" kindref="compound">InhomogeneousPoolLossModel</ref>&lt; <ref refid="struct_quant_lib_1_1_gaussian_copula_policy" kindref="compound">GaussianCopulaPolicy</ref> &gt;</type>
        <definition>typedef InhomogeneousPoolLossModel&lt;GaussianCopulaPolicy&gt; QuantLib::IHGaussPoolLossModel</definition>
        <argsstring></argsstring>
        <name>IHGaussPoolLossModel</name>
        <qualifiedname>QuantLib::IHGaussPoolLossModel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/inhomogeneouspooldef.hpp" line="108" column="9" bodyfile="ql/experimental/credit/inhomogeneouspooldef.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a4515784a07936b32381c5e0642c4973c" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_inhomogeneous_pool_loss_model" kindref="compound">InhomogeneousPoolLossModel</ref>&lt; <ref refid="class_quant_lib_1_1_t_copula_policy" kindref="compound">TCopulaPolicy</ref> &gt;</type>
        <definition>typedef InhomogeneousPoolLossModel&lt;TCopulaPolicy&gt; QuantLib::IHStudentPoolLossModel</definition>
        <argsstring></argsstring>
        <name>IHStudentPoolLossModel</name>
        <qualifiedname>QuantLib::IHStudentPoolLossModel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/inhomogeneouspooldef.hpp" line="109" column="40" bodyfile="ql/experimental/credit/inhomogeneouspooldef.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1ae207b972c9d158aa237fa55dcc8b4eca" prot="public" static="no">
        <type>std::set&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_default_event" kindref="compound">DefaultEvent</ref> &gt;, <ref refid="struct_quant_lib_1_1earlier__than" kindref="compound">earlier_than</ref>&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_default_event" kindref="compound">DefaultEvent</ref> &gt; &gt; &gt;</type>
        <definition>typedef std::set&lt;ext::shared_ptr&lt;DefaultEvent&gt;, earlier_than&lt;ext::shared_ptr&lt;DefaultEvent&gt; &gt; &gt; QuantLib::DefaultEventSet</definition>
        <argsstring></argsstring>
        <name>DefaultEventSet</name>
        <qualifiedname>QuantLib::DefaultEventSet</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/issuer.hpp" line="38" column="13" bodyfile="ql/experimental/credit/issuer.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a6fd4b2bfbb6ecf9a3b0b2cb8bdb8d89d" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_random_default_l_m" kindref="compound">RandomDefaultLM</ref>&lt; <ref refid="struct_quant_lib_1_1_gaussian_copula_policy" kindref="compound">GaussianCopulaPolicy</ref> &gt;</type>
        <definition>typedef RandomDefaultLM&lt;GaussianCopulaPolicy&gt; QuantLib::GaussianRandomDefaultLM</definition>
        <argsstring></argsstring>
        <name>GaussianRandomDefaultLM</name>
        <qualifiedname>QuantLib::GaussianRandomDefaultLM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="981" column="29" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="981" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1afe39bd05e25e02de888b54efbff35ccb" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_random_default_l_m" kindref="compound">RandomDefaultLM</ref>&lt; <ref refid="class_quant_lib_1_1_t_copula_policy" kindref="compound">TCopulaPolicy</ref> &gt;</type>
        <definition>typedef RandomDefaultLM&lt;TCopulaPolicy&gt; QuantLib::TRandomDefaultLM</definition>
        <argsstring></argsstring>
        <name>TRandomDefaultLM</name>
        <qualifiedname>QuantLib::TRandomDefaultLM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="994" column="29" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="994" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a0ee1b5f81a7d9638e10dc08f04f02d7f" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_random_loss_l_m" kindref="compound">RandomLossLM</ref>&lt; <ref refid="struct_quant_lib_1_1_gaussian_copula_policy" kindref="compound">GaussianCopulaPolicy</ref> &gt;</type>
        <definition>typedef RandomLossLM&lt;GaussianCopulaPolicy&gt; QuantLib::GaussianRandomLossLM</definition>
        <argsstring></argsstring>
        <name>GaussianRandomLossLM</name>
        <qualifiedname>QuantLib::GaussianRandomLossLM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomlosslatentmodel.hpp" line="245" column="26" bodyfile="ql/experimental/credit/randomlosslatentmodel.hpp" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a611a3aefd8a549d129b809b5e82193d4" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_random_loss_l_m" kindref="compound">RandomLossLM</ref>&lt; <ref refid="class_quant_lib_1_1_t_copula_policy" kindref="compound">TCopulaPolicy</ref> &gt;</type>
        <definition>typedef RandomLossLM&lt;TCopulaPolicy&gt; QuantLib::TRandomLossLM</definition>
        <argsstring></argsstring>
        <name>TRandomLossLM</name>
        <qualifiedname>QuantLib::TRandomLossLM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomlosslatentmodel.hpp" line="257" column="26" bodyfile="ql/experimental/credit/randomlosslatentmodel.hpp" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a5bc5263eab57750a1ee3eef461c66268" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_recursive_loss_model" kindref="compound">RecursiveLossModel</ref>&lt; <ref refid="struct_quant_lib_1_1_gaussian_copula_policy" kindref="compound">GaussianCopulaPolicy</ref> &gt;</type>
        <definition>typedef RecursiveLossModel&lt;GaussianCopulaPolicy&gt; QuantLib::RecursiveGaussLossModel</definition>
        <argsstring></argsstring>
        <name>RecursiveGaussLossModel</name>
        <qualifiedname>QuantLib::RecursiveGaussLossModel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recursivelossmodel.hpp" line="126" column="32" bodyfile="ql/experimental/credit/recursivelossmodel.hpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a3c7d3be9f1ddd0fb182bb63919457e5a" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_spot_recovery_latent_model" kindref="compound">SpotRecoveryLatentModel</ref>&lt; <ref refid="struct_quant_lib_1_1_gaussian_copula_policy" kindref="compound">GaussianCopulaPolicy</ref> &gt;</type>
        <definition>typedef SpotRecoveryLatentModel&lt;GaussianCopulaPolicy&gt; QuantLib::GaussianSpotLossLM</definition>
        <argsstring></argsstring>
        <name>GaussianSpotLossLM</name>
        <qualifiedname>QuantLib::GaussianSpotLossLM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/spotlosslatentmodel.hpp" line="130" column="37" bodyfile="ql/experimental/credit/spotlosslatentmodel.hpp" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1acf2fbb118b9b81da2834716ebd773d13" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_spot_recovery_latent_model" kindref="compound">SpotRecoveryLatentModel</ref>&lt; <ref refid="class_quant_lib_1_1_t_copula_policy" kindref="compound">TCopulaPolicy</ref> &gt;</type>
        <definition>typedef SpotRecoveryLatentModel&lt;TCopulaPolicy&gt; QuantLib::TSpotLossLM</definition>
        <argsstring></argsstring>
        <name>TSpotLossLM</name>
        <qualifiedname>QuantLib::TSpotLossLM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/spotlosslatentmodel.hpp" line="131" column="37" bodyfile="ql/experimental/credit/spotlosslatentmodel.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a9e262f2465e331c8a43f5d2bdf1d3652" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_hybrid_simulated_annealing" kindref="compound">HybridSimulatedAnnealing</ref>&lt; <ref refid="class_quant_lib_1_1_sampler_gaussian" kindref="compound">SamplerGaussian</ref>, <ref refid="class_quant_lib_1_1_probability_boltzmann_downhill" kindref="compound">ProbabilityBoltzmannDownhill</ref>, <ref refid="class_quant_lib_1_1_temperature_exponential" kindref="compound">TemperatureExponential</ref>, <ref refid="struct_quant_lib_1_1_reannealing_trivial" kindref="compound">ReannealingTrivial</ref> &gt;</type>
        <definition>typedef HybridSimulatedAnnealing&lt;SamplerGaussian, ProbabilityBoltzmannDownhill, TemperatureExponential, ReannealingTrivial&gt; QuantLib::GaussianSimulatedAnnealing</definition>
        <argsstring></argsstring>
        <name>GaussianSimulatedAnnealing</name>
        <qualifiedname>QuantLib::GaussianSimulatedAnnealing</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealing.hpp" line="228" column="38" bodyfile="ql/experimental/math/hybridsimulatedannealing.hpp" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a21d9e0541cccd9a38a6cb36f75dac9f1" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_hybrid_simulated_annealing" kindref="compound">HybridSimulatedAnnealing</ref>&lt; <ref refid="class_quant_lib_1_1_sampler_log_normal" kindref="compound">SamplerLogNormal</ref>, <ref refid="class_quant_lib_1_1_probability_boltzmann_downhill" kindref="compound">ProbabilityBoltzmannDownhill</ref>, <ref refid="class_quant_lib_1_1_temperature_exponential" kindref="compound">TemperatureExponential</ref>, <ref refid="struct_quant_lib_1_1_reannealing_trivial" kindref="compound">ReannealingTrivial</ref> &gt;</type>
        <definition>typedef HybridSimulatedAnnealing&lt;SamplerLogNormal, ProbabilityBoltzmannDownhill, TemperatureExponential, ReannealingTrivial&gt; QuantLib::LogNormalSimulatedAnnealing</definition>
        <argsstring></argsstring>
        <name>LogNormalSimulatedAnnealing</name>
        <qualifiedname>QuantLib::LogNormalSimulatedAnnealing</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealing.hpp" line="229" column="38" bodyfile="ql/experimental/math/hybridsimulatedannealing.hpp" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1ac0d3db12d57782d3b390eaee136d9c3d" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_hybrid_simulated_annealing" kindref="compound">HybridSimulatedAnnealing</ref>&lt; <ref refid="class_quant_lib_1_1_sampler_mirror_gaussian" kindref="compound">SamplerMirrorGaussian</ref>, <ref refid="class_quant_lib_1_1_probability_boltzmann_downhill" kindref="compound">ProbabilityBoltzmannDownhill</ref>, <ref refid="class_quant_lib_1_1_temperature_exponential" kindref="compound">TemperatureExponential</ref>, <ref refid="struct_quant_lib_1_1_reannealing_trivial" kindref="compound">ReannealingTrivial</ref> &gt;</type>
        <definition>typedef HybridSimulatedAnnealing&lt;SamplerMirrorGaussian, ProbabilityBoltzmannDownhill, TemperatureExponential, ReannealingTrivial&gt; QuantLib::MirrorGaussianSimulatedAnnealing</definition>
        <argsstring></argsstring>
        <name>MirrorGaussianSimulatedAnnealing</name>
        <qualifiedname>QuantLib::MirrorGaussianSimulatedAnnealing</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealing.hpp" line="230" column="38" bodyfile="ql/experimental/math/hybridsimulatedannealing.hpp" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a301b1bc8d0e9fbb22fd5e71628f81c7d" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_hybrid_simulated_annealing" kindref="compound">HybridSimulatedAnnealing</ref>&lt; <ref refid="class_quant_lib_1_1_sampler_gaussian" kindref="compound">SamplerGaussian</ref>, <ref refid="class_quant_lib_1_1_probability_boltzmann_downhill" kindref="compound">ProbabilityBoltzmannDownhill</ref>, <ref refid="class_quant_lib_1_1_temperature_exponential" kindref="compound">TemperatureExponential</ref>, <ref refid="class_quant_lib_1_1_reannealing_finite_differences" kindref="compound">ReannealingFiniteDifferences</ref> &gt;</type>
        <definition>typedef HybridSimulatedAnnealing&lt;SamplerGaussian, ProbabilityBoltzmannDownhill, TemperatureExponential, ReannealingFiniteDifferences&gt; QuantLib::GaussianSimulatedReAnnealing</definition>
        <argsstring></argsstring>
        <name>GaussianSimulatedReAnnealing</name>
        <qualifiedname>QuantLib::GaussianSimulatedReAnnealing</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealing.hpp" line="231" column="38" bodyfile="ql/experimental/math/hybridsimulatedannealing.hpp" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a7230c484a3b1a940cd272509723fd17b" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_hybrid_simulated_annealing" kindref="compound">HybridSimulatedAnnealing</ref>&lt; <ref refid="class_quant_lib_1_1_sampler_very_fast_annealing" kindref="compound">SamplerVeryFastAnnealing</ref>, <ref refid="class_quant_lib_1_1_probability_boltzmann_downhill" kindref="compound">ProbabilityBoltzmannDownhill</ref>, <ref refid="class_quant_lib_1_1_temperature_very_fast_annealing" kindref="compound">TemperatureVeryFastAnnealing</ref>, <ref refid="struct_quant_lib_1_1_reannealing_trivial" kindref="compound">ReannealingTrivial</ref> &gt;</type>
        <definition>typedef HybridSimulatedAnnealing&lt;SamplerVeryFastAnnealing, ProbabilityBoltzmannDownhill, TemperatureVeryFastAnnealing, ReannealingTrivial&gt; QuantLib::VeryFastSimulatedAnnealing</definition>
        <argsstring></argsstring>
        <name>VeryFastSimulatedAnnealing</name>
        <qualifiedname>QuantLib::VeryFastSimulatedAnnealing</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealing.hpp" line="232" column="38" bodyfile="ql/experimental/math/hybridsimulatedannealing.hpp" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a32a81d3f20f061dca9c569fbbe937e54" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_hybrid_simulated_annealing" kindref="compound">HybridSimulatedAnnealing</ref>&lt; <ref refid="class_quant_lib_1_1_sampler_very_fast_annealing" kindref="compound">SamplerVeryFastAnnealing</ref>, <ref refid="class_quant_lib_1_1_probability_boltzmann_downhill" kindref="compound">ProbabilityBoltzmannDownhill</ref>, <ref refid="class_quant_lib_1_1_temperature_very_fast_annealing" kindref="compound">TemperatureVeryFastAnnealing</ref>, <ref refid="class_quant_lib_1_1_reannealing_finite_differences" kindref="compound">ReannealingFiniteDifferences</ref> &gt;</type>
        <definition>typedef HybridSimulatedAnnealing&lt;SamplerVeryFastAnnealing, ProbabilityBoltzmannDownhill, TemperatureVeryFastAnnealing, ReannealingFiniteDifferences&gt; QuantLib::VeryFastSimulatedReAnnealing</definition>
        <argsstring></argsstring>
        <name>VeryFastSimulatedReAnnealing</name>
        <qualifiedname>QuantLib::VeryFastSimulatedReAnnealing</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealing.hpp" line="233" column="38" bodyfile="ql/experimental/math/hybridsimulatedannealing.hpp" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1ae7475ef43be26190066abd827a4262ef" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_xabr_swaption_volatility_cube" kindref="compound">XabrSwaptionVolatilityCube</ref>&lt; <ref refid="struct_quant_lib_1_1_swaption_vol_cube_no_arb_sabr_model" kindref="compound">SwaptionVolCubeNoArbSabrModel</ref> &gt;</type>
        <definition>typedef XabrSwaptionVolatilityCube&lt;SwaptionVolCubeNoArbSabrModel&gt; QuantLib::NoArbSabrSwaptionVolatilityCube</definition>
        <argsstring></argsstring>
        <name>NoArbSabrSwaptionVolatilityCube</name>
        <qualifiedname>QuantLib::NoArbSabrSwaptionVolatilityCube</qualifiedname>
        <briefdescription>
<para>no-arbitrage <ref refid="class_quant_lib_1_1_s_a_b_r" kindref="compound">SABR</ref> volatility cube for swaptions </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/noarbsabrswaptionvolatilitycube.hpp" line="40" column="40" bodyfile="ql/experimental/volatility/noarbsabrswaptionvolatilitycube.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a3a5807953ebd18abd721601217d3a62e" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_euribor1_w" kindref="compound">Euribor1W</ref></type>
        <definition>typedef Euribor1W QuantLib::EuriborSW</definition>
        <argsstring></argsstring>
        <name>EuriborSW</name>
        <qualifiedname>QuantLib::EuriborSW</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000050"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Renamed to <ref refid="class_quant_lib_1_1_euribor1_w" kindref="compound">Euribor1W</ref>. Deprecated in version 1.35. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/ibor/euribor.hpp" line="70" column="23" bodyfile="ql/indexes/ibor/euribor.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1ade79846470e2b5223aafa57b045624ac" prot="public" static="no">
        <type>std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_callability" kindref="compound">Callability</ref> &gt; &gt;</type>
        <definition>typedef std::vector&lt;ext::shared_ptr&lt;Callability&gt; &gt; QuantLib::CallabilitySchedule</definition>
        <argsstring></argsstring>
        <name>CallabilitySchedule</name>
        <qualifiedname>QuantLib::CallabilitySchedule</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/callabilityschedule.hpp" line="73" column="25" bodyfile="ql/instruments/callabilityschedule.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a0a379fde0de6fd228a3365e3c519fe68" prot="public" static="no">
        <type>std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_dividend" kindref="compound">Dividend</ref> &gt; &gt;</type>
        <definition>typedef std::vector&lt;ext::shared_ptr&lt;Dividend&gt; &gt; QuantLib::DividendSchedule</definition>
        <argsstring></argsstring>
        <name>DividendSchedule</name>
        <qualifiedname>QuantLib::DividendSchedule</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/dividendschedule.hpp" line="33" column="25" bodyfile="ql/instruments/dividendschedule.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a267ca1390f600848cd9bea25f3d468ec" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_bivariate_cumulative_normal_distribution_we04_d_p" kindref="compound">BivariateCumulativeNormalDistributionWe04DP</ref></type>
        <definition>typedef BivariateCumulativeNormalDistributionWe04DP QuantLib::BivariateCumulativeNormalDistribution</definition>
        <argsstring></argsstring>
        <name>BivariateCumulativeNormalDistribution</name>
        <qualifiedname>QuantLib::BivariateCumulativeNormalDistribution</qualifiedname>
        <briefdescription>
<para>default bivariate implementation </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/distributions/bivariatenormaldistribution.hpp" line="104" column="41" bodyfile="ql/math/distributions/bivariatenormaldistribution.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a06fe4de3ddef540084a4102898ef08dc" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_normal_distribution" kindref="compound">NormalDistribution</ref></type>
        <definition>typedef NormalDistribution QuantLib::GaussianDistribution</definition>
        <argsstring></argsstring>
        <name>GaussianDistribution</name>
        <qualifiedname>QuantLib::GaussianDistribution</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/distributions/normaldistribution.hpp" line="56" column="32" bodyfile="ql/math/distributions/normaldistribution.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1aa9e247bbdf728a8239a22b609bef9491" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_inverse_cumulative_normal" kindref="compound">InverseCumulativeNormal</ref></type>
        <definition>typedef InverseCumulativeNormal QuantLib::InvCumulativeNormalDistribution</definition>
        <argsstring></argsstring>
        <name>InvCumulativeNormalDistribution</name>
        <qualifiedname>QuantLib::InvCumulativeNormalDistribution</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/distributions/normaldistribution.hpp" line="176" column="37" bodyfile="ql/math/distributions/normaldistribution.hpp" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a64877f814000faa1279a1f2be0e10fd0" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1detail_1_1_gaussian_quadrature_integrator" kindref="compound">detail::GaussianQuadratureIntegrator</ref>&lt; <ref refid="class_quant_lib_1_1_gauss_legendre_integration" kindref="compound">GaussLegendreIntegration</ref> &gt;</type>
        <definition>typedef detail::GaussianQuadratureIntegrator&lt;GaussLegendreIntegration&gt; QuantLib::GaussLegendreIntegrator</definition>
        <argsstring></argsstring>
        <name>GaussLegendreIntegrator</name>
        <qualifiedname>QuantLib::GaussLegendreIntegrator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/integrals/gaussianquadratures.hpp" line="246" column="9" bodyfile="ql/math/integrals/gaussianquadratures.hpp" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a4bf483c03def8d3d3c1713b7b33d119c" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1detail_1_1_gaussian_quadrature_integrator" kindref="compound">detail::GaussianQuadratureIntegrator</ref>&lt; <ref refid="class_quant_lib_1_1_gauss_chebyshev_integration" kindref="compound">GaussChebyshevIntegration</ref> &gt;</type>
        <definition>typedef detail::GaussianQuadratureIntegrator&lt;GaussChebyshevIntegration&gt; QuantLib::GaussChebyshevIntegrator</definition>
        <argsstring></argsstring>
        <name>GaussChebyshevIntegrator</name>
        <qualifiedname>QuantLib::GaussChebyshevIntegrator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/integrals/gaussianquadratures.hpp" line="249" column="9" bodyfile="ql/math/integrals/gaussianquadratures.hpp" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a595fd4c0947b2bebaa1d1e3906ae827c" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1detail_1_1_gaussian_quadrature_integrator" kindref="compound">detail::GaussianQuadratureIntegrator</ref>&lt; <ref refid="class_quant_lib_1_1_gauss_chebyshev2nd_integration" kindref="compound">GaussChebyshev2ndIntegration</ref> &gt;</type>
        <definition>typedef detail::GaussianQuadratureIntegrator&lt;GaussChebyshev2ndIntegration&gt; QuantLib::GaussChebyshev2ndIntegrator</definition>
        <argsstring></argsstring>
        <name>GaussChebyshev2ndIntegrator</name>
        <qualifiedname>QuantLib::GaussChebyshev2ndIntegrator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/integrals/gaussianquadratures.hpp" line="252" column="9" bodyfile="ql/math/integrals/gaussianquadratures.hpp" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a8ac32a4652e23e52b13e33dae6085bfe" prot="public" static="no">
        <type>detail::SplineGrid</type>
        <definition>typedef detail::SplineGrid QuantLib::SplineGrid</definition>
        <argsstring></argsstring>
        <name>SplineGrid</name>
        <qualifiedname>QuantLib::SplineGrid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/multicubicspline.hpp" line="452" column="32" bodyfile="ql/math/interpolations/multicubicspline.hpp" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a92b8d18d2ff98d5c92d103939bba4a52" prot="public" static="no">
        <type>boost::numeric::ublas::compressed_matrix&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>typedef boost::numeric::ublas::compressed_matrix&lt;Real&gt; QuantLib::SparseMatrix</definition>
        <argsstring></argsstring>
        <name>SparseMatrix</name>
        <qualifiedname>QuantLib::SparseMatrix</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/sparsematrix.hpp" line="48" column="54" bodyfile="ql/math/matrixutilities/sparsematrix.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a0ef628a05cb0d158091b5d3c80f3cb4f" prot="public" static="no">
        <type>boost::numeric::ublas::matrix_reference&lt; SparseMatrix &gt;</type>
        <definition>typedef boost::numeric::ublas::matrix_reference&lt;SparseMatrix&gt; QuantLib::SparseMatrixReference</definition>
        <argsstring></argsstring>
        <name>SparseMatrixReference</name>
        <qualifiedname>QuantLib::SparseMatrixReference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/sparsematrix.hpp" line="49" column="53" bodyfile="ql/math/matrixutilities/sparsematrix.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1ae3360c28ec23b1650c814c2ab76c1e75" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_ranlux64_uniform_rng" kindref="compound">Ranlux64UniformRng</ref>&lt; 223, 24 &gt;</type>
        <definition>typedef Ranlux64UniformRng&lt;223, 24&gt; QuantLib::Ranlux3UniformRng</definition>
        <argsstring></argsstring>
        <name>Ranlux3UniformRng</name>
        <qualifiedname>QuantLib::Ranlux3UniformRng</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/ranluxuniformrng.hpp" line="63" column="32" bodyfile="ql/math/randomnumbers/ranluxuniformrng.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a71702d8dd291aab5ec6afbfbee2215bd" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_ranlux64_uniform_rng" kindref="compound">Ranlux64UniformRng</ref>&lt; 389, 24 &gt;</type>
        <definition>typedef Ranlux64UniformRng&lt;389, 24&gt; QuantLib::Ranlux4UniformRng</definition>
        <argsstring></argsstring>
        <name>Ranlux4UniformRng</name>
        <qualifiedname>QuantLib::Ranlux4UniformRng</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/ranluxuniformrng.hpp" line="64" column="32" bodyfile="ql/math/randomnumbers/ranluxuniformrng.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a68b9aaf5f0c17983506b1a1db8575ab0" prot="public" static="no">
        <type><ref refid="struct_quant_lib_1_1_generic_pseudo_random" kindref="compound">GenericPseudoRandom</ref>&lt; <ref refid="class_quant_lib_1_1_mersenne_twister_uniform_rng" kindref="compound">MersenneTwisterUniformRng</ref>, <ref refid="class_quant_lib_1_1_inverse_cumulative_normal" kindref="compound">InverseCumulativeNormal</ref> &gt;</type>
        <definition>typedef GenericPseudoRandom&lt;MersenneTwisterUniformRng, InverseCumulativeNormal&gt; QuantLib::PseudoRandom</definition>
        <argsstring></argsstring>
        <name>PseudoRandom</name>
        <qualifiedname>QuantLib::PseudoRandom</qualifiedname>
        <briefdescription>
<para>default traits for pseudo-random number generation </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="test_1_test000061"><xreftitle>Test</xreftitle><xrefdescription><para>a sequence generator is generated and tested by comparing samples against known good values. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/rngtraits.hpp" line="71" column="2" bodyfile="ql/math/randomnumbers/rngtraits.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a6dfe9a28285aa1a5dc46060795bf1e57" prot="public" static="no">
        <type><ref refid="struct_quant_lib_1_1_generic_pseudo_random" kindref="compound">GenericPseudoRandom</ref>&lt; <ref refid="class_quant_lib_1_1_mersenne_twister_uniform_rng" kindref="compound">MersenneTwisterUniformRng</ref>, <ref refid="class_quant_lib_1_1_inverse_cumulative_poisson" kindref="compound">InverseCumulativePoisson</ref> &gt;</type>
        <definition>typedef GenericPseudoRandom&lt;MersenneTwisterUniformRng, InverseCumulativePoisson&gt; QuantLib::PoissonPseudoRandom</definition>
        <argsstring></argsstring>
        <name>PoissonPseudoRandom</name>
        <qualifiedname>QuantLib::PoissonPseudoRandom</qualifiedname>
        <briefdescription>
<para>traits for Poisson-distributed pseudo-random number generation </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="test_1_test000062"><xreftitle>Test</xreftitle><xrefdescription><para>sequence generators are generated and tested by comparing samples against known good values. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/rngtraits.hpp" line="78" column="2" bodyfile="ql/math/randomnumbers/rngtraits.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a7de4b84119ce4a27b0f10ac85940ae75" prot="public" static="no">
        <type><ref refid="struct_quant_lib_1_1_generic_low_discrepancy" kindref="compound">GenericLowDiscrepancy</ref>&lt; <ref refid="class_quant_lib_1_1_sobol_rsg" kindref="compound">SobolRsg</ref>, <ref refid="class_quant_lib_1_1_inverse_cumulative_normal" kindref="compound">InverseCumulativeNormal</ref> &gt;</type>
        <definition>typedef GenericLowDiscrepancy&lt;SobolRsg, InverseCumulativeNormal&gt; QuantLib::LowDiscrepancy</definition>
        <argsstring></argsstring>
        <name>LowDiscrepancy</name>
        <qualifiedname>QuantLib::LowDiscrepancy</qualifiedname>
        <briefdescription>
<para>default traits for low-discrepancy sequence generation </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/rngtraits.hpp" line="105" column="2" bodyfile="ql/math/randomnumbers/rngtraits.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a06a18f686a13437ebb4d779bb532ba52" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_generic_gaussian_statistics" kindref="compound">GenericGaussianStatistics</ref>&lt; <ref refid="class_quant_lib_1_1_general_statistics" kindref="compound">GeneralStatistics</ref> &gt;</type>
        <definition>typedef GenericGaussianStatistics&lt;GeneralStatistics&gt; QuantLib::GaussianStatistics</definition>
        <argsstring></argsstring>
        <name>GaussianStatistics</name>
        <qualifiedname>QuantLib::GaussianStatistics</qualifiedname>
        <briefdescription>
<para>default gaussian statistic tool </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/gaussianstatistics.hpp" line="110" column="39" bodyfile="ql/math/statistics/gaussianstatistics.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1ac53b76df55c7fbcc29b2636c8c311662" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_generic_risk_statistics" kindref="compound">GenericRiskStatistics</ref>&lt; <ref refid="namespace_quant_lib_1a06a18f686a13437ebb4d779bb532ba52" kindref="member">GaussianStatistics</ref> &gt;</type>
        <definition>typedef GenericRiskStatistics&lt;GaussianStatistics&gt; QuantLib::RiskStatistics</definition>
        <argsstring></argsstring>
        <name>RiskStatistics</name>
        <qualifiedname>QuantLib::RiskStatistics</qualifiedname>
        <briefdescription>
<para>default risk measures tool </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="test_1_test000077"><xreftitle>Test</xreftitle><xrefdescription><para>the correctness of the returned values is tested by checking them against numerical calculations. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/riskstatistics.hpp" line="123" column="35" bodyfile="ql/math/statistics/riskstatistics.hpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a7563e2b2e11d54d5a55a58ae124c3349" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_generic_sequence_statistics" kindref="compound">GenericSequenceStatistics</ref>&lt; <ref refid="namespace_quant_lib_1ae2e788da35d2b866040a03b96227ee6e" kindref="member">Statistics</ref> &gt;</type>
        <definition>typedef GenericSequenceStatistics&lt;Statistics&gt; QuantLib::SequenceStatistics</definition>
        <argsstring></argsstring>
        <name>SequenceStatistics</name>
        <qualifiedname>QuantLib::SequenceStatistics</qualifiedname>
        <briefdescription>
<para>default multi-dimensional statistics tool </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="test_1_test000079"><xreftitle>Test</xreftitle><xrefdescription><para>the correctness of the returned values is tested by checking them against numerical calculations. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="154" column="39" bodyfile="ql/math/statistics/sequencestatistics.hpp" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1ab0bbd397b51f370a9ca8b7d383ba1866" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_generic_sequence_statistics" kindref="compound">GenericSequenceStatistics</ref>&lt; <ref refid="class_quant_lib_1_1_incremental_statistics" kindref="compound">IncrementalStatistics</ref> &gt;</type>
        <definition>typedef GenericSequenceStatistics&lt;IncrementalStatistics&gt; QuantLib::SequenceStatisticsInc</definition>
        <argsstring></argsstring>
        <name>SequenceStatisticsInc</name>
        <qualifiedname>QuantLib::SequenceStatisticsInc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="155" column="39" bodyfile="ql/math/statistics/sequencestatistics.hpp" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1ae2e788da35d2b866040a03b96227ee6e" prot="public" static="no">
        <type><ref refid="namespace_quant_lib_1ac53b76df55c7fbcc29b2636c8c311662" kindref="member">RiskStatistics</ref></type>
        <definition>typedef RiskStatistics QuantLib::Statistics</definition>
        <argsstring></argsstring>
        <name>Statistics</name>
        <qualifiedname>QuantLib::Statistics</qualifiedname>
        <briefdescription>
<para>default statistics tool </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="test_1_test000080"><xreftitle>Test</xreftitle><xrefdescription><para>the correctness of the returned values is tested by checking them against numerical calculations. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/statistics.hpp" line="35" column="28" bodyfile="ql/math/statistics/statistics.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1af064f77bc69893c110a3797657b02c42" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_operator_traits" kindref="compound">OperatorTraits</ref>&lt; <ref refid="class_quant_lib_1_1_fdm_linear_op" kindref="compound">FdmLinearOp</ref> &gt;::bc_set</type>
        <definition>typedef OperatorTraits&lt;FdmLinearOp&gt;::bc_set QuantLib::FdmBoundaryConditionSet</definition>
        <argsstring></argsstring>
        <name>FdmBoundaryConditionSet</name>
        <qualifiedname>QuantLib::FdmBoundaryConditionSet</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/utilities/fdmboundaryconditionset.hpp" line="32" column="37" bodyfile="ql/methods/finitedifferences/utilities/fdmboundaryconditionset.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a3c5925e65e7246d241aa936fc17de739" prot="public" static="no">
        <type><ref refid="struct_quant_lib_1_1_market_model_multi_product_1_1_cash_flow" kindref="compound">MarketModelMultiProduct::CashFlow</ref></type>
        <definition>typedef MarketModelMultiProduct::CashFlow QuantLib::CashFlow</definition>
        <argsstring></argsstring>
        <name>CashFlow</name>
        <qualifiedname>QuantLib::CashFlow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/callability/collectnodedata.cpp" line="34" column="47" bodyfile="ql/models/marketmodels/callability/collectnodedata.cpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a443cae7b36fc003f04d81b88fa6c095b" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_bootstrap_helper" kindref="compound">BootstrapHelper</ref>&lt; <ref refid="class_quant_lib_1_1_default_probability_term_structure" kindref="compound">DefaultProbabilityTermStructure</ref> &gt;</type>
        <definition>typedef BootstrapHelper&lt;DefaultProbabilityTermStructure&gt; QuantLib::DefaultProbabilityHelper</definition>
        <argsstring></argsstring>
        <name>DefaultProbabilityHelper</name>
        <qualifiedname>QuantLib::DefaultProbabilityHelper</qualifiedname>
        <briefdescription>
<para>alias for default-probability bootstrap helpers </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/defaultprobabilityhelpers.hpp" line="43" column="54" bodyfile="ql/termstructures/credit/defaultprobabilityhelpers.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a12ac5e092ff03f25b3e8db98c117d023" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_relative_date_bootstrap_helper" kindref="compound">RelativeDateBootstrapHelper</ref>&lt; <ref refid="class_quant_lib_1_1_default_probability_term_structure" kindref="compound">DefaultProbabilityTermStructure</ref> &gt;</type>
        <definition>typedef RelativeDateBootstrapHelper&lt;DefaultProbabilityTermStructure&gt; QuantLib::RelativeDateDefaultProbabilityHelper</definition>
        <argsstring></argsstring>
        <name>RelativeDateDefaultProbabilityHelper</name>
        <qualifiedname>QuantLib::RelativeDateDefaultProbabilityHelper</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/defaultprobabilityhelpers.hpp" line="45" column="42" bodyfile="ql/termstructures/credit/defaultprobabilityhelpers.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1aa80eded193c5cfb2d794d21c96eadcaa" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_interpolated_yo_y_inflation_curve" kindref="compound">InterpolatedYoYInflationCurve</ref>&lt; <ref refid="class_quant_lib_1_1_linear" kindref="compound">Linear</ref> &gt;</type>
        <definition>typedef InterpolatedYoYInflationCurve&lt;Linear&gt; QuantLib::YoYInflationCurve</definition>
        <argsstring></argsstring>
        <name>YoYInflationCurve</name>
        <qualifiedname>QuantLib::YoYInflationCurve</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/interpolatedyoyinflationcurve.hpp" line="145" column="43" bodyfile="ql/termstructures/inflation/interpolatedyoyinflationcurve.hpp" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1ace51daabe6143960c8643bc6ae6cff35" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_interpolated_zero_inflation_curve" kindref="compound">InterpolatedZeroInflationCurve</ref>&lt; <ref refid="class_quant_lib_1_1_linear" kindref="compound">Linear</ref> &gt;</type>
        <definition>typedef InterpolatedZeroInflationCurve&lt;Linear&gt; QuantLib::ZeroInflationCurve</definition>
        <argsstring></argsstring>
        <name>ZeroInflationCurve</name>
        <qualifiedname>QuantLib::ZeroInflationCurve</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/interpolatedzeroinflationcurve.hpp" line="112" column="44" bodyfile="ql/termstructures/inflation/interpolatedzeroinflationcurve.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a8887e3f28942e045870489ae2587331e" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_xabr_swaption_volatility_cube" kindref="compound">XabrSwaptionVolatilityCube</ref>&lt; <ref refid="struct_quant_lib_1_1_swaption_vol_cube_sabr_model" kindref="compound">SwaptionVolCubeSabrModel</ref> &gt;</type>
        <definition>typedef XabrSwaptionVolatilityCube&lt;SwaptionVolCubeSabrModel&gt; QuantLib::SabrSwaptionVolatilityCube</definition>
        <argsstring></argsstring>
        <name>SabrSwaptionVolatilityCube</name>
        <qualifiedname>QuantLib::SabrSwaptionVolatilityCube</qualifiedname>
        <briefdescription>
<para><ref refid="class_quant_lib_1_1_s_a_b_r" kindref="compound">SABR</ref> volatility cube for swaptions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/swaption/sabrswaptionvolatilitycube.hpp" line="1176" column="40" bodyfile="ql/termstructures/volatility/swaption/sabrswaptionvolatilitycube.hpp" bodystart="1176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a4e84f831efa41ec8cfff0f14c823005e" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_interpolated_discount_curve" kindref="compound">InterpolatedDiscountCurve</ref>&lt; <ref refid="class_quant_lib_1_1_log_linear" kindref="compound">LogLinear</ref> &gt;</type>
        <definition>typedef InterpolatedDiscountCurve&lt;LogLinear&gt; QuantLib::DiscountCurve</definition>
        <argsstring></argsstring>
        <name>DiscountCurve</name>
        <qualifiedname>QuantLib::DiscountCurve</qualifiedname>
        <briefdescription>
<para>Term structure based on log-linear interpolation of discount factors. </para>
        </briefdescription>
        <detaileddescription>
<para>Log-linear interpolation guarantees piecewise-constant forward rates. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/yield/discountcurve.hpp" line="110" column="39" bodyfile="ql/termstructures/yield/discountcurve.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a74a3973a2b54e7d2590033675defa7cd" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_interpolated_forward_curve" kindref="compound">InterpolatedForwardCurve</ref>&lt; <ref refid="class_quant_lib_1_1_backward_flat" kindref="compound">BackwardFlat</ref> &gt;</type>
        <definition>typedef InterpolatedForwardCurve&lt;BackwardFlat&gt; QuantLib::ForwardCurve</definition>
        <argsstring></argsstring>
        <name>ForwardCurve</name>
        <qualifiedname>QuantLib::ForwardCurve</qualifiedname>
        <briefdescription>
<para>Term structure based on flat interpolation of forward rates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/yield/forwardcurve.hpp" line="107" column="38" bodyfile="ql/termstructures/yield/forwardcurve.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1adb083627d0ff05c0ba38437294605a38" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_interpolated_piecewise_zero_spreaded_term_structure" kindref="compound">InterpolatedPiecewiseZeroSpreadedTermStructure</ref>&lt; <ref refid="class_quant_lib_1_1_linear" kindref="compound">Linear</ref> &gt;</type>
        <definition>typedef InterpolatedPiecewiseZeroSpreadedTermStructure&lt;Linear&gt; QuantLib::PiecewiseZeroSpreadedTermStructure</definition>
        <argsstring></argsstring>
        <name>PiecewiseZeroSpreadedTermStructure</name>
        <qualifiedname>QuantLib::PiecewiseZeroSpreadedTermStructure</qualifiedname>
        <briefdescription>
<para>Piecewise zero-spreaded yield curve based on linear interpolation of zero rates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/yield/piecewisezerospreadedtermstructure.hpp" line="89" column="60" bodyfile="ql/termstructures/yield/piecewisezerospreadedtermstructure.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a6dcb4b618c433628f03c5163ddfaddd5" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_bootstrap_helper" kindref="compound">BootstrapHelper</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt;</type>
        <definition>typedef BootstrapHelper&lt;YieldTermStructure&gt; QuantLib::RateHelper</definition>
        <argsstring></argsstring>
        <name>RateHelper</name>
        <qualifiedname>QuantLib::RateHelper</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/yield/ratehelpers.hpp" line="46" column="29" bodyfile="ql/termstructures/yield/ratehelpers.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a26120dcb0f34c34a02cc28274729708d" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_relative_date_bootstrap_helper" kindref="compound">RelativeDateBootstrapHelper</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt;</type>
        <definition>typedef RelativeDateBootstrapHelper&lt;YieldTermStructure&gt; QuantLib::RelativeDateRateHelper</definition>
        <argsstring></argsstring>
        <name>RelativeDateRateHelper</name>
        <qualifiedname>QuantLib::RelativeDateRateHelper</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/yield/ratehelpers.hpp" line="48" column="57" bodyfile="ql/termstructures/yield/ratehelpers.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1aba455dd6323746ed70a64eb4fa65c276" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_interpolated_zero_curve" kindref="compound">InterpolatedZeroCurve</ref>&lt; <ref refid="class_quant_lib_1_1_linear" kindref="compound">Linear</ref> &gt;</type>
        <definition>typedef InterpolatedZeroCurve&lt;Linear&gt; QuantLib::ZeroCurve</definition>
        <argsstring></argsstring>
        <name>ZeroCurve</name>
        <qualifiedname>QuantLib::ZeroCurve</qualifiedname>
        <briefdescription>
<para>Term structure based on linear interpolation of zero yields. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/yield/zerocurve.hpp" line="113" column="35" bodyfile="ql/termstructures/yield/zerocurve.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a7354a4ac9189352870cbb0cb998e0bd4" prot="public" static="no">
        <type><ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
        <definition>typedef Integer QuantLib::Day</definition>
        <argsstring></argsstring>
        <name>Day</name>
        <qualifiedname>QuantLib::Day</qualifiedname>
        <briefdescription>
<para><ref refid="namespace_quant_lib_1a7354a4ac9189352870cbb0cb998e0bd4" kindref="member">Day</ref> number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="53" column="21" bodyfile="ql/time/date.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a5dcda5470aff130981ac30f25d4244e7" prot="public" static="no">
        <type><ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
        <definition>typedef Integer QuantLib::Year</definition>
        <argsstring></argsstring>
        <name>Year</name>
        <qualifiedname>QuantLib::Year</qualifiedname>
        <briefdescription>
<para><ref refid="namespace_quant_lib_1a5dcda5470aff130981ac30f25d4244e7" kindref="member">Year</ref> number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="87" column="21" bodyfile="ql/time/date.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" prot="public" static="no">
        <type>QL_INTEGER</type>
        <definition>typedef QL_INTEGER QuantLib::Integer</definition>
        <argsstring></argsstring>
        <name>Integer</name>
        <qualifiedname>QuantLib::Integer</qualifiedname>
        <briefdescription>
<para>integer number </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="35" column="24" bodyfile="ql/types.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a8ee2a478658b664ea4ad96babd0ca719" prot="public" static="no">
        <type>QL_BIG_INTEGER</type>
        <definition>typedef QL_BIG_INTEGER QuantLib::BigInteger</definition>
        <argsstring></argsstring>
        <name>BigInteger</name>
        <qualifiedname>QuantLib::BigInteger</qualifiedname>
        <briefdescription>
<para>large integer number </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="39" column="28" bodyfile="ql/types.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" prot="public" static="no">
        <type>unsigned QL_INTEGER</type>
        <definition>typedef unsigned QL_INTEGER QuantLib::Natural</definition>
        <argsstring></argsstring>
        <name>Natural</name>
        <qualifiedname>QuantLib::Natural</qualifiedname>
        <briefdescription>
<para>positive integer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="43" column="33" bodyfile="ql/types.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" prot="public" static="no">
        <type>unsigned QL_BIG_INTEGER</type>
        <definition>typedef unsigned QL_BIG_INTEGER QuantLib::BigNatural</definition>
        <argsstring></argsstring>
        <name>BigNatural</name>
        <qualifiedname>QuantLib::BigNatural</qualifiedname>
        <briefdescription>
<para>large positive integer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="46" column="37" bodyfile="ql/types.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" prot="public" static="no">
        <type>QL_REAL</type>
        <definition>typedef QL_REAL QuantLib::Real</definition>
        <argsstring></argsstring>
        <name>Real</name>
        <qualifiedname>QuantLib::Real</qualifiedname>
        <briefdescription>
<para>real number </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="50" column="21" bodyfile="ql/types.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" prot="public" static="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>typedef Real QuantLib::Decimal</definition>
        <argsstring></argsstring>
        <name>Decimal</name>
        <qualifiedname>QuantLib::Decimal</qualifiedname>
        <briefdescription>
<para>decimal number </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="54" column="18" bodyfile="ql/types.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" prot="public" static="no">
        <type>std::size_t</type>
        <definition>typedef std::size_t QuantLib::Size</definition>
        <argsstring></argsstring>
        <name>Size</name>
        <qualifiedname>QuantLib::Size</qualifiedname>
        <briefdescription>
<para>size of a container </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="58" column="25" bodyfile="ql/types.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" prot="public" static="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>typedef Real QuantLib::Time</definition>
        <argsstring></argsstring>
        <name>Time</name>
        <qualifiedname>QuantLib::Time</qualifiedname>
        <briefdescription>
<para>continuous quantity with 1-year units </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="62" column="18" bodyfile="ql/types.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a05e8e288a4bdedfe5b4e16d8cec14f1c" prot="public" static="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>typedef Real QuantLib::DiscountFactor</definition>
        <argsstring></argsstring>
        <name>DiscountFactor</name>
        <qualifiedname>QuantLib::DiscountFactor</qualifiedname>
        <briefdescription>
<para>discount factor between dates </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="66" column="18" bodyfile="ql/types.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" prot="public" static="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>typedef Real QuantLib::Rate</definition>
        <argsstring></argsstring>
        <name>Rate</name>
        <qualifiedname>QuantLib::Rate</qualifiedname>
        <briefdescription>
<para>interest rates </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="70" column="18" bodyfile="ql/types.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" prot="public" static="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>typedef Real QuantLib::Spread</definition>
        <argsstring></argsstring>
        <name>Spread</name>
        <qualifiedname>QuantLib::Spread</qualifiedname>
        <briefdescription>
<para>spreads on interest rates </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="74" column="18" bodyfile="ql/types.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" prot="public" static="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>typedef Real QuantLib::Volatility</definition>
        <argsstring></argsstring>
        <name>Volatility</name>
        <qualifiedname>QuantLib::Volatility</qualifiedname>
        <briefdescription>
<para>volatility </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="78" column="18" bodyfile="ql/types.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" prot="public" static="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>typedef Real QuantLib::Probability</definition>
        <argsstring></argsstring>
        <name>Probability</name>
        <qualifiedname>QuantLib::Probability</qualifiedname>
        <briefdescription>
<para>probability </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/types.hpp" line="82" column="18" bodyfile="ql/types.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespace_quant_lib_1a82595a863f85625db7db2ddd413d8ff2" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
          <param>
            <type>class G</type>
          </param>
        </templateparamlist>
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::simEvent&lt; RandomLossLM&lt; C, G &gt; &gt;::rrGranular</definition>
        <argsstring></argsstring>
        <name>simEvent&lt; RandomLossLM&lt; C, G &gt; &gt;::rrGranular</name>
        <qualifiedname>QuantLib::rrGranular</qualifiedname>
        <initializer>= 1./256.</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomlosslatentmodel.hpp" line="64" column="18" bodyfile="ql/experimental/credit/randomlosslatentmodel.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_quant_lib_1ac5497abeb868c17a2880edf81c8bec12" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::x1[5]</definition>
        <argsstring>[5]</argsstring>
        <name>x1</name>
        <qualifiedname>QuantLib::x1</qualifiedname>
        <initializer>= {
        0.973906528517171720077964012084452,
        0.865063366688984510732096688423493,
        0.679409568299024406234327365114874,
        0.433395394129247190799265943165784,
        0.148874338981631210884826001129720
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/integrals/kronrodintegral.cpp" line="50" column="23" bodyfile="ql/math/integrals/kronrodintegral.cpp" bodystart="50" bodyend="56"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_quant_lib_1a2adb8bee729fba02b139b9a378c91cbc" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::w10[5]</definition>
        <argsstring>[5]</argsstring>
        <name>w10</name>
        <qualifiedname>QuantLib::w10</qualifiedname>
        <initializer>= {
        0.066671344308688137593568809893332,
        0.149451349150580593145776339657697,
        0.219086362515982043995534934228163,
        0.269266719309996355091226921569469,
        0.295524224714752870173892994651338
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/integrals/kronrodintegral.cpp" line="59" column="23" bodyfile="ql/math/integrals/kronrodintegral.cpp" bodystart="59" bodyend="65"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_quant_lib_1a69d53a718e2be6b797f41f174ab1b05e" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::x2[5]</definition>
        <argsstring>[5]</argsstring>
        <name>x2</name>
        <qualifiedname>QuantLib::x2</qualifiedname>
        <initializer>= {
        0.995657163025808080735527280689003,
        0.930157491355708226001207180059508,
        0.780817726586416897063717578345042,
        0.562757134668604683339000099272694,
        0.294392862701460198131126603103866
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/integrals/kronrodintegral.cpp" line="68" column="23" bodyfile="ql/math/integrals/kronrodintegral.cpp" bodystart="68" bodyend="74"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_quant_lib_1ad00178d849f6af7986fb24bb6bde6ac8" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::w21a[5]</definition>
        <argsstring>[5]</argsstring>
        <name>w21a</name>
        <qualifiedname>QuantLib::w21a</qualifiedname>
        <initializer>= {
        0.032558162307964727478818972459390,
        0.075039674810919952767043140916190,
        0.109387158802297641899210590325805,
        0.134709217311473325928054001771707,
        0.147739104901338491374841515972068
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/integrals/kronrodintegral.cpp" line="77" column="23" bodyfile="ql/math/integrals/kronrodintegral.cpp" bodystart="77" bodyend="83"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_quant_lib_1ad51efa7db3fadbd19f26f50605067097" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::w21b[6]</definition>
        <argsstring>[6]</argsstring>
        <name>w21b</name>
        <qualifiedname>QuantLib::w21b</qualifiedname>
        <initializer>= {
        0.011694638867371874278064396062192,
        0.054755896574351996031381300244580,
        0.093125454583697605535065465083366,
        0.123491976262065851077958109831074,
        0.142775938577060080797094273138717,
        0.149445554002916905664936468389821
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/integrals/kronrodintegral.cpp" line="86" column="23" bodyfile="ql/math/integrals/kronrodintegral.cpp" bodystart="86" bodyend="93"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_quant_lib_1aa3e0ff1fd0bb4406094e1c19ff77ef1f" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::x3[11]</definition>
        <argsstring>[11]</argsstring>
        <name>x3</name>
        <qualifiedname>QuantLib::x3</qualifiedname>
        <initializer>= {
        0.999333360901932081394099323919911,
        0.987433402908088869795961478381209,
        0.954807934814266299257919200290473,
        0.900148695748328293625099494069092,
        0.825198314983114150847066732588520,
        0.732148388989304982612354848755461,
        0.622847970537725238641159120344323,
        0.499479574071056499952214885499755,
        0.364901661346580768043989548502644,
        0.222254919776601296498260928066212,
        0.074650617461383322043914435796506
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/integrals/kronrodintegral.cpp" line="96" column="23" bodyfile="ql/math/integrals/kronrodintegral.cpp" bodystart="96" bodyend="108"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_quant_lib_1a99f59e40467f51aba83c2a3d1b3fa83c" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::w43a[10]</definition>
        <argsstring>[10]</argsstring>
        <name>w43a</name>
        <qualifiedname>QuantLib::w43a</qualifiedname>
        <initializer>= {
        0.016296734289666564924281974617663,
        0.037522876120869501461613795898115,
        0.054694902058255442147212685465005,
        0.067355414609478086075553166302174,
        0.073870199632393953432140695251367,
        0.005768556059769796184184327908655,
        0.027371890593248842081276069289151,
        0.046560826910428830743339154433824,
        0.061744995201442564496240336030883,
        0.071387267268693397768559114425516
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/integrals/kronrodintegral.cpp" line="111" column="23" bodyfile="ql/math/integrals/kronrodintegral.cpp" bodystart="111" bodyend="122"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_quant_lib_1adec97c6ea237027e9d0da9ada955e587" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::w43b[12]</definition>
        <argsstring>[12]</argsstring>
        <name>w43b</name>
        <qualifiedname>QuantLib::w43b</qualifiedname>
        <initializer>= {
        0.001844477640212414100389106552965,
        0.010798689585891651740465406741293,
        0.021895363867795428102523123075149,
        0.032597463975345689443882222526137,
        0.042163137935191811847627924327955,
        0.050741939600184577780189020092084,
        0.058379395542619248375475369330206,
        0.064746404951445885544689259517511,
        0.069566197912356484528633315038405,
        0.072824441471833208150939535192842,
        0.074507751014175118273571813842889,
        0.074722147517403005594425168280423
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/integrals/kronrodintegral.cpp" line="125" column="23" bodyfile="ql/math/integrals/kronrodintegral.cpp" bodystart="125" bodyend="138"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_quant_lib_1aaf35556a66458822b9ab99a5c8b59f98" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::x4[22]</definition>
        <argsstring>[22]</argsstring>
        <name>x4</name>
        <qualifiedname>QuantLib::x4</qualifiedname>
        <initializer>= {
        0.999902977262729234490529830591582,
        0.997989895986678745427496322365960,
        0.992175497860687222808523352251425,
        0.981358163572712773571916941623894,
        0.965057623858384619128284110607926,
        0.943167613133670596816416634507426,
        0.915806414685507209591826430720050,
        0.883221657771316501372117548744163,
        0.845710748462415666605902011504855,
        0.803557658035230982788739474980964,
        0.757005730685495558328942793432020,
        0.706273209787321819824094274740840,
        0.651589466501177922534422205016736,
        0.593223374057961088875273770349144,
        0.531493605970831932285268948562671,
        0.466763623042022844871966781659270,
        0.399424847859218804732101665817923,
        0.329874877106188288265053371824597,
        0.258503559202161551802280975429025,
        0.185695396568346652015917141167606,
        0.111842213179907468172398359241362,
        0.037352123394619870814998165437704
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/integrals/kronrodintegral.cpp" line="141" column="23" bodyfile="ql/math/integrals/kronrodintegral.cpp" bodystart="141" bodyend="164"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_quant_lib_1a6f2c7992d4eebe7dbc5dc45ae964c1d2" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::w87a[21]</definition>
        <argsstring>[21]</argsstring>
        <name>w87a</name>
        <qualifiedname>QuantLib::w87a</qualifiedname>
        <initializer>= {
        0.008148377384149172900002878448190,
        0.018761438201562822243935059003794,
        0.027347451050052286161582829741283,
        0.033677707311637930046581056957588,
        0.036935099820427907614589586742499,
        0.002884872430211530501334156248695,
        0.013685946022712701888950035273128,
        0.023280413502888311123409291030404,
        0.030872497611713358675466394126442,
        0.035693633639418770719351355457044,
        0.000915283345202241360843392549948,
        0.005399280219300471367738743391053,
        0.010947679601118931134327826856808,
        0.016298731696787335262665703223280,
        0.021081568889203835112433060188190,
        0.025370969769253827243467999831710,
        0.029189697756475752501446154084920,
        0.032373202467202789685788194889595,
        0.034783098950365142750781997949596,
        0.036412220731351787562801163687577,
        0.037253875503047708539592001191226
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/integrals/kronrodintegral.cpp" line="167" column="23" bodyfile="ql/math/integrals/kronrodintegral.cpp" bodystart="167" bodyend="189"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_quant_lib_1ab5e7cd38656681be96eb83075d28e242" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::w87b[23]</definition>
        <argsstring>[23]</argsstring>
        <name>w87b</name>
        <qualifiedname>QuantLib::w87b</qualifiedname>
        <initializer>= {
        0.000274145563762072350016527092881,
        0.001807124155057942948341311753254,
        0.004096869282759164864458070683480,
        0.006758290051847378699816577897424,
        0.009549957672201646536053581325377,
        0.012329447652244853694626639963780,
        0.015010447346388952376697286041943,
        0.017548967986243191099665352925900,
        0.019938037786440888202278192730714,
        0.022194935961012286796332102959499,
        0.024339147126000805470360647041454,
        0.026374505414839207241503786552615,
        0.028286910788771200659968002987960,
        0.030052581128092695322521110347341,
        0.031646751371439929404586051078883,
        0.033050413419978503290785944862689,
        0.034255099704226061787082821046821,
        0.035262412660156681033782717998428,
        0.036076989622888701185500318003895,
        0.036698604498456094498018047441094,
        0.037120549269832576114119958413599,
        0.037334228751935040321235449094698,
        0.037361073762679023410321241766599
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/integrals/kronrodintegral.cpp" line="192" column="23" bodyfile="ql/math/integrals/kronrodintegral.cpp" bodystart="192" bodyend="216"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_quant_lib_1ad26b70329a18d0ea28eee3dfc3a68469" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::g7w[]</definition>
        <argsstring>[]</argsstring>
        <name>g7w</name>
        <qualifiedname>QuantLib::g7w</qualifiedname>
        <initializer>= { 0.417959183673469,
                                0.381830050505119,
                                0.279705391489277,
                                0.129484966168870 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/integrals/kronrodintegral.cpp" line="362" column="23" bodyfile="ql/math/integrals/kronrodintegral.cpp" bodystart="362" bodyend="365"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_quant_lib_1aed12a0db6bdc98c30b9cc7a8314aec7c" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::k15w[]</definition>
        <argsstring>[]</argsstring>
        <name>k15w</name>
        <qualifiedname>QuantLib::k15w</qualifiedname>
        <initializer>= { 0.209482141084728,
                                 0.204432940075298,
                                 0.190350578064785,
                                 0.169004726639267,
                                 0.140653259715525,
                                 0.104790010322250,
                                 0.063092092629979,
                                 0.022935322010529 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/integrals/kronrodintegral.cpp" line="367" column="23" bodyfile="ql/math/integrals/kronrodintegral.cpp" bodystart="367" bodyend="374"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_quant_lib_1a7a79f012482014256ddb819ba026d898" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::k15t[]</definition>
        <argsstring>[]</argsstring>
        <name>k15t</name>
        <qualifiedname>QuantLib::k15t</qualifiedname>
        <initializer>= { 0.000000000000000,
                                 0.207784955007898,
                                 0.405845151377397,
                                 0.586087235467691,
                                 0.741531185599394,
                                 0.864864423359769,
                                 0.949107912342758,
                                 0.991455371120813 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/integrals/kronrodintegral.cpp" line="377" column="23" bodyfile="ql/math/integrals/kronrodintegral.cpp" bodystart="377" bodyend="384"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_quant_lib_1a6cb61a6ee59c3b89dc76d07e36c2df1c" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>class URNG</type>
          </param>
          <param>
            <type>class IC</type>
          </param>
        </templateparamlist>
        <type>ext::shared_ptr&lt; IC &gt;</type>
        <definition>ext::shared_ptr&lt;IC&gt; QuantLib::GenericPseudoRandom&lt; URNG, IC &gt;::icInstance</definition>
        <argsstring></argsstring>
        <name>GenericPseudoRandom&lt; URNG, IC &gt;::icInstance</name>
        <qualifiedname>QuantLib::icInstance</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/rngtraits.hpp" line="63" column="41" bodyfile="ql/math/randomnumbers/rngtraits.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_quant_lib_1a6b16c3cef50eb546fbdb21e7777e0eaa" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>class URSG</type>
          </param>
          <param>
            <type>class IC</type>
          </param>
        </templateparamlist>
        <type>ext::shared_ptr&lt; IC &gt;</type>
        <definition>ext::shared_ptr&lt;IC&gt; QuantLib::GenericLowDiscrepancy&lt; URSG, IC &gt;::icInstance</definition>
        <argsstring></argsstring>
        <name>GenericLowDiscrepancy&lt; URSG, IC &gt;::icInstance</name>
        <qualifiedname>QuantLib::icInstance</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/rngtraits.hpp" line="100" column="43" bodyfile="ql/math/randomnumbers/rngtraits.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_quant_lib_1ada1727715c0d81edc36599c9da16d885" prot="public" static="yes" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::PI</definition>
        <argsstring></argsstring>
        <name>PI</name>
        <qualifiedname>QuantLib::PI</qualifiedname>
        <initializer>= 3.14159265358979323846264338327950</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierbinaryengine.cpp" line="29" column="16" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierbinaryengine.cpp" bodystart="29" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespace_quant_lib_1ac55ca388f15e1a7c68f9511d9911fa96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InterestRateIndexType</type>
          </param>
          <param>
            <type>typename FloatingCouponType</type>
          </param>
          <param>
            <type>typename CappedFlooredCouponType</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref></type>
        <definition>Leg QuantLib::FloatingLeg</definition>
        <argsstring>(const Schedule &amp;schedule, const std::vector&lt; Real &gt; &amp;nominals, const ext::shared_ptr&lt; InterestRateIndexType &gt; &amp;index, const DayCounter &amp;paymentDayCounter, BusinessDayConvention paymentAdj, const std::vector&lt; Natural &gt; &amp;fixingDays, const std::vector&lt; Real &gt; &amp;gearings, const std::vector&lt; Spread &gt; &amp;spreads, const std::vector&lt; Rate &gt; &amp;caps, const std::vector&lt; Rate &gt; &amp;floors, bool isInArrears, bool isZero, Integer paymentLag=0, Calendar paymentCalendar=Calendar(), Period exCouponPeriod=Period(), Calendar exCouponCalendar=Calendar(), BusinessDayConvention exCouponAdjustment=Unadjusted, bool exCouponEndOfMonth=false)</argsstring>
        <name>FloatingLeg</name>
        <qualifiedname>QuantLib::FloatingLeg</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_schedule" kindref="compound">Schedule</ref> &amp;</type>
          <declname>schedule</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>nominals</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; InterestRateIndexType &gt; &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>paymentDayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881" kindref="member">BusinessDayConvention</ref></type>
          <declname>paymentAdj</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref> &gt; &amp;</type>
          <declname>fixingDays</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>gearings</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref> &gt; &amp;</type>
          <declname>spreads</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt; &amp;</type>
          <declname>caps</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt; &amp;</type>
          <declname>floors</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isInArrears</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isZero</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
          <declname>paymentLag</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref></type>
          <declname>paymentCalendar</declname>
          <defval><ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref></type>
          <declname>exCouponPeriod</declname>
          <defval><ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref>()</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref></type>
          <declname>exCouponCalendar</declname>
          <defval><ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref>()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881" kindref="member">BusinessDayConvention</ref></type>
          <declname>exCouponAdjustment</declname>
          <defval><ref refid="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881a6a9f8f55985b149ed0c336c23bf03667" kindref="member">Unadjusted</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>exCouponEndOfMonth</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflowvectors.hpp" line="61" column="9" bodyfile="ql/cashflows/cashflowvectors.hpp" bodystart="61" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a02acb68032cb6fdf2808f945e40a97aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InterestRateIndexType</type>
          </param>
          <param>
            <type>typename FloatingCouponType</type>
          </param>
          <param>
            <type>typename DigitalCouponType</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref></type>
        <definition>Leg QuantLib::FloatingDigitalLeg</definition>
        <argsstring>(const Schedule &amp;schedule, const std::vector&lt; Real &gt; &amp;nominals, const ext::shared_ptr&lt; InterestRateIndexType &gt; &amp;index, const DayCounter &amp;paymentDayCounter, BusinessDayConvention paymentAdj, const std::vector&lt; Natural &gt; &amp;fixingDays, const std::vector&lt; Real &gt; &amp;gearings, const std::vector&lt; Spread &gt; &amp;spreads, bool isInArrears, const std::vector&lt; Rate &gt; &amp;callStrikes, Position::Type callPosition, bool isCallATMIncluded, const std::vector&lt; Rate &gt; &amp;callDigitalPayoffs, const std::vector&lt; Rate &gt; &amp;putStrikes, Position::Type putPosition, bool isPutATMIncluded, const std::vector&lt; Rate &gt; &amp;putDigitalPayoffs, const ext::shared_ptr&lt; DigitalReplication &gt; &amp;replication, bool nakedOption=false)</argsstring>
        <name>FloatingDigitalLeg</name>
        <qualifiedname>QuantLib::FloatingDigitalLeg</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_schedule" kindref="compound">Schedule</ref> &amp;</type>
          <declname>schedule</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>nominals</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; InterestRateIndexType &gt; &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>paymentDayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881" kindref="member">BusinessDayConvention</ref></type>
          <declname>paymentAdj</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref> &gt; &amp;</type>
          <declname>fixingDays</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>gearings</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref> &gt; &amp;</type>
          <declname>spreads</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isInArrears</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt; &amp;</type>
          <declname>callStrikes</declname>
        </param>
        <param>
          <type>Position::Type</type>
          <declname>callPosition</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isCallATMIncluded</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt; &amp;</type>
          <declname>callDigitalPayoffs</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt; &amp;</type>
          <declname>putStrikes</declname>
        </param>
        <param>
          <type>Position::Type</type>
          <declname>putPosition</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isPutATMIncluded</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt; &amp;</type>
          <declname>putDigitalPayoffs</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_digital_replication" kindref="compound">DigitalReplication</ref> &gt; &amp;</type>
          <declname>replication</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>nakedOption</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/cashflowvectors.hpp" line="179" column="9" bodyfile="ql/cashflows/cashflowvectors.hpp" bodystart="179" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1af30ca8bc5d050bdac8ac73bd9821680d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, GFunctionFactory::YieldCurveModel type)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>GFunctionFactory::YieldCurveModel</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/conundrumpricer.hpp" line="177" column="12" bodyfile="ql/cashflows/conundrumpricer.hpp" bodystart="177" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a7c1092d21f2e769ad9fbd8528468c082" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::setCouponPricer</definition>
        <argsstring>(const Leg &amp;leg, const ext::shared_ptr&lt; FloatingRateCouponPricer &gt; &amp;pricer)</argsstring>
        <name>setCouponPricer</name>
        <qualifiedname>QuantLib::setCouponPricer</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_floating_rate_coupon_pricer" kindref="compound">FloatingRateCouponPricer</ref> &gt; &amp;</type>
          <declname>pricer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/couponpricer.cpp" line="418" column="10" bodyfile="ql/cashflows/couponpricer.cpp" bodystart="418" bodyend="423" declfile="ql/cashflows/couponpricer.hpp" declline="181" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a23abc11529b92cfedf24a8abec307dbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::setCouponPricers</definition>
        <argsstring>(const Leg &amp;leg, const std::vector&lt; ext::shared_ptr&lt; FloatingRateCouponPricer &gt; &gt; &amp;pricers)</argsstring>
        <name>setCouponPricers</name>
        <qualifiedname>QuantLib::setCouponPricers</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>const std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_floating_rate_coupon_pricer" kindref="compound">FloatingRateCouponPricer</ref> &gt; &gt; &amp;</type>
          <declname>pricers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/couponpricer.cpp" line="425" column="10" bodyfile="ql/cashflows/couponpricer.cpp" bodystart="425" bodyend="441" declfile="ql/cashflows/couponpricer.hpp" declline="184" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a3b178f11dc8c453a496d4d808f7dad71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::setCouponPricers</definition>
        <argsstring>(const Leg &amp;leg, const ext::shared_ptr&lt; FloatingRateCouponPricer &gt; &amp;p1, const ext::shared_ptr&lt; FloatingRateCouponPricer &gt; &amp;p2)</argsstring>
        <name>setCouponPricers</name>
        <qualifiedname>QuantLib::setCouponPricers</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_floating_rate_coupon_pricer" kindref="compound">FloatingRateCouponPricer</ref> &gt; &amp;</type>
          <defname>p1</defname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_floating_rate_coupon_pricer" kindref="compound">FloatingRateCouponPricer</ref> &gt; &amp;</type>
          <defname>p2</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the first matching pricer (if any) to each coupon of the leg </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/couponpricer.cpp" line="443" column="10" bodyfile="ql/cashflows/couponpricer.cpp" bodystart="443" bodyend="451" declfile="ql/cashflows/couponpricer.hpp" declline="189" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a09e4048c194f93250cd8a49a352ce9f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::setCouponPricers</definition>
        <argsstring>(const Leg &amp;leg, const ext::shared_ptr&lt; FloatingRateCouponPricer &gt; &amp;p1, const ext::shared_ptr&lt; FloatingRateCouponPricer &gt; &amp;p2, const ext::shared_ptr&lt; FloatingRateCouponPricer &gt; &amp;p3)</argsstring>
        <name>setCouponPricers</name>
        <qualifiedname>QuantLib::setCouponPricers</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_floating_rate_coupon_pricer" kindref="compound">FloatingRateCouponPricer</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_floating_rate_coupon_pricer" kindref="compound">FloatingRateCouponPricer</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_floating_rate_coupon_pricer" kindref="compound">FloatingRateCouponPricer</ref> &gt; &amp;</type>
          <declname>p3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/couponpricer.cpp" line="453" column="10" bodyfile="ql/cashflows/couponpricer.cpp" bodystart="453" bodyend="463" declfile="ql/cashflows/couponpricer.hpp" declline="194" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ac44bacf778f1b5b700cd368d9605a9fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::setCouponPricers</definition>
        <argsstring>(const Leg &amp;leg, const ext::shared_ptr&lt; FloatingRateCouponPricer &gt; &amp;p1, const ext::shared_ptr&lt; FloatingRateCouponPricer &gt; &amp;p2, const ext::shared_ptr&lt; FloatingRateCouponPricer &gt; &amp;p3, const ext::shared_ptr&lt; FloatingRateCouponPricer &gt; &amp;p4)</argsstring>
        <name>setCouponPricers</name>
        <qualifiedname>QuantLib::setCouponPricers</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_floating_rate_coupon_pricer" kindref="compound">FloatingRateCouponPricer</ref> &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_floating_rate_coupon_pricer" kindref="compound">FloatingRateCouponPricer</ref> &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_floating_rate_coupon_pricer" kindref="compound">FloatingRateCouponPricer</ref> &gt; &amp;</type>
          <declname>p3</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_floating_rate_coupon_pricer" kindref="compound">FloatingRateCouponPricer</ref> &gt; &amp;</type>
          <declname>p4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/couponpricer.cpp" line="465" column="10" bodyfile="ql/cashflows/couponpricer.cpp" bodystart="465" bodyend="477" declfile="ql/cashflows/couponpricer.hpp" declline="200" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1af14ea64532456e27c861e7d93b9fec71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_dividend" kindref="compound">Dividend</ref> &gt; &gt;</type>
        <definition>std::vector&lt; ext::shared_ptr&lt; Dividend &gt; &gt; QuantLib::DividendVector</definition>
        <argsstring>(const std::vector&lt; Date &gt; &amp;dividendDates, const std::vector&lt; Real &gt; &amp;dividends)</argsstring>
        <name>DividendVector</name>
        <qualifiedname>QuantLib::DividendVector</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt; &amp;</type>
          <declname>dividendDates</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>dividends</declname>
        </param>
        <briefdescription>
<para>helper function building a sequence of fixed dividends </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/dividend.cpp" line="35" column="5" bodyfile="ql/cashflows/dividend.cpp" bodystart="35" bodyend="51" declfile="ql/cashflows/dividend.hpp" declline="102" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ac1cec49821d2b78fe2050b9477ecd1c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Duration::Type d)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>Duration::Type</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/duration.cpp" line="28" column="5" bodyfile="ql/cashflows/duration.cpp" bodystart="28" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ab30b87b5835eb3ddb79bd13d5ce03e31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::setCouponPricer</definition>
        <argsstring>(const Leg &amp;leg, const ext::shared_ptr&lt; EquityCashFlowPricer &gt; &amp;p)</argsstring>
        <name>setCouponPricer</name>
        <qualifiedname>QuantLib::setCouponPricer</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_equity_cash_flow_pricer" kindref="compound">EquityCashFlowPricer</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/equitycashflow.cpp" line="44" column="10" bodyfile="ql/cashflows/equitycashflow.cpp" bodystart="44" bodyend="51" declfile="ql/cashflows/equitycashflow.hpp" declline="68" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1af3402e44d70d4e4b0c3391fb1a595344" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::setCouponPricer</definition>
        <argsstring>(const Leg &amp;leg, const ext::shared_ptr&lt; InflationCouponPricer &gt; &amp;p)</argsstring>
        <name>setCouponPricer</name>
        <qualifiedname>QuantLib::setCouponPricer</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_inflation_coupon_pricer" kindref="compound">InflationCouponPricer</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/inflationcouponpricer.cpp" line="27" column="10" bodyfile="ql/cashflows/inflationcouponpricer.cpp" bodystart="27" bodyend="34" declfile="ql/cashflows/inflationcouponpricer.hpp" declline="80" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aa5aad4b359fbb49caffae436196add68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Replication::Type r)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>Replication::Type</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/replication.cpp" line="26" column="5" bodyfile="ql/cashflows/replication.cpp" bodystart="26" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aa1f92a20de5394ddf9fe3a49a6ce0d2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Compounding &amp;compounding)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref> &amp;</type>
          <declname>compounding</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/compounding.hpp" line="39" column="12" bodyfile="ql/compounding.hpp" bodystart="39" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a633d968756f1397ce2844676e7dc7d3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Currency &amp;c)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/currency.cpp" line="25" column="5" bodyfile="ql/currency.cpp" bodystart="25" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aab436b14794849d5ec4be378b7dc816a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator==</definition>
        <argsstring>(const Currency &amp;c1, const Currency &amp;c2)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref> &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref> &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/currency.hpp" line="179" column="17" bodyfile="ql/currency.hpp" bodystart="179" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a253bbe2c19b3bfd9cb365b545289e35e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator!=</definition>
        <argsstring>(const Currency &amp;c1, const Currency &amp;c2)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref> &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref> &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/currency.hpp" line="184" column="17" bodyfile="ql/currency.hpp" bodystart="184" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ae5187d3869f390f99a7785242855dbd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const SecondaryCostAmounts &amp;secondaryCostAmounts)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const SecondaryCostAmounts &amp;</type>
          <declname>secondaryCostAmounts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodity.cpp" line="44" column="5" bodyfile="ql/experimental/commodities/commodity.cpp" bodystart="44" bodyend="64" declfile="ql/experimental/commodities/commodity.hpp" declline="39" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aa497dfd0aa3b94eab27c4d30e9b71e8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const PricingError &amp;error)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="struct_quant_lib_1_1_pricing_error" kindref="compound">PricingError</ref> &amp;</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodity.cpp" line="67" column="5" bodyfile="ql/experimental/commodities/commodity.cpp" bodystart="67" bodyend="86" declfile="ql/experimental/commodities/commodity.hpp" declline="57" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a493693690a45dd982b0510faa6b25be3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const PricingErrors &amp;errors)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const PricingErrors &amp;</type>
          <declname>errors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodity.cpp" line="88" column="5" bodyfile="ql/experimental/commodities/commodity.cpp" bodystart="88" bodyend="95" declfile="ql/experimental/commodities/commodity.hpp" declline="58" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1affa624a8a1b7d39892b4d6d718e17631" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const CommodityCashFlows &amp;cashFlows)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const CommodityCashFlows &amp;</type>
          <declname>cashFlows</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycashflow.cpp" line="34" column="5" bodyfile="ql/experimental/commodities/commoditycashflow.cpp" bodystart="34" bodyend="60" declfile="ql/experimental/commodities/commoditycashflow.hpp" declline="90" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ae576d04ecf971fa70ff78d8fbd5cf3e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const CommodityCurve &amp;curve)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_curve" kindref="compound">CommodityCurve</ref> &amp;</type>
          <declname>curve</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.cpp" line="99" column="5" bodyfile="ql/experimental/commodities/commoditycurve.cpp" bodystart="99" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a3f79f679450126201d20051d7c79a24e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator==</definition>
        <argsstring>(const CommodityCurve &amp;c1, const CommodityCurve &amp;c2)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_curve" kindref="compound">CommodityCurve</ref> &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_curve" kindref="compound">CommodityCurve</ref> &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="110" column="17" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aedae11b3e45dd2ef9cf03a05fa19bf00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const CommodityIndex &amp;index)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_index" kindref="compound">CommodityIndex</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.cpp" line="52" column="5" bodyfile="ql/experimental/commodities/commodityindex.cpp" bodystart="52" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a8f5fa1b5067c5db8c4de24357a5d5988" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator==</definition>
        <argsstring>(const CommodityIndex &amp;i1, const CommodityIndex &amp;i2)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_index" kindref="compound">CommodityIndex</ref> &amp;</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_index" kindref="compound">CommodityIndex</ref> &amp;</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="146" column="17" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="146" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a386374353cf2df8deb63c90ed64bbbeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const CommodityType &amp;c)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditytype.cpp" line="40" column="5" bodyfile="ql/experimental/commodities/commoditytype.cpp" bodystart="40" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aef5386cb4a8eef223320c08086f058c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator==</definition>
        <argsstring>(const CommodityType &amp;c1, const CommodityType &amp;c2)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref> &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref> &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditytype.hpp" line="107" column="17" bodyfile="ql/experimental/commodities/commoditytype.hpp" bodystart="107" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aa4ce622bb7dceefeaed0959348824f7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator!=</definition>
        <argsstring>(const CommodityType &amp;c1, const CommodityType &amp;c2)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref> &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref> &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditytype.hpp" line="111" column="17" bodyfile="ql/experimental/commodities/commoditytype.hpp" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1acca07e21878ffcdc85f749010d7e3d16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const CommodityUnitCost &amp;unitCost)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_unit_cost" kindref="compound">CommodityUnitCost</ref> &amp;</type>
          <declname>unitCost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityunitcost.cpp" line="24" column="5" bodyfile="ql/experimental/commodities/commodityunitcost.cpp" bodystart="24" bodyend="30" declfile="ql/experimental/commodities/commodityunitcost.hpp" declline="47" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a344aef00c60e06497b2f82e577f138d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const DateInterval &amp;di)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date_interval" kindref="compound">DateInterval</ref> &amp;</type>
          <declname>di</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/dateinterval.cpp" line="24" column="5" bodyfile="ql/experimental/commodities/dateinterval.cpp" bodystart="24" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ad7907e7c115aaa6066e3b77f5a905fd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const EnergyDailyPositions &amp;dailyPositions)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const EnergyDailyPositions &amp;</type>
          <declname>dailyPositions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/energycommodity.cpp" line="36" column="5" bodyfile="ql/experimental/commodities/energycommodity.cpp" bodystart="36" bodyend="58" declfile="ql/experimental/commodities/energycommodity.hpp" declline="55" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a6eec9717dca4adc347be01fb8c95abbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const PaymentTerm &amp;c)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_payment_term" kindref="compound">PaymentTerm</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/paymentterm.cpp" line="42" column="5" bodyfile="ql/experimental/commodities/paymentterm.cpp" bodystart="42" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1af6bb53ecd20a749d9a8ae5b3c5f4f755" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator==</definition>
        <argsstring>(const PaymentTerm &amp;c1, const PaymentTerm &amp;c2)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_payment_term" kindref="compound">PaymentTerm</ref> &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_payment_term" kindref="compound">PaymentTerm</ref> &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/paymentterm.hpp" line="113" column="17" bodyfile="ql/experimental/commodities/paymentterm.hpp" bodystart="113" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ab555211566ae5c7df7fea13d8999917a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator!=</definition>
        <argsstring>(const PaymentTerm &amp;c1, const PaymentTerm &amp;c2)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_payment_term" kindref="compound">PaymentTerm</ref> &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_payment_term" kindref="compound">PaymentTerm</ref> &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/paymentterm.hpp" line="117" column="17" bodyfile="ql/experimental/commodities/paymentterm.hpp" bodystart="117" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a6771b5032cd910627ea92f63c3fded5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::operator/</definition>
        <argsstring>(const Quantity &amp;m1, const Quantity &amp;m2)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.cpp" line="86" column="10" bodyfile="ql/experimental/commodities/quantity.cpp" bodystart="86" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ae221653402a28c90b1b5cb716fa3beed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator==</definition>
        <argsstring>(const Quantity &amp;m1, const Quantity &amp;m2)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.cpp" line="105" column="10" bodyfile="ql/experimental/commodities/quantity.cpp" bodystart="105" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ad955645c5be23e14ba3efaa3c72aef91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&lt;</definition>
        <argsstring>(const Quantity &amp;m1, const Quantity &amp;m2)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>QuantLib::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.cpp" line="125" column="5" bodyfile="ql/experimental/commodities/quantity.cpp" bodystart="125" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1afbbde8dbcf7ac7dee4aee0e891cbe1d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&lt;=</definition>
        <argsstring>(const Quantity &amp;m1, const Quantity &amp;m2)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>QuantLib::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.cpp" line="144" column="5" bodyfile="ql/experimental/commodities/quantity.cpp" bodystart="144" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ab94b3fc7463188bf4d30e82d4692ad3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::close</definition>
        <argsstring>(const Quantity &amp;m1, const Quantity &amp;m2, Size n)</argsstring>
        <name>close</name>
        <qualifiedname>QuantLib::close</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.cpp" line="163" column="10" bodyfile="ql/experimental/commodities/quantity.cpp" bodystart="163" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a605b00167a137e3a0b87f0b13f479fda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::close_enough</definition>
        <argsstring>(const Quantity &amp;m1, const Quantity &amp;m2, Size n)</argsstring>
        <name>close_enough</name>
        <qualifiedname>QuantLib::close_enough</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.cpp" line="182" column="10" bodyfile="ql/experimental/commodities/quantity.cpp" bodystart="182" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aa5ce1bd7c6be5d0f58935ed77230f5d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Quantity &amp;quantity)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.cpp" line="202" column="5" bodyfile="ql/experimental/commodities/quantity.cpp" bodystart="202" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a8529f2a2c00347bd9e940d63a5a24d97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref></type>
        <definition>Quantity QuantLib::operator+</definition>
        <argsstring>(const Quantity &amp;m1, const Quantity &amp;m2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="165" column="21" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="165" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a85cae316b6d98585a90e08d59c4d1ef7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref></type>
        <definition>Quantity QuantLib::operator-</definition>
        <argsstring>(const Quantity &amp;m1, const Quantity &amp;m2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="171" column="21" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="171" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a3040783f17680828ccfd1a4fbf3644ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref></type>
        <definition>Quantity QuantLib::operator*</definition>
        <argsstring>(const Quantity &amp;m, Real x)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="177" column="21" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="177" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a6c41f9d5132313547dc3c70f45194796" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref></type>
        <definition>Quantity QuantLib::operator*</definition>
        <argsstring>(Real x, const Quantity &amp;m)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="183" column="21" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="183" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aa9f2ad274f30ca6a2817cf2ae883048d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref></type>
        <definition>Quantity QuantLib::operator/</definition>
        <argsstring>(const Quantity &amp;m, Real x)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="187" column="21" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="187" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a6f241467a033c418596f85c7e7a15353" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator!=</definition>
        <argsstring>(const Quantity &amp;m1, const Quantity &amp;m2)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="193" column="17" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="193" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a1642e72b8ed454c2d23715277b68e1e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&gt;</definition>
        <argsstring>(const Quantity &amp;m1, const Quantity &amp;m2)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>QuantLib::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="197" column="17" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="197" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aa71320d854ced905f8d00df359a4add7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&gt;=</definition>
        <argsstring>(const Quantity &amp;m1, const Quantity &amp;m2)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>QuantLib::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="201" column="17" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="201" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a96bd5de02eb7e44f454d77de3caa20d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const UnitOfMeasure &amp;c)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/unitofmeasure.cpp" line="26" column="5" bodyfile="ql/experimental/commodities/unitofmeasure.cpp" bodystart="26" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a0a1d63b746173719c70e732b63f1a194" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator==</definition>
        <argsstring>(const UnitOfMeasure &amp;c1, const UnitOfMeasure &amp;c2)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref> &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref> &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/unitofmeasure.hpp" line="130" column="17" bodyfile="ql/experimental/commodities/unitofmeasure.hpp" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1af6778682453c5681b365009fe9d434c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator!=</definition>
        <argsstring>(const UnitOfMeasure &amp;c1, const UnitOfMeasure &amp;c2)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref> &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref> &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/unitofmeasure.hpp" line="134" column="17" bodyfile="ql/experimental/commodities/unitofmeasure.hpp" bodystart="134" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a651914a43b45e390e00a4dfa3b990b8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator==</definition>
        <argsstring>(const DefaultEvent &amp;lhs, const DefaultEvent &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_default_event" kindref="compound">DefaultEvent</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_default_event" kindref="compound">DefaultEvent</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Two credit events are the same independently of their settlement member data. This has the side effect of overwritting different settlements from the same credit event when, say, inserting in a map. But on the other hand one given event can only have one settlement. This means we can not have two restructuring events on a bond on the same date. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/defaultevent.cpp" line="140" column="10" bodyfile="ql/experimental/credit/defaultevent.cpp" bodystart="140" bodyend="145" declfile="ql/experimental/credit/defaultevent.hpp" declline="182" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1abe0984f99d01c90a7adabbb595ef54bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator!=</definition>
        <argsstring>(const DefaultEvent &amp;lhs, const DefaultEvent &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_default_event" kindref="compound">DefaultEvent</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_default_event" kindref="compound">DefaultEvent</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/defaultevent.hpp" line="184" column="17" bodyfile="ql/experimental/credit/defaultevent.hpp" bodystart="184" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aacd73cc81101a041aade598dac4a1e99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator==</definition>
        <argsstring>(const DefaultProbKey &amp;lhs, const DefaultProbKey &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_default_prob_key" kindref="compound">DefaultProbKey</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_default_prob_key" kindref="compound">DefaultProbKey</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/defaultprobabilitykey.cpp" line="44" column="10" bodyfile="ql/experimental/credit/defaultprobabilitykey.cpp" bodystart="44" bodyend="57" declfile="ql/experimental/credit/defaultprobabilitykey.hpp" declline="66" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a0c621e4b0c7c55dd9d5d79171cc3764c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator==</definition>
        <argsstring>(const DefaultType &amp;lhs, const DefaultType &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_default_type" kindref="compound">DefaultType</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_default_type" kindref="compound">DefaultType</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Equality is the criteria for indexing the curves. This depends only on the atomic types and not on idiosincracies of derived type as mentioned in the functional documentation (specific event characteristics are relevant to credit event matching but not to the probability meaning). operator== is also used to remove duplicates in some containers. This ensures we do not have two equal events (despite having different characteristics) in those containers. This makes sense, theres no logic in having two <ref refid="class_quant_lib_1_1_failure_to_pay" kindref="compound">FailureToPay</ref> in a contract even if they have different characteristics. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/defaulttype.cpp" line="35" column="10" bodyfile="ql/experimental/credit/defaulttype.cpp" bodystart="35" bodyend="38" declfile="ql/experimental/credit/defaulttype.hpp" declline="160" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a2ed50661a82210f68b7d24ea329de990" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&lt;</definition>
        <argsstring>(const Loss &amp;l1, const Loss &amp;l2)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>QuantLib::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_loss" kindref="compound">Loss</ref> &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_loss" kindref="compound">Loss</ref> &amp;</type>
          <declname>l2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/loss.hpp" line="37" column="12" bodyfile="ql/experimental/credit/loss.hpp" bodystart="37" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a31eddf6e987500b0c275deddfcec8d56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&gt;</definition>
        <argsstring>(const Loss &amp;l1, const Loss &amp;l2)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>QuantLib::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_loss" kindref="compound">Loss</ref> &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_loss" kindref="compound">Loss</ref> &amp;</type>
          <declname>l2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/loss.hpp" line="40" column="17" bodyfile="ql/experimental/credit/loss.hpp" bodystart="40" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ababb6f8f8a7e1fa497e8175da3a787f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator==</definition>
        <argsstring>(const Loss &amp;l1, const Loss &amp;l2)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_loss" kindref="compound">Loss</ref> &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_loss" kindref="compound">Loss</ref> &amp;</type>
          <declname>l2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/loss.hpp" line="43" column="17" bodyfile="ql/experimental/credit/loss.hpp" bodystart="43" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a6318ad3c3d755400b3ed44d91efc4280" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator!=</definition>
        <argsstring>(const Loss &amp;l1, const Loss &amp;l2)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_loss" kindref="compound">Loss</ref> &amp;</type>
          <declname>l1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_loss" kindref="compound">Loss</ref> &amp;</type>
          <declname>l2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/loss.hpp" line="46" column="17" bodyfile="ql/experimental/credit/loss.hpp" bodystart="46" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a1c51cbae5e4425e1c0a1cd80be32fa61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; <ref refid="namespace_quant_lib_1a197bfb2321381d9a5d8c94b56f6ef6cf" kindref="member">Seniority</ref>, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::map&lt; Seniority, Real &gt; QuantLib::makeIsdaConvMap</definition>
        <argsstring>()</argsstring>
        <name>makeIsdaConvMap</name>
        <qualifiedname>QuantLib::makeIsdaConvMap</qualifiedname>
        <briefdescription>
<para>Helper function for conventional recoveries. Returns the ISDA. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recoveryratequote.cpp" line="32" column="14" bodyfile="ql/experimental/credit/recoveryratequote.cpp" bodystart="32" bodyend="35" declfile="ql/experimental/credit/recoveryratequote.hpp" declline="87" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a1cdf3f65066f2b0988d23952ac365add" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::laplaceInterpolation</definition>
        <argsstring>(Matrix &amp;A, const std::vector&lt; Real &gt; &amp;x, const std::vector&lt; Real &gt; &amp;y, Real relTol, Size maxIterMultiplier)</argsstring>
        <name>laplaceInterpolation</name>
        <qualifiedname>QuantLib::laplaceInterpolation</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>x</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>y</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>relTol</declname>
          <defval>1E-6</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxIterMultiplier</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience function that Laplace-interpolates null values in a given matrix. If the x or y grid or both are not given, an equidistant grid is assumed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/laplaceinterpolation.cpp" line="214" column="10" bodyfile="ql/experimental/math/laplaceinterpolation.cpp" bodystart="214" bodyend="246" declfile="ql/experimental/math/laplaceinterpolation.hpp" declline="70" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1acbab1f479700f8c3a11d6617a1574d0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::moorePenroseInverse</definition>
        <argsstring>(const Matrix &amp;A, const Real tol=Null&lt; Real &gt;())</argsstring>
        <name>moorePenroseInverse</name>
        <qualifiedname>QuantLib::moorePenroseInverse</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>tol</declname>
          <defval><ref refid="class_quant_lib_1_1_null" kindref="compound">Null</ref>&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reference: <ulink url="http://de.mathworks.com/help/matlab/ref/pinv.html">http://de.mathworks.com/help/matlab/ref/pinv.html</ulink> <ulink url="https://en.wikipedia.org/wiki/Moore%E2%80%93Penrose_pseudoinverse">https://en.wikipedia.org/wiki/Moore%E2%80%93Penrose_pseudoinverse</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/moorepenroseinverse.hpp" line="35" column="15" bodyfile="ql/experimental/math/moorepenroseinverse.hpp" bodystart="35" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a921772cb9b06e58fc69538704aaca730" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GaussianQuadMultidimIntegrator::integrate&lt; std::vector&lt; Real &gt; &gt;</definition>
        <argsstring>(const std::function&lt; std::vector&lt; Real &gt;(const std::vector&lt; Real &gt; &amp;v1)&gt; &amp;f) const</argsstring>
        <name>GaussianQuadMultidimIntegrator::integrate&lt; std::vector&lt; Real &gt; &gt;</name>
        <qualifiedname>QuantLib::integrate&lt; std::vector&lt; Real &gt; &gt;</qualifiedname>
        <param>
          <type>const std::function&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;(const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;v1)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimquadrature.hpp" line="198" column="12" bodyfile="ql/experimental/math/multidimquadrature.hpp" bodystart="210" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a39f01e9dcc8480163d3df6ffb1c758c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QL_DEPRECATED_DISABLE_WARNING std::ostream &amp;</type>
        <definition>QL_DEPRECATED_DISABLE_WARNING std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, SensitivityAnalysis s)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/risk/sensitivityanalysis.cpp" line="31" column="5" bodyfile="ql/experimental/risk/sensitivityanalysis.cpp" bodystart="31" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aa37db08c6be3a5da8cc1b295ff5247d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::aggregateNPV</definition>
        <argsstring>(const vector&lt; ext::shared_ptr&lt; Instrument &gt; &gt; &amp;instruments, const vector&lt; Real &gt; &amp;quant)</argsstring>
        <name>aggregateNPV</name>
        <qualifiedname>QuantLib::aggregateNPV</qualifiedname>
        <param>
          <type>const vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_instrument" kindref="compound">Instrument</ref> &gt; &gt; &amp;</type>
          <declname>instruments</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>quant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/risk/sensitivityanalysis.cpp" line="43" column="10" bodyfile="ql/experimental/risk/sensitivityanalysis.cpp" bodystart="43" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1abd19c93e29aeb5413b55f22363648dc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pair&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>pair&lt; Real, Real &gt; QuantLib::parallelAnalysis</definition>
        <argsstring>(const vector&lt; Handle&lt; SimpleQuote &gt; &gt; &amp;quotes, const vector&lt; ext::shared_ptr&lt; Instrument &gt; &gt; &amp;instruments, const vector&lt; Real &gt; &amp;quantities, Real shift, SensitivityAnalysis type, Real referenceNpv)</argsstring>
        <name>parallelAnalysis</name>
        <qualifiedname>QuantLib::parallelAnalysis</qualifiedname>
        <param>
          <type>const vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_simple_quote" kindref="compound">SimpleQuote</ref> &gt; &gt; &amp;</type>
          <declname>quotes</declname>
        </param>
        <param>
          <type>const vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_instrument" kindref="compound">Instrument</ref> &gt; &gt; &amp;</type>
          <declname>instruments</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>quantities</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>shift</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>referenceNpv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/risk/sensitivityanalysis.cpp" line="61" column="5" bodyfile="ql/experimental/risk/sensitivityanalysis.cpp" bodystart="61" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a140ed8d5b7650234b51d76610845cade" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pair&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>pair&lt; Real, Real &gt; QuantLib::bucketAnalysis</definition>
        <argsstring>(const Handle&lt; SimpleQuote &gt; &amp;quote, const vector&lt; ext::shared_ptr&lt; Instrument &gt; &gt; &amp;instruments, const vector&lt; Real &gt; &amp;quantities, Real shift, SensitivityAnalysis type, Real referenceNpv)</argsstring>
        <name>bucketAnalysis</name>
        <qualifiedname>QuantLib::bucketAnalysis</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_simple_quote" kindref="compound">SimpleQuote</ref> &gt; &amp;</type>
          <declname>quote</declname>
        </param>
        <param>
          <type>const vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_instrument" kindref="compound">Instrument</ref> &gt; &gt; &amp;</type>
          <declname>instruments</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>quantities</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>shift</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>referenceNpv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/risk/sensitivityanalysis.cpp" line="120" column="10" bodyfile="ql/experimental/risk/sensitivityanalysis.cpp" bodystart="120" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a2c853875d409f3fae6651d518bf8a104" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::bucketAnalysis</definition>
        <argsstring>(vector&lt; Real &gt; &amp;deltaVector, vector&lt; Real &gt; &amp;gammaVector, vector&lt; Real &gt; &amp;refVals, const Handle&lt; SimpleQuote &gt; &amp;quote, const vector&lt; Handle&lt; Quote &gt; &gt; &amp;params, Real shift, SensitivityAnalysis type)</argsstring>
        <name>bucketAnalysis</name>
        <qualifiedname>QuantLib::bucketAnalysis</qualifiedname>
        <param>
          <type>vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>deltaVector</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>gammaVector</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>refVals</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_simple_quote" kindref="compound">SimpleQuote</ref> &gt; &amp;</type>
          <declname>quote</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>shift</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/risk/sensitivityanalysis.cpp" line="167" column="10" bodyfile="ql/experimental/risk/sensitivityanalysis.cpp" bodystart="167" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a7b88e9e6b05ae59d8dc3b200f092f17c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pair&lt; vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;, vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt;</type>
        <definition>pair&lt; vector&lt; Real &gt;, vector&lt; Real &gt; &gt; QuantLib::bucketAnalysis</definition>
        <argsstring>(const vector&lt; Handle&lt; SimpleQuote &gt; &gt; &amp;quotes, const vector&lt; ext::shared_ptr&lt; Instrument &gt; &gt; &amp;instr, const vector&lt; Real &gt; &amp;quant, Real shift, SensitivityAnalysis type)</argsstring>
        <name>bucketAnalysis</name>
        <qualifiedname>QuantLib::bucketAnalysis</qualifiedname>
        <param>
          <type>const vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_simple_quote" kindref="compound">SimpleQuote</ref> &gt; &gt; &amp;</type>
          <declname>quotes</declname>
        </param>
        <param>
          <type>const vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_instrument" kindref="compound">Instrument</ref> &gt; &gt; &amp;</type>
          <declname>instr</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>quant</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>shift</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/risk/sensitivityanalysis.cpp" line="260" column="5" bodyfile="ql/experimental/risk/sensitivityanalysis.cpp" bodystart="260" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a6475e2161c337757a11c65b5032fe32a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::bucketAnalysis</definition>
        <argsstring>(std::vector&lt; std::vector&lt; Real &gt; &gt; &amp;deltaMatrix, std::vector&lt; std::vector&lt; Real &gt; &gt; &amp;gammaMatrix, const vector&lt; Handle&lt; SimpleQuote &gt; &gt; &amp;quotes, const vector&lt; Handle&lt; Quote &gt; &gt; &amp;parameters, Real shift, SensitivityAnalysis type)</argsstring>
        <name>bucketAnalysis</name>
        <qualifiedname>QuantLib::bucketAnalysis</qualifiedname>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt; &amp;</type>
          <declname>deltaMatrix</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt; &amp;</type>
          <declname>gammaMatrix</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_simple_quote" kindref="compound">SimpleQuote</ref> &gt; &gt; &amp;</type>
          <declname>quotes</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>shift</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/risk/sensitivityanalysis.cpp" line="286" column="5" bodyfile="ql/experimental/risk/sensitivityanalysis.cpp" bodystart="286" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1af53e650dcc79839a43dc87d571b6185e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pair&lt; vector&lt; vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt;, vector&lt; vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt; &gt;</type>
        <definition>pair&lt; vector&lt; vector&lt; Real &gt; &gt;, vector&lt; vector&lt; Real &gt; &gt; &gt; QuantLib::bucketAnalysis</definition>
        <argsstring>(const vector&lt; vector&lt; Handle&lt; SimpleQuote &gt; &gt; &gt; &amp;quotes, const vector&lt; ext::shared_ptr&lt; Instrument &gt; &gt; &amp;instr, const vector&lt; Real &gt; &amp;quant, Real shift, SensitivityAnalysis type)</argsstring>
        <name>bucketAnalysis</name>
        <qualifiedname>QuantLib::bucketAnalysis</qualifiedname>
        <param>
          <type>const vector&lt; vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_simple_quote" kindref="compound">SimpleQuote</ref> &gt; &gt; &gt; &amp;</type>
          <declname>quotes</declname>
        </param>
        <param>
          <type>const vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_instrument" kindref="compound">Instrument</ref> &gt; &gt; &amp;</type>
          <declname>instr</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>quant</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>shift</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/risk/sensitivityanalysis.cpp" line="314" column="5" bodyfile="ql/experimental/risk/sensitivityanalysis.cpp" bodystart="314" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a0c277356fbdba31d3a62c61e8a3ce0dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::aggregateNPV</definition>
        <argsstring>(const std::vector&lt; ext::shared_ptr&lt; Instrument &gt; &gt; &amp;, const std::vector&lt; Real &gt; &amp;quantities)</argsstring>
        <name>aggregateNPV</name>
        <qualifiedname>QuantLib::aggregateNPV</qualifiedname>
        <param>
          <type>const std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_instrument" kindref="compound">Instrument</ref> &gt; &gt; &amp;</type>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>quantities</declname>
        </param>
        <briefdescription>
<para>utility fuction for weighted sum of NPVs </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000031"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Out of scope; copy this function in your codebase if needed. Deprecated in version 1.36. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/risk/sensitivityanalysis.hpp" line="64" column="10" declfile="ql/experimental/risk/sensitivityanalysis.hpp" declline="64" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1abd5a6a180249e9d37d62387fbdcbe288" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::pair&lt; Real, Real &gt; QuantLib::parallelAnalysis</definition>
        <argsstring>(const std::vector&lt; Handle&lt; SimpleQuote &gt; &gt; &amp;, const std::vector&lt; ext::shared_ptr&lt; Instrument &gt; &gt; &amp;, const std::vector&lt; Real &gt; &amp;quantities, Real shift=0.0001, SensitivityAnalysis type=Centered, Real referenceNpv=Null&lt; Real &gt;())</argsstring>
        <name>parallelAnalysis</name>
        <qualifiedname>QuantLib::parallelAnalysis</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_simple_quote" kindref="compound">SimpleQuote</ref> &gt; &gt; &amp;</type>
        </param>
        <param>
          <type>const std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_instrument" kindref="compound">Instrument</ref> &gt; &gt; &amp;</type>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>quantities</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>shift</declname>
          <defval>0.0001</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref></type>
          <declname>type</declname>
          <defval>Centered</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>referenceNpv</declname>
          <defval><ref refid="class_quant_lib_1_1_null" kindref="compound">Null</ref>&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>parallel shift PV01 sensitivity analysis for a <ref refid="class_quant_lib_1_1_simple_quote" kindref="compound">SimpleQuote</ref> vector </para>
        </briefdescription>
        <detaileddescription>
<para>returns a pair of first and second derivative values calculated as prescribed by <ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref>. Second derivative might not be available depending on <ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref> value.</para>
<para>Empty quantities vector is considered as unit vector. The same if the vector is just one single element equal to one.</para>
<para>All SimpleQuotes are tweaked together in a parallel fashion.</para>
<para><xrefsect id="deprecated_1_deprecated000032"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Out of scope; copy this function in your codebase if needed. Deprecated in version 1.36. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/risk/sensitivityanalysis.hpp" line="82" column="5" declfile="ql/experimental/risk/sensitivityanalysis.hpp" declline="82" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a152440af1e25db009656a1725556b207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::pair&lt; Real, Real &gt; QuantLib::parallelAnalysis</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; Handle&lt; SimpleQuote &gt; &gt; &gt; &amp;, const std::vector&lt; ext::shared_ptr&lt; Instrument &gt; &gt; &amp;, const std::vector&lt; Real &gt; &amp;quantities, Real shift=0.0001, SensitivityAnalysis type=Centered, Real referenceNpv=Null&lt; Real &gt;())</argsstring>
        <name>parallelAnalysis</name>
        <qualifiedname>QuantLib::parallelAnalysis</qualifiedname>
        <param>
          <type>const std::vector&lt; std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_simple_quote" kindref="compound">SimpleQuote</ref> &gt; &gt; &gt; &amp;</type>
        </param>
        <param>
          <type>const std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_instrument" kindref="compound">Instrument</ref> &gt; &gt; &amp;</type>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>quantities</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>shift</declname>
          <defval>0.0001</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref></type>
          <declname>type</declname>
          <defval>Centered</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>referenceNpv</declname>
          <defval><ref refid="class_quant_lib_1_1_null" kindref="compound">Null</ref>&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>parallel shift PV01 sensitivity analysis for a <ref refid="class_quant_lib_1_1_simple_quote" kindref="compound">SimpleQuote</ref> matrix </para>
        </briefdescription>
        <detaileddescription>
<para>returns a pair of first and second derivative values calculated as prescribed by <ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref>. Second derivative might not be available depending on <ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref> value.</para>
<para>Empty quantities vector is considered as unit vector. The same if the vector is of size one.</para>
<para>All SimpleQuotes are tweaked together in a parallel fashion.</para>
<para><xrefsect id="deprecated_1_deprecated000033"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Out of scope; copy this function in your codebase if needed. Deprecated in version 1.36. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/risk/sensitivityanalysis.hpp" line="104" column="5" declfile="ql/experimental/risk/sensitivityanalysis.hpp" declline="104" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a02df7c8e8e7bc396e6bd54e9279683b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::pair&lt; Real, Real &gt; QuantLib::bucketAnalysis</definition>
        <argsstring>(const Handle&lt; SimpleQuote &gt; &amp;quote, const std::vector&lt; ext::shared_ptr&lt; Instrument &gt; &gt; &amp;, const std::vector&lt; Real &gt; &amp;quantities, Real shift=0.0001, SensitivityAnalysis type=Centered, Real referenceNpv=Null&lt; Real &gt;())</argsstring>
        <name>bucketAnalysis</name>
        <qualifiedname>QuantLib::bucketAnalysis</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_simple_quote" kindref="compound">SimpleQuote</ref> &gt; &amp;</type>
          <declname>quote</declname>
        </param>
        <param>
          <type>const std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_instrument" kindref="compound">Instrument</ref> &gt; &gt; &amp;</type>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>quantities</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>shift</declname>
          <defval>0.0001</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref></type>
          <declname>type</declname>
          <defval>Centered</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>referenceNpv</declname>
          <defval><ref refid="class_quant_lib_1_1_null" kindref="compound">Null</ref>&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>(bucket) PV01 sensitivity analysis for a (single) <ref refid="class_quant_lib_1_1_simple_quote" kindref="compound">SimpleQuote</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>returns a pair of first and second derivative values calculated as prescribed by <ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref>. Second derivative might not be available depending on <ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref> value.</para>
<para>Empty quantities vector is considered as unit vector. The same if the vector is of size one.</para>
<para><xrefsect id="deprecated_1_deprecated000034"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Out of scope; copy this function in your codebase if needed. Deprecated in version 1.36. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/risk/sensitivityanalysis.hpp" line="123" column="15" declfile="ql/experimental/risk/sensitivityanalysis.hpp" declline="123" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1afe07b1dd77a5889c1a072146fddf9f88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::bucketAnalysis</definition>
        <argsstring>(std::vector&lt; Real &gt; &amp;deltaVector, std::vector&lt; Real &gt; &amp;gammaVector, std::vector&lt; Real &gt; &amp;referenceValues, const Handle&lt; SimpleQuote &gt; &amp;quote, const std::vector&lt; Handle&lt; Quote &gt; &gt; &amp;parameters, Real shift=0.0001, SensitivityAnalysis type=Centered)</argsstring>
        <name>bucketAnalysis</name>
        <qualifiedname>QuantLib::bucketAnalysis</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>deltaVector</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>gammaVector</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>referenceValues</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_simple_quote" kindref="compound">SimpleQuote</ref> &gt; &amp;</type>
          <declname>quote</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>shift</declname>
          <defval>0.0001</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref></type>
          <declname>type</declname>
          <defval>Centered</defval>
        </param>
        <briefdescription>
<para>(bucket) parameters&apos; sensitivity analysis for a (single) <ref refid="class_quant_lib_1_1_simple_quote" kindref="compound">SimpleQuote</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>returns a vector (one element for each paramet) of pair of first and second derivative values calculated as prescribed by <ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref>. Second derivative might not be available depending on <ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref> value.</para>
<para>Empty quantities vector is considered as unit vector. The same if the vector is of size one.</para>
<para><xrefsect id="deprecated_1_deprecated000035"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Out of scope; copy this function in your codebase if needed. Deprecated in version 1.36. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/risk/sensitivityanalysis.hpp" line="143" column="10" declfile="ql/experimental/risk/sensitivityanalysis.hpp" declline="143" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aab55e0975a5da136a3860ffe6eea93e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;, std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt;</type>
        <definition>std::pair&lt; std::vector&lt; Real &gt;, std::vector&lt; Real &gt; &gt; QuantLib::bucketAnalysis</definition>
        <argsstring>(const std::vector&lt; Handle&lt; SimpleQuote &gt; &gt; &amp;quotes, const std::vector&lt; ext::shared_ptr&lt; Instrument &gt; &gt; &amp;, const std::vector&lt; Real &gt; &amp;quantities, Real shift=0.0001, SensitivityAnalysis type=Centered)</argsstring>
        <name>bucketAnalysis</name>
        <qualifiedname>QuantLib::bucketAnalysis</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_simple_quote" kindref="compound">SimpleQuote</ref> &gt; &gt; &amp;</type>
          <declname>quotes</declname>
        </param>
        <param>
          <type>const std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_instrument" kindref="compound">Instrument</ref> &gt; &gt; &amp;</type>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>quantities</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>shift</declname>
          <defval>0.0001</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref></type>
          <declname>type</declname>
          <defval>Centered</defval>
        </param>
        <briefdescription>
<para>bucket PV01 sensitivity analysis for a <ref refid="class_quant_lib_1_1_simple_quote" kindref="compound">SimpleQuote</ref> vector </para>
        </briefdescription>
        <detaileddescription>
<para>returns a pair of first and second derivative vectors calculated as prescribed by <ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref>. Second derivative might not be available depending on <ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref> value.</para>
<para>Empty quantities vector is considered as unit vector. The same if the vector is of size one.</para>
<para>The (bucket) SimpleQuotes are tweaked one by one separately.</para>
<para><xrefsect id="deprecated_1_deprecated000036"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Out of scope; copy this function in your codebase if needed. Deprecated in version 1.36. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/risk/sensitivityanalysis.hpp" line="166" column="5" declfile="ql/experimental/risk/sensitivityanalysis.hpp" declline="166" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a973f11d563be3e401e0b0d76b7e7c369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::bucketAnalysis</definition>
        <argsstring>(std::vector&lt; std::vector&lt; Real &gt; &gt; &amp;deltaMatrix, std::vector&lt; std::vector&lt; Real &gt; &gt; &amp;gammaMatrix, const std::vector&lt; Handle&lt; SimpleQuote &gt; &gt; &amp;quotes, const std::vector&lt; Handle&lt; Quote &gt; &gt; &amp;parameters, Real shift=0.0001, SensitivityAnalysis type=Centered)</argsstring>
        <name>bucketAnalysis</name>
        <qualifiedname>QuantLib::bucketAnalysis</qualifiedname>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt; &amp;</type>
          <declname>deltaMatrix</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt; &amp;</type>
          <declname>gammaMatrix</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_simple_quote" kindref="compound">SimpleQuote</ref> &gt; &gt; &amp;</type>
          <declname>quotes</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>shift</declname>
          <defval>0.0001</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref></type>
          <declname>type</declname>
          <defval>Centered</defval>
        </param>
        <briefdescription>
<para>bucket parameters&apos; sensitivity analysis for a <ref refid="class_quant_lib_1_1_simple_quote" kindref="compound">SimpleQuote</ref> vector </para>
        </briefdescription>
        <detaileddescription>
<para>returns a vector (one element for each paramet) of pair of first and second derivative vectors calculated as prescribed by <ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref>. Second derivative might not be available depending on <ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref> value.</para>
<para>Empty quantities vector is considered as unit vector. The same if the vector is of size one.</para>
<para>The (bucket) SimpleQuotes are tweaked one by one separately.</para>
<para><xrefsect id="deprecated_1_deprecated000037"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Out of scope; copy this function in your codebase if needed. Deprecated in version 1.36. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/risk/sensitivityanalysis.hpp" line="188" column="5" declfile="ql/experimental/risk/sensitivityanalysis.hpp" declline="188" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a5df9ff181855f8d8aba4e6239e69a214" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::vector&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt;, std::vector&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt; &gt;</type>
        <definition>std::pair&lt; std::vector&lt; std::vector&lt; Real &gt; &gt;, std::vector&lt; std::vector&lt; Real &gt; &gt; &gt; QuantLib::bucketAnalysis</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; Handle&lt; SimpleQuote &gt; &gt; &gt; &amp;, const std::vector&lt; ext::shared_ptr&lt; Instrument &gt; &gt; &amp;, const std::vector&lt; Real &gt; &amp;quantities, Real shift=0.0001, SensitivityAnalysis type=Centered)</argsstring>
        <name>bucketAnalysis</name>
        <qualifiedname>QuantLib::bucketAnalysis</qualifiedname>
        <param>
          <type>const std::vector&lt; std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_simple_quote" kindref="compound">SimpleQuote</ref> &gt; &gt; &gt; &amp;</type>
        </param>
        <param>
          <type>const std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_instrument" kindref="compound">Instrument</ref> &gt; &gt; &amp;</type>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>quantities</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>shift</declname>
          <defval>0.0001</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref></type>
          <declname>type</declname>
          <defval>Centered</defval>
        </param>
        <briefdescription>
<para>bucket sensitivity analysis for a <ref refid="class_quant_lib_1_1_simple_quote" kindref="compound">SimpleQuote</ref> matrix </para>
        </briefdescription>
        <detaileddescription>
<para>returns a pair of first and second derivative metrices calculated as prescribed by <ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref>. Second derivative might not be available depending on <ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref> value.</para>
<para>Empty quantities vector is considered as unit vector. The same if the vector is of size one.</para>
<para>The (bucket) SimpleQuotes are tweaked one by one separately.</para>
<para><xrefsect id="deprecated_1_deprecated000038"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Out of scope; copy this function in your codebase if needed. Deprecated in version 1.36. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/risk/sensitivityanalysis.hpp" line="211" column="5" declfile="ql/experimental/risk/sensitivityanalysis.hpp" declline="211" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a6fe28eb805dec978e1ab61d77165482d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, IrregularSettlement::Type t)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>IrregularSettlement::Type</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/swaptions/irregularswaption.cpp" line="87" column="5" bodyfile="ql/experimental/swaptions/irregularswaption.cpp" bodystart="87" bodyend="97" declfile="ql/experimental/swaptions/irregularswaption.hpp" declline="42" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ab026984ace9e25d8d9bcc52d5a7e94ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::CenteredGrid</definition>
        <argsstring>(Real center, Real dx, Size steps)</argsstring>
        <name>CenteredGrid</name>
        <qualifiedname>QuantLib::CenteredGrid</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>center</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>steps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000044"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Part of the old FD framework; copy this function in your codebase if needed. Deprecated in version 1.37. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/grid.hpp" line="55" column="18" bodyfile="ql/grid.hpp" bodystart="55" bodyend="60" declfile="ql/grid.hpp" declline="36" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a6bf22435f3d7d11f58e4e430784f4981" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::BoundedGrid</definition>
        <argsstring>(Real xMin, Real xMax, Size steps)</argsstring>
        <name>BoundedGrid</name>
        <qualifiedname>QuantLib::BoundedGrid</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>xMin</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>xMax</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>steps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000045"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Part of the old FD framework; copy this function in your codebase if needed. Deprecated in version 1.37. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/grid.hpp" line="62" column="18" bodyfile="ql/grid.hpp" bodystart="62" bodyend="68" declfile="ql/grid.hpp" declline="43" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ac2a631b171034f0cdee5ba80b803a6a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::BoundedLogGrid</definition>
        <argsstring>(Real xMin, Real xMax, Size steps)</argsstring>
        <name>BoundedLogGrid</name>
        <qualifiedname>QuantLib::BoundedLogGrid</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>xMin</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>xMax</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>steps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000046"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Part of the old FD framework; copy this function in your codebase if needed. Deprecated in version 1.37. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/grid.hpp" line="70" column="18" bodyfile="ql/grid.hpp" bodystart="70" bodyend="80" declfile="ql/grid.hpp" declline="50" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a11ea9474bc15c22d49a3b155d4d537c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator==</definition>
        <argsstring>(const Region &amp;r1, const Region &amp;r2)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_region" kindref="compound">Region</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_region" kindref="compound">Region</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/region.hpp" line="121" column="17" bodyfile="ql/indexes/region.hpp" bodystart="121" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a81313ccd367c4778b21840232bc9e9d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator!=</definition>
        <argsstring>(const Region &amp;r1, const Region &amp;r2)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_region" kindref="compound">Region</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_region" kindref="compound">Region</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/region.hpp" line="125" column="17" bodyfile="ql/indexes/region.hpp" bodystart="125" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a91f2ade2fe18f48c7fe500a7d695b510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Average::Type type)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>Average::Type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/averagetype.cpp" line="28" column="5" bodyfile="ql/instruments/averagetype.cpp" bodystart="28" bodyend="38" declfile="ql/instruments/averagetype.hpp" declline="38" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a179152ff86fc6fbd23e27378b78ad687" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Barrier::Type type)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>Barrier::Type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/barriertype.cpp" line="28" column="5" bodyfile="ql/instruments/barriertype.cpp" bodystart="28" bodyend="42" declfile="ql/instruments/barriertype.hpp" declline="39" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a0116239484d532e6887df7d24be0a1e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_schedule" kindref="compound">Schedule</ref></type>
        <definition>Schedule QuantLib::sinkingSchedule</definition>
        <argsstring>(const Date &amp;startDate, const Period &amp;bondLength, const Frequency &amp;frequency, const Calendar &amp;paymentCalendar)</argsstring>
        <name>sinkingSchedule</name>
        <qualifiedname>QuantLib::sinkingSchedule</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>startDate</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>bondLength</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> &amp;</type>
          <declname>frequency</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;</type>
          <declname>paymentCalendar</declname>
        </param>
        <briefdescription>
<para>returns a schedule for French amortization </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bonds/amortizingfixedratebond.cpp" line="63" column="14" bodyfile="ql/instruments/bonds/amortizingfixedratebond.cpp" bodystart="63" bodyend="72" declfile="ql/instruments/bonds/amortizingfixedratebond.hpp" declline="59" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a43930470250e65e12eec047339c903a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::sinkingNotionals</definition>
        <argsstring>(const Period &amp;bondLength, const Frequency &amp;frequency, Rate couponRate, Real initialNotional)</argsstring>
        <name>sinkingNotionals</name>
        <qualifiedname>QuantLib::sinkingNotionals</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>bondLength</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> &amp;</type>
          <declname>sinkingFrequency</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>couponRate</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>initialNotional</declname>
        </param>
        <briefdescription>
<para>returns a sequence of notionals for French amortization </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bonds/amortizingfixedratebond.cpp" line="123" column="17" bodyfile="ql/instruments/bonds/amortizingfixedratebond.cpp" bodystart="123" bodyend="150" declfile="ql/instruments/bonds/amortizingfixedratebond.hpp" declline="65" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ad7ad615d8427817961312eb987c2a91c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, CapFloor::Type t)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>CapFloor::Type</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/capfloor.cpp" line="110" column="5" bodyfile="ql/instruments/capfloor.cpp" bodystart="110" bodyend="122" declfile="ql/instruments/capfloor.hpp" declline="160" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ac7d105585f943dd8bfca27d63ce2bdff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::cdsMaturity</definition>
        <argsstring>(const Date &amp;tradeDate, const Period &amp;tenor, DateGeneration::Rule rule)</argsstring>
        <name>cdsMaturity</name>
        <qualifiedname>QuantLib::cdsMaturity</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>tradeDate</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>tenor</declname>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_date_generation_1a3fee9b3c834b0d3be240d05886ac2f6e" kindref="member">DateGeneration::Rule</ref></type>
          <declname>rule</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the CDS maturity date given the CDS trade date, <computeroutput>tradeDate</computeroutput>, the CDS <computeroutput>tenor</computeroutput> and a CDS <computeroutput>rule</computeroutput>.</para>
<para>A null date is returned when a <computeroutput>rule</computeroutput> of <computeroutput>CDS2015</computeroutput> and a <computeroutput>tenor</computeroutput> length of zero fail to yield a valid CDS maturity date.</para>
<para><simplesect kind="warning"><para>An exception will be thrown if the <computeroutput>rule</computeroutput> is not <computeroutput>CDS2015</computeroutput>, <computeroutput>CDS</computeroutput> or <computeroutput>OldCDS</computeroutput>.</para>
</simplesect>
<simplesect kind="warning"><para>An exception will be thrown if the <computeroutput>rule</computeroutput> is <computeroutput>OldCDS</computeroutput> and a <computeroutput>tenor</computeroutput> of 0 months is provided. This restriction can be removed if 0M tenor was available before the CDS Big Bang 2009.</para>
</simplesect>
<simplesect kind="warning"><para>An exception will be thrown if the <computeroutput>tenor</computeroutput> is not a multiple of 3 months. For the avoidance of doubt, a <computeroutput>tenor</computeroutput> of 0 months is supported. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/creditdefaultswap.cpp" line="479" column="10" bodyfile="ql/instruments/creditdefaultswap.cpp" bodystart="479" bodyend="506" declfile="ql/instruments/creditdefaultswap.hpp" declline="361" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a5c4c5898f6b8d9c58eee693bbae7ac67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, DoubleBarrier::Type type)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_double_barrier_1ac1221f8400cd673297abbf49b58cdf5b" kindref="member">DoubleBarrier::Type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/doublebarriertype.cpp" line="26" column="5" bodyfile="ql/instruments/doublebarriertype.cpp" bodystart="26" bodyend="40" declfile="ql/instruments/doublebarriertype.hpp" declline="42" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1adaa4aacaab54e550db5bd7e0d77e8c76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Futures::Type f)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_futures_1ac63abccb416c6a9aa3f0d607289afac0" kindref="member">Futures::Type</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/futures.cpp" line="27" column="5" bodyfile="ql/instruments/futures.cpp" bodystart="27" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1abaaecd1372585fdcfed83b62440242e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, YoYInflationCapFloor::Type t)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>YoYInflationCapFloor::Type</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/inflationcapfloor.cpp" line="30" column="5" bodyfile="ql/instruments/inflationcapfloor.cpp" bodystart="30" bodyend="42" declfile="ql/instruments/inflationcapfloor.hpp" declline="157" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a2133512f1d127edb6a8231a1c055465e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::simplifyNotificationGraph</definition>
        <argsstring>(Instrument &amp;instrument, const Leg &amp;leg, bool unregisterCoupons=false)</argsstring>
        <name>simplifyNotificationGraph</name>
        <qualifiedname>QuantLib::simplifyNotificationGraph</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_instrument" kindref="compound">Instrument</ref> &amp;</type>
          <declname>instrument</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;</type>
          <declname>leg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>unregisterCoupons</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Utility function to optimize the observability graph of an instrument. </para>
        </briefdescription>
        <detaileddescription>
<para>This function unregisters the given instrument from the given cashflows and instead registers with the observables of the cashflows. This is safe to do if</para>
<para><itemizedlist>
<listitem><para>the coupon pricers of the cashflows are set before the function is called and never updated afterwards</para>
</listitem><listitem><para>the cashflows are not themselves originating notifications, i.e. they only pass through notifications from their observables (which is usually the case)</para>
</listitem><listitem><para>the set of cashflows does not dynamically change (usually satisfied as well)</para>
</listitem></itemizedlist>
</para>
<para>If unregisterCoupons is set to true, all given cashflows are in addition unregistered from all their observables. This can be done</para>
<para><itemizedlist>
<listitem><para>if the coupons are not asked for results directly</para>
</listitem><listitem><para>if deepUpdate() is called on the instrument before retrieving a result; to determine whether the result might have changed, isCalculated() can be called on the instrument.</para>
</listitem></itemizedlist>
</para>
<para>There are overloads of this function for specific instrument types like <ref refid="class_quant_lib_1_1_swap" kindref="compound">Swap</ref>, <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/simplifynotificationgraph.cpp" line="25" column="10" bodyfile="ql/instruments/simplifynotificationgraph.cpp" bodystart="25" bodyend="33" declfile="ql/instruments/simplifynotificationgraph.hpp" declline="54" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a706e23083b307a8ec3f859fb24983d64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::simplifyNotificationGraph</definition>
        <argsstring>(Swap &amp;swap, bool unregisterCoupons=false)</argsstring>
        <name>simplifyNotificationGraph</name>
        <qualifiedname>QuantLib::simplifyNotificationGraph</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_swap" kindref="compound">Swap</ref> &amp;</type>
          <declname>swap</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>unregisterCoupons</declname>
        </param>
        <briefdescription>
<para>Utility function to opimize the observability graph of a swap. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/simplifynotificationgraph.cpp" line="35" column="10" bodyfile="ql/instruments/simplifynotificationgraph.cpp" bodystart="35" bodyend="38" declfile="ql/instruments/simplifynotificationgraph.hpp" declline="59" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ad471fe1def3f8249344491c55ab07cc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::simplifyNotificationGraph</definition>
        <argsstring>(Bond &amp;bond, bool unregisterCoupons=false)</argsstring>
        <name>simplifyNotificationGraph</name>
        <qualifiedname>QuantLib::simplifyNotificationGraph</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>unregisterCoupons</declname>
        </param>
        <briefdescription>
<para>Utility function to opimize the observability graph of a bond. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/simplifynotificationgraph.cpp" line="40" column="10" bodyfile="ql/instruments/simplifynotificationgraph.cpp" bodystart="40" bodyend="42" declfile="ql/instruments/simplifynotificationgraph.hpp" declline="62" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ad73b68bf5228b6c7405873c8dc52b46e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Swap::Type t)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_swap_1ad0806daa5b111fcb11ce521b19124b4e" kindref="member">Swap::Type</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/swap.cpp" line="185" column="5" bodyfile="ql/instruments/swap.cpp" bodystart="185" bodyend="194" declfile="ql/instruments/swap.hpp" declline="161" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a4aad02d0d3917308efc7d58b28eba41b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Settlement::Type t)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>Settlement::Type</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/swaption.cpp" line="106" column="5" bodyfile="ql/instruments/swaption.cpp" bodystart="106" bodyend="116" declfile="ql/instruments/swaption.hpp" declline="54" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1af06462147f7285487aa2deebe1a708c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Settlement::Method m)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>Settlement::Method</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/swaption.cpp" line="118" column="5" bodyfile="ql/instruments/swaption.cpp" bodystart="118" bodyend="131" declfile="ql/instruments/swaption.hpp" declline="57" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a0054e0dbb2841e79bedfdfabf36d85bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const InterestRate &amp;ir)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_interest_rate" kindref="compound">InterestRate</ref> &amp;</type>
          <declname>ir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/interestrate.cpp" line="115" column="5" bodyfile="ql/interestrate.cpp" bodystart="115" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aa4a9ece3a7c58b84a51c185798672654" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::DotProduct</definition>
        <argsstring>(const Array &amp;v1, const Array &amp;v2)</argsstring>
        <name>DotProduct</name>
        <qualifiedname>QuantLib::DotProduct</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="534" column="17" bodyfile="ql/math/array.hpp" bodystart="534" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a4fe258b9e084694e3f45a68a86aa38e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Norm2</definition>
        <argsstring>(const Array &amp;v)</argsstring>
        <name>Norm2</name>
        <qualifiedname>QuantLib::Norm2</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="541" column="17" bodyfile="ql/math/array.hpp" bodystart="541" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a29236f635fb647688f496b36335974ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator+</definition>
        <argsstring>(const Array &amp;v)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="549" column="18" bodyfile="ql/math/array.hpp" bodystart="549" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ad47293e15e67e70b77b5846b95ce813f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator+</definition>
        <argsstring>(Array &amp;&amp;v)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="554" column="18" bodyfile="ql/math/array.hpp" bodystart="554" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ac138544e5cf2ccb42b8cacdb055d511a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator-</definition>
        <argsstring>(const Array &amp;v)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="558" column="18" bodyfile="ql/math/array.hpp" bodystart="558" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ac1ca120e7dfdf909825dbbd57d01b4d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator-</definition>
        <argsstring>(Array &amp;&amp;v)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="564" column="18" bodyfile="ql/math/array.hpp" bodystart="564" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a1e8b0513239cabecb87fe405f362e129" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator+</definition>
        <argsstring>(const Array &amp;v1, const Array &amp;v2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="572" column="18" bodyfile="ql/math/array.hpp" bodystart="572" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a9abd53aac0b38c6a2c08c0c80790bef2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator+</definition>
        <argsstring>(const Array &amp;v1, Array &amp;&amp;v2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="581" column="18" bodyfile="ql/math/array.hpp" bodystart="581" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1acefb8413ea775b023c2e58861ad20480" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator+</definition>
        <argsstring>(Array &amp;&amp;v1, const Array &amp;v2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="590" column="18" bodyfile="ql/math/array.hpp" bodystart="590" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a5763a44a370bed0de60b33f554ccf81f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator+</definition>
        <argsstring>(Array &amp;&amp;v1, Array &amp;&amp;v2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="599" column="18" bodyfile="ql/math/array.hpp" bodystart="599" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a8b4dbddd4e0bb3e6ae2084b3946d2a14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator+</definition>
        <argsstring>(const Array &amp;v1, Real a)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="608" column="18" bodyfile="ql/math/array.hpp" bodystart="608" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1af050ca2cfcb8e9b64850180bcd34c840" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator+</definition>
        <argsstring>(Array &amp;&amp;v1, Real a)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="614" column="18" bodyfile="ql/math/array.hpp" bodystart="614" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ac77b99cc1228359b51fb1aa4db8c9ab5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator+</definition>
        <argsstring>(Real a, const Array &amp;v2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="620" column="18" bodyfile="ql/math/array.hpp" bodystart="620" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a118e8b50a8461771845f5a5857a118a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator+</definition>
        <argsstring>(Real a, Array &amp;&amp;v2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="626" column="18" bodyfile="ql/math/array.hpp" bodystart="626" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aafcd152e7ee5098b6a29fea837a0bea0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator-</definition>
        <argsstring>(const Array &amp;v1, const Array &amp;v2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="632" column="18" bodyfile="ql/math/array.hpp" bodystart="632" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ac4b89babf2c872a3a7334d22fe17e565" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator-</definition>
        <argsstring>(const Array &amp;v1, Array &amp;&amp;v2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="641" column="18" bodyfile="ql/math/array.hpp" bodystart="641" bodyend="648"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a6ddcdc9201d62c28aa51ae944a497b87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator-</definition>
        <argsstring>(Array &amp;&amp;v1, const Array &amp;v2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="650" column="18" bodyfile="ql/math/array.hpp" bodystart="650" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a67fd69031f8a6ebb4c65a4bfbd8f925b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator-</definition>
        <argsstring>(Array &amp;&amp;v1, Array &amp;&amp;v2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="659" column="18" bodyfile="ql/math/array.hpp" bodystart="659" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a23ae9524eda708c282909ed406ec4538" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator-</definition>
        <argsstring>(const Array &amp;v1, Real a)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="668" column="18" bodyfile="ql/math/array.hpp" bodystart="668" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a4f713aaa2408f452c9535e0fed08cf4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator-</definition>
        <argsstring>(Array &amp;&amp;v1, Real a)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="674" column="18" bodyfile="ql/math/array.hpp" bodystart="674" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a4af19bfdc31f783b39c26d125b981553" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator-</definition>
        <argsstring>(Real a, const Array &amp;v2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="680" column="18" bodyfile="ql/math/array.hpp" bodystart="680" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a173d87c678fb815b6011fd317eaf42af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator-</definition>
        <argsstring>(Real a, Array &amp;&amp;v2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="686" column="18" bodyfile="ql/math/array.hpp" bodystart="686" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a2cd51621fd12c13a7049b91c0c92052b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator*</definition>
        <argsstring>(const Array &amp;v1, const Array &amp;v2)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="692" column="18" bodyfile="ql/math/array.hpp" bodystart="692" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a2815a7ffb73d752ac6193ee26bea60f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator*</definition>
        <argsstring>(const Array &amp;v1, Array &amp;&amp;v2)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="701" column="18" bodyfile="ql/math/array.hpp" bodystart="701" bodyend="708"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a8143835faadffc9edbaee52291238aa4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator*</definition>
        <argsstring>(Array &amp;&amp;v1, const Array &amp;v2)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="710" column="18" bodyfile="ql/math/array.hpp" bodystart="710" bodyend="717"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a3011eafdba2228157f09e53dd71da3c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator*</definition>
        <argsstring>(Array &amp;&amp;v1, Array &amp;&amp;v2)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="719" column="18" bodyfile="ql/math/array.hpp" bodystart="719" bodyend="726"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a784aea347fba744cfa44697b38c9aa20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator*</definition>
        <argsstring>(const Array &amp;v1, Real a)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="728" column="18" bodyfile="ql/math/array.hpp" bodystart="728" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a3a672b500eba6c9dfa4d0ef65d092b4f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator*</definition>
        <argsstring>(Array &amp;&amp;v1, Real a)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="734" column="18" bodyfile="ql/math/array.hpp" bodystart="734" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1af883e644510cbebe01951a412682faa1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator*</definition>
        <argsstring>(Real a, const Array &amp;v2)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="740" column="18" bodyfile="ql/math/array.hpp" bodystart="740" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a8d250f45468cf6af6e93e20d46174701" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator*</definition>
        <argsstring>(Real a, Array &amp;&amp;v2)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="746" column="18" bodyfile="ql/math/array.hpp" bodystart="746" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a052237465c718b089ec0426570c2470e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator/</definition>
        <argsstring>(const Array &amp;v1, const Array &amp;v2)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="752" column="18" bodyfile="ql/math/array.hpp" bodystart="752" bodyend="759"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ac28b9a97427bbdb32ddcba0e5f037d69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator/</definition>
        <argsstring>(const Array &amp;v1, Array &amp;&amp;v2)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="761" column="18" bodyfile="ql/math/array.hpp" bodystart="761" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a231c69dd5e207510c504b875716a1f41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator/</definition>
        <argsstring>(Array &amp;&amp;v1, const Array &amp;v2)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="770" column="18" bodyfile="ql/math/array.hpp" bodystart="770" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ac1fe214ebdb4823fc652a46e2e1a8f04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator/</definition>
        <argsstring>(Array &amp;&amp;v1, Array &amp;&amp;v2)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="779" column="18" bodyfile="ql/math/array.hpp" bodystart="779" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aeba0097adadb963e9d9e548fedd1e40d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator/</definition>
        <argsstring>(const Array &amp;v1, Real a)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="788" column="18" bodyfile="ql/math/array.hpp" bodystart="788" bodyend="792"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a78f6acb34d88712654bf29dd0b7a3111" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator/</definition>
        <argsstring>(Array &amp;&amp;v1, Real a)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="794" column="18" bodyfile="ql/math/array.hpp" bodystart="794" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a9b21b2ce1338fbfffcf4b01cb856f0a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator/</definition>
        <argsstring>(Real a, const Array &amp;v2)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="800" column="18" bodyfile="ql/math/array.hpp" bodystart="800" bodyend="804"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aa372aba45868d6c52a33b630e97a4a05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator/</definition>
        <argsstring>(Real a, Array &amp;&amp;v2)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="806" column="18" bodyfile="ql/math/array.hpp" bodystart="806" bodyend="810"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aa08e748d0a5ac9e3be936aef17925277" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Abs</definition>
        <argsstring>(const Array &amp;v)</argsstring>
        <name>Abs</name>
        <qualifiedname>QuantLib::Abs</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="814" column="18" bodyfile="ql/math/array.hpp" bodystart="814" bodyend="819"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a506605c1d399a555ad9d27b67d849b67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Abs</definition>
        <argsstring>(Array &amp;&amp;v)</argsstring>
        <name>Abs</name>
        <qualifiedname>QuantLib::Abs</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="821" column="18" bodyfile="ql/math/array.hpp" bodystart="821" bodyend="826"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a4c4350d9d3f1337e5cb861aaae9bb429" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Sqrt</definition>
        <argsstring>(const Array &amp;v)</argsstring>
        <name>Sqrt</name>
        <qualifiedname>QuantLib::Sqrt</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="828" column="18" bodyfile="ql/math/array.hpp" bodystart="828" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ab55306184bf80a012f748bfb1e6696cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Sqrt</definition>
        <argsstring>(Array &amp;&amp;v)</argsstring>
        <name>Sqrt</name>
        <qualifiedname>QuantLib::Sqrt</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="835" column="18" bodyfile="ql/math/array.hpp" bodystart="835" bodyend="840"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aee0cc7ff1877a11feea2c7cf910420c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Log</definition>
        <argsstring>(const Array &amp;v)</argsstring>
        <name>Log</name>
        <qualifiedname>QuantLib::Log</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="842" column="18" bodyfile="ql/math/array.hpp" bodystart="842" bodyend="847"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1add4dbd0633736f019e8246c84422384e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Log</definition>
        <argsstring>(Array &amp;&amp;v)</argsstring>
        <name>Log</name>
        <qualifiedname>QuantLib::Log</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="849" column="18" bodyfile="ql/math/array.hpp" bodystart="849" bodyend="854"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aef201109400c40cbe3d288ae3a089050" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Exp</definition>
        <argsstring>(const Array &amp;v)</argsstring>
        <name>Exp</name>
        <qualifiedname>QuantLib::Exp</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="856" column="18" bodyfile="ql/math/array.hpp" bodystart="856" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ad4d062080fed12ac36ffc4735dd05d29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Exp</definition>
        <argsstring>(Array &amp;&amp;v)</argsstring>
        <name>Exp</name>
        <qualifiedname>QuantLib::Exp</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="863" column="18" bodyfile="ql/math/array.hpp" bodystart="863" bodyend="868"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a17a2d93c7122f82926983b2b804790f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Pow</definition>
        <argsstring>(const Array &amp;v, Real alpha)</argsstring>
        <name>Pow</name>
        <qualifiedname>QuantLib::Pow</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="870" column="18" bodyfile="ql/math/array.hpp" bodystart="870" bodyend="875"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a1b1b21812287472b53f972e20743b899" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Pow</definition>
        <argsstring>(Array &amp;&amp;v, Real alpha)</argsstring>
        <name>Pow</name>
        <qualifiedname>QuantLib::Pow</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="877" column="18" bodyfile="ql/math/array.hpp" bodystart="877" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1abf7c7f13964ae2a6c277bc0b84e6f943" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::swap</definition>
        <argsstring>(Array &amp;v, Array &amp;w) noexcept</argsstring>
        <name>swap</name>
        <qualifiedname>QuantLib::swap</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="884" column="17" bodyfile="ql/math/array.hpp" bodystart="884" bodyend="886"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a52ef55b6166b2771a2177d1faad6057d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Array &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="888" column="12" bodyfile="ql/math/array.hpp" bodystart="888" bodyend="898"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a245c3846a62779b851f74f27cf9f2fc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ForwardIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void QuantLib::convolutions</definition>
        <argsstring>(ForwardIterator begin, ForwardIterator end, OutputIterator out, std::size_t maxLag)</argsstring>
        <name>convolutions</name>
        <qualifiedname>QuantLib::convolutions</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>out</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>maxLag</declname>
        </param>
        <briefdescription>
<para>Convolutions of the input sequence. </para>
        </briefdescription>
        <detaileddescription>
<para>Calculates x[0]*x[n]+x[1]*x[n+1]+x[2]*x[n+2]+... for n = 0,1,...,maxLag via FFT.</para>
<para><simplesect kind="pre"><para>The size of the output sequence must be maxLag + 1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/autocovariance.hpp" line="81" column="10" bodyfile="ql/math/autocovariance.hpp" bodystart="81" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1acc182ba96f5a4b6694a484644a170138" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ForwardIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void QuantLib::autocovariances</definition>
        <argsstring>(ForwardIterator begin, ForwardIterator end, OutputIterator out, std::size_t maxLag)</argsstring>
        <name>autocovariances</name>
        <qualifiedname>QuantLib::autocovariances</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>out</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>maxLag</declname>
        </param>
        <briefdescription>
<para>Unbiased auto-covariances. </para>
        </briefdescription>
        <detaileddescription>
<para>Results are calculated via FFT.</para>
<para><simplesect kind="pre"><para>Input data are supposed to be centered (i.e., zero mean). </para>
</simplesect>
<simplesect kind="pre"><para>The size of the output sequence must be maxLag + 1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/autocovariance.hpp" line="99" column="10" bodyfile="ql/math/autocovariance.hpp" bodystart="99" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a8bbb988f5dd3e9995c89b28a7648fc7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ForwardIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::autocovariances</definition>
        <argsstring>(ForwardIterator begin, ForwardIterator end, OutputIterator out, std::size_t maxLag, bool reuse)</argsstring>
        <name>autocovariances</name>
        <qualifiedname>QuantLib::autocovariances</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>out</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>maxLag</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reuse</declname>
        </param>
        <briefdescription>
<para>Unbiased auto-covariances. </para>
        </briefdescription>
        <detaileddescription>
<para>Results are calculated via FFT.</para>
<para>This overload accepts non-centered data, removes the mean and returns it as a result. The centered sequence is written back into the input sequence if the reuse parameter is true.</para>
<para><simplesect kind="pre"><para>The size of the output sequence must be maxLag + 1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/autocovariance.hpp" line="122" column="10" bodyfile="ql/math/autocovariance.hpp" bodystart="122" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a5de9385f3e863dab5a3dfeca592217e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ForwardIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void QuantLib::autocorrelations</definition>
        <argsstring>(ForwardIterator begin, ForwardIterator end, OutputIterator out, std::size_t maxLag)</argsstring>
        <name>autocorrelations</name>
        <qualifiedname>QuantLib::autocorrelations</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>out</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>maxLag</declname>
        </param>
        <briefdescription>
<para>Unbiased auto-correlations. </para>
        </briefdescription>
        <detaileddescription>
<para>Results are calculated via FFT. The first element of the output is the unbiased sample variance.</para>
<para><simplesect kind="pre"><para>Input data are supposed to be centered (i.e., zero mean). </para>
</simplesect>
<simplesect kind="pre"><para>The size of the output sequence must be maxLag + 1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/autocovariance.hpp" line="147" column="10" bodyfile="ql/math/autocovariance.hpp" bodystart="147" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a53c1a019b8cae87b9b3f14e173ac6e02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ForwardIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::autocorrelations</definition>
        <argsstring>(ForwardIterator begin, ForwardIterator end, OutputIterator out, std::size_t maxLag, bool reuse)</argsstring>
        <name>autocorrelations</name>
        <qualifiedname>QuantLib::autocorrelations</qualifiedname>
        <param>
          <type>ForwardIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>ForwardIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>out</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>maxLag</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reuse</declname>
        </param>
        <briefdescription>
<para>Unbiased auto-correlations. </para>
        </briefdescription>
        <detaileddescription>
<para>Results are calculated via FFT. The first element of the output is the unbiased sample variance.</para>
<para>This overload accepts non-centered data, removes the mean and returns it as a result. The centered sequence is written back into the input sequence if the reuse parameter is true.</para>
<para><simplesect kind="pre"><para>The size of the output sequence must be maxLag + 1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/autocovariance.hpp" line="173" column="10" bodyfile="ql/math/autocovariance.hpp" bodystart="173" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a01b991685117b956942b9217406f4664" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::betaContinuedFraction</definition>
        <argsstring>(Real a, Real b, Real x, Real accuracy, Integer maxIteration)</argsstring>
        <name>betaContinuedFraction</name>
        <qualifiedname>QuantLib::betaContinuedFraction</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
          <declname>maxIteration</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/beta.cpp" line="29" column="10" bodyfile="ql/math/beta.cpp" bodystart="29" bodyend="65" declfile="ql/math/beta.hpp" declline="37" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1acb4e789b7691d44e068177242951f60d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::incompleteBetaFunction</definition>
        <argsstring>(Real a, Real b, Real x, Real accuracy=1e-16, Integer maxIteration=100)</argsstring>
        <name>incompleteBetaFunction</name>
        <qualifiedname>QuantLib::incompleteBetaFunction</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1e-16</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
          <declname>maxIteration</declname>
          <defval>100</defval>
        </param>
        <briefdescription>
<para>Incomplete Beta function. </para>
        </briefdescription>
        <detaileddescription>
<para>Incomplete Beta function</para>
<para>The implementation of the algorithm was inspired by &quot;Numerical Recipes in C&quot;, 2nd edition, Press, Teukolsky, Vetterling, Flannery, chapter 6 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/beta.cpp" line="67" column="10" bodyfile="ql/math/beta.cpp" bodystart="67" bodyend="92" declfile="ql/math/beta.hpp" declline="50" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a3ff662ada47d4f1b4760b72912a123e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::betaFunction</definition>
        <argsstring>(Real z, Real w)</argsstring>
        <name>betaFunction</name>
        <qualifiedname>QuantLib::betaFunction</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/beta.hpp" line="31" column="17" bodyfile="ql/math/beta.hpp" bodystart="31" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a8c358786ff7da50c785ca5a003b1c9c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::close</definition>
        <argsstring>(Real x, Real y)</argsstring>
        <name>close</name>
        <qualifiedname>QuantLib::close</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Follows somewhat the advice of Knuth on checking for floating-point equality. The closeness relationship is:    <formula id="248">\[\mathrm{close}(x,y,n) \equiv |x-y| \leq \varepsilon |x|
                      \wedge |x-y| \leq \varepsilon |y|
\]</formula> where <formula id="249">$ \varepsilon $</formula> is <formula id="250">$ n $</formula> times the machine accuracy; <formula id="250">$ n $</formula> equals 42 if not given. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/comparison.hpp" line="59" column="17" bodyfile="ql/math/comparison.hpp" bodystart="59" bodyend="76" declfile="ql/math/comparison.hpp" declline="41" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a6c7d567e5aab30971ebdf825f68915df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::close</definition>
        <argsstring>(Real x, Real y, Size n)</argsstring>
        <name>close</name>
        <qualifiedname>QuantLib::close</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/comparison.hpp" line="78" column="17" bodyfile="ql/math/comparison.hpp" bodystart="78" bodyend="90" declfile="ql/math/comparison.hpp" declline="42" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1acba7cc9670305b8b6164bc87319313de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::close_enough</definition>
        <argsstring>(Real x, Real y)</argsstring>
        <name>close_enough</name>
        <qualifiedname>QuantLib::close_enough</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Follows somewhat the advice of Knuth on checking for floating-point equality. The closeness relationship is:    <formula id="251">\[\mathrm{close}(x,y,n) \equiv |x-y| \leq \varepsilon |x|
                        \vee |x-y| \leq \varepsilon |y|
\]</formula> where <formula id="249">$ \varepsilon $</formula> is <formula id="250">$ n $</formula> times the machine accuracy; <formula id="250">$ n $</formula> equals 42 if not given. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/comparison.hpp" line="92" column="17" bodyfile="ql/math/comparison.hpp" bodystart="92" bodyend="107" declfile="ql/math/comparison.hpp" declline="53" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a9ecd715bc2a5c091c7e7105e61602c88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::close_enough</definition>
        <argsstring>(Real x, Real y, Size n)</argsstring>
        <name>close_enough</name>
        <qualifiedname>QuantLib::close_enough</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/comparison.hpp" line="109" column="17" bodyfile="ql/math/comparison.hpp" bodystart="109" bodyend="121" declfile="ql/math/comparison.hpp" declline="54" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a99b7b63adcb316e1b0a6f663af7b6c59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::binomialCoefficientLn</definition>
        <argsstring>(BigNatural n, BigNatural k)</argsstring>
        <name>binomialCoefficientLn</name>
        <qualifiedname>QuantLib::binomialCoefficientLn</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/distributions/binomialdistribution.hpp" line="32" column="17" bodyfile="ql/math/distributions/binomialdistribution.hpp" bodystart="32" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a101da38d6f7e65638dd6f778311033e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::binomialCoefficient</definition>
        <argsstring>(BigNatural n, BigNatural k)</argsstring>
        <name>binomialCoefficient</name>
        <qualifiedname>QuantLib::binomialCoefficient</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/distributions/binomialdistribution.hpp" line="40" column="17" bodyfile="ql/math/distributions/binomialdistribution.hpp" bodystart="40" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a621aa667c15b1ef7ae745b3464051687" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::PeizerPrattMethod2Inversion</definition>
        <argsstring>(Real z, BigNatural n)</argsstring>
        <name>PeizerPrattMethod2Inversion</name>
        <qualifiedname>QuantLib::PeizerPrattMethod2Inversion</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>z</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given an odd integer n and a real number z it returns p such that: 1 - <ref refid="class_quant_lib_1_1_cumulative_binomial_distribution" kindref="compound">CumulativeBinomialDistribution</ref>((n-1)/2, n, p) = CumulativeNormalDistribution(z)</para>
<para><simplesect kind="pre"><para>n must be odd </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/distributions/binomialdistribution.hpp" line="136" column="17" bodyfile="ql/math/distributions/binomialdistribution.hpp" bodystart="136" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a78334330d7288ba9668411e472a31798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::complex&lt; Real &gt; QuantLib::expm1</definition>
        <argsstring>(const std::complex&lt; Real &gt; &amp;z)</argsstring>
        <name>expm1</name>
        <qualifiedname>QuantLib::expm1</qualifiedname>
        <param>
          <type>const std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/expm1.cpp" line="26" column="18" bodyfile="ql/math/expm1.cpp" bodystart="26" bodyend="40" declfile="ql/math/expm1.hpp" declline="31" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ab5a1727a3343ff7fb6bb6891beee6d57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::complex&lt; Real &gt; QuantLib::log1p</definition>
        <argsstring>(const std::complex&lt; Real &gt; &amp;z)</argsstring>
        <name>log1p</name>
        <qualifiedname>QuantLib::log1p</qualifiedname>
        <param>
          <type>const std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/expm1.cpp" line="42" column="18" bodyfile="ql/math/expm1.cpp" bodystart="42" bodyend="53" declfile="ql/math/expm1.hpp" declline="32" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a24ba492c85497930da7ee785b05918b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T QuantLib::squared</definition>
        <argsstring>(T x)</argsstring>
        <name>squared</name>
        <qualifiedname>QuantLib::squared</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/functional.hpp" line="37" column="14" bodyfile="ql/math/functional.hpp" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a1b2ef8d55ddefed5acfde5b5bdf6fae7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::incompleteGammaFunction</definition>
        <argsstring>(Real a, Real x, Real accuracy=1.0e-13, Integer maxIteration=100)</argsstring>
        <name>incompleteGammaFunction</name>
        <qualifiedname>QuantLib::incompleteGammaFunction</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.0e-13</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
          <declname>maxIteration</declname>
          <defval>100</defval>
        </param>
        <briefdescription>
<para>Incomplete Gamma function. </para>
        </briefdescription>
        <detaileddescription>
<para>Incomplete Gamma function</para>
<para>The implementation of the algorithm was inspired by &quot;Numerical Recipes in C&quot;, 2nd edition, Press, Teukolsky, Vetterling, Flannery, chapter 6 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/incompletegamma.cpp" line="32" column="10" bodyfile="ql/math/incompletegamma.cpp" bodystart="32" bodyend="49" declfile="ql/math/incompletegamma.hpp" declline="40" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a653f32c2b1815b5711177977ce717183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::incompleteGammaFunctionSeriesRepr</definition>
        <argsstring>(Real a, Real x, Real accuracy, Integer maxIteration)</argsstring>
        <name>incompleteGammaFunctionSeriesRepr</name>
        <qualifiedname>QuantLib::incompleteGammaFunctionSeriesRepr</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
          <declname>maxIteration</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/incompletegamma.cpp" line="52" column="10" bodyfile="ql/math/incompletegamma.cpp" bodystart="52" bodyend="70" declfile="ql/math/incompletegamma.hpp" declline="44" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a30fec44f5f837eabb355ae76539d53be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::incompleteGammaFunctionContinuedFractionRepr</definition>
        <argsstring>(Real a, Real x, Real accuracy, Integer maxIteration)</argsstring>
        <name>incompleteGammaFunctionContinuedFractionRepr</name>
        <qualifiedname>QuantLib::incompleteGammaFunctionContinuedFractionRepr</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
          <declname>maxIteration</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/incompletegamma.cpp" line="72" column="10" bodyfile="ql/math/incompletegamma.cpp" bodystart="72" bodyend="99" declfile="ql/math/incompletegamma.hpp" declline="48" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1af512eae7068ec5f1d7eed67a9144efde" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>static Real QuantLib::rescaleError</definition>
        <argsstring>(Real err, const Real resultAbs, const Real resultAsc)</argsstring>
        <name>rescaleError</name>
        <qualifiedname>QuantLib::rescaleError</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>err</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>resultAbs</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>resultAsc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/integrals/kronrodintegral.cpp" line="25" column="17" bodyfile="ql/math/integrals/kronrodintegral.cpp" bodystart="25" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1afac69fe09598d10aea08bd744cab2806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::inverse</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>inverse</name>
        <qualifiedname>QuantLib::inverse</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.cpp" line="44" column="12" bodyfile="ql/math/matrix.cpp" bodystart="44" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ab0f6618a644ad7e28a603ec95dc48230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::determinant</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>determinant</name>
        <qualifiedname>QuantLib::determinant</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.cpp" line="81" column="10" bodyfile="ql/math/matrix.cpp" bodystart="81" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a68987ff5c51603479bb76256f38571b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator+</definition>
        <argsstring>(const Matrix &amp;m1, const Matrix &amp;m2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="524" column="19" bodyfile="ql/math/matrix.hpp" bodystart="524" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1afef71f390ad028a2fcac9712111bf0fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator+</definition>
        <argsstring>(const Matrix &amp;m1, Matrix &amp;&amp;m2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="536" column="19" bodyfile="ql/math/matrix.hpp" bodystart="536" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1afd28aba0f7f18aace1c5e8ac5c0de54a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator+</definition>
        <argsstring>(Matrix &amp;&amp;m1, const Matrix &amp;m2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="547" column="19" bodyfile="ql/math/matrix.hpp" bodystart="547" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a6acbdf8f81d5ee6ab8870d4291a4ff3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator+</definition>
        <argsstring>(Matrix &amp;&amp;m1, Matrix &amp;&amp;m2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="558" column="19" bodyfile="ql/math/matrix.hpp" bodystart="558" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ab0ff799d4999e836910eb6d3d815806c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator-</definition>
        <argsstring>(const Matrix &amp;m1)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="569" column="19" bodyfile="ql/math/matrix.hpp" bodystart="569" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a8c699d9e688e42b9f105626953ab2cde" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator-</definition>
        <argsstring>(Matrix &amp;&amp;m1)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <declname>m1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="575" column="19" bodyfile="ql/math/matrix.hpp" bodystart="575" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a62ad458caa68b785420c55ee6090ced4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator-</definition>
        <argsstring>(const Matrix &amp;m1, const Matrix &amp;m2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="580" column="19" bodyfile="ql/math/matrix.hpp" bodystart="580" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a61435e613fd8b1e138e4b2bc68ce86af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator-</definition>
        <argsstring>(const Matrix &amp;m1, Matrix &amp;&amp;m2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="592" column="19" bodyfile="ql/math/matrix.hpp" bodystart="592" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a8dcf1acaa220dbc48aabf81012f1782a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator-</definition>
        <argsstring>(Matrix &amp;&amp;m1, const Matrix &amp;m2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="603" column="19" bodyfile="ql/math/matrix.hpp" bodystart="603" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a13c581e7603d97618b468182837fdfc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator-</definition>
        <argsstring>(Matrix &amp;&amp;m1, Matrix &amp;&amp;m2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="614" column="19" bodyfile="ql/math/matrix.hpp" bodystart="614" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ae335c2de100fa3f2373f4a05131b1757" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator*</definition>
        <argsstring>(const Matrix &amp;m, Real x)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="625" column="19" bodyfile="ql/math/matrix.hpp" bodystart="625" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a10bb277375e5cc841b4c3052a331c12e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator*</definition>
        <argsstring>(Matrix &amp;&amp;m, Real x)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="631" column="19" bodyfile="ql/math/matrix.hpp" bodystart="631" bodyend="634"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ab78dd002ca57277698090bc2800e75f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator*</definition>
        <argsstring>(Real x, const Matrix &amp;m)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="636" column="19" bodyfile="ql/math/matrix.hpp" bodystart="636" bodyend="640"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aa4d778f98f495bd9369a8dab6aec487b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator*</definition>
        <argsstring>(Real x, Matrix &amp;&amp;m)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="642" column="19" bodyfile="ql/math/matrix.hpp" bodystart="642" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a626595fd19669c1589b2da8997c7c284" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator/</definition>
        <argsstring>(const Matrix &amp;m, Real x)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="647" column="19" bodyfile="ql/math/matrix.hpp" bodystart="647" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a441a06b75a259f2430639525e1094f12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator/</definition>
        <argsstring>(Matrix &amp;&amp;m, Real x)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="653" column="19" bodyfile="ql/math/matrix.hpp" bodystart="653" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a5db9a5fa6245daa92f143027926ec16f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator*</definition>
        <argsstring>(const Array &amp;v, const Matrix &amp;m)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="658" column="18" bodyfile="ql/math/matrix.hpp" bodystart="658" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ae382b32fefc7d478247446ba385b9bfc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::operator*</definition>
        <argsstring>(const Matrix &amp;m, const Array &amp;v)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="671" column="18" bodyfile="ql/math/matrix.hpp" bodystart="671" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a09024cc0f513ed50b152d8cf24e6dbcf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::operator*</definition>
        <argsstring>(const Matrix &amp;m1, const Matrix &amp;m2)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="683" column="19" bodyfile="ql/math/matrix.hpp" bodystart="683" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aebac9d15b12ee006122a611d3d603c48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::transpose</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>transpose</name>
        <qualifiedname>QuantLib::transpose</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="700" column="19" bodyfile="ql/math/matrix.hpp" bodystart="700" bodyend="708"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aff0e93c3e50edc052ff586aa7efc41d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::outerProduct</definition>
        <argsstring>(const Array &amp;v1, const Array &amp;v2)</argsstring>
        <name>outerProduct</name>
        <qualifiedname>QuantLib::outerProduct</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="710" column="19" bodyfile="ql/math/matrix.hpp" bodystart="710" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a7959e6a3c9739189a8afc7ee62d5ccb7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator1</type>
          </param>
          <param>
            <type>class Iterator2</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::outerProduct</definition>
        <argsstring>(Iterator1 v1begin, Iterator1 v1end, Iterator2 v2begin, Iterator2 v2end)</argsstring>
        <name>outerProduct</name>
        <qualifiedname>QuantLib::outerProduct</qualifiedname>
        <param>
          <type>Iterator1</type>
          <declname>v1begin</declname>
        </param>
        <param>
          <type>Iterator1</type>
          <declname>v1end</declname>
        </param>
        <param>
          <type>Iterator2</type>
          <declname>v2begin</declname>
        </param>
        <param>
          <type>Iterator2</type>
          <declname>v2end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="715" column="19" bodyfile="ql/math/matrix.hpp" bodystart="715" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aedfb6f5a37878986618b2d3d277ed669" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::swap</definition>
        <argsstring>(Matrix &amp;m1, Matrix &amp;m2) noexcept</argsstring>
        <name>swap</name>
        <qualifiedname>QuantLib::swap</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="732" column="17" bodyfile="ql/math/matrix.hpp" bodystart="732" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a7d7b60ae77974222881e3eea97b6a1ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Matrix &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="736" column="12" bodyfile="ql/math/matrix.hpp" bodystart="736" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ac89e44817120e0da8f736968b992bd46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::CholeskyDecomposition</definition>
        <argsstring>(const Matrix &amp;S, bool flexible)</argsstring>
        <name>CholeskyDecomposition</name>
        <qualifiedname>QuantLib::CholeskyDecomposition</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>S</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>flexible</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/choleskydecomposition.cpp" line="27" column="12" bodyfile="ql/math/matrixutilities/choleskydecomposition.cpp" bodystart="27" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1adf4fcf7742a872dd414795a1405f7c7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::CholeskySolveFor</definition>
        <argsstring>(const Matrix &amp;L, const Array &amp;b)</argsstring>
        <name>CholeskySolveFor</name>
        <qualifiedname>QuantLib::CholeskySolveFor</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>L</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/choleskydecomposition.cpp" line="66" column="11" bodyfile="ql/math/matrixutilities/choleskydecomposition.cpp" bodystart="66" bodyend="85" declfile="ql/math/matrixutilities/choleskydecomposition.hpp" declline="34" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1acfa670e047cd9fc57618a80db9f8dbf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::Expm</definition>
        <argsstring>(const Matrix &amp;M, Real t=1.0, Real tol=QL_EPSILON)</argsstring>
        <name>Expm</name>
        <qualifiedname>QuantLib::Expm</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>t</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>tol</declname>
          <defval><ref refid="group__limit_macros_1ga4f2e6bcf6b19224bce1a5a6234286c17" kindref="member">QL_EPSILON</ref></defval>
        </param>
        <briefdescription>
<para>matrix exponential based on the ordinary differential equations method </para>
        </briefdescription>
        <detaileddescription>
<para>References:</para>
<para>C. Moler; C. Van Loan, 1978, Nineteen Dubious Ways to Compute the Exponential of a <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> <ulink url="http://xa.yimg.com/kq/groups/22199541/1399635765/name/moler-nineteen.pdf">http://xa.yimg.com/kq/groups/22199541/1399635765/name/moler-nineteen.pdf</ulink> returns the matrix exponential exp(t*M) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/expm.cpp" line="53" column="12" bodyfile="ql/math/matrixutilities/expm.cpp" bodystart="53" bodyend="69" declfile="ql/math/matrixutilities/expm.hpp" declline="41" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aff8e33130b0e7222fca99ceeffe94235" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::factorReduction</definition>
        <argsstring>(Matrix mtrx, Size maxIters)</argsstring>
        <name>factorReduction</name>
        <qualifiedname>QuantLib::factorReduction</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
          <declname>mtrx</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxIters</declname>
          <defval>25</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Iterative procedure to compute a correlation matrix reduction to a single factor dependence vector by minimizing the residuals.</para>
<para>It assumes that such a reduction is possible, notice that if the dependence can not be reduced to one factor the correlation factors might be above 1.</para>
<para>The matrix passed is destroyed.</para>
<para>See for instance: &quot;Modern Factor Analysis&quot;, Harry H. Harman, University Of Chicago Press, 1976. Chapter 9 is relevant to this context. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/factorreduction.cpp" line="26" column="17" bodyfile="ql/math/matrixutilities/factorreduction.cpp" bodystart="26" bodyend="102" declfile="ql/math/matrixutilities/factorreduction.hpp" declline="44" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a505d64f84a4000847f8f04ee60398665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DataIterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::getCovariance</definition>
        <argsstring>(DataIterator stdDevBegin, DataIterator stdDevEnd, const Matrix &amp;corr, Real tolerance=1.0e-12)</argsstring>
        <name>getCovariance</name>
        <qualifiedname>QuantLib::getCovariance</qualifiedname>
        <param>
          <type>DataIterator</type>
          <declname>stdDevBegin</declname>
        </param>
        <param>
          <type>DataIterator</type>
          <declname>stdDevEnd</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>corr</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>tolerance</declname>
          <defval>1.0e-12</defval>
        </param>
        <briefdescription>
<para>Calculation of covariance from correlation and standard deviations. </para>
        </briefdescription>
        <detaileddescription>
<para>Combines the correlation matrix and the vector of standard deviations to return the covariance matrix.</para>
<para>Note that only the symmetric part of the correlation matrix is used. Also it is assumed that the diagonal member of the correlation matrix equals one.</para>
<para><simplesect kind="pre"><para>The correlation matrix must be symmetric with the diagonal members equal to one.</para>
</simplesect>
<xrefsect id="test_1_test000049"><xreftitle>Test</xreftitle><xrefdescription><para>tested on know values and cross checked with <ref refid="class_quant_lib_1_1_covariance_decomposition" kindref="compound">CovarianceDecomposition</ref> </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/getcovariance.hpp" line="49" column="12" bodyfile="ql/math/matrixutilities/getcovariance.hpp" bodystart="49" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a63e3654383e628e69d0ae59ac38ae79e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::pseudoSqrt</definition>
        <argsstring>(const Matrix &amp;matrix, SalvagingAlgorithm::Type sa)</argsstring>
        <name>pseudoSqrt</name>
        <qualifiedname>QuantLib::pseudoSqrt</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>SalvagingAlgorithm::Type</type>
          <declname>sa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/pseudosqrt.cpp" line="347" column="12" bodyfile="ql/math/matrixutilities/pseudosqrt.cpp" bodystart="347" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1afa45cefb7c3c8ab3dc0e50352bab7744" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::rankReducedSqrt</definition>
        <argsstring>(const Matrix &amp;matrix, Size maxRank, Real componentRetainedPercentage, SalvagingAlgorithm::Type sa)</argsstring>
        <name>rankReducedSqrt</name>
        <qualifiedname>QuantLib::rankReducedSqrt</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxRank</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>componentRetainedPercentage</declname>
        </param>
        <param>
          <type>SalvagingAlgorithm::Type</type>
          <declname>sa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/pseudosqrt.cpp" line="454" column="12" bodyfile="ql/math/matrixutilities/pseudosqrt.cpp" bodystart="454" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ac3c71fcacccbdc38dcf3e5d286bd75d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt;</type>
        <definition>std::vector&lt; Size &gt; QuantLib::qrDecomposition</definition>
        <argsstring>(const Matrix &amp;A, Matrix &amp;q, Matrix &amp;r, bool pivot=true)</argsstring>
        <name>qrDecomposition</name>
        <qualifiedname>QuantLib::qrDecomposition</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pivot</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>QR decompoisition. </para>
        </briefdescription>
        <detaileddescription>
<para>This implementation is based on MINPACK (<ulink url="http://www.netlib.org/minpack">http://www.netlib.org/minpack</ulink>, <ulink url="http://www.netlib.org/cephes/linalg.tgz">http://www.netlib.org/cephes/linalg.tgz</ulink>)</para>
<para>This subroutine uses householder transformations with column pivoting (optional) to compute a qr factorization of the m by n matrix A. That is, qrfac determines an orthogonal matrix q, a permutation matrix p, and an upper trapezoidal matrix r with diagonal elements of nonincreasing magnitude, such that A*p = q*r.</para>
<para>Return value ipvt is an integer array of length n, which defines the permutation matrix p such that A*p = q*r. Column j of p is column ipvt(j) of the identity matrix.</para>
<para>See lmdiff.cpp for further details. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/qrdecomposition.cpp" line="30" column="17" bodyfile="ql/math/matrixutilities/qrdecomposition.cpp" bodystart="30" bodyend="123" declfile="ql/math/matrixutilities/qrdecomposition.hpp" declline="49" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a91d2a9f5f45584ed32c5804d1a8c18a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::qrSolve</definition>
        <argsstring>(const Matrix &amp;a, const Array &amp;b, bool pivot=true, const Array &amp;d=Array())</argsstring>
        <name>qrSolve</name>
        <qualifiedname>QuantLib::qrSolve</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pivot</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>d</declname>
          <defval><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref>()</defval>
        </param>
        <briefdescription>
<para>QR Solve. </para>
        </briefdescription>
        <detaileddescription>
<para>This implementation is based on MINPACK (<ulink url="http://www.netlib.org/minpack">http://www.netlib.org/minpack</ulink>, <ulink url="http://www.netlib.org/cephes/linalg.tgz">http://www.netlib.org/cephes/linalg.tgz</ulink>)</para>
<para>Given an m by n matrix A, an n by n diagonal matrix d, and an m-vector b, the problem is to determine an x which solves the system</para>
<para>A*x = b , d*x = 0 ,</para>
<para>in the least squares sense.</para>
<para>d is an input array of length n which must contain the diagonal elements of the matrix d.</para>
<para>See lmdiff.cpp for further details. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/qrdecomposition.cpp" line="125" column="11" bodyfile="ql/math/matrixutilities/qrdecomposition.cpp" bodystart="125" bodyend="159" declfile="ql/math/matrixutilities/qrdecomposition.hpp" declline="72" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a766d4538a7117b7d079b10d27e3dd6d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::prod</definition>
        <argsstring>(const SparseMatrix &amp;A, const Array &amp;x)</argsstring>
        <name>prod</name>
        <qualifiedname>QuantLib::prod</qualifiedname>
        <param>
          <type>const SparseMatrix &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/sparsematrix.hpp" line="51" column="18" bodyfile="ql/math/matrixutilities/sparsematrix.hpp" bodystart="51" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a573628be8b94717868e2c6a1058cd4d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::triangularAnglesParametrization</definition>
        <argsstring>(const Array &amp;angles, Size matrixSize, Size rank)</argsstring>
        <name>triangularAnglesParametrization</name>
        <qualifiedname>QuantLib::triangularAnglesParametrization</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>angles</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>matrixSize</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>rank</declname>
        </param>
        <briefdescription>
<para>Returns the Triangular Angles Parametrized correlation matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>The matrix <formula id="46">$ m $</formula> is filled with values corresponding to angles given in the <formula id="295">$ angles $</formula> vector. See equation (24) in &quot;Parameterizing correlations: a geometric interpretation&quot; by Francesco Rapisarda, Damiano Brigo, Fabio Mercurio</para>
<para><xrefsect id="test_1_test000054"><xreftitle>Test</xreftitle><xrefdescription><para><itemizedlist>
<listitem><para>the correctness of the results is tested by reproducing known good data.</para>
</listitem><listitem><para>the correctness of the results is tested by checking returned values against numerical calculations. </para>
</listitem></itemizedlist>
</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/tapcorrelations.cpp" line="25" column="12" bodyfile="ql/math/matrixutilities/tapcorrelations.cpp" bodystart="25" bodyend="55" declfile="ql/math/matrixutilities/tapcorrelations.hpp" declline="45" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a05a559812cad7eda4a65b0775d522ca0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::lmmTriangularAnglesParametrization</definition>
        <argsstring>(const Array &amp;angles, Size matrixSize, Size)</argsstring>
        <name>lmmTriangularAnglesParametrization</name>
        <qualifiedname>QuantLib::lmmTriangularAnglesParametrization</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>angles</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>matrixSize</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <defname>rank</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/tapcorrelations.cpp" line="57" column="12" bodyfile="ql/math/matrixutilities/tapcorrelations.cpp" bodystart="57" bodyend="80" declfile="ql/math/matrixutilities/tapcorrelations.hpp" declline="49" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a9432378bf13d8f6dfd11ff7c30f3bdc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::triangularAnglesParametrizationUnconstrained</definition>
        <argsstring>(const Array &amp;x, Size matrixSize, Size rank)</argsstring>
        <name>triangularAnglesParametrizationUnconstrained</name>
        <qualifiedname>QuantLib::triangularAnglesParametrizationUnconstrained</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>matrixSize</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>rank</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/tapcorrelations.cpp" line="82" column="12" bodyfile="ql/math/matrixutilities/tapcorrelations.cpp" bodystart="82" bodyend="90" declfile="ql/math/matrixutilities/tapcorrelations.hpp" declline="55" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ac45deace5fe7e29061a29b76b610e297" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::lmmTriangularAnglesParametrizationUnconstrained</definition>
        <argsstring>(const Array &amp;x, Size matrixSize, Size rank)</argsstring>
        <name>lmmTriangularAnglesParametrizationUnconstrained</name>
        <qualifiedname>QuantLib::lmmTriangularAnglesParametrizationUnconstrained</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>matrixSize</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>rank</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/tapcorrelations.cpp" line="92" column="12" bodyfile="ql/math/matrixutilities/tapcorrelations.cpp" bodystart="92" bodyend="100" declfile="ql/math/matrixutilities/tapcorrelations.hpp" declline="59" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1af62ddda3dd7e71796de3b731df769228" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::triangularAnglesParametrizationRankThree</definition>
        <argsstring>(Real alpha, Real t0, Real epsilon, Size nbRows)</argsstring>
        <name>triangularAnglesParametrizationRankThree</name>
        <qualifiedname>QuantLib::triangularAnglesParametrizationRankThree</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>nbRows</declname>
        </param>
        <briefdescription>
<para>Returns the rank reduced Triangular Angles Parametrized correlation matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>The matrix <formula id="46">$ m $</formula> is filled with values corresponding to angles corresponding to the 3D spherical spiral parameterized by <formula id="178">$ alpha $</formula>, <formula id="296">$ t0 $</formula>, <formula id="297">$ epsilon $</formula> values. See equation (32) in &quot;Parameterizing correlations: a geometric interpretation&quot; by Francesco Rapisarda, Damiano Brigo, Fabio Mercurio</para>
<para><xrefsect id="test_1_test000055"><xreftitle>Test</xreftitle><xrefdescription><para><itemizedlist>
<listitem><para>the correctness of the results is tested by reproducing known good data.</para>
</listitem><listitem><para>the correctness of the results is tested by checking returned values against numerical calculations. </para>
</listitem></itemizedlist>
</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/tapcorrelations.cpp" line="102" column="12" bodyfile="ql/math/matrixutilities/tapcorrelations.cpp" bodystart="102" bodyend="113" declfile="ql/math/matrixutilities/tapcorrelations.hpp" declline="77" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ab4b101aec7b61431433d56b0c8f3b868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::triangularAnglesParametrizationRankThreeVectorial</definition>
        <argsstring>(const Array &amp;parameters, Size nbRows)</argsstring>
        <name>triangularAnglesParametrizationRankThreeVectorial</name>
        <qualifiedname>QuantLib::triangularAnglesParametrizationRankThreeVectorial</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>nbRows</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/tapcorrelations.cpp" line="115" column="12" bodyfile="ql/math/matrixutilities/tapcorrelations.cpp" bodystart="115" bodyend="124" declfile="ql/math/matrixutilities/tapcorrelations.hpp" declline="83" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1abdbd52636909eeafc8685330236ab1dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::modifiedBesselFunction_i</definition>
        <argsstring>(Real nu, Real x)</argsstring>
        <name>modifiedBesselFunction_i</name>
        <qualifiedname>QuantLib::modifiedBesselFunction_i</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nu</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/modifiedbessel.cpp" line="96" column="10" bodyfile="ql/math/modifiedbessel.cpp" bodystart="96" bodyend="100" declfile="ql/math/modifiedbessel.hpp" declline="40" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a04a78de402c5a88b7d48557634b03631" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::complex&lt; Real &gt; QuantLib::modifiedBesselFunction_i</definition>
        <argsstring>(Real nu, const std::complex&lt; Real &gt; &amp;z)</argsstring>
        <name>modifiedBesselFunction_i</name>
        <qualifiedname>QuantLib::modifiedBesselFunction_i</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nu</declname>
        </param>
        <param>
          <type>const std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/modifiedbessel.cpp" line="102" column="18" bodyfile="ql/math/modifiedbessel.cpp" bodystart="102" bodyend="109" declfile="ql/math/modifiedbessel.hpp" declline="45" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ab0aff1116f31371000a44c21d2c5235e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::modifiedBesselFunction_k</definition>
        <argsstring>(Real nu, Real x)</argsstring>
        <name>modifiedBesselFunction_k</name>
        <qualifiedname>QuantLib::modifiedBesselFunction_k</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nu</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/modifiedbessel.cpp" line="111" column="10" bodyfile="ql/math/modifiedbessel.cpp" bodystart="111" bodyend="113" declfile="ql/math/modifiedbessel.hpp" declline="41" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a9abecd512b12a1f0a9868d39a5b86784" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::complex&lt; Real &gt; QuantLib::modifiedBesselFunction_k</definition>
        <argsstring>(Real nu, const std::complex&lt; Real &gt; &amp;z)</argsstring>
        <name>modifiedBesselFunction_k</name>
        <qualifiedname>QuantLib::modifiedBesselFunction_k</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nu</declname>
        </param>
        <param>
          <type>const std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/modifiedbessel.cpp" line="115" column="18" bodyfile="ql/math/modifiedbessel.cpp" bodystart="115" bodyend="122" declfile="ql/math/modifiedbessel.hpp" declline="47" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a447643cbceb77624e6f41d3f9e8a15e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::modifiedBesselFunction_i_exponentiallyWeighted</definition>
        <argsstring>(Real nu, Real x)</argsstring>
        <name>modifiedBesselFunction_i_exponentiallyWeighted</name>
        <qualifiedname>QuantLib::modifiedBesselFunction_i_exponentiallyWeighted</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nu</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/modifiedbessel.cpp" line="124" column="10" bodyfile="ql/math/modifiedbessel.cpp" bodystart="124" bodyend="129" declfile="ql/math/modifiedbessel.hpp" declline="42" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a3dd450042e7b336cb4c096217f8a5953" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::complex&lt; Real &gt; QuantLib::modifiedBesselFunction_i_exponentiallyWeighted</definition>
        <argsstring>(Real nu, const std::complex&lt; Real &gt; &amp;z)</argsstring>
        <name>modifiedBesselFunction_i_exponentiallyWeighted</name>
        <qualifiedname>QuantLib::modifiedBesselFunction_i_exponentiallyWeighted</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nu</declname>
        </param>
        <param>
          <type>const std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/modifiedbessel.cpp" line="131" column="18" bodyfile="ql/math/modifiedbessel.cpp" bodystart="131" bodyend="140" declfile="ql/math/modifiedbessel.hpp" declline="50" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a79283d1c54512c079214fcc505144416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::modifiedBesselFunction_k_exponentiallyWeighted</definition>
        <argsstring>(Real nu, Real x)</argsstring>
        <name>modifiedBesselFunction_k_exponentiallyWeighted</name>
        <qualifiedname>QuantLib::modifiedBesselFunction_k_exponentiallyWeighted</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nu</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/modifiedbessel.cpp" line="142" column="10" bodyfile="ql/math/modifiedbessel.cpp" bodystart="142" bodyend="145" declfile="ql/math/modifiedbessel.hpp" declline="43" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1af5680b8219d9ced8de55bf778ccd3911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::complex&lt; Real &gt; QuantLib::modifiedBesselFunction_k_exponentiallyWeighted</definition>
        <argsstring>(Real nu, const std::complex&lt; Real &gt; &amp;z)</argsstring>
        <name>modifiedBesselFunction_k_exponentiallyWeighted</name>
        <qualifiedname>QuantLib::modifiedBesselFunction_k_exponentiallyWeighted</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nu</declname>
        </param>
        <param>
          <type>const std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/modifiedbessel.cpp" line="147" column="18" bodyfile="ql/math/modifiedbessel.cpp" bodystart="147" bodyend="156" declfile="ql/math/modifiedbessel.hpp" declline="53" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a1f457447ac579d8f4c37be990653c720" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, EndCriteria::Type ec)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>EndCriteria::Type</type>
          <declname>ec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/endcriteria.cpp" line="167" column="5" bodyfile="ql/math/optimization/endcriteria.cpp" bodystart="167" bodyend="188" declfile="ql/math/optimization/endcriteria.hpp" declline="110" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a731269f6f79ed807051070384e85c20e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::sphereCylinderOptimizerClosest</definition>
        <argsstring>(Real r, Real s, Real alpha, Real z1, Real z2, Real z3, Natural maxIterations, Real tolerance, Real zweight)</argsstring>
        <name>sphereCylinderOptimizerClosest</name>
        <qualifiedname>QuantLib::sphereCylinderOptimizerClosest</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>z1</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>z2</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>z3</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref></type>
          <declname>maxIterations</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>zweight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/spherecylinder.cpp" line="176" column="17" bodyfile="ql/math/optimization/spherecylinder.cpp" bodystart="176" bodyend="199" declfile="ql/math/optimization/spherecylinder.hpp" declline="68" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a7798b6e50e91110f9236e811611fe90a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::swap</definition>
        <argsstring>(TridiagonalOperator &amp;, TridiagonalOperator &amp;) noexcept</argsstring>
        <name>swap</name>
        <qualifiedname>QuantLib::swap</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_tridiagonal_operator" kindref="compound">TridiagonalOperator</ref> &amp;</type>
          <defname>L1</defname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_tridiagonal_operator" kindref="compound">TridiagonalOperator</ref> &amp;</type>
          <defname>L2</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/tridiagonaloperator.hpp" line="252" column="17" bodyfile="ql/methods/finitedifferences/tridiagonaloperator.hpp" bodystart="252" bodyend="255" declfile="ql/methods/finitedifferences/tridiagonaloperator.hpp" declline="122" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a1cf1218ebb74607cc8c43303ec6c7d80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_tridiagonal_operator" kindref="compound">TridiagonalOperator</ref></type>
        <definition>TridiagonalOperator QuantLib::operator+</definition>
        <argsstring>(const TridiagonalOperator &amp;D)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_tridiagonal_operator" kindref="compound">TridiagonalOperator</ref> &amp;</type>
          <declname>D</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/tridiagonaloperator.hpp" line="194" column="32" bodyfile="ql/methods/finitedifferences/tridiagonaloperator.hpp" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ab19f5a3ce4b69ddb92515528a7c258f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_tridiagonal_operator" kindref="compound">TridiagonalOperator</ref></type>
        <definition>TridiagonalOperator QuantLib::operator-</definition>
        <argsstring>(const TridiagonalOperator &amp;D)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_tridiagonal_operator" kindref="compound">TridiagonalOperator</ref> &amp;</type>
          <declname>D</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/tridiagonaloperator.hpp" line="199" column="32" bodyfile="ql/methods/finitedifferences/tridiagonaloperator.hpp" bodystart="199" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a54129227e502fe9b8a9aee95cd69e6b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_tridiagonal_operator" kindref="compound">TridiagonalOperator</ref></type>
        <definition>TridiagonalOperator QuantLib::operator+</definition>
        <argsstring>(const TridiagonalOperator &amp;D1, const TridiagonalOperator &amp;D2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_tridiagonal_operator" kindref="compound">TridiagonalOperator</ref> &amp;</type>
          <declname>D1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_tridiagonal_operator" kindref="compound">TridiagonalOperator</ref> &amp;</type>
          <declname>D2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/tridiagonaloperator.hpp" line="207" column="32" bodyfile="ql/methods/finitedifferences/tridiagonaloperator.hpp" bodystart="207" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a393872cbf2e3cee8930f105330317935" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_tridiagonal_operator" kindref="compound">TridiagonalOperator</ref></type>
        <definition>TridiagonalOperator QuantLib::operator-</definition>
        <argsstring>(const TridiagonalOperator &amp;D1, const TridiagonalOperator &amp;D2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_tridiagonal_operator" kindref="compound">TridiagonalOperator</ref> &amp;</type>
          <declname>D1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_tridiagonal_operator" kindref="compound">TridiagonalOperator</ref> &amp;</type>
          <declname>D2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/tridiagonaloperator.hpp" line="216" column="32" bodyfile="ql/methods/finitedifferences/tridiagonaloperator.hpp" bodystart="216" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a8a09864c01b2d0027935521a21e10e22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_tridiagonal_operator" kindref="compound">TridiagonalOperator</ref></type>
        <definition>TridiagonalOperator QuantLib::operator*</definition>
        <argsstring>(Real a, const TridiagonalOperator &amp;D)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_tridiagonal_operator" kindref="compound">TridiagonalOperator</ref> &amp;</type>
          <declname>D</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/tridiagonaloperator.hpp" line="225" column="32" bodyfile="ql/methods/finitedifferences/tridiagonaloperator.hpp" bodystart="225" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a069419c337994a51d004def677189367" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_tridiagonal_operator" kindref="compound">TridiagonalOperator</ref></type>
        <definition>TridiagonalOperator QuantLib::operator*</definition>
        <argsstring>(const TridiagonalOperator &amp;D, Real a)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_tridiagonal_operator" kindref="compound">TridiagonalOperator</ref> &amp;</type>
          <declname>D</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/tridiagonaloperator.hpp" line="234" column="32" bodyfile="ql/methods/finitedifferences/tridiagonaloperator.hpp" bodystart="234" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1af788467c6646328b5ff82d8f0c8e9f94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_tridiagonal_operator" kindref="compound">TridiagonalOperator</ref></type>
        <definition>TridiagonalOperator QuantLib::operator/</definition>
        <argsstring>(const TridiagonalOperator &amp;D, Real a)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_tridiagonal_operator" kindref="compound">TridiagonalOperator</ref> &amp;</type>
          <declname>D</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/tridiagonaloperator.hpp" line="243" column="32" bodyfile="ql/methods/finitedifferences/tridiagonaloperator.hpp" bodystart="243" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a1eb8f30fb584a6d2b39c7ea348e2a48e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::genericLongstaffSchwartzRegression</definition>
        <argsstring>(std::vector&lt; std::vector&lt; NodeData &gt; &gt; &amp;simulationData, std::vector&lt; std::vector&lt; Real &gt; &gt; &amp;basisCoefficients)</argsstring>
        <name>genericLongstaffSchwartzRegression</name>
        <qualifiedname>QuantLib::genericLongstaffSchwartzRegression</qualifiedname>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="struct_quant_lib_1_1_node_data" kindref="compound">NodeData</ref> &gt; &gt; &amp;</type>
          <declname>simulationData</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt; &amp;</type>
          <declname>basisCoefficients</declname>
        </param>
        <briefdescription>
<para>returns the biased estimate obtained while regressing </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/genericlsregression.cpp" line="26" column="10" bodyfile="ql/methods/montecarlo/genericlsregression.cpp" bodystart="26" bodyend="108" declfile="ql/methods/montecarlo/genericlsregression.hpp" declline="38" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a5461676d8c9c5f75aa942b4ee80872fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::genericEarlyExerciseOptimization</definition>
        <argsstring>(std::vector&lt; std::vector&lt; NodeData &gt; &gt; &amp;simulationData, const ParametricExercise &amp;exercise, std::vector&lt; std::vector&lt; Real &gt; &gt; &amp;parameters, const EndCriteria &amp;endCriteria, OptimizationMethod &amp;method)</argsstring>
        <name>genericEarlyExerciseOptimization</name>
        <qualifiedname>QuantLib::genericEarlyExerciseOptimization</qualifiedname>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="struct_quant_lib_1_1_node_data" kindref="compound">NodeData</ref> &gt; &gt; &amp;</type>
          <declname>simulationData</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_parametric_exercise" kindref="compound">ParametricExercise</ref> &amp;</type>
          <declname>exercise</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref> &amp;</type>
          <declname>endCriteria</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_optimization_method" kindref="compound">OptimizationMethod</ref> &amp;</type>
          <declname>method</declname>
        </param>
        <briefdescription>
<para>returns the biased estimate obtained while optimizing </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/parametricexercise.cpp" line="80" column="10" bodyfile="ql/methods/montecarlo/parametricexercise.cpp" bodystart="80" bodyend="133" declfile="ql/methods/montecarlo/parametricexercise.hpp" declline="53" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1affdf0ca758e1c79f6139e953e7e7f0be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::collectNodeData</definition>
        <argsstring>(MarketModelEvolver &amp;evolver, MarketModelMultiProduct &amp;product, MarketModelNodeDataProvider &amp;dataProvider, MarketModelExerciseValue &amp;rebate, MarketModelExerciseValue &amp;control, Size numberOfPaths, std::vector&lt; std::vector&lt; NodeData &gt; &gt; &amp;collectedData)</argsstring>
        <name>collectNodeData</name>
        <qualifiedname>QuantLib::collectNodeData</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_market_model_evolver" kindref="compound">MarketModelEvolver</ref> &amp;</type>
          <declname>evolver</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_market_model_multi_product" kindref="compound">MarketModelMultiProduct</ref> &amp;</type>
          <declname>product</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_market_model_node_data_provider" kindref="compound">MarketModelNodeDataProvider</ref> &amp;</type>
          <declname>dataProvider</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_market_model_exercise_value" kindref="compound">MarketModelExerciseValue</ref> &amp;</type>
          <declname>rebate</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_market_model_exercise_value" kindref="compound">MarketModelExerciseValue</ref> &amp;</type>
          <declname>control</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>numberOfPaths</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="struct_quant_lib_1_1_node_data" kindref="compound">NodeData</ref> &gt; &gt; &amp;</type>
          <declname>collectedData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/callability/collectnodedata.cpp" line="36" column="10" bodyfile="ql/models/marketmodels/callability/collectnodedata.cpp" bodystart="36" bodyend="203" declfile="ql/models/marketmodels/callability/collectnodedata.hpp" declline="35" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1abf73b1d1ee719e06bded0b35313cdc3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::exponentialCorrelations</definition>
        <argsstring>(const std::vector&lt; Time &gt; &amp;rateTimes, Real longTermCorr, Real beta, Real gamma, Time time)</argsstring>
        <name>exponentialCorrelations</name>
        <qualifiedname>QuantLib::exponentialCorrelations</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt; &amp;</type>
          <declname>rateTimes</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>longTermCorr</declname>
          <defval>0.5</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>beta</declname>
          <defval>0.2</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>gamma</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Exponential correlation L = long term correlation beta = exponential decay of correlation between far away forward rates gamma = exponent for time to go t = time dependence </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/correlations/expcorrelations.cpp" line="32" column="12" bodyfile="ql/models/marketmodels/correlations/expcorrelations.cpp" bodystart="32" bodyend="71" declfile="ql/models/marketmodels/correlations/expcorrelations.hpp" declline="41" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a5670296caccd0a417f0d71248fcf82a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::forwardsFromDiscountRatios</definition>
        <argsstring>(const Size firstValidIndex, const std::vector&lt; DiscountFactor &gt; &amp;ds, const std::vector&lt; Time &gt; &amp;taus, std::vector&lt; Rate &gt; &amp;fwds)</argsstring>
        <name>forwardsFromDiscountRatios</name>
        <qualifiedname>QuantLib::forwardsFromDiscountRatios</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>firstValidIndex</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a05e8e288a4bdedfe5b4e16d8cec14f1c" kindref="member">DiscountFactor</ref> &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt; &amp;</type>
          <declname>taus</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt; &amp;</type>
          <declname>fwds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/curvestate.cpp" line="45" column="10" bodyfile="ql/models/marketmodels/curvestate.cpp" bodystart="45" bodyend="56" declfile="ql/models/marketmodels/curvestate.hpp" declline="88" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a72952f03c0b5c869a0dafc413d51dbe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::coterminalFromDiscountRatios</definition>
        <argsstring>(const Size firstValidIndex, const std::vector&lt; DiscountFactor &gt; &amp;discountFactors, const std::vector&lt; Time &gt; &amp;taus, std::vector&lt; Rate &gt; &amp;cotSwapRates, std::vector&lt; Real &gt; &amp;cotSwapAnnuities)</argsstring>
        <name>coterminalFromDiscountRatios</name>
        <qualifiedname>QuantLib::coterminalFromDiscountRatios</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>firstValidIndex</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a05e8e288a4bdedfe5b4e16d8cec14f1c" kindref="member">DiscountFactor</ref> &gt; &amp;</type>
          <declname>discountFactors</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt; &amp;</type>
          <declname>taus</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt; &amp;</type>
          <declname>cotSwapRates</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>cotSwapAnnuities</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/curvestate.cpp" line="58" column="10" bodyfile="ql/models/marketmodels/curvestate.cpp" bodystart="58" bodyend="85" declfile="ql/models/marketmodels/curvestate.hpp" declline="93" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a58574b1aac257f84b8b34507d15a6aa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::constantMaturityFromDiscountRatios</definition>
        <argsstring>(const Size spanningForwards, const Size firstValidIndex, const std::vector&lt; DiscountFactor &gt; &amp;ds, const std::vector&lt; Time &gt; &amp;taus, std::vector&lt; Rate &gt; &amp;constMatSwapRates, std::vector&lt; Real &gt; &amp;constMatSwapAnnuities)</argsstring>
        <name>constantMaturityFromDiscountRatios</name>
        <qualifiedname>QuantLib::constantMaturityFromDiscountRatios</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>spanningForwards</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>firstValidIndex</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a05e8e288a4bdedfe5b4e16d8cec14f1c" kindref="member">DiscountFactor</ref> &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt; &amp;</type>
          <declname>taus</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt; &amp;</type>
          <declname>constMatSwapRates</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>constMatSwapAnnuities</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/curvestate.cpp" line="88" column="10" bodyfile="ql/models/marketmodels/curvestate.cpp" bodystart="88" bodyend="124" declfile="ql/models/marketmodels/curvestate.hpp" declline="99" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a79655859f6ff3c7cbe88730ecec8cb1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::checkCompatibility</definition>
        <argsstring>(const EvolutionDescription &amp;evolution, const std::vector&lt; Size &gt; &amp;numeraires)</argsstring>
        <name>checkCompatibility</name>
        <qualifiedname>QuantLib::checkCompatibility</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_evolution_description" kindref="compound">EvolutionDescription</ref> &amp;</type>
          <declname>evolution</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt; &amp;</type>
          <declname>numeraires</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check that there is one numeraire for each evolution time. Each numeraire must be an index amongst the rate times so it ranges from 0 to n. Each numeraire must not have expired before the end of the step. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/evolutiondescription.cpp" line="111" column="10" bodyfile="ql/models/marketmodels/evolutiondescription.cpp" bodystart="111" bodyend="127" declfile="ql/models/marketmodels/evolutiondescription.hpp" declline="90" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ab6ef4e92ef66e91f3e04e6a7587fbfb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::isInTerminalMeasure</definition>
        <argsstring>(const EvolutionDescription &amp;evolution, const std::vector&lt; Size &gt; &amp;numeraires)</argsstring>
        <name>isInTerminalMeasure</name>
        <qualifiedname>QuantLib::isInTerminalMeasure</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_evolution_description" kindref="compound">EvolutionDescription</ref> &amp;</type>
          <declname>evolution</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt; &amp;</type>
          <declname>numeraires</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/evolutiondescription.cpp" line="129" column="10" bodyfile="ql/models/marketmodels/evolutiondescription.cpp" bodystart="129" bodyend="134" declfile="ql/models/marketmodels/evolutiondescription.hpp" declline="93" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a79abf8ddaaa61af37a794c063ca4062a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::isInMoneyMarketPlusMeasure</definition>
        <argsstring>(const EvolutionDescription &amp;evolution, const std::vector&lt; Size &gt; &amp;numeraires, Size offset)</argsstring>
        <name>isInMoneyMarketPlusMeasure</name>
        <qualifiedname>QuantLib::isInMoneyMarketPlusMeasure</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_evolution_description" kindref="compound">EvolutionDescription</ref> &amp;</type>
          <declname>evolution</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt; &amp;</type>
          <declname>numeraires</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/evolutiondescription.cpp" line="136" column="10" bodyfile="ql/models/marketmodels/evolutiondescription.cpp" bodystart="136" bodyend="153" declfile="ql/models/marketmodels/evolutiondescription.hpp" declline="95" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a49dad3fd085c6361cd8defcf21f9444e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::isInMoneyMarketMeasure</definition>
        <argsstring>(const EvolutionDescription &amp;evolution, const std::vector&lt; Size &gt; &amp;numeraires)</argsstring>
        <name>isInMoneyMarketMeasure</name>
        <qualifiedname>QuantLib::isInMoneyMarketMeasure</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_evolution_description" kindref="compound">EvolutionDescription</ref> &amp;</type>
          <declname>evolution</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt; &amp;</type>
          <declname>numeraires</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/evolutiondescription.cpp" line="155" column="10" bodyfile="ql/models/marketmodels/evolutiondescription.cpp" bodystart="155" bodyend="158" declfile="ql/models/marketmodels/evolutiondescription.hpp" declline="98" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aadcedecae099266c9351a715b276b127" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt;</type>
        <definition>std::vector&lt; Size &gt; QuantLib::terminalMeasure</definition>
        <argsstring>(const EvolutionDescription &amp;evolution)</argsstring>
        <name>terminalMeasure</name>
        <qualifiedname>QuantLib::terminalMeasure</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_evolution_description" kindref="compound">EvolutionDescription</ref> &amp;</type>
          <declname>evolution</declname>
        </param>
        <briefdescription>
<para>Terminal measure: the last bond is used as numeraire. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/evolutiondescription.cpp" line="160" column="17" bodyfile="ql/models/marketmodels/evolutiondescription.cpp" bodystart="160" bodyend="164" declfile="ql/models/marketmodels/evolutiondescription.hpp" declline="102" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a2a9372579dbf6f4cf14a92ac2f4c9f6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt;</type>
        <definition>std::vector&lt; Size &gt; QuantLib::moneyMarketPlusMeasure</definition>
        <argsstring>(const EvolutionDescription &amp;ev, Size offset)</argsstring>
        <name>moneyMarketPlusMeasure</name>
        <qualifiedname>QuantLib::moneyMarketPlusMeasure</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_evolution_description" kindref="compound">EvolutionDescription</ref> &amp;</type>
          <defname>ev</defname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>offset</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Offsetted discretely compounded money market account measure: for each step the offset-th unexpired bond is used as numeraire. When offset=0 the result is the usual discretely compounded money market account measure </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/evolutiondescription.cpp" line="166" column="17" bodyfile="ql/models/marketmodels/evolutiondescription.cpp" bodystart="166" bodyend="184" declfile="ql/models/marketmodels/evolutiondescription.hpp" declline="109" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a9a84c44a3d32c1731116589f4f754cc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt;</type>
        <definition>std::vector&lt; Size &gt; QuantLib::moneyMarketMeasure</definition>
        <argsstring>(const EvolutionDescription &amp;evol)</argsstring>
        <name>moneyMarketMeasure</name>
        <qualifiedname>QuantLib::moneyMarketMeasure</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_evolution_description" kindref="compound">EvolutionDescription</ref> &amp;</type>
          <defname>evol</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Discretely compounded money market account measure: for each step the first unexpired bond is used as numeraire. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/evolutiondescription.cpp" line="186" column="17" bodyfile="ql/models/marketmodels/evolutiondescription.cpp" bodystart="186" bodyend="188" declfile="ql/models/marketmodels/evolutiondescription.hpp" declline="115" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aa392d4df5e8caa301ef84c12043230ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Traits</type>
          </param>
          <param>
            <type>class Interpolator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void QuantLib::historicalForwardRatesAnalysis</definition>
        <argsstring>(SequenceStatistics &amp;statistics, std::vector&lt; Date &gt; &amp;skippedDates, std::vector&lt; std::string &gt; &amp;skippedDatesErrorMessage, std::vector&lt; Date &gt; &amp;failedDates, std::vector&lt; std::string &gt; &amp;failedDatesErrorMessage, std::vector&lt; Period &gt; &amp;fixingPeriods, const Date &amp;startDate, const Date &amp;endDate, const Period &amp;step, const ext::shared_ptr&lt; InterestRateIndex &gt; &amp;fwdIndex, const Period &amp;initialGap, const Period &amp;horizon, const std::vector&lt; ext::shared_ptr&lt; IborIndex &gt; &gt; &amp;iborIndexes, const std::vector&lt; ext::shared_ptr&lt; SwapIndex &gt; &gt; &amp;swapIndexes, const DayCounter &amp;yieldCurveDayCounter, Real yieldCurveAccuracy=1.0e-12, const Interpolator &amp;i=Interpolator())</argsstring>
        <name>historicalForwardRatesAnalysis</name>
        <qualifiedname>QuantLib::historicalForwardRatesAnalysis</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a7563e2b2e11d54d5a55a58ae124c3349" kindref="member">SequenceStatistics</ref> &amp;</type>
          <declname>statistics</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt; &amp;</type>
          <declname>skippedDates</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>skippedDatesErrorMessage</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt; &amp;</type>
          <declname>failedDates</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>failedDatesErrorMessage</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &gt; &amp;</type>
          <declname>fixingPeriods</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>startDate</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>endDate</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>step</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_interest_rate_index" kindref="compound">InterestRateIndex</ref> &gt; &amp;</type>
          <declname>fwdIndex</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>initialGap</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>horizon</declname>
        </param>
        <param>
          <type>const std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_ibor_index" kindref="compound">IborIndex</ref> &gt; &gt; &amp;</type>
          <declname>iborIndexes</declname>
        </param>
        <param>
          <type>const std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_swap_index" kindref="compound">SwapIndex</ref> &gt; &gt; &amp;</type>
          <declname>swapIndexes</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>yieldCurveDayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>yieldCurveAccuracy</declname>
          <defval>1.0e-12</defval>
        </param>
        <param>
          <type>const Interpolator &amp;</type>
          <declname>i</declname>
          <defval>Interpolator()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/historicalforwardratesanalysis.hpp" line="44" column="10" bodyfile="ql/models/marketmodels/historicalforwardratesanalysis.hpp" bodystart="44" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a9c01ff62da397f3defffa0c0c7ab3dae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::historicalRatesAnalysis</definition>
        <argsstring>(SequenceStatistics &amp;statistics, std::vector&lt; Date &gt; &amp;skippedDates, std::vector&lt; std::string &gt; &amp;skippedDatesErrorMessage, const Date &amp;startDate, const Date &amp;endDate, const Period &amp;step, const std::vector&lt; ext::shared_ptr&lt; InterestRateIndex &gt; &gt; &amp;indexes)</argsstring>
        <name>historicalRatesAnalysis</name>
        <qualifiedname>QuantLib::historicalRatesAnalysis</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a7563e2b2e11d54d5a55a58ae124c3349" kindref="member">SequenceStatistics</ref> &amp;</type>
          <declname>statistics</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt; &amp;</type>
          <declname>skippedDates</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>skippedDatesErrorMessage</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>startDate</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>endDate</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>step</declname>
        </param>
        <param>
          <type>const std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_interest_rate_index" kindref="compound">InterestRateIndex</ref> &gt; &gt; &amp;</type>
          <declname>indexes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/historicalratesanalysis.cpp" line="27" column="10" bodyfile="ql/models/marketmodels/historicalratesanalysis.cpp" bodystart="27" bodyend="80" declfile="ql/models/marketmodels/historicalratesanalysis.hpp" declline="34" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a28c1fbafe59149103fa0f4aa2be3f86c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref> &gt;</type>
        <definition>std::vector&lt; Volatility &gt; QuantLib::rateVolDifferences</definition>
        <argsstring>(const MarketModel &amp;marketModel1, const MarketModel &amp;marketModel2)</argsstring>
        <name>rateVolDifferences</name>
        <qualifiedname>QuantLib::rateVolDifferences</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_market_model" kindref="compound">MarketModel</ref> &amp;</type>
          <declname>marketModel1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_market_model" kindref="compound">MarketModel</ref> &amp;</type>
          <declname>marketModel2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/marketmodeldifferences.cpp" line="27" column="17" bodyfile="ql/models/marketmodels/marketmodeldifferences.cpp" bodystart="27" bodyend="53" declfile="ql/models/marketmodels/marketmodeldifferences.hpp" declline="33" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ac00277d98e0c93e9afda2101c7beb47c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref> &gt;</type>
        <definition>std::vector&lt; Spread &gt; QuantLib::rateInstVolDifferences</definition>
        <argsstring>(const MarketModel &amp;marketModel1, const MarketModel &amp;marketModel2, Size index)</argsstring>
        <name>rateInstVolDifferences</name>
        <qualifiedname>QuantLib::rateInstVolDifferences</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_market_model" kindref="compound">MarketModel</ref> &amp;</type>
          <declname>marketModel1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_market_model" kindref="compound">MarketModel</ref> &amp;</type>
          <declname>marketModel2</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/marketmodeldifferences.cpp" line="55" column="17" bodyfile="ql/models/marketmodels/marketmodeldifferences.cpp" bodystart="55" bodyend="86" declfile="ql/models/marketmodels/marketmodeldifferences.hpp" declline="37" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ac33ef6d4f7a665a06be4ac6698738e2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &gt;</type>
        <definition>std::vector&lt; Matrix &gt; QuantLib::coterminalSwapPseudoRoots</definition>
        <argsstring>(const PiecewiseConstantCorrelation &amp;piecewiseConstantCorrelation, const std::vector&lt; ext::shared_ptr&lt; PiecewiseConstantVariance &gt; &gt; &amp;piecewiseConstantVariances)</argsstring>
        <name>coterminalSwapPseudoRoots</name>
        <qualifiedname>QuantLib::coterminalSwapPseudoRoots</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_piecewise_constant_correlation" kindref="compound">PiecewiseConstantCorrelation</ref> &amp;</type>
          <declname>piecewiseConstantCorrelation</declname>
        </param>
        <param>
          <type>const std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_piecewise_constant_variance" kindref="compound">PiecewiseConstantVariance</ref> &gt; &gt; &amp;</type>
          <declname>piecewiseConstantVariances</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/marketmodeldifferences.cpp" line="88" column="17" bodyfile="ql/models/marketmodels/marketmodeldifferences.cpp" bodystart="88" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ab76f89f32b7d1e5479aad0e8f54094de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::coterminalSwapPseudoRoots</definition>
        <argsstring>(const PiecewiseConstantCorrelation &amp;, const std::vector&lt; ext::shared_ptr&lt; PiecewiseConstantVariance &gt; &gt; &amp;, const std::vector&lt; Time &gt; &amp;)</argsstring>
        <name>coterminalSwapPseudoRoots</name>
        <qualifiedname>QuantLib::coterminalSwapPseudoRoots</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_piecewise_constant_correlation" kindref="compound">PiecewiseConstantCorrelation</ref> &amp;</type>
        </param>
        <param>
          <type>const std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_piecewise_constant_variance" kindref="compound">PiecewiseConstantVariance</ref> &gt; &gt; &amp;</type>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/marketmodeldifferences.hpp" line="42" column="17" declfile="ql/models/marketmodels/marketmodeldifferences.hpp" declline="42" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a5cec1ee7548a97d244d69a81cfe2792d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
        <definition>Integer QuantLib::capletSwaptionPeriodicCalibration</definition>
        <argsstring>(const EvolutionDescription &amp;evolution, const ext::shared_ptr&lt; PiecewiseConstantCorrelation &gt; &amp;corr, VolatilityInterpolationSpecifier &amp;displacedSwapVariances, const std::vector&lt; Volatility &gt; &amp;capletVols, const ext::shared_ptr&lt; CurveState &gt; &amp;cs, const Spread displacement, Real caplet0Swaption1Priority, Size numberOfFactors, Size period, Size max1dIterations, Real tolerance1d, Size maxUnperiodicIterations, Real toleranceUnperiodic, Size maxPeriodIterations, Real periodTolerance, Real &amp;, Real &amp;totalSwaptionError, std::vector&lt; Matrix &gt; &amp;swapCovariancePseudoRoots, std::vector&lt; Real &gt; &amp;finalScales, Size &amp;iterationsDone, Real &amp;errorImprovement, Matrix &amp;modelSwaptionVolsMatrix)</argsstring>
        <name>capletSwaptionPeriodicCalibration</name>
        <qualifiedname>QuantLib::capletSwaptionPeriodicCalibration</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_evolution_description" kindref="compound">EvolutionDescription</ref> &amp;</type>
          <declname>evolution</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_piecewise_constant_correlation" kindref="compound">PiecewiseConstantCorrelation</ref> &gt; &amp;</type>
          <declname>corr</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_volatility_interpolation_specifier" kindref="compound">VolatilityInterpolationSpecifier</ref> &amp;</type>
          <declname>displacedSwapVariances</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref> &gt; &amp;</type>
          <declname>capletVols</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_curve_state" kindref="compound">CurveState</ref> &gt; &amp;</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref></type>
          <declname>displacement</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>caplet0Swaption1Priority</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>numberOfFactors</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>period</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>max1dIterations</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>tolerance1d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxUnperiodicIterations</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>toleranceUnperiodic</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxPeriodIterations</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>periodTolerance</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <defname>deformationSize</defname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>totalSwaptionError</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &gt; &amp;</type>
          <declname>swapCovariancePseudoRoots</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>finalScales</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &amp;</type>
          <declname>iterationsDone</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>errorImprovement</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>modelSwaptionVolsMatrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/models/capletcoterminalperiodic.cpp" line="41" column="13" bodyfile="ql/models/marketmodels/models/capletcoterminalperiodic.cpp" bodystart="41" bodyend="177" declfile="ql/models/marketmodels/models/capletcoterminalperiodic.hpp" declline="38" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aa442d4038e5c13e633ba9f371738b704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::flatVolCovariance</definition>
        <argsstring>(Time t1, Time t2, Time T, Time S, Volatility v1, Volatility v2)</argsstring>
        <name>flatVolCovariance</name>
        <qualifiedname>QuantLib::flatVolCovariance</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t1</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t2</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>T</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>S</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref></type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref></type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/models/flatvol.cpp" line="34" column="10" bodyfile="ql/models/marketmodels/models/flatvol.cpp" bodystart="34" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ab9a0d79018f07b2e010c6b57ec32e653" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::mergeTimes</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; Time &gt; &gt; &amp;times, std::vector&lt; Time &gt; &amp;mergedTimes, std::vector&lt; std::valarray&lt; bool &gt; &gt; &amp;isPresent)</argsstring>
        <name>mergeTimes</name>
        <qualifiedname>QuantLib::mergeTimes</qualifiedname>
        <param>
          <type>const std::vector&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt; &gt; &amp;</type>
          <declname>times</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt; &amp;</type>
          <declname>mergedTimes</declname>
        </param>
        <param>
          <type>std::vector&lt; std::valarray&lt; bool &gt; &gt; &amp;</type>
          <declname>isPresent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/utilities.cpp" line="29" column="10" bodyfile="ql/models/marketmodels/utilities.cpp" bodystart="29" bodyend="54" declfile="ql/models/marketmodels/utilities.hpp" declline="31" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a63702629fc8bcdc4fccada3763aac0d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::valarray&lt; bool &gt;</type>
        <definition>std::valarray&lt; bool &gt; QuantLib::isInSubset</definition>
        <argsstring>(const std::vector&lt; Time &gt; &amp;set, const std::vector&lt; Time &gt; &amp;subset)</argsstring>
        <name>isInSubset</name>
        <qualifiedname>QuantLib::isInSubset</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt; &amp;</type>
          <declname>set</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt; &amp;</type>
          <declname>subset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Look for elements of a set in a subset. Returns a vector of booleans such that: element set[i] present/not present in subset.</para>
<para><simplesect kind="pre"><para>both vectors must be strictly increasing. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/utilities.cpp" line="56" column="19" bodyfile="ql/models/marketmodels/utilities.cpp" bodystart="56" bodyend="90" declfile="ql/models/marketmodels/utilities.hpp" declline="41" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1adaec03e4bf77affd2d6ed2c2d7c34df3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::checkIncreasingTimes</definition>
        <argsstring>(const std::vector&lt; Time &gt; &amp;times)</argsstring>
        <name>checkIncreasingTimes</name>
        <qualifiedname>QuantLib::checkIncreasingTimes</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt; &amp;</type>
          <declname>times</declname>
        </param>
        <briefdescription>
<para>check for strictly increasing times, first time greater than zero </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/utilities.cpp" line="92" column="10" bodyfile="ql/models/marketmodels/utilities.cpp" bodystart="92" bodyend="104" declfile="ql/models/marketmodels/utilities.hpp" declline="45" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a3045308fe35af258245857b624e0416d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::checkIncreasingTimesAndCalculateTaus</definition>
        <argsstring>(const std::vector&lt; Time &gt; &amp;times, std::vector&lt; Time &gt; &amp;taus)</argsstring>
        <name>checkIncreasingTimesAndCalculateTaus</name>
        <qualifiedname>QuantLib::checkIncreasingTimesAndCalculateTaus</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt; &amp;</type>
          <declname>times</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt; &amp;</type>
          <declname>taus</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/utilities.cpp" line="106" column="10" bodyfile="ql/models/marketmodels/utilities.cpp" bodystart="106" bodyend="123" declfile="ql/models/marketmodels/utilities.hpp" declline="46" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a92c458c4c865396b4845aaae7bfedfe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const MarkovFunctional::ModelOutputs &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="struct_quant_lib_1_1_markov_functional_1_1_model_outputs" kindref="compound">MarkovFunctional::ModelOutputs</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/shortrate/onefactormodels/markovfunctional.cpp" line="837" column="5" bodyfile="ql/models/shortrate/onefactormodels/markovfunctional.cpp" bodystart="837" bodyend="940" declfile="ql/models/shortrate/onefactormodels/markovfunctional.hpp" declline="538" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a2591afd837eddffe3726bd5bec1ef0ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" kindref="member">Decimal</ref></type>
        <definition>Decimal QuantLib::operator/</definition>
        <argsstring>(const Money &amp;m1, const Money &amp;m2)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.cpp" line="90" column="13" bodyfile="ql/money.cpp" bodystart="90" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1adafa17c33bc4ad83861929914c215ea8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator==</definition>
        <argsstring>(const Money &amp;m1, const Money &amp;m2)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.cpp" line="96" column="10" bodyfile="ql/money.cpp" bodystart="96" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1abefd2dea848cf321ef6b2508ba9ea7a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&lt;</definition>
        <argsstring>(const Money &amp;m1, const Money &amp;m2)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>QuantLib::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.cpp" line="102" column="5" bodyfile="ql/money.cpp" bodystart="102" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a1b815a05ceee6aae270125220598baca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&lt;=</definition>
        <argsstring>(const Money &amp;m1, const Money &amp;m2)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>QuantLib::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.cpp" line="108" column="5" bodyfile="ql/money.cpp" bodystart="108" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1af9fb8869d9102db2319c454edab0f157" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::close</definition>
        <argsstring>(const Money &amp;m1, const Money &amp;m2, Size n)</argsstring>
        <name>close</name>
        <qualifiedname>QuantLib::close</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.cpp" line="114" column="10" bodyfile="ql/money.cpp" bodystart="114" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a92cec5ae3ee2c6256369f773055866a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::close_enough</definition>
        <argsstring>(const Money &amp;m1, const Money &amp;m2, Size n)</argsstring>
        <name>close_enough</name>
        <qualifiedname>QuantLib::close_enough</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.cpp" line="120" column="10" bodyfile="ql/money.cpp" bodystart="120" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a9b02555257688ba91e38159d552135ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Money &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.cpp" line="126" column="5" bodyfile="ql/money.cpp" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a4ebf9e18f94de8d1b1d8a499b62eaf15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref></type>
        <definition>Money QuantLib::operator+</definition>
        <argsstring>(const Money &amp;m1, const Money &amp;m2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="204" column="18" bodyfile="ql/money.hpp" bodystart="204" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1abf45e273b8b5d16198d8b32f0a3e816d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref></type>
        <definition>Money QuantLib::operator-</definition>
        <argsstring>(const Money &amp;m1, const Money &amp;m2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="210" column="18" bodyfile="ql/money.hpp" bodystart="210" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aeef3750715f2a49fda9ff5c5a8579eb6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref></type>
        <definition>Money QuantLib::operator*</definition>
        <argsstring>(const Money &amp;m, Decimal x)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" kindref="member">Decimal</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="216" column="18" bodyfile="ql/money.hpp" bodystart="216" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1abc6b812c339425308553ae1d33e56037" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref></type>
        <definition>Money QuantLib::operator*</definition>
        <argsstring>(Decimal x, const Money &amp;m)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" kindref="member">Decimal</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="222" column="18" bodyfile="ql/money.hpp" bodystart="222" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a7b9b9b30c8f455ca817f70e9ba8650c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref></type>
        <definition>Money QuantLib::operator/</definition>
        <argsstring>(const Money &amp;m, Decimal x)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" kindref="member">Decimal</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="226" column="18" bodyfile="ql/money.hpp" bodystart="226" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a745a339889a23b9696a9df2af204cae1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator!=</definition>
        <argsstring>(const Money &amp;m1, const Money &amp;m2)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="232" column="17" bodyfile="ql/money.hpp" bodystart="232" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a65e936cd4feda49b1006c74c3f2dcadc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&gt;</definition>
        <argsstring>(const Money &amp;m1, const Money &amp;m2)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>QuantLib::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="236" column="17" bodyfile="ql/money.hpp" bodystart="236" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ab80416dc1462c2c5ba466f6472e6335a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&gt;=</definition>
        <argsstring>(const Money &amp;m1, const Money &amp;m2)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>QuantLib::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="240" column="17" bodyfile="ql/money.hpp" bodystart="240" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a063df21b45bcfbc15658e802bf3c3413" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref></type>
        <definition>Money QuantLib::operator*</definition>
        <argsstring>(Decimal value, const Currency &amp;c)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" kindref="member">Decimal</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="244" column="18" bodyfile="ql/money.hpp" bodystart="244" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a9d2104ff8d3ce8e59acd315da8793542" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref></type>
        <definition>Money QuantLib::operator*</definition>
        <argsstring>(const Currency &amp;c, Decimal value)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" kindref="member">Decimal</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="248" column="18" bodyfile="ql/money.hpp" bodystart="248" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ae4c79f7c09f563bc9adb1c866710cbb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Option::Type type)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>Option::Type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/option.hpp" line="100" column="12" bodyfile="ql/option.hpp" bodystart="100" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a45a4ee39c0ec32e53ae9778a5cdd7193" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Position::Type p)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>Position::Type</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/position.cpp" line="26" column="5" bodyfile="ql/position.cpp" bodystart="26" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a7b3f26a68fab37e12b876996fa6f97d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::midEquivalent</definition>
        <argsstring>(const Real bid, const Real ask, const Real last, const Real close)</argsstring>
        <name>midEquivalent</name>
        <qualifiedname>QuantLib::midEquivalent</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>bid</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>ask</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>close</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return the MidEquivalent price, i.e. the mid if available, or a suitable substitute if the proper mid is not available <xrefsect id="test_1_test000090"><xreftitle>Test</xreftitle><xrefdescription><para>different combinations are tested </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/prices.cpp" line="27" column="10" bodyfile="ql/prices.cpp" bodystart="27" bodyend="44" declfile="ql/prices.hpp" declline="55" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a66e521fe74905cba90e87a2521b78b79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::midSafe</definition>
        <argsstring>(const Real bid, const Real ask)</argsstring>
        <name>midSafe</name>
        <qualifiedname>QuantLib::midSafe</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>bid</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>ask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return the MidSafe price, i.e. the mid only if both bid and ask prices are available <xrefsect id="test_1_test000091"><xreftitle>Test</xreftitle><xrefdescription><para>different combinations are tested </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/prices.cpp" line="46" column="10" bodyfile="ql/prices.cpp" bodystart="46" bodyend="54" declfile="ql/prices.hpp" declline="61" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a3389f4064f58cfc2d4a160d84e992c4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::blackFormula</definition>
        <argsstring>(Option::Type optionType, Real strike, Real forward, Real stdDev, Real discount, Real displacement)</argsstring>
        <name>blackFormula</name>
        <qualifiedname>QuantLib::blackFormula</qualifiedname>
        <param>
          <type>Option::Type</type>
          <declname>optionType</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>stdDev</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>displacement</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Black 1976 formula <simplesect kind="warning"><para>instead of volatility it uses standard deviation, i.e. volatility*sqrt(timeToMaturity) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="59" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="59" bodyend="98" declfile="ql/pricingengines/blackformula.hpp" declline="46" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a1fc3d0e8a4513725d21b5ff6aaabbc9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::blackFormula</definition>
        <argsstring>(const ext::shared_ptr&lt; PlainVanillaPayoff &gt; &amp;payoff, Real forward, Real stdDev, Real discount, Real displacement)</argsstring>
        <name>blackFormula</name>
        <qualifiedname>QuantLib::blackFormula</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_plain_vanilla_payoff" kindref="compound">PlainVanillaPayoff</ref> &gt; &amp;</type>
          <declname>payoff</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>stdDev</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>displacement</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Black 1976 formula <simplesect kind="warning"><para>instead of volatility it uses standard deviation, i.e. volatility*sqrt(timeToMaturity) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="100" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="100" bodyend="107" declfile="ql/pricingengines/blackformula.hpp" declline="57" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ad38186b228d4480cb8bf2ab628fdfb01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::blackFormulaForwardDerivative</definition>
        <argsstring>(Option::Type optionType, Real strike, Real forward, Real stdDev, Real discount, Real displacement)</argsstring>
        <name>blackFormulaForwardDerivative</name>
        <qualifiedname>QuantLib::blackFormulaForwardDerivative</qualifiedname>
        <param>
          <type>Option::Type</type>
          <declname>optionType</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>stdDev</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>displacement</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Black 1976 model forward derivative <simplesect kind="warning"><para>instead of volatility it uses standard deviation, i.e. volatility*sqrt(timeToMaturity) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="109" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="109" bodyend="136" declfile="ql/pricingengines/blackformula.hpp" declline="67" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ae3b7d1c3563af62645e24a85e4b3928e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::blackFormulaForwardDerivative</definition>
        <argsstring>(const ext::shared_ptr&lt; PlainVanillaPayoff &gt; &amp;payoff, Real forward, Real stdDev, Real discount, Real displacement)</argsstring>
        <name>blackFormulaForwardDerivative</name>
        <qualifiedname>QuantLib::blackFormulaForwardDerivative</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_plain_vanilla_payoff" kindref="compound">PlainVanillaPayoff</ref> &gt; &amp;</type>
          <declname>payoff</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>stdDev</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>displacement</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Black 1976 model forward derivative <simplesect kind="warning"><para>instead of volatility it uses standard deviation, i.e. volatility*sqrt(timeToMaturity) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="138" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="138" bodyend="146" declfile="ql/pricingengines/blackformula.hpp" declline="78" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1af7bbc7f456c49559fc10c779bb136d87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::blackFormulaImpliedStdDevApproximation</definition>
        <argsstring>(Option::Type optionType, Real strike, Real forward, Real blackPrice, Real discount, Real displacement)</argsstring>
        <name>blackFormulaImpliedStdDevApproximation</name>
        <qualifiedname>QuantLib::blackFormulaImpliedStdDevApproximation</qualifiedname>
        <param>
          <type>Option::Type</type>
          <declname>optionType</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>blackPrice</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>displacement</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Approximated Black 1976 implied standard deviation, i.e. volatility*sqrt(timeToMaturity).</para>
<para>It is calculated using Brenner and Subrahmanyan (1988) and Feinstein (1988) approximation for at-the-money forward option, with the extended moneyness approximation by Corrado and Miller (1996) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="148" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="148" bodyend="187" declfile="ql/pricingengines/blackformula.hpp" declline="91" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a3586b75754723aca81d4512f7ee0acb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::blackFormulaImpliedStdDevApproximation</definition>
        <argsstring>(const ext::shared_ptr&lt; PlainVanillaPayoff &gt; &amp;payoff, Real forward, Real blackPrice, Real discount, Real displacement)</argsstring>
        <name>blackFormulaImpliedStdDevApproximation</name>
        <qualifiedname>QuantLib::blackFormulaImpliedStdDevApproximation</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_plain_vanilla_payoff" kindref="compound">PlainVanillaPayoff</ref> &gt; &amp;</type>
          <declname>payoff</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>blackPrice</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>displacement</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Approximated Black 1976 implied standard deviation, i.e. volatility*sqrt(timeToMaturity).</para>
<para>It is calculated using Brenner and Subrahmanyan (1988) and Feinstein (1988) approximation for at-the-money forward option, with the extended moneyness approximation by Corrado and Miller (1996) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="189" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="189" bodyend="197" declfile="ql/pricingengines/blackformula.hpp" declline="105" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a5a575de8000fd5a0dd9fd785eb6ed681" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::blackFormulaImpliedStdDevChambers</definition>
        <argsstring>(Option::Type optionType, Real strike, Real forward, Real blackPrice, Real blackAtmPrice, Real discount, Real displacement)</argsstring>
        <name>blackFormulaImpliedStdDevChambers</name>
        <qualifiedname>QuantLib::blackFormulaImpliedStdDevChambers</qualifiedname>
        <param>
          <type>Option::Type</type>
          <declname>optionType</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>blackPrice</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>blackAtmPrice</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>displacement</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Approximated Black 1976 implied standard deviation, i.e. volatility*sqrt(timeToMaturity).</para>
<para>It is calculated following &quot;An improved approach to computing
implied volatility&quot;, Chambers, Nawalkha, The Financial Review, 2001, 89-100. The atm option price must be known to use this method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="199" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="199" bodyend="248" declfile="ql/pricingengines/blackformula.hpp" declline="119" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a324317d9e89ca72d487ae115e7cdaf53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::blackFormulaImpliedStdDevChambers</definition>
        <argsstring>(const ext::shared_ptr&lt; PlainVanillaPayoff &gt; &amp;payoff, Real forward, Real blackPrice, Real blackAtmPrice, Real discount, Real displacement)</argsstring>
        <name>blackFormulaImpliedStdDevChambers</name>
        <qualifiedname>QuantLib::blackFormulaImpliedStdDevChambers</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_plain_vanilla_payoff" kindref="compound">PlainVanillaPayoff</ref> &gt; &amp;</type>
          <declname>payoff</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>blackPrice</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>blackAtmPrice</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>displacement</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Approximated Black 1976 implied standard deviation, i.e. volatility*sqrt(timeToMaturity).</para>
<para>It is calculated following &quot;An improved approach to computing
implied volatility&quot;, Chambers, Nawalkha, The Financial Review, 2001, 89-100. The atm option price must be known to use this method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="250" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="250" bodyend="260" declfile="ql/pricingengines/blackformula.hpp" declline="135" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a590395af4198b8ad8833a3d7f0f8bb75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::blackFormulaImpliedStdDevApproximationRS</definition>
        <argsstring>(Option::Type type, Real K, Real F, Real marketValue, Real df, Real displacement)</argsstring>
        <name>blackFormulaImpliedStdDevApproximationRS</name>
        <qualifiedname>QuantLib::blackFormulaImpliedStdDevApproximationRS</qualifiedname>
        <param>
          <type>Option::Type</type>
          <declname>optionType</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>blackPrice</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>displacement</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Approximated Black 1976 implied standard deviation, i.e. volatility*sqrt(timeToMaturity).</para>
<para>It is calculated using</para>
<para>&quot;An Explicit Implicit Volatility Formula&quot; R. Radoicic, D. Stefanica, <ulink url="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2908494">https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2908494</ulink></para>
<para>&quot;Tighter Bounds for Implied Volatility&quot;, J. Gatheral, I. Matic, R. Radoicic, D. Stefanica <ulink url="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2922742">https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2922742</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="269" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="269" bodyend="318" declfile="ql/pricingengines/blackformula.hpp" declline="155" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1af24984058ca3df04d7dede46e0a4899b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::blackFormulaImpliedStdDevApproximationRS</definition>
        <argsstring>(const ext::shared_ptr&lt; PlainVanillaPayoff &gt; &amp;payoff, Real F, Real marketValue, Real df, Real displacement)</argsstring>
        <name>blackFormulaImpliedStdDevApproximationRS</name>
        <qualifiedname>QuantLib::blackFormulaImpliedStdDevApproximationRS</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_plain_vanilla_payoff" kindref="compound">PlainVanillaPayoff</ref> &gt; &amp;</type>
          <declname>payoff</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>marketValue</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>df</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>displacement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="320" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="320" bodyend="328" declfile="ql/pricingengines/blackformula.hpp" declline="162" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ab7dc9597aa22d082d8e1d78b027afef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::blackFormulaImpliedStdDev</definition>
        <argsstring>(Option::Type optionType, Real strike, Real forward, Real blackPrice, Real discount, Real displacement, Real guess, Real accuracy, Natural maxIterations)</argsstring>
        <name>blackFormulaImpliedStdDev</name>
        <qualifiedname>QuantLib::blackFormulaImpliedStdDev</qualifiedname>
        <param>
          <type>Option::Type</type>
          <declname>optionType</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>blackPrice</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>displacement</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>guess</declname>
          <defval><ref refid="class_quant_lib_1_1_null" kindref="compound">Null</ref>&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.0e-6</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref></type>
          <declname>maxIterations</declname>
          <defval>100</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Black 1976 implied standard deviation, i.e. volatility*sqrt(timeToMaturity) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="382" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="382" bodyend="440" declfile="ql/pricingengines/blackformula.hpp" declline="172" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a67acb0005f0f1263d2279697f16eab41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::blackFormulaImpliedStdDev</definition>
        <argsstring>(const ext::shared_ptr&lt; PlainVanillaPayoff &gt; &amp;payoff, Real forward, Real blackPrice, Real discount, Real displacement, Real guess, Real accuracy, Natural maxIterations)</argsstring>
        <name>blackFormulaImpliedStdDev</name>
        <qualifiedname>QuantLib::blackFormulaImpliedStdDev</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_plain_vanilla_payoff" kindref="compound">PlainVanillaPayoff</ref> &gt; &amp;</type>
          <declname>payoff</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>blackPrice</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>displacement</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>guess</declname>
          <defval><ref refid="class_quant_lib_1_1_null" kindref="compound">Null</ref>&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.0e-6</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref></type>
          <declname>maxIterations</declname>
          <defval>100</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Black 1976 implied standard deviation, i.e. volatility*sqrt(timeToMaturity) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="442" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="442" bodyend="453" declfile="ql/pricingengines/blackformula.hpp" declline="185" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aae236d0017bd0a7fca60279c1f891b3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::blackFormulaImpliedStdDevLiRS</definition>
        <argsstring>(Option::Type optionType, Real strike, Real forward, Real blackPrice, Real discount, Real displacement, Real guess, Real w, Real accuracy, Natural maxIterations)</argsstring>
        <name>blackFormulaImpliedStdDevLiRS</name>
        <qualifiedname>QuantLib::blackFormulaImpliedStdDevLiRS</qualifiedname>
        <param>
          <type>Option::Type</type>
          <declname>optionType</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>blackPrice</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>displacement</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>guess</declname>
          <defval><ref refid="class_quant_lib_1_1_null" kindref="compound">Null</ref>&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>omega</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.0e-6</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref></type>
          <declname>maxIterations</declname>
          <defval>100</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Black 1976 implied standard deviation, i.e. volatility*sqrt(timeToMaturity)</para>
<para>&quot;An Adaptive Successive Over-relaxation Method for Computing the
Black-Scholes Implied Volatility&quot; M. Li, <ulink url="http://mpra.ub.uni-muenchen.de/6867/">http://mpra.ub.uni-muenchen.de/6867/</ulink></para>
<para>Starting point of the iteration is calculated based on</para>
<para>&quot;An Explicit Implicit Volatility Formula&quot; R. Radoicic, D. Stefanica, <ulink url="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2908494">https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2908494</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="483" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="483" bodyend="543" declfile="ql/pricingengines/blackformula.hpp" declline="208" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aa6e6b232ba587e2d0f4667a718e4ad91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::blackFormulaImpliedStdDevLiRS</definition>
        <argsstring>(const ext::shared_ptr&lt; PlainVanillaPayoff &gt; &amp;payoff, Real forward, Real blackPrice, Real discount, Real displacement, Real guess, Real omega, Real accuracy, Natural maxIterations)</argsstring>
        <name>blackFormulaImpliedStdDevLiRS</name>
        <qualifiedname>QuantLib::blackFormulaImpliedStdDevLiRS</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_plain_vanilla_payoff" kindref="compound">PlainVanillaPayoff</ref> &gt; &amp;</type>
          <declname>payoff</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>blackPrice</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>displacement</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>guess</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>omega</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref></type>
          <declname>maxIterations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="545" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="545" bodyend="560" declfile="ql/pricingengines/blackformula.hpp" declline="219" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a4cad3c742389b668af710268cc336009" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::blackFormulaCashItmProbability</definition>
        <argsstring>(Option::Type optionType, Real strike, Real forward, Real stdDev, Real displacement)</argsstring>
        <name>blackFormulaCashItmProbability</name>
        <qualifiedname>QuantLib::blackFormulaCashItmProbability</qualifiedname>
        <param>
          <type>Option::Type</type>
          <declname>optionType</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>stdDev</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>displacement</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Black 1976 probability of being in the money (in the bond martingale measure), i.e. N(d2). It is a risk-neutral probability, not the real world one. <simplesect kind="warning"><para>instead of volatility it uses standard deviation, i.e. volatility*sqrt(timeToMaturity) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="563" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="563" bodyend="582" declfile="ql/pricingengines/blackformula.hpp" declline="235" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a1089fa4913d47be0defd967b7bab8bec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::blackFormulaCashItmProbability</definition>
        <argsstring>(const ext::shared_ptr&lt; PlainVanillaPayoff &gt; &amp;payoff, Real forward, Real stdDev, Real displacement)</argsstring>
        <name>blackFormulaCashItmProbability</name>
        <qualifiedname>QuantLib::blackFormulaCashItmProbability</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_plain_vanilla_payoff" kindref="compound">PlainVanillaPayoff</ref> &gt; &amp;</type>
          <declname>payoff</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>stdDev</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>displacement</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Black 1976 probability of being in the money (in the bond martingale measure), i.e. N(d2). It is a risk-neutral probability, not the real world one. <simplesect kind="warning"><para>instead of volatility it uses standard deviation, i.e. volatility*sqrt(timeToMaturity) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="584" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="584" bodyend="591" declfile="ql/pricingengines/blackformula.hpp" declline="244" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a86a7354e7e90d6448e53798c46f3828c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::blackFormulaAssetItmProbability</definition>
        <argsstring>(Option::Type optionType, Real strike, Real forward, Real stdDev, Real displacement)</argsstring>
        <name>blackFormulaAssetItmProbability</name>
        <qualifiedname>QuantLib::blackFormulaAssetItmProbability</qualifiedname>
        <param>
          <type>Option::Type</type>
          <declname>optionType</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>stdDev</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>displacement</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Black 1976 probability of being in the money in the asset martingale measure, i.e. N(d1). It is a risk-neutral probability, not the real world one. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="593" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="593" bodyend="613" declfile="ql/pricingengines/blackformula.hpp" declline="253" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a07ba55681bc9e449a5c8dc1fb2c59ef9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::blackFormulaAssetItmProbability</definition>
        <argsstring>(const ext::shared_ptr&lt; PlainVanillaPayoff &gt; &amp;payoff, Real forward, Real stdDev, Real displacement)</argsstring>
        <name>blackFormulaAssetItmProbability</name>
        <qualifiedname>QuantLib::blackFormulaAssetItmProbability</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_plain_vanilla_payoff" kindref="compound">PlainVanillaPayoff</ref> &gt; &amp;</type>
          <declname>payoff</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>stdDev</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>displacement</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Black 1976 probability of being in the money in the asset martingale measure, i.e. N(d1). It is a risk-neutral probability, not the real world one. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="615" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="615" bodyend="622" declfile="ql/pricingengines/blackformula.hpp" declline="260" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a53e783b853451e48d13ca9723229bdc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::blackFormulaVolDerivative</definition>
        <argsstring>(Rate strike, Rate forward, Real stdDev, Real expiry, Real discount, Real displacement)</argsstring>
        <name>blackFormulaVolDerivative</name>
        <qualifiedname>QuantLib::blackFormulaVolDerivative</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>stdDev</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>expiry</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>displacement</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Black 1976 formula for derivative with respect to implied vol, this is basically the vega, but if you want 1% change multiply by 1% </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="624" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="624" bodyend="636" declfile="ql/pricingengines/blackformula.hpp" declline="278" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a401f828a9f0412b197b1f7351438c25c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::blackFormulaStdDevDerivative</definition>
        <argsstring>(Rate strike, Rate forward, Real stdDev, Real discount, Real displacement)</argsstring>
        <name>blackFormulaStdDevDerivative</name>
        <qualifiedname>QuantLib::blackFormulaStdDevDerivative</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>stdDev</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>displacement</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Black 1976 formula for standard deviation derivative <simplesect kind="warning"><para>instead of volatility it uses standard deviation, i.e. volatility*sqrt(timeToMaturity), and it returns the derivative with respect to the standard deviation. If T is the time to maturity Black vega would be blackStdDevDerivative(strike, forward, stdDev)*sqrt(T) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="638" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="638" bodyend="659" declfile="ql/pricingengines/blackformula.hpp" declline="272" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1adf6bca73cd43adabf366efa466f5fa85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::blackFormulaStdDevDerivative</definition>
        <argsstring>(const ext::shared_ptr&lt; PlainVanillaPayoff &gt; &amp;payoff, Real forward, Real stdDev, Real discount, Real displacement)</argsstring>
        <name>blackFormulaStdDevDerivative</name>
        <qualifiedname>QuantLib::blackFormulaStdDevDerivative</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_plain_vanilla_payoff" kindref="compound">PlainVanillaPayoff</ref> &gt; &amp;</type>
          <declname>payoff</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>stdDev</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>displacement</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Black 1976 formula for standard deviation derivative <simplesect kind="warning"><para>instead of volatility it uses standard deviation, i.e. volatility*sqrt(timeToMaturity), and it returns the derivative with respect to the standard deviation. If T is the time to maturity Black vega would be blackStdDevDerivative(strike, forward, stdDev)*sqrt(T) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="661" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="661" bodyend="669" declfile="ql/pricingengines/blackformula.hpp" declline="293" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a08213dc39b37fb4f769eb6b0bc926a26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::blackFormulaStdDevSecondDerivative</definition>
        <argsstring>(Rate strike, Rate forward, Real stdDev, Real discount, Real displacement)</argsstring>
        <name>blackFormulaStdDevSecondDerivative</name>
        <qualifiedname>QuantLib::blackFormulaStdDevSecondDerivative</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>stdDev</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>displacement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Black 1976 formula for second derivative by standard deviation <simplesect kind="warning"><para>instead of volatility it uses standard deviation, i.e. volatility*sqrt(timeToMaturity), and it returns the derivative with respect to the standard deviation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="671" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="671" bodyend="693" declfile="ql/pricingengines/blackformula.hpp" declline="304" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a83d1d67d241799d6b0fd1826f19a0b82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::blackFormulaStdDevSecondDerivative</definition>
        <argsstring>(const ext::shared_ptr&lt; PlainVanillaPayoff &gt; &amp;payoff, Real forward, Real stdDev, Real discount, Real displacement)</argsstring>
        <name>blackFormulaStdDevSecondDerivative</name>
        <qualifiedname>QuantLib::blackFormulaStdDevSecondDerivative</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_plain_vanilla_payoff" kindref="compound">PlainVanillaPayoff</ref> &gt; &amp;</type>
          <declname>payoff</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>stdDev</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>displacement</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Black 1976 formula for second derivative by standard deviation <simplesect kind="warning"><para>instead of volatility it uses standard deviation, i.e. volatility*sqrt(timeToMaturity), and it returns the derivative with respect to the standard deviation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="695" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="695" bodyend="703" declfile="ql/pricingengines/blackformula.hpp" declline="312" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1acf8dfb8e43d3908d96e687d0e54a17e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::bachelierBlackFormula</definition>
        <argsstring>(Option::Type optionType, Real strike, Real forward, Real stdDev, Real discount)</argsstring>
        <name>bachelierBlackFormula</name>
        <qualifiedname>QuantLib::bachelierBlackFormula</qualifiedname>
        <param>
          <type>Option::Type</type>
          <declname>optionType</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>stdDev</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Black style formula when forward is normal rather than log-normal. This is essentially the model of Bachelier.</para>
<para><simplesect kind="warning"><para>Bachelier model needs absolute volatility, not percentage volatility. Standard deviation is absoluteVolatility*sqrt(timeToMaturity) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="705" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="705" bodyend="727" declfile="ql/pricingengines/blackformula.hpp" declline="325" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1accf6f78fb2afbe224ef5359a64b29d84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::bachelierBlackFormula</definition>
        <argsstring>(const ext::shared_ptr&lt; PlainVanillaPayoff &gt; &amp;payoff, Real forward, Real stdDev, Real discount)</argsstring>
        <name>bachelierBlackFormula</name>
        <qualifiedname>QuantLib::bachelierBlackFormula</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_plain_vanilla_payoff" kindref="compound">PlainVanillaPayoff</ref> &gt; &amp;</type>
          <declname>payoff</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>stdDev</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Black style formula when forward is normal rather than log-normal. This is essentially the model of Bachelier.</para>
<para><simplesect kind="warning"><para>Bachelier model needs absolute volatility, not percentage volatility. Standard deviation is absoluteVolatility*sqrt(timeToMaturity) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="729" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="729" bodyend="736" declfile="ql/pricingengines/blackformula.hpp" declline="335" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a787f94c399a52f9277f8ebb52ba9394b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::bachelierBlackFormulaForwardDerivative</definition>
        <argsstring>(Option::Type optionType, Real strike, Real forward, Real stdDev, Real discount)</argsstring>
        <name>bachelierBlackFormulaForwardDerivative</name>
        <qualifiedname>QuantLib::bachelierBlackFormulaForwardDerivative</qualifiedname>
        <param>
          <type>Option::Type</type>
          <declname>optionType</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>stdDev</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bachelier Black model forward derivative.</para>
<para><simplesect kind="warning"><para>Bachelier model needs absolute volatility, not percentage volatility. Standard deviation is absoluteVolatility*sqrt(timeToMaturity) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="738" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="738" bodyend="751" declfile="ql/pricingengines/blackformula.hpp" declline="346" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a0cedb8070cd21d124f9d7b943dd1775d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::bachelierBlackFormulaForwardDerivative</definition>
        <argsstring>(const ext::shared_ptr&lt; PlainVanillaPayoff &gt; &amp;payoff, Real forward, Real stdDev, Real discount)</argsstring>
        <name>bachelierBlackFormulaForwardDerivative</name>
        <qualifiedname>QuantLib::bachelierBlackFormulaForwardDerivative</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_plain_vanilla_payoff" kindref="compound">PlainVanillaPayoff</ref> &gt; &amp;</type>
          <declname>payoff</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>stdDev</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bachelier Black model forward derivative.</para>
<para><simplesect kind="warning"><para>Bachelier model needs absolute volatility, not percentage volatility. Standard deviation is absoluteVolatility*sqrt(timeToMaturity) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="753" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="753" bodyend="761" declfile="ql/pricingengines/blackformula.hpp" declline="355" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ae0710e0219572aa06d1e4dbacddc0735" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>static Real QuantLib::h</definition>
        <argsstring>(Real eta)</argsstring>
        <name>h</name>
        <qualifiedname>QuantLib::h</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>eta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="763" column="17" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="763" bodyend="796"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ada81e127a51181af970327adbbb6a65a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::bachelierBlackFormulaImpliedVolChoi</definition>
        <argsstring>(Option::Type optionType, Real strike, Real forward, Real tte, Real bachelierPrice, Real discount)</argsstring>
        <name>bachelierBlackFormulaImpliedVolChoi</name>
        <qualifiedname>QuantLib::bachelierBlackFormulaImpliedVolChoi</qualifiedname>
        <param>
          <type>Option::Type</type>
          <declname>optionType</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>tte</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>bachelierPrice</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Approximated Bachelier implied volatility</para>
<para>It is calculated using the analytic implied volatility approximation of J. Choi, K Kim and M. Kwak (2009), “Numerical Approximation of the Implied <ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref> Under Arithmetic Brownian Motion”, Applied Math. Finance, 16(3), pp. 261-268. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="798" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="798" bodyend="835" declfile="ql/pricingengines/blackformula.hpp" declline="368" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a6563522486bcc81d3741555d01e815c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::bachelierBlackFormulaImpliedVol</definition>
        <argsstring>(Option::Type optionType, Real strike, Real forward, Real tte, Real bachelierPrice, Real discount)</argsstring>
        <name>bachelierBlackFormulaImpliedVol</name>
        <qualifiedname>QuantLib::bachelierBlackFormulaImpliedVol</qualifiedname>
        <param>
          <type>Option::Type</type>
          <declname>optionType</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>tte</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>bachelierPrice</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Exact Bachelier implied volatility</para>
<para>It is calculated using the analytic implied volatility formula of Jaeckel (2017), &quot;Implied Normal Volatility&quot; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="884" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="884" bodyend="921" declfile="ql/pricingengines/blackformula.hpp" declline="380" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a87ef92d0a51e8d41af30fe18059b5c00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::bachelierBlackFormulaStdDevDerivative</definition>
        <argsstring>(Rate strike, Rate forward, Real stdDev, Real discount)</argsstring>
        <name>bachelierBlackFormulaStdDevDerivative</name>
        <qualifiedname>QuantLib::bachelierBlackFormulaStdDevDerivative</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>stdDev</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bachelier formula for standard deviation derivative <simplesect kind="warning"><para>instead of volatility it uses standard deviation, i.e. volatility*sqrt(timeToMaturity), and it returns the derivative with respect to the standard deviation. If T is the time to maturity Black vega would be blackStdDevDerivative(strike, forward, stdDev)*sqrt(T) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="923" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="923" bodyend="939" declfile="ql/pricingengines/blackformula.hpp" declline="395" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a7981c0ff7e2f1b937472cd74e873aeae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::bachelierBlackFormulaStdDevDerivative</definition>
        <argsstring>(const ext::shared_ptr&lt; PlainVanillaPayoff &gt; &amp;payoff, Real forward, Real stdDev, Real discount)</argsstring>
        <name>bachelierBlackFormulaStdDevDerivative</name>
        <qualifiedname>QuantLib::bachelierBlackFormulaStdDevDerivative</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_plain_vanilla_payoff" kindref="compound">PlainVanillaPayoff</ref> &gt; &amp;</type>
          <declname>payoff</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>stdDev</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>discount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="941" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="941" bodyend="948" declfile="ql/pricingengines/blackformula.hpp" declline="400" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ac5fbb16dedf55b757c6e3ad61de8bbf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::bachelierBlackFormulaAssetItmProbability</definition>
        <argsstring>(Option::Type optionType, Real strike, Real forward, Real stdDev)</argsstring>
        <name>bachelierBlackFormulaAssetItmProbability</name>
        <qualifiedname>QuantLib::bachelierBlackFormulaAssetItmProbability</qualifiedname>
        <param>
          <type>Option::Type</type>
          <declname>optionType</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>stdDev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bachelier formula for probability of being in the money in the asset martingale measure, i.e. N(d). It is a risk-neutral probability, not the real world one. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="950" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="950" bodyend="963" declfile="ql/pricingengines/blackformula.hpp" declline="409" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a613e17a80528ae030f37a76336c542d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::bachelierBlackFormulaAssetItmProbability</definition>
        <argsstring>(const ext::shared_ptr&lt; PlainVanillaPayoff &gt; &amp;payoff, Real forward, Real stdDev)</argsstring>
        <name>bachelierBlackFormulaAssetItmProbability</name>
        <qualifiedname>QuantLib::bachelierBlackFormulaAssetItmProbability</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_plain_vanilla_payoff" kindref="compound">PlainVanillaPayoff</ref> &gt; &amp;</type>
          <declname>payoff</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>stdDev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bachelier formula for of being in the money in the asset martingale measure, i.e. N(d). It is a risk-neutral probability, not the real world one. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/blackformula.cpp" line="965" column="10" bodyfile="ql/pricingengines/blackformula.cpp" bodystart="965" bodyend="971" declfile="ql/pricingengines/blackformula.hpp" declline="418" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1acb79679af7eab3edf224ae8b275f2da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::blackScholesTheta</definition>
        <argsstring>(const ext::shared_ptr&lt; GeneralizedBlackScholesProcess &gt; &amp;, Real value, Real delta, Real gamma)</argsstring>
        <name>blackScholesTheta</name>
        <qualifiedname>QuantLib::blackScholesTheta</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>gamma</declname>
        </param>
        <briefdescription>
<para>default theta calculation for Black-Scholes options </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/greeks.cpp" line="25" column="10" bodyfile="ql/pricingengines/greeks.cpp" bodystart="25" bodyend="35" declfile="ql/pricingengines/greeks.hpp" declline="32" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a5f882297b62534f22ed087be61e7e3a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::defaultThetaPerDay</definition>
        <argsstring>(Real theta)</argsstring>
        <name>defaultThetaPerDay</name>
        <qualifiedname>QuantLib::defaultThetaPerDay</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>theta</declname>
        </param>
        <briefdescription>
<para>default theta-per-day calculation </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/greeks.cpp" line="37" column="10" bodyfile="ql/pricingengines/greeks.cpp" bodystart="37" bodyend="39" declfile="ql/pricingengines/greeks.hpp" declline="37" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a22988ff2036785d39ccf93362c0064be" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>static Real QuantLib::fastpow</definition>
        <argsstring>(Real x, int y)</argsstring>
        <name>fastpow</name>
        <qualifiedname>QuantLib::fastpow</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/hestonexpansionengine.cpp" line="117" column="17" bodyfile="ql/pricingengines/vanilla/hestonexpansionengine.cpp" bodystart="117" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1acb512b52bfe9aef64aad92cd66cc968d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::cdf_nu_ds_minus_x</definition>
        <argsstring>(const HestonProcess &amp;process, Real x, Real nu_0, Real nu_t, Time dt, HestonProcess::Discretization discretization, Real x0)</argsstring>
        <name>cdf_nu_ds_minus_x</name>
        <qualifiedname>QuantLib::cdf_nu_ds_minus_x</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_heston_process" kindref="compound">HestonProcess</ref> &amp;</type>
          <declname>process</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nu_0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nu_t</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <param>
          <type>HestonProcess::Discretization</type>
          <declname>discretization</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/hestonprocess.cpp" line="353" column="10" bodyfile="ql/processes/hestonprocess.cpp" bodystart="353" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a2a60391d76439ea9f686356a692d94e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BinaryFunction</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_quant_lib_1_1_composite_quote" kindref="compound">CompositeQuote</ref>&lt; BinaryFunction &gt;</type>
        <definition>CompositeQuote&lt; BinaryFunction &gt; QuantLib::makeCompositeQuote</definition>
        <argsstring>(const Handle&lt; Quote &gt; &amp;element1, const Handle&lt; Quote &gt; &amp;element2, const BinaryFunction &amp;f)</argsstring>
        <name>makeCompositeQuote</name>
        <qualifiedname>QuantLib::makeCompositeQuote</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &amp;</type>
          <declname>element1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &amp;</type>
          <declname>element2</declname>
        </param>
        <param>
          <type>const BinaryFunction &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>creator method </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quotes/compositequote.hpp" line="64" column="20" bodyfile="ql/quotes/compositequote.hpp" bodystart="64" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ad6644cefd2832159451e5c31d20eaf2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class UnaryFunction</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_quant_lib_1_1_derived_quote" kindref="compound">DerivedQuote</ref>&lt; UnaryFunction &gt;</type>
        <definition>DerivedQuote&lt; UnaryFunction &gt; QuantLib::makeDerivedQuote</definition>
        <argsstring>(const Handle&lt; Quote &gt; &amp;element, const UnaryFunction &amp;f)</argsstring>
        <name>makeDerivedQuote</name>
        <qualifiedname>QuantLib::makeDerivedQuote</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &amp;</type>
          <declname>element</declname>
        </param>
        <param>
          <type>const UnaryFunction &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>creator method </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quotes/derivedquote.hpp" line="59" column="18" bodyfile="ql/quotes/derivedquote.hpp" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a7564e44890fde5012ea227f78094a53d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_relinkable_handle" kindref="compound">RelinkableHandle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
        <definition>RelinkableHandle&lt; Quote &gt; QuantLib::makeQuoteHandle</definition>
        <argsstring>(Real value)</argsstring>
        <name>makeQuoteHandle</name>
        <qualifiedname>QuantLib::makeQuoteHandle</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/quotes/simplequote.hpp" line="56" column="29" bodyfile="ql/quotes/simplequote.hpp" bodystart="56" bodyend="58" declfile="ql/quotes/simplequote.hpp" declline="51" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a7046253575cf5c7e373ee41b2c1dce74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Settings::DateProxy &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const Settings::DateProxy &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/settings.cpp" line="29" column="5" bodyfile="ql/settings.cpp" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a742af1e3f24b1dbce497f6974b779e60" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Pillar::Choice type)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_pillar_1a50e175c9dea105ebbceba3b70f807561" kindref="member">Pillar::Choice</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/bootstraphelper.hpp" line="232" column="12" bodyfile="ql/termstructures/bootstraphelper.hpp" bodystart="232" bodyend="244" declfile="ql/termstructures/bootstraphelper.hpp" declline="49" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a375f5896d4cba24bbe748bf6911e140d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>, <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt;</type>
        <definition>std::pair&lt; Date, Date &gt; QuantLib::inflationPeriod</definition>
        <argsstring>(const Date &amp;, Frequency)</argsstring>
        <name>inflationPeriod</name>
        <qualifiedname>QuantLib::inflationPeriod</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
<para>utility function giving the inflation period for a given date </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflationtermstructure.cpp" line="425" column="15" bodyfile="ql/termstructures/inflationtermstructure.cpp" bodystart="425" bodyend="473" declfile="ql/termstructures/inflationtermstructure.hpp" declline="393" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ae32e42fe6392bc8621f0bf482a491674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        <definition>Time QuantLib::inflationYearFraction</definition>
        <argsstring>(Frequency f, bool indexIsInterpolated, const DayCounter &amp;dayCounter, const Date &amp;d1, const Date &amp;d2)</argsstring>
        <name>inflationYearFraction</name>
        <qualifiedname>QuantLib::inflationYearFraction</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <defname>f</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>indexIsInterpolated</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <defname>dayCounter</defname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <defname>d1</defname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <defname>d2</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>utility function giving the time between two dates depending on index frequency and interpolation, and a day counter </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflationtermstructure.cpp" line="476" column="10" bodyfile="ql/termstructures/inflationtermstructure.cpp" bodystart="476" bodyend="496" declfile="ql/termstructures/inflationtermstructure.hpp" declline="398" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a775b67f9531bc1321671aae1e44694bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::abcdBlackVolatility</definition>
        <argsstring>(Time u, Real a, Real b, Real c, Real d)</argsstring>
        <name>abcdBlackVolatility</name>
        <qualifiedname>QuantLib::abcdBlackVolatility</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/abcd.hpp" line="104" column="17" bodyfile="ql/termstructures/volatility/abcd.hpp" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aa2f008f8341659b445f45de16ef9a6a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::unsafeSabrLogNormalVolatility</definition>
        <argsstring>(Rate strike, Rate forward, Time expiryTime, Real alpha, Real beta, Real nu, Real rho)</argsstring>
        <name>unsafeSabrLogNormalVolatility</name>
        <qualifiedname>QuantLib::unsafeSabrLogNormalVolatility</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>expiryTime</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nu</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>rho</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/sabr.cpp" line="33" column="10" bodyfile="ql/termstructures/volatility/sabr.cpp" bodystart="33" bodyend="72" declfile="ql/termstructures/volatility/sabr.hpp" declline="36" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a2fffa9f240302cda00dce94ed9a088d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::unsafeShiftedSabrVolatility</definition>
        <argsstring>(Rate strike, Rate forward, Time expiryTime, Real alpha, Real beta, Real nu, Real rho, Real shift, VolatilityType volatilityType)</argsstring>
        <name>unsafeShiftedSabrVolatility</name>
        <qualifiedname>QuantLib::unsafeShiftedSabrVolatility</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>expiryTime</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nu</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>rho</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>shift</declname>
        </param>
        <param>
          <type>VolatilityType</type>
          <declname>volatilityType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/sabr.cpp" line="74" column="10" bodyfile="ql/termstructures/volatility/sabr.cpp" bodystart="74" bodyend="88" declfile="ql/termstructures/volatility/sabr.hpp" declline="44" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a680ec0e85f4c77929535aef9c0c168e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::unsafeSabrNormalVolatility</definition>
        <argsstring>(Rate strike, Rate forward, Time expiryTime, Real alpha, Real beta, Real nu, Real rho)</argsstring>
        <name>unsafeSabrNormalVolatility</name>
        <qualifiedname>QuantLib::unsafeSabrNormalVolatility</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>expiryTime</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nu</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>rho</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/sabr.cpp" line="90" column="10" bodyfile="ql/termstructures/volatility/sabr.cpp" bodystart="90" bodyend="128" declfile="ql/termstructures/volatility/sabr.hpp" declline="57" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a67d1702c302083ee618d566730f1780a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::unsafeSabrVolatility</definition>
        <argsstring>(Rate strike, Rate forward, Time expiryTime, Real alpha, Real beta, Real nu, Real rho, VolatilityType volatilityType)</argsstring>
        <name>unsafeSabrVolatility</name>
        <qualifiedname>QuantLib::unsafeSabrVolatility</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>expiryTime</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nu</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>rho</declname>
        </param>
        <param>
          <type>VolatilityType</type>
          <declname>volatilityType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/sabr.cpp" line="130" column="11" bodyfile="ql/termstructures/volatility/sabr.cpp" bodystart="130" bodyend="143" declfile="ql/termstructures/volatility/sabr.hpp" declline="65" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a0308d79448b4ccb60e0319227fe73aec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::validateSabrParameters</definition>
        <argsstring>(Real alpha, Real beta, Real nu, Real rho)</argsstring>
        <name>validateSabrParameters</name>
        <qualifiedname>QuantLib::validateSabrParameters</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nu</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>rho</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/sabr.cpp" line="145" column="10" bodyfile="ql/termstructures/volatility/sabr.cpp" bodystart="145" bodyend="157" declfile="ql/termstructures/volatility/sabr.hpp" declline="101" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a730c5c9c2bc333e6439e3ed6009f4206" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::sabrVolatility</definition>
        <argsstring>(Rate strike, Rate forward, Time expiryTime, Real alpha, Real beta, Real nu, Real rho, VolatilityType volatilityType)</argsstring>
        <name>sabrVolatility</name>
        <qualifiedname>QuantLib::sabrVolatility</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>expiryTime</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nu</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>rho</declname>
        </param>
        <param>
          <type>VolatilityType</type>
          <declname>volatilityType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/sabr.cpp" line="159" column="10" bodyfile="ql/termstructures/volatility/sabr.cpp" bodystart="159" bodyend="176" declfile="ql/termstructures/volatility/sabr.hpp" declline="74" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aac5e40ad9bb672a90186b33dd726ff68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::shiftedSabrVolatility</definition>
        <argsstring>(Rate strike, Rate forward, Time expiryTime, Real alpha, Real beta, Real nu, Real rho, Real shift, VolatilityType volatilityType)</argsstring>
        <name>shiftedSabrVolatility</name>
        <qualifiedname>QuantLib::shiftedSabrVolatility</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>expiryTime</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nu</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>rho</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>shift</declname>
        </param>
        <param>
          <type>VolatilityType</type>
          <declname>volatilityType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/sabr.cpp" line="178" column="10" bodyfile="ql/termstructures/volatility/sabr.cpp" bodystart="178" bodyend="196" declfile="ql/termstructures/volatility/sabr.hpp" declline="83" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ae66a7d7f16cab59a33b8a6a5df0c78c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::sabrFlochKennedyVolatility</definition>
        <argsstring>(Rate strike, Rate forward, Time expiryTime, Real alpha, Real beta, Real nu, Real rho)</argsstring>
        <name>sabrFlochKennedyVolatility</name>
        <qualifiedname>QuantLib::sabrFlochKennedyVolatility</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>expiryTime</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nu</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>rho</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/sabr.cpp" line="252" column="10" bodyfile="ql/termstructures/volatility/sabr.cpp" bodystart="252" bodyend="263" declfile="ql/termstructures/volatility/sabr.hpp" declline="93" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aadb777b2236830ab1c0d1e16c1ebb2ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const VolatilityType &amp;t)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const VolatilityType &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/volatilitytype.hpp" line="34" column="12" bodyfile="ql/termstructures/volatility/volatilitytype.hpp" bodystart="34" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a69ca90695682266782a08c6a9f4505f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, BusinessDayConvention b)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881" kindref="member">BusinessDayConvention</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/businessdayconvention.cpp" line="29" column="5" bodyfile="ql/time/businessdayconvention.cpp" bodystart="29" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aff0529f579c3fc3b660dad1026109de7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator==</definition>
        <argsstring>(const Calendar &amp;c1, const Calendar &amp;c2)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/calendar.hpp" line="274" column="17" bodyfile="ql/time/calendar.hpp" bodystart="274" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a19a4f94f75c7e933b3aed06742a46ba8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator!=</definition>
        <argsstring>(const Calendar &amp;c1, const Calendar &amp;c2)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/calendar.hpp" line="279" column="17" bodyfile="ql/time/calendar.hpp" bodystart="279" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a71139d379a2b25ee4452e6979653f556" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Calendar &amp;c)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/calendar.hpp" line="283" column="12" bodyfile="ql/time/calendar.hpp" bodystart="283" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a99ee32a3c70c7a141e325168149cca45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Month m)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4" kindref="member">Month</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.cpp" line="815" column="5" bodyfile="ql/time/date.cpp" bodystart="815" bodyend="844"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1adf641a7f1cdbede89a7d3e797f8d113e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t QuantLib::hash_value</definition>
        <argsstring>(const Date &amp;d)</argsstring>
        <name>hash_value</name>
        <qualifiedname>QuantLib::hash_value</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.cpp" line="846" column="17" bodyfile="ql/time/date.cpp" bodystart="846" bodyend="855"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a711be0f3d347baaedb56f53acd388cab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Date &amp;d)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.cpp" line="859" column="5" bodyfile="ql/time/date.cpp" bodystart="859" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aad596cddfd4abcb746e65b8d02c79bb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date_1a2fbbbf87429ca9d86bde4e068eb028d6" kindref="member">Date::serial_type</ref></type>
        <definition>Date::serial_type QuantLib::operator-</definition>
        <argsstring>(const Date &amp;d1, const Date &amp;d2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="434" column="30" bodyfile="ql/time/date.hpp" bodystart="434" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a10a0bb0e4050e038cb995ed25c67c528" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        <definition>Time QuantLib::daysBetween</definition>
        <argsstring>(const Date &amp;d1, const Date &amp;d2)</argsstring>
        <name>daysBetween</name>
        <qualifiedname>QuantLib::daysBetween</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="438" column="17" bodyfile="ql/time/date.hpp" bodystart="438" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a6cc73aa41c7c1ebd149a5ce830048882" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator==</definition>
        <argsstring>(const Date &amp;d1, const Date &amp;d2)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="442" column="17" bodyfile="ql/time/date.hpp" bodystart="442" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a9da3d28011638a8f77ca9fd1c4ab8112" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator!=</definition>
        <argsstring>(const Date &amp;d1, const Date &amp;d2)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="446" column="17" bodyfile="ql/time/date.hpp" bodystart="446" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a56706db303604f99dd6ab1715976a384" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&lt;</definition>
        <argsstring>(const Date &amp;d1, const Date &amp;d2)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>QuantLib::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="450" column="12" bodyfile="ql/time/date.hpp" bodystart="450" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a935c98778402c989f88cc7c70611e359" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&lt;=</definition>
        <argsstring>(const Date &amp;d1, const Date &amp;d2)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>QuantLib::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="454" column="12" bodyfile="ql/time/date.hpp" bodystart="454" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a7f00f7e4f41c3b2fe49bc27d5c47fdf7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&gt;</definition>
        <argsstring>(const Date &amp;d1, const Date &amp;d2)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>QuantLib::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="458" column="17" bodyfile="ql/time/date.hpp" bodystart="458" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ad2e5a31d179cbdbe481120263e5fffa0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&gt;=</definition>
        <argsstring>(const Date &amp;d1, const Date &amp;d2)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>QuantLib::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="462" column="17" bodyfile="ql/time/date.hpp" bodystart="462" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aba5ecd18b4ec1e9b3b54780b9d3ac403" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, DateGeneration::Rule r)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_date_generation_1a3fee9b3c834b0d3be240d05886ac2f6e" kindref="member">DateGeneration::Rule</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/dategenerationrule.cpp" line="27" column="5" bodyfile="ql/time/dategenerationrule.cpp" bodystart="27" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aba4b6beb668dc3f37a5f90e551af5852" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator==</definition>
        <argsstring>(const DayCounter &amp;d1, const DayCounter &amp;d2)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/daycounter.hpp" line="135" column="17" bodyfile="ql/time/daycounter.hpp" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ab25448ebfeb8e23ad91ff9bd70072872" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator!=</definition>
        <argsstring>(const DayCounter &amp;d1, const DayCounter &amp;d2)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>d2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/daycounter.hpp" line="140" column="17" bodyfile="ql/time/daycounter.hpp" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ad024bf1a504a5887a6efdfc53bb2b9c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const DayCounter &amp;d)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/daycounter.hpp" line="144" column="12" bodyfile="ql/time/daycounter.hpp" bodystart="144" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a2c4b43fa2ba89e3d38091ad93718c949" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::yearFractionToDate</definition>
        <argsstring>(const DayCounter &amp;dayCounter, const Date &amp;referenceDate, Time t)</argsstring>
        <name>yearFractionToDate</name>
        <qualifiedname>QuantLib::yearFractionToDate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>referenceDate</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/daycounters/yearfractiontodate.cpp" line="28" column="10" bodyfile="ql/time/daycounters/yearfractiontodate.cpp" bodystart="28" bodyend="62" declfile="ql/time/daycounters/yearfractiontodate.hpp" declline="31" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ac938f8acf80376fd7ed9b9c581b0ba6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Frequency f)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/frequency.cpp" line="29" column="5" bodyfile="ql/time/frequency.cpp" bodystart="29" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a57eceac6f1592ea8cc729381e5e54a18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::years</definition>
        <argsstring>(const Period &amp;p)</argsstring>
        <name>years</name>
        <qualifiedname>QuantLib::years</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.cpp" line="279" column="10" bodyfile="ql/time/period.cpp" bodystart="279" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ad2902624f74e9dc7f69adac5fea9f77f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::months</definition>
        <argsstring>(const Period &amp;p)</argsstring>
        <name>months</name>
        <qualifiedname>QuantLib::months</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.cpp" line="296" column="10" bodyfile="ql/time/period.cpp" bodystart="296" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a8259c501ef8b2120f3c2c1f6f282030e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::weeks</definition>
        <argsstring>(const Period &amp;p)</argsstring>
        <name>weeks</name>
        <qualifiedname>QuantLib::weeks</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.cpp" line="313" column="10" bodyfile="ql/time/period.cpp" bodystart="313" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a8f13561bdf9354d38c3d149c745b5c5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::days</definition>
        <argsstring>(const Period &amp;p)</argsstring>
        <name>days</name>
        <qualifiedname>QuantLib::days</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.cpp" line="330" column="10" bodyfile="ql/time/period.cpp" bodystart="330" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ac6891687e7b7a070cab0ac765365c0ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&lt;</definition>
        <argsstring>(const Period &amp;p1, const Period &amp;p2)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>QuantLib::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.cpp" line="347" column="5" bodyfile="ql/time/period.cpp" bodystart="347" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1acd40b5ad69292ad5e80c9989a6b48487" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref></type>
        <definition>Period QuantLib::operator+</definition>
        <argsstring>(const Period &amp;p1, const Period &amp;p2)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.cpp" line="380" column="12" bodyfile="ql/time/period.cpp" bodystart="380" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a25285b788c7768b2fb82a143199b9926" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref></type>
        <definition>Period QuantLib::operator-</definition>
        <argsstring>(const Period &amp;p1, const Period &amp;p2)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.cpp" line="386" column="12" bodyfile="ql/time/period.cpp" bodystart="386" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a81d01050eafa4fd41cfe25394195610a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref></type>
        <definition>Period QuantLib::operator/</definition>
        <argsstring>(const Period &amp;p, Integer n)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.cpp" line="390" column="12" bodyfile="ql/time/period.cpp" bodystart="390" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a61e42ab8cba5d3bd728b74720e5202e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Period &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.cpp" line="398" column="5" bodyfile="ql/time/period.cpp" bodystart="398" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a26a1ae8ba98b630db20bbf8e3cb84dfc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref></type>
        <definition>Period QuantLib::operator*</definition>
        <argsstring>(T n, TimeUnit units)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a6cdac5e2dae1e972076cc8e3302e4ad3" kindref="member">TimeUnit</ref></type>
          <declname>units</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="147" column="19" bodyfile="ql/time/period.hpp" bodystart="147" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a6f649f42e064b47f3124c6c31f539dc5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref></type>
        <definition>Period QuantLib::operator*</definition>
        <argsstring>(TimeUnit units, T n)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a6cdac5e2dae1e972076cc8e3302e4ad3" kindref="member">TimeUnit</ref></type>
          <declname>units</declname>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="152" column="19" bodyfile="ql/time/period.hpp" bodystart="152" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a4ed581464d2437b3c22965f83a79671f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref></type>
        <definition>Period QuantLib::operator-</definition>
        <argsstring>(const Period &amp;p)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="156" column="19" bodyfile="ql/time/period.hpp" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aeece485f65be4b6cf0a843988480a44f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref></type>
        <definition>Period QuantLib::operator*</definition>
        <argsstring>(Integer n, const Period &amp;p)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="158" column="19" bodyfile="ql/time/period.hpp" bodystart="158" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ab8a9b34d971fd3eea6d366eabec7fff3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref></type>
        <definition>Period QuantLib::operator*</definition>
        <argsstring>(const Period &amp;p, Integer n)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="160" column="19" bodyfile="ql/time/period.hpp" bodystart="160" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a31207e6c1ca6e853a41d8bf942e268b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator==</definition>
        <argsstring>(const Period &amp;p1, const Period &amp;p2)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="162" column="17" bodyfile="ql/time/period.hpp" bodystart="162" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a9b4cd3aebfbb1e76d9d8082724e25f54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator!=</definition>
        <argsstring>(const Period &amp;p1, const Period &amp;p2)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="166" column="17" bodyfile="ql/time/period.hpp" bodystart="166" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a780be6bbec860087105ae605f33ef12f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&gt;</definition>
        <argsstring>(const Period &amp;p1, const Period &amp;p2)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>QuantLib::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="170" column="17" bodyfile="ql/time/period.hpp" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a9dd44fbc745bf453225c34eb592aed51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&lt;=</definition>
        <argsstring>(const Period &amp;p1, const Period &amp;p2)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>QuantLib::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="174" column="12" bodyfile="ql/time/period.hpp" bodystart="174" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a267e28df2c93b4d3f9914023e0d8ec73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::operator&gt;=</definition>
        <argsstring>(const Period &amp;p1, const Period &amp;p2)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>QuantLib::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="178" column="17" bodyfile="ql/time/period.hpp" bodystart="178" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1ada34a1f564ec5842f47a4f1d171fc0fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::previousTwentieth</definition>
        <argsstring>(const Date &amp;d, DateGeneration::Rule rule)</argsstring>
        <name>previousTwentieth</name>
        <qualifiedname>QuantLib::previousTwentieth</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_date_generation_1a3fee9b3c834b0d3be240d05886ac2f6e" kindref="member">DateGeneration::Rule</ref></type>
          <declname>rule</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper function for returning the date on or before date <computeroutput>d</computeroutput> that is the 20th of the month and obeserves the given date generation <computeroutput>rule</computeroutput> if it is relevant. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/schedule.cpp" line="635" column="10" bodyfile="ql/time/schedule.cpp" bodystart="635" bodyend="650" declfile="ql/time/schedule.hpp" declline="158" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a7db7a79dfd0196c446a82c9e2cd36477" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const TimeUnit &amp;timeunit)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a6cdac5e2dae1e972076cc8e3302e4ad3" kindref="member">TimeUnit</ref> &amp;</type>
          <declname>timeunit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/timeunit.cpp" line="28" column="5" bodyfile="ql/time/timeunit.cpp" bodystart="28" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a251502ad94105a4add7643c6bb02474e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; QuantLib::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Weekday &amp;w)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a04474aebb0bea95bba2f1dcbdd8a27a6" kindref="member">Weekday</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/weekday.cpp" line="32" column="5" bodyfile="ql/time/weekday.cpp" bodystart="32" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1a183fff1d8d3a24329e4e049240f65901" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void QuantLib::swap</definition>
        <argsstring>(Clone&lt; T &gt; &amp;t, Clone&lt; T &gt; &amp;u) noexcept</argsstring>
        <name>swap</name>
        <qualifiedname>QuantLib::swap</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_clone" kindref="compound">Clone</ref>&lt; T &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_clone" kindref="compound">Clone</ref>&lt; T &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/clone.hpp" line="123" column="17" bodyfile="ql/utilities/clone.hpp" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespace_quant_lib_1aeeede252613581547b33f79c5ebb8968" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>QL_FORCE_NONINLINE std::size_t</type>
        <definition>std::size_t QuantLib::compiledBoostVersion</definition>
        <argsstring>()</argsstring>
        <name>compiledBoostVersion</name>
        <qualifiedname>QuantLib::compiledBoostVersion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the version of boost that the <ref refid="namespace_quant_lib" kindref="compound">QuantLib</ref> library was built with Use to check that client code is using a consistent version of boost. Using <ref refid="namespace_quant_lib" kindref="compound">QuantLib</ref> header files compiled with a different version of boost than the library itself may result in undefined behaviour </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/version.cpp" line="38" column="36" bodyfile="ql/version.cpp" bodystart="38" bodyend="41" declfile="ql/version.hpp" declline="47" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_replication_1a5fc01e44efe48314e6f91e7dc20e075d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, Replication::Type)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::Replication::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>Replication::Type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/replication.hpp" line="41" column="5" bodyfile="ql/cashflows/replication.cpp" bodystart="26" bodyend="37" declfile="ql/cashflows/replication.hpp" declline="41" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_currency_1a3abfb8e127c9bcc4f89e96f99b8ab26d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Currency &amp;, const Currency &amp;)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::Currency::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/currency.hpp" line="112" column="10" bodyfile="ql/currency.hpp" bodystart="179" bodyend="182" declfile="ql/currency.hpp" declline="112" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_currency_1a683e4aa899ff13036968e802c756341b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Currency &amp;, const Currency &amp;)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::Currency::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/currency.hpp" line="116" column="10" bodyfile="ql/currency.hpp" bodystart="184" bodyend="186" declfile="ql/currency.hpp" declline="116" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_currency_1a257ed05732c5ca447c26c8d3eff0ef47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const Currency &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::Currency::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/currency.hpp" line="120" column="5" bodyfile="ql/currency.cpp" bodystart="25" bodyend="30" declfile="ql/currency.hpp" declline="120" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_type_1a672fd02545f740f194d879cb2b260456" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const CommodityType &amp;, const CommodityType &amp;)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::CommodityType::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditytype.hpp" line="76" column="10" bodyfile="ql/experimental/commodities/commoditytype.hpp" bodystart="107" bodyend="109" declfile="ql/experimental/commodities/commoditytype.hpp" declline="76" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_type_1a77a9b9f71c1ed95bd31d2ad73dcc3202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const CommodityType &amp;, const CommodityType &amp;)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::CommodityType::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditytype.hpp" line="80" column="10" bodyfile="ql/experimental/commodities/commoditytype.hpp" bodystart="111" bodyend="113" declfile="ql/experimental/commodities/commoditytype.hpp" declline="80" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_type_1ae9b4ce5917c9d8624983d67323e0b081" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const CommodityType &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::CommodityType::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditytype.hpp" line="84" column="5" bodyfile="ql/experimental/commodities/commoditytype.cpp" bodystart="40" bodyend="45" declfile="ql/experimental/commodities/commoditytype.hpp" declline="84" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_payment_term_1ad0c696b905fd1f7d49b97806e7e28aa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const PaymentTerm &amp;, const PaymentTerm &amp;)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::PaymentTerm::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_payment_term" kindref="compound">PaymentTerm</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_payment_term" kindref="compound">PaymentTerm</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/paymentterm.hpp" line="70" column="10" bodyfile="ql/experimental/commodities/paymentterm.hpp" bodystart="113" bodyend="115" declfile="ql/experimental/commodities/paymentterm.hpp" declline="70" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_payment_term_1a3a14cda29f7ea6b3b761303a887cf119" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const PaymentTerm &amp;, const PaymentTerm &amp;)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::PaymentTerm::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_payment_term" kindref="compound">PaymentTerm</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_payment_term" kindref="compound">PaymentTerm</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/paymentterm.hpp" line="74" column="10" bodyfile="ql/experimental/commodities/paymentterm.hpp" bodystart="117" bodyend="119" declfile="ql/experimental/commodities/paymentterm.hpp" declline="74" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_payment_term_1a9f6412633af57189ba935181fe3b4065" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const PaymentTerm &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::PaymentTerm::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_payment_term" kindref="compound">PaymentTerm</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/paymentterm.hpp" line="78" column="5" bodyfile="ql/experimental/commodities/paymentterm.cpp" bodystart="42" bodyend="47" declfile="ql/experimental/commodities/paymentterm.hpp" declline="78" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1afbdc8e55dbb347a2dc5f84d6ac93f83c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref></type>
        <definition>Quantity operator+</definition>
        <argsstring>(const Quantity &amp;, const Quantity &amp;)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Quantity::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="91" column="14" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="165" bodyend="169" declfile="ql/experimental/commodities/quantity.hpp" declline="91" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1ad78fa7a2b2c87df291ea92b30b4ab21e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref></type>
        <definition>Quantity operator-</definition>
        <argsstring>(const Quantity &amp;, const Quantity &amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Quantity::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="93" column="14" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="171" bodyend="175" declfile="ql/experimental/commodities/quantity.hpp" declline="93" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1a9d5ba8f98f7b4996e5e9ed2e57ac24cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref></type>
        <definition>Quantity operator*</definition>
        <argsstring>(const Quantity &amp;, Real)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Quantity::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="95" column="14" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="177" bodyend="181" declfile="ql/experimental/commodities/quantity.hpp" declline="95" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1aad1cad04d3e9719f8335cbb8af7c9d45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref></type>
        <definition>Quantity operator*</definition>
        <argsstring>(Real, const Quantity &amp;)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Quantity::operator*</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="97" column="14" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="183" bodyend="185" declfile="ql/experimental/commodities/quantity.hpp" declline="97" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1a3509a450371b66d3cb796cc446679724" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref></type>
        <definition>Quantity operator/</definition>
        <argsstring>(const Quantity &amp;, Real)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::Quantity::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="99" column="14" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="187" bodyend="191" declfile="ql/experimental/commodities/quantity.hpp" declline="99" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1a3491221669a3f36e3c5ea9f18fdeeef9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real operator/</definition>
        <argsstring>(const Quantity &amp;, const Quantity &amp;)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::Quantity::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="101" column="10" bodyfile="ql/experimental/commodities/quantity.cpp" bodystart="86" bodyend="103" declfile="ql/experimental/commodities/quantity.hpp" declline="101" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1abc87975ae73b653638f53313f0f126c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Quantity &amp;, const Quantity &amp;)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::Quantity::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="104" column="10" bodyfile="ql/experimental/commodities/quantity.cpp" bodystart="105" bodyend="123" declfile="ql/experimental/commodities/quantity.hpp" declline="104" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1ab5319972dff38489989679a5a68fe451" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Quantity &amp;, const Quantity &amp;)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::Quantity::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="106" column="10" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="193" bodyend="195" declfile="ql/experimental/commodities/quantity.hpp" declline="106" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1a39659ebc093023e8f81571b7ccc7c712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const Quantity &amp;, const Quantity &amp;)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>QuantLib::Quantity::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="108" column="5" bodyfile="ql/experimental/commodities/quantity.cpp" bodystart="125" bodyend="142" declfile="ql/experimental/commodities/quantity.hpp" declline="108" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1aee765537c0de009828db8d5c1302cd54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const Quantity &amp;, const Quantity &amp;)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>QuantLib::Quantity::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="110" column="5" bodyfile="ql/experimental/commodities/quantity.cpp" bodystart="144" bodyend="161" declfile="ql/experimental/commodities/quantity.hpp" declline="110" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1a00c4d93468e4de8b1c0ce0d808e0c7b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const Quantity &amp;, const Quantity &amp;)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>QuantLib::Quantity::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="112" column="10" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="197" bodyend="199" declfile="ql/experimental/commodities/quantity.hpp" declline="112" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1a5cfb1d15f4c1a39611a6ceada7e76dac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const Quantity &amp;, const Quantity &amp;)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>QuantLib::Quantity::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="114" column="10" bodyfile="ql/experimental/commodities/quantity.hpp" bodystart="201" bodyend="203" declfile="ql/experimental/commodities/quantity.hpp" declline="114" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1ab3eb319be4ad31a69bbedb9741f25b5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool close</definition>
        <argsstring>(const Quantity &amp;, const Quantity &amp;, Size n=42)</argsstring>
        <name>close</name>
        <qualifiedname>QuantLib::Quantity::close</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
          <defval>42</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="117" column="10" bodyfile="ql/experimental/commodities/quantity.cpp" bodystart="163" bodyend="180" declfile="ql/experimental/commodities/quantity.hpp" declline="117" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_quantity_1aa203374ee10b1dd92948e400472cd1e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool close_enough</definition>
        <argsstring>(const Quantity &amp;, const Quantity &amp;, Size n=42)</argsstring>
        <name>close_enough</name>
        <qualifiedname>QuantLib::Quantity::close_enough</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
          <defval>42</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/quantity.hpp" line="119" column="10" bodyfile="ql/experimental/commodities/quantity.cpp" bodystart="182" bodyend="199" declfile="ql/experimental/commodities/quantity.hpp" declline="119" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_unit_of_measure_1a93b0e3b06bb3eff2e7f80864d32101b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const UnitOfMeasure &amp;, const UnitOfMeasure &amp;)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::UnitOfMeasure::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/unitofmeasure.hpp" line="91" column="10" bodyfile="ql/experimental/commodities/unitofmeasure.hpp" bodystart="130" bodyend="132" declfile="ql/experimental/commodities/unitofmeasure.hpp" declline="91" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_unit_of_measure_1a7b072a8434094fec0d21f53346581ee4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const UnitOfMeasure &amp;, const UnitOfMeasure &amp;)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::UnitOfMeasure::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/unitofmeasure.hpp" line="95" column="10" bodyfile="ql/experimental/commodities/unitofmeasure.hpp" bodystart="134" bodyend="136" declfile="ql/experimental/commodities/unitofmeasure.hpp" declline="95" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_unit_of_measure_1a5dc130ad7da6f32ebcc08e2018fe9f22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const UnitOfMeasure &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::UnitOfMeasure::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/unitofmeasure.hpp" line="99" column="5" bodyfile="ql/experimental/commodities/unitofmeasure.cpp" bodystart="26" bodyend="31" declfile="ql/experimental/commodities/unitofmeasure.hpp" declline="99" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_region_1a2693369a6f504bb273441569e0487054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Region &amp;, const Region &amp;)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::Region::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_region" kindref="compound">Region</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_region" kindref="compound">Region</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/region.hpp" line="56" column="10" bodyfile="ql/indexes/region.hpp" bodystart="121" bodyend="123" declfile="ql/indexes/region.hpp" declline="56" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_region_1a91999f0d2a4817c3d44e56f8fa9b3a38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Region &amp;, const Region &amp;)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::Region::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_region" kindref="compound">Region</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_region" kindref="compound">Region</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/region.hpp" line="59" column="10" bodyfile="ql/indexes/region.hpp" bodystart="125" bodyend="127" declfile="ql/indexes/region.hpp" declline="59" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_futures_1a5780d27c2b893b319a889130187cc39b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, Futures::Type)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::Futures::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_futures_1ac63abccb416c6a9aa3f0d607289afac0" kindref="member">Futures::Type</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/futures.hpp" line="46" column="5" bodyfile="ql/instruments/futures.cpp" bodystart="27" bodyend="38" declfile="ql/instruments/futures.hpp" declline="46" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_interest_rate_1a470e6cf45fe6bf07123c0ba59f292814" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const InterestRate &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::InterestRate::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_interest_rate" kindref="compound">InterestRate</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/interestrate.hpp" line="189" column="5" bodyfile="ql/interestrate.cpp" bodystart="115" bodyend="166" declfile="ql/interestrate.hpp" declline="189" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1afd78eeec99ca45607a2c64520a45633c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real DotProduct</definition>
        <argsstring>(const Array &amp;, const Array &amp;)</argsstring>
        <name>DotProduct</name>
        <qualifiedname>QuantLib::Array::DotProduct</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="151" column="10" bodyfile="ql/math/array.hpp" bodystart="534" bodyend="539" declfile="ql/math/array.hpp" declline="151" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a9e87629195c1f207492ed40027714342" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real Norm2</definition>
        <argsstring>(const Array &amp;)</argsstring>
        <name>Norm2</name>
        <qualifiedname>QuantLib::Array::Norm2</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="154" column="10" bodyfile="ql/math/array.hpp" bodystart="541" bodyend="543" declfile="ql/math/array.hpp" declline="154" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1abde196d298d8f5d28aee9cd17b9130be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator+</definition>
        <argsstring>(const Array &amp;v)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Array::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="158" column="11" bodyfile="ql/math/array.hpp" bodystart="549" bodyend="552" declfile="ql/math/array.hpp" declline="158" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a811c75057cc8f6057dcdecafcbcad1d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator+</definition>
        <argsstring>(Array &amp;&amp;v)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Array::operator+</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="160" column="11" bodyfile="ql/math/array.hpp" bodystart="554" bodyend="556" declfile="ql/math/array.hpp" declline="160" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a5720ef02a8bb50b354c9436e6e096be5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator-</definition>
        <argsstring>(const Array &amp;v)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Array::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="162" column="11" bodyfile="ql/math/array.hpp" bodystart="558" bodyend="562" declfile="ql/math/array.hpp" declline="162" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1aa0d555ebb393c23d4c2de8711376e493" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator-</definition>
        <argsstring>(Array &amp;&amp;v)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Array::operator-</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="164" column="11" bodyfile="ql/math/array.hpp" bodystart="564" bodyend="568" declfile="ql/math/array.hpp" declline="164" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1ad2c47ac8d5e51f022da8c22e5e4b195f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator+</definition>
        <argsstring>(const Array &amp;, const Array &amp;)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Array::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="168" column="11" bodyfile="ql/math/array.hpp" bodystart="572" bodyend="579" declfile="ql/math/array.hpp" declline="168" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a712a8e4b405fa7dafa483d4875b28959" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator+</definition>
        <argsstring>(const Array &amp;, Array &amp;&amp;)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Array::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="170" column="11" bodyfile="ql/math/array.hpp" bodystart="581" bodyend="588" declfile="ql/math/array.hpp" declline="170" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a1d1d9543375851500c10670c3b0b8497" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator+</definition>
        <argsstring>(Array &amp;&amp;, const Array &amp;)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Array::operator+</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="172" column="11" bodyfile="ql/math/array.hpp" bodystart="590" bodyend="597" declfile="ql/math/array.hpp" declline="172" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a7e465754f03ca14ac0543395b023db9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator+</definition>
        <argsstring>(Array &amp;&amp;, Array &amp;&amp;)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Array::operator+</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="174" column="11" bodyfile="ql/math/array.hpp" bodystart="599" bodyend="606" declfile="ql/math/array.hpp" declline="174" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1ac7eb993004291f5b193279e18fa9355d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator+</definition>
        <argsstring>(const Array &amp;, Real)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Array::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="176" column="11" bodyfile="ql/math/array.hpp" bodystart="608" bodyend="612" declfile="ql/math/array.hpp" declline="176" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a2c654e24aae4792477f02667d768b79b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator+</definition>
        <argsstring>(Array &amp;&amp;, Real)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Array::operator+</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="178" column="11" bodyfile="ql/math/array.hpp" bodystart="614" bodyend="618" declfile="ql/math/array.hpp" declline="178" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1adc0ba300e515b04a08e8b70ab34e51b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator+</definition>
        <argsstring>(Real, const Array &amp;)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Array::operator+</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="180" column="11" bodyfile="ql/math/array.hpp" bodystart="620" bodyend="624" declfile="ql/math/array.hpp" declline="180" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1ac4d9358bb36825e49fb34bb82759b8c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator+</definition>
        <argsstring>(Real, Array &amp;&amp;)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Array::operator+</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="182" column="11" bodyfile="ql/math/array.hpp" bodystart="626" bodyend="630" declfile="ql/math/array.hpp" declline="182" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1ac6b4eab63ff35c8c1934d8d787b90006" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator-</definition>
        <argsstring>(const Array &amp;, const Array &amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Array::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="184" column="11" bodyfile="ql/math/array.hpp" bodystart="632" bodyend="639" declfile="ql/math/array.hpp" declline="184" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1ac35e4d45d6aa28edd2b6e245a4dcc558" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator-</definition>
        <argsstring>(const Array &amp;, Array &amp;&amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Array::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="186" column="11" bodyfile="ql/math/array.hpp" bodystart="641" bodyend="648" declfile="ql/math/array.hpp" declline="186" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a55d2f1ff7d5411388b6c7eeb8636412b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator-</definition>
        <argsstring>(Array &amp;&amp;, const Array &amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Array::operator-</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="188" column="11" bodyfile="ql/math/array.hpp" bodystart="650" bodyend="657" declfile="ql/math/array.hpp" declline="188" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a010a49a49234d60e34059ec5c9a3c4ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator-</definition>
        <argsstring>(Array &amp;&amp;, Array &amp;&amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Array::operator-</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="190" column="11" bodyfile="ql/math/array.hpp" bodystart="659" bodyend="666" declfile="ql/math/array.hpp" declline="190" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a9b1dd6721d0e09398159120188d18286" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator-</definition>
        <argsstring>(const Array &amp;, Real)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Array::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="192" column="11" bodyfile="ql/math/array.hpp" bodystart="668" bodyend="672" declfile="ql/math/array.hpp" declline="192" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1abbf2ff948c024511199ccbfbaf9249b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator-</definition>
        <argsstring>(Real, const Array &amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Array::operator-</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="194" column="11" bodyfile="ql/math/array.hpp" bodystart="680" bodyend="684" declfile="ql/math/array.hpp" declline="194" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1abfa17a99447324e7d3ab4340fb380986" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator-</definition>
        <argsstring>(Array &amp;&amp;, Real)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Array::operator-</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="196" column="11" bodyfile="ql/math/array.hpp" bodystart="674" bodyend="678" declfile="ql/math/array.hpp" declline="196" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a4ab109544714d650098543db766ec05f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator-</definition>
        <argsstring>(Real, Array &amp;&amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Array::operator-</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="198" column="11" bodyfile="ql/math/array.hpp" bodystart="686" bodyend="690" declfile="ql/math/array.hpp" declline="198" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a93485c66c2ceef6cfb75a228f1a82fdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator*</definition>
        <argsstring>(const Array &amp;, const Array &amp;)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Array::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="200" column="11" bodyfile="ql/math/array.hpp" bodystart="692" bodyend="699" declfile="ql/math/array.hpp" declline="200" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a991a2ec82ace924595397ab0d92a1722" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator*</definition>
        <argsstring>(const Array &amp;, Array &amp;&amp;)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Array::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="202" column="11" bodyfile="ql/math/array.hpp" bodystart="701" bodyend="708" declfile="ql/math/array.hpp" declline="202" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1ae20ec87b8bb460d9c5a36768643d1f46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator*</definition>
        <argsstring>(Array &amp;&amp;, const Array &amp;)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Array::operator*</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="204" column="11" bodyfile="ql/math/array.hpp" bodystart="710" bodyend="717" declfile="ql/math/array.hpp" declline="204" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a2c1c0515ff8fe1bce116e392ccf90a42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator*</definition>
        <argsstring>(Array &amp;&amp;, Array &amp;&amp;)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Array::operator*</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="206" column="11" bodyfile="ql/math/array.hpp" bodystart="719" bodyend="726" declfile="ql/math/array.hpp" declline="206" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1ae688732716c32a4d6de2d9584c9e43e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator*</definition>
        <argsstring>(const Array &amp;, Real)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Array::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="208" column="11" bodyfile="ql/math/array.hpp" bodystart="728" bodyend="732" declfile="ql/math/array.hpp" declline="208" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a160977868615e8d684ffb05fa99c73ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator*</definition>
        <argsstring>(Real, const Array &amp;)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Array::operator*</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="210" column="11" bodyfile="ql/math/array.hpp" bodystart="740" bodyend="744" declfile="ql/math/array.hpp" declline="210" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1ac76599dc7284a566ae2925b150679f4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator*</definition>
        <argsstring>(Array &amp;&amp;, Real)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Array::operator*</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="212" column="11" bodyfile="ql/math/array.hpp" bodystart="734" bodyend="738" declfile="ql/math/array.hpp" declline="212" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a02456b947a149119fd4a0101495319de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator*</definition>
        <argsstring>(Real, Array &amp;&amp;)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Array::operator*</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="214" column="11" bodyfile="ql/math/array.hpp" bodystart="746" bodyend="750" declfile="ql/math/array.hpp" declline="214" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a280443733f0e45cfbe370408ea16f175" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator/</definition>
        <argsstring>(const Array &amp;, const Array &amp;)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::Array::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="216" column="11" bodyfile="ql/math/array.hpp" bodystart="752" bodyend="759" declfile="ql/math/array.hpp" declline="216" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1ac62e640d8390172ae1ce9a3926608a93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator/</definition>
        <argsstring>(const Array &amp;, Array &amp;&amp;)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::Array::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="218" column="11" bodyfile="ql/math/array.hpp" bodystart="761" bodyend="768" declfile="ql/math/array.hpp" declline="218" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a0ba38dd3993557f95ae4abfe8125902b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator/</definition>
        <argsstring>(Array &amp;&amp;, const Array &amp;)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::Array::operator/</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="220" column="11" bodyfile="ql/math/array.hpp" bodystart="770" bodyend="777" declfile="ql/math/array.hpp" declline="220" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1ade64c1ba1b6c440af07166a418cd421a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator/</definition>
        <argsstring>(Array &amp;&amp;, Array &amp;&amp;)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::Array::operator/</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="222" column="11" bodyfile="ql/math/array.hpp" bodystart="779" bodyend="786" declfile="ql/math/array.hpp" declline="222" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a84f9ff875f9503bb0bc31e52e8fbb959" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator/</definition>
        <argsstring>(const Array &amp;, Real)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::Array::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="224" column="11" bodyfile="ql/math/array.hpp" bodystart="788" bodyend="792" declfile="ql/math/array.hpp" declline="224" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a3cad923323302ede64614f6e7632f35d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator/</definition>
        <argsstring>(Real, const Array &amp;)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::Array::operator/</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="226" column="11" bodyfile="ql/math/array.hpp" bodystart="800" bodyend="804" declfile="ql/math/array.hpp" declline="226" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1ad9dabf43fecbaac5fab6682e6d480f87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator/</definition>
        <argsstring>(Array &amp;&amp;, Real)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::Array::operator/</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="228" column="11" bodyfile="ql/math/array.hpp" bodystart="794" bodyend="798" declfile="ql/math/array.hpp" declline="228" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a862882f79aa00e71985094dd7803261d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator/</definition>
        <argsstring>(Real, Array &amp;&amp;)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::Array::operator/</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="230" column="11" bodyfile="ql/math/array.hpp" bodystart="806" bodyend="810" declfile="ql/math/array.hpp" declline="230" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a0668e394c26fb5a3162ebce2c9b1d487" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array Abs</definition>
        <argsstring>(const Array &amp;)</argsstring>
        <name>Abs</name>
        <qualifiedname>QuantLib::Array::Abs</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="234" column="11" bodyfile="ql/math/array.hpp" bodystart="814" bodyend="819" declfile="ql/math/array.hpp" declline="234" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a50e718ecd8a3c041f8415abd84da8e67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array Abs</definition>
        <argsstring>(Array &amp;&amp;)</argsstring>
        <name>Abs</name>
        <qualifiedname>QuantLib::Array::Abs</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="236" column="11" bodyfile="ql/math/array.hpp" bodystart="821" bodyend="826" declfile="ql/math/array.hpp" declline="236" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a8c77413983a52abf16be6a770dfa9fc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array Sqrt</definition>
        <argsstring>(const Array &amp;)</argsstring>
        <name>Sqrt</name>
        <qualifiedname>QuantLib::Array::Sqrt</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="238" column="11" bodyfile="ql/math/array.hpp" bodystart="828" bodyend="833" declfile="ql/math/array.hpp" declline="238" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1ab75125f04b8460fdc5ace882b72c7f44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array Sqrt</definition>
        <argsstring>(Array &amp;&amp;)</argsstring>
        <name>Sqrt</name>
        <qualifiedname>QuantLib::Array::Sqrt</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="240" column="11" bodyfile="ql/math/array.hpp" bodystart="835" bodyend="840" declfile="ql/math/array.hpp" declline="240" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a8f2fb0a84f46165aa11f4a0e6536f71f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array Log</definition>
        <argsstring>(const Array &amp;)</argsstring>
        <name>Log</name>
        <qualifiedname>QuantLib::Array::Log</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="242" column="11" bodyfile="ql/math/array.hpp" bodystart="842" bodyend="847" declfile="ql/math/array.hpp" declline="242" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a40456dfca61e193e173175ebbef815b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array Log</definition>
        <argsstring>(Array &amp;&amp;)</argsstring>
        <name>Log</name>
        <qualifiedname>QuantLib::Array::Log</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="244" column="11" bodyfile="ql/math/array.hpp" bodystart="849" bodyend="854" declfile="ql/math/array.hpp" declline="244" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a8559b762b10f29f45940d358f6ea1df5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array Exp</definition>
        <argsstring>(const Array &amp;)</argsstring>
        <name>Exp</name>
        <qualifiedname>QuantLib::Array::Exp</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="246" column="11" bodyfile="ql/math/array.hpp" bodystart="856" bodyend="861" declfile="ql/math/array.hpp" declline="246" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a560f794217bdb15d71360d08e45fc6cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array Exp</definition>
        <argsstring>(Array &amp;&amp;)</argsstring>
        <name>Exp</name>
        <qualifiedname>QuantLib::Array::Exp</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="248" column="11" bodyfile="ql/math/array.hpp" bodystart="863" bodyend="868" declfile="ql/math/array.hpp" declline="248" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a2feacdf88afc5b01cfd21d91ea4db883" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array Pow</definition>
        <argsstring>(const Array &amp;, Real)</argsstring>
        <name>Pow</name>
        <qualifiedname>QuantLib::Array::Pow</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="250" column="11" bodyfile="ql/math/array.hpp" bodystart="870" bodyend="875" declfile="ql/math/array.hpp" declline="250" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a6407cbdfbdbdd826cd3750ffa200360b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array Pow</definition>
        <argsstring>(Array &amp;&amp;, Real)</argsstring>
        <name>Pow</name>
        <qualifiedname>QuantLib::Array::Pow</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="252" column="11" bodyfile="ql/math/array.hpp" bodystart="877" bodyend="882" declfile="ql/math/array.hpp" declline="252" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1aae5d5314f907b522ebd83fddb4d1fc92" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(Array &amp;, Array &amp;) noexcept</argsstring>
        <name>swap</name>
        <qualifiedname>QuantLib::Array::swap</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="256" column="10" bodyfile="ql/math/array.hpp" bodystart="884" bodyend="886" declfile="ql/math/array.hpp" declline="256" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_array_1a3290708c171149766f28ea1ea40fe18a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const Array &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::Array::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/array.hpp" line="260" column="5" bodyfile="ql/math/array.hpp" bodystart="888" bodyend="898" declfile="ql/math/array.hpp" declline="260" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1a6d11ed998cc31f97481d26e07afa66d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator+</definition>
        <argsstring>(const Matrix &amp;, const Matrix &amp;)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Matrix::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="155" column="12" bodyfile="ql/math/matrix.hpp" bodystart="524" bodyend="534" declfile="ql/math/matrix.hpp" declline="155" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1a9be7abc59883cec4b0c984a64b58638f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator+</definition>
        <argsstring>(const Matrix &amp;, Matrix &amp;&amp;)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Matrix::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="157" column="12" bodyfile="ql/math/matrix.hpp" bodystart="536" bodyend="545" declfile="ql/math/matrix.hpp" declline="157" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1a440cf4673c9d7be9ccdc21de74a51c48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator+</definition>
        <argsstring>(Matrix &amp;&amp;, const Matrix &amp;)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Matrix::operator+</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="159" column="12" bodyfile="ql/math/matrix.hpp" bodystart="547" bodyend="556" declfile="ql/math/matrix.hpp" declline="159" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1a4a93663169247c36f8440c599f998fd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator+</definition>
        <argsstring>(Matrix &amp;&amp;, Matrix &amp;&amp;)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Matrix::operator+</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="161" column="12" bodyfile="ql/math/matrix.hpp" bodystart="558" bodyend="567" declfile="ql/math/matrix.hpp" declline="161" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1ac8f923ecad5d2312f5331e94fb4b319e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator-</definition>
        <argsstring>(const Matrix &amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Matrix::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="163" column="12" bodyfile="ql/math/matrix.hpp" bodystart="569" bodyend="573" declfile="ql/math/matrix.hpp" declline="163" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1aedbcf21aed7999d7273fbd2f9128ab2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator-</definition>
        <argsstring>(Matrix &amp;&amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Matrix::operator-</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="165" column="12" bodyfile="ql/math/matrix.hpp" bodystart="575" bodyend="578" declfile="ql/math/matrix.hpp" declline="165" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1a9ed5b2e849ee4b8282934405339fd7a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator-</definition>
        <argsstring>(const Matrix &amp;, const Matrix &amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Matrix::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="167" column="12" bodyfile="ql/math/matrix.hpp" bodystart="580" bodyend="590" declfile="ql/math/matrix.hpp" declline="167" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1ae01e5ae892add153a84648832f2a0125" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator-</definition>
        <argsstring>(const Matrix &amp;, Matrix &amp;&amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Matrix::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="169" column="12" bodyfile="ql/math/matrix.hpp" bodystart="592" bodyend="601" declfile="ql/math/matrix.hpp" declline="169" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1ad02b00e124f0c7326d59563706ab233a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator-</definition>
        <argsstring>(Matrix &amp;&amp;, const Matrix &amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Matrix::operator-</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="171" column="12" bodyfile="ql/math/matrix.hpp" bodystart="603" bodyend="612" declfile="ql/math/matrix.hpp" declline="171" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1adb6628536e8af77c5c51853e6907da43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator-</definition>
        <argsstring>(Matrix &amp;&amp;, Matrix &amp;&amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Matrix::operator-</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="173" column="12" bodyfile="ql/math/matrix.hpp" bodystart="614" bodyend="623" declfile="ql/math/matrix.hpp" declline="173" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1a2be283fbe284e22d68989469e096a087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator*</definition>
        <argsstring>(const Matrix &amp;, Real)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Matrix::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="175" column="12" bodyfile="ql/math/matrix.hpp" bodystart="625" bodyend="629" declfile="ql/math/matrix.hpp" declline="175" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1a49ee5c03aa781e4a66f9135c639e3d12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator*</definition>
        <argsstring>(Matrix &amp;&amp;, Real)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Matrix::operator*</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="177" column="12" bodyfile="ql/math/matrix.hpp" bodystart="631" bodyend="634" declfile="ql/math/matrix.hpp" declline="177" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1ad5a458a7c80c7d1ec42f66bf369e4567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator*</definition>
        <argsstring>(Real, const Matrix &amp;)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Matrix::operator*</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="179" column="12" bodyfile="ql/math/matrix.hpp" bodystart="636" bodyend="640" declfile="ql/math/matrix.hpp" declline="179" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1a95f70b31fd215df10a1b98fb941f617b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator*</definition>
        <argsstring>(Real, Matrix &amp;&amp;)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Matrix::operator*</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="181" column="12" bodyfile="ql/math/matrix.hpp" bodystart="642" bodyend="645" declfile="ql/math/matrix.hpp" declline="181" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1ac896775e533619b3b8e74add36f1df3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator/</definition>
        <argsstring>(const Matrix &amp;, Real)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::Matrix::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="183" column="12" bodyfile="ql/math/matrix.hpp" bodystart="647" bodyend="651" declfile="ql/math/matrix.hpp" declline="183" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1a81a591b83b05aae56b6f35130d06479f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator/</definition>
        <argsstring>(Matrix &amp;&amp;, Real)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::Matrix::operator/</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;&amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="185" column="12" bodyfile="ql/math/matrix.hpp" bodystart="653" bodyend="656" declfile="ql/math/matrix.hpp" declline="185" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1a77cd00ec3ed9c3fbefb8f338e2a2ec34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator*</definition>
        <argsstring>(const Array &amp;, const Matrix &amp;)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Matrix::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="190" column="11" bodyfile="ql/math/matrix.hpp" bodystart="658" bodyend="669" declfile="ql/math/matrix.hpp" declline="190" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1a0b518bedb379d0b4ef8b4eec806123b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array operator*</definition>
        <argsstring>(const Matrix &amp;, const Array &amp;)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Matrix::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="192" column="11" bodyfile="ql/math/matrix.hpp" bodystart="671" bodyend="681" declfile="ql/math/matrix.hpp" declline="192" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1adf38db67cba468ce4b579a29b568aa5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix operator*</definition>
        <argsstring>(const Matrix &amp;, const Matrix &amp;)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Matrix::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="194" column="12" bodyfile="ql/math/matrix.hpp" bodystart="683" bodyend="698" declfile="ql/math/matrix.hpp" declline="194" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1a3297a42dbd41b49b268e8ec866876504" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix transpose</definition>
        <argsstring>(const Matrix &amp;)</argsstring>
        <name>transpose</name>
        <qualifiedname>QuantLib::Matrix::transpose</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="199" column="12" bodyfile="ql/math/matrix.hpp" bodystart="700" bodyend="708" declfile="ql/math/matrix.hpp" declline="199" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1a8cfa733053832db6990ca195cdab38db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix outerProduct</definition>
        <argsstring>(const Array &amp;v1, const Array &amp;v2)</argsstring>
        <name>outerProduct</name>
        <qualifiedname>QuantLib::Matrix::outerProduct</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="202" column="12" bodyfile="ql/math/matrix.hpp" bodystart="710" bodyend="712" declfile="ql/math/matrix.hpp" declline="202" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1af44f18eeb6f058a2dc99632ed9c6a447" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator1</type>
          </param>
          <param>
            <type>class Iterator2</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix outerProduct</definition>
        <argsstring>(Iterator1 v1begin, Iterator1 v1end, Iterator2 v2begin, Iterator2 v2end)</argsstring>
        <name>outerProduct</name>
        <qualifiedname>QuantLib::Matrix::outerProduct</qualifiedname>
        <param>
          <type>Iterator1</type>
          <declname>v1begin</declname>
        </param>
        <param>
          <type>Iterator1</type>
          <declname>v1end</declname>
        </param>
        <param>
          <type>Iterator2</type>
          <declname>v2begin</declname>
        </param>
        <param>
          <type>Iterator2</type>
          <declname>v2end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="206" column="12" bodyfile="ql/math/matrix.hpp" bodystart="715" bodyend="730" declfile="ql/math/matrix.hpp" declline="206" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1a8473986339e7f202e1800d697456a92b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(Matrix &amp;, Matrix &amp;) noexcept</argsstring>
        <name>swap</name>
        <qualifiedname>QuantLib::Matrix::swap</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="209" column="10" bodyfile="ql/math/matrix.hpp" bodystart="732" bodyend="734" declfile="ql/math/matrix.hpp" declline="209" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1af0d6a8b04f5a8094992e498ca5a71142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const Matrix &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::Matrix::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="212" column="5" bodyfile="ql/math/matrix.hpp" bodystart="736" bodyend="745" declfile="ql/math/matrix.hpp" declline="212" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1aff21cecb1b3c4d8e3f3d525edebd7d5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix inverse</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>inverse</name>
        <qualifiedname>QuantLib::Matrix::inverse</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="215" column="12" bodyfile="ql/math/matrix.cpp" bodystart="44" bodyend="79" declfile="ql/math/matrix.hpp" declline="215" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1afd66b122c895badf4e5d31d7e250b100" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real determinant</definition>
        <argsstring>(const Matrix &amp;m)</argsstring>
        <name>determinant</name>
        <qualifiedname>QuantLib::Matrix::determinant</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrix.hpp" line="218" column="10" bodyfile="ql/math/matrix.cpp" bodystart="81" bodyend="101" declfile="ql/math/matrix.hpp" declline="218" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1a6c481a88e8411cfe2335078b1a91daab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix CholeskyDecomposition</definition>
        <argsstring>(const Matrix &amp;m, bool flexible=false)</argsstring>
        <name>CholeskyDecomposition</name>
        <qualifiedname>QuantLib::Matrix::CholeskyDecomposition</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>flexible</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/choleskydecomposition.hpp" line="33" column="12" bodyfile="ql/math/matrixutilities/choleskydecomposition.cpp" bodystart="27" bodyend="64" declfile="ql/math/matrixutilities/choleskydecomposition.hpp" declline="33" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1a7d1b1a85de60b3f593079112c9a7de80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix pseudoSqrt</definition>
        <argsstring>(const Matrix &amp;, SalvagingAlgorithm::Type=SalvagingAlgorithm::None)</argsstring>
        <name>pseudoSqrt</name>
        <qualifiedname>QuantLib::Matrix::pseudoSqrt</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <param>
          <type>SalvagingAlgorithm::Type</type>
          <defval>SalvagingAlgorithm::None</defval>
        </param>
        <briefdescription>
<para>Returns the pseudo square root of a real symmetric matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>Given a matrix <formula id="89">$ M $</formula>, the result <formula id="290">$ S $</formula> is defined as the matrix such that <formula id="291">$ S S^T = M. $</formula> If the matrix is not positive semi definite, it can return an approximation of the pseudo square root using a (user selected) salvaging algorithm.</para>
<para>For more information see: R. Rebonato and P. Jäckel, The most general methodology to create a valid correlation matrix for risk management and option pricing purposes, The Journal of Risk, 2(2), Winter 1999/2000. <ulink url="http://www.rebonato.com/correlationmatrix.pdf">http://www.rebonato.com/correlationmatrix.pdf</ulink></para>
<para>Revised and extended in &quot;Monte Carlo Methods in Finance&quot;, by Peter Jäckel, Chapter 6.</para>
<para><simplesect kind="pre"><para>the given matrix must be symmetric.</para>
</simplesect>
<simplesect kind="warning"><para>Higham algorithm only works for correlation matrices.</para>
</simplesect>
<xrefsect id="test_1_test000051"><xreftitle>Test</xreftitle><xrefdescription><para><itemizedlist>
<listitem><para>the correctness of the results is tested by reproducing known good data.</para>
</listitem><listitem><para>the correctness of the results is tested by checking returned values against numerical calculations. </para>
</listitem></itemizedlist>
</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/pseudosqrt.hpp" line="64" column="12" bodyfile="ql/math/matrixutilities/pseudosqrt.cpp" bodystart="347" bodyend="451" declfile="ql/math/matrixutilities/pseudosqrt.hpp" declline="64" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_matrix_1a98b26aa75439b4d981b358be20546b88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix rankReducedSqrt</definition>
        <argsstring>(const Matrix &amp;, Size maxRank, Real componentRetainedPercentage, SalvagingAlgorithm::Type)</argsstring>
        <name>rankReducedSqrt</name>
        <qualifiedname>QuantLib::Matrix::rankReducedSqrt</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxRank</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>componentRetainedPercentage</declname>
        </param>
        <param>
          <type>SalvagingAlgorithm::Type</type>
        </param>
        <briefdescription>
<para>Returns the rank-reduced pseudo square root of a real symmetric matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>The result matrix has rank&lt;=maxRank. If maxRank&gt;=size, then the specified percentage of eigenvalues out of the eigenvalues&apos; sum is retained.</para>
<para>If the input matrix is not positive semi definite, it can return an approximation of the pseudo square root using a (user selected) salvaging algorithm.</para>
<para><simplesect kind="pre"><para>the given matrix must be symmetric. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/pseudosqrt.hpp" line="80" column="12" bodyfile="ql/math/matrixutilities/pseudosqrt.cpp" bodystart="454" bodyend="533" declfile="ql/math/matrixutilities/pseudosqrt.hpp" declline="80" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a1f495f020f64c7b177b9e1bc0f99139c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref></type>
        <definition>Money operator+</definition>
        <argsstring>(const Money &amp;, const Money &amp;)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Money::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="122" column="11" bodyfile="ql/money.hpp" bodystart="204" bodyend="208" declfile="ql/money.hpp" declline="122" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a4a130afeac5bc99d0a00e6005dd2fce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref></type>
        <definition>Money operator-</definition>
        <argsstring>(const Money &amp;, const Money &amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Money::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="124" column="11" bodyfile="ql/money.hpp" bodystart="210" bodyend="214" declfile="ql/money.hpp" declline="124" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a20f80bc20add19d64b899d4a21718fb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref></type>
        <definition>Money operator*</definition>
        <argsstring>(const Money &amp;, Decimal)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Money::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" kindref="member">Decimal</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="126" column="11" bodyfile="ql/money.hpp" bodystart="216" bodyend="220" declfile="ql/money.hpp" declline="126" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a5db337044220e3f8028bb303fc9d4f80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref></type>
        <definition>Money operator*</definition>
        <argsstring>(Decimal, const Money &amp;)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Money::operator*</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" kindref="member">Decimal</ref></type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="128" column="11" bodyfile="ql/money.hpp" bodystart="222" bodyend="224" declfile="ql/money.hpp" declline="128" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a91bb0ba24a70226c3a6dd585ffb15537" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref></type>
        <definition>Money operator/</definition>
        <argsstring>(const Money &amp;, Decimal)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::Money::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" kindref="member">Decimal</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="130" column="11" bodyfile="ql/money.hpp" bodystart="226" bodyend="230" declfile="ql/money.hpp" declline="130" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a31eae46b487ee5e972e0e598351edfa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" kindref="member">Decimal</ref></type>
        <definition>Decimal operator/</definition>
        <argsstring>(const Money &amp;, const Money &amp;)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::Money::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="132" column="13" bodyfile="ql/money.cpp" bodystart="90" bodyend="94" declfile="ql/money.hpp" declline="132" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a2f2e363600f64a5a2447cd706a4718fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Money &amp;, const Money &amp;)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::Money::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="135" column="10" bodyfile="ql/money.cpp" bodystart="96" bodyend="100" declfile="ql/money.hpp" declline="135" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a3097af686d116996f32c88433b488f51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Money &amp;, const Money &amp;)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::Money::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="137" column="10" bodyfile="ql/money.hpp" bodystart="232" bodyend="234" declfile="ql/money.hpp" declline="137" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a1dac0cd307438b7659c9af74bb50b4ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const Money &amp;, const Money &amp;)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>QuantLib::Money::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="139" column="5" bodyfile="ql/money.cpp" bodystart="102" bodyend="106" declfile="ql/money.hpp" declline="139" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a567e24d5625a08c9c0685a51df245cce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const Money &amp;, const Money &amp;)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>QuantLib::Money::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="141" column="5" bodyfile="ql/money.cpp" bodystart="108" bodyend="112" declfile="ql/money.hpp" declline="141" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1afcb0842cc75edc7a10019e72709a249e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const Money &amp;, const Money &amp;)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>QuantLib::Money::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="143" column="10" bodyfile="ql/money.hpp" bodystart="236" bodyend="238" declfile="ql/money.hpp" declline="143" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1af8258e94ec653301a5d6e7b68c85c24f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const Money &amp;, const Money &amp;)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>QuantLib::Money::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="145" column="10" bodyfile="ql/money.hpp" bodystart="240" bodyend="242" declfile="ql/money.hpp" declline="145" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a2a41991b16dc3c024a6e10d61a1ba47f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool close</definition>
        <argsstring>(const Money &amp;, const Money &amp;, Size n=42)</argsstring>
        <name>close</name>
        <qualifiedname>QuantLib::Money::close</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
          <defval>42</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="148" column="10" bodyfile="ql/money.cpp" bodystart="114" bodyend="118" declfile="ql/money.hpp" declline="148" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1ac5af9d7a914bb1d00f3beb1076228755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool close_enough</definition>
        <argsstring>(const Money &amp;, const Money &amp;, Size n=42)</argsstring>
        <name>close_enough</name>
        <qualifiedname>QuantLib::Money::close_enough</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
          <defval>42</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="150" column="10" bodyfile="ql/money.cpp" bodystart="120" bodyend="124" declfile="ql/money.hpp" declline="150" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1aab8bfd679e42b4d3393e3580188018aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref></type>
        <definition>Money operator*</definition>
        <argsstring>(Decimal, const Currency &amp;)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Money::operator*</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" kindref="member">Decimal</ref></type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="155" column="11" bodyfile="ql/money.hpp" bodystart="244" bodyend="246" declfile="ql/money.hpp" declline="155" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a2827c6a704bb2f426e5c49a826949304" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref></type>
        <definition>Money operator*</definition>
        <argsstring>(const Currency &amp;, Decimal)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Money::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a65c9fada9109c70ad823e8e5177c9568" kindref="member">Decimal</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="157" column="11" bodyfile="ql/money.hpp" bodystart="248" bodyend="250" declfile="ql/money.hpp" declline="157" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_money_1a867d4d15a525b67992fceb19eaf832b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const Money &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::Money::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_money" kindref="compound">Money</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/money.hpp" line="162" column="5" bodyfile="ql/money.cpp" bodystart="126" bodyend="128" declfile="ql/money.hpp" declline="162" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_option_1a03bf400e04666eadc73907b0c716739e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, Option::Type)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::Option::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>Option::Type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/option.hpp" line="54" column="5" bodyfile="ql/option.hpp" bodystart="100" bodyend="109" declfile="ql/option.hpp" declline="54" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_position_1aea636746ca886a585d34e10004cc9b43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, Position::Type)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::Position::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>Position::Type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/position.hpp" line="37" column="5" bodyfile="ql/position.cpp" bodystart="26" bodyend="35" declfile="ql/position.hpp" declline="37" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_calendar_1ae9d6f7766f633f5d75cc3acd7826bc9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Calendar &amp;, const Calendar &amp;)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::Calendar::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> iff the two calendars belong to the same derived class. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/calendar.hpp" line="197" column="10" bodyfile="ql/time/calendar.hpp" bodystart="274" bodyend="277" declfile="ql/time/calendar.hpp" declline="197" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_calendar_1af842d77a8aacbc167a64749dba1a3a87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Calendar &amp;, const Calendar &amp;)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::Calendar::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/calendar.hpp" line="200" column="10" bodyfile="ql/time/calendar.hpp" bodystart="279" bodyend="281" declfile="ql/time/calendar.hpp" declline="200" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_calendar_1aab055e8665c0e69976ecbe4aebd47a8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const Calendar &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::Calendar::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/calendar.hpp" line="203" column="5" bodyfile="ql/time/calendar.hpp" bodystart="283" bodyend="285" declfile="ql/time/calendar.hpp" declline="203" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_date_1a66b638bea097bef164edf8a312e7f7ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date_1a2fbbbf87429ca9d86bde4e068eb028d6" kindref="member">Date::serial_type</ref></type>
        <definition>Date::serial_type operator-</definition>
        <argsstring>(const Date &amp;, const Date &amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Date::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Difference in days between dates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="268" column="23" bodyfile="ql/time/date.hpp" bodystart="434" bodyend="436" declfile="ql/time/date.hpp" declline="268" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_date_1a29f7670d202257ce1117b1806711ba2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        <definition>Time daysBetween</definition>
        <argsstring>(const Date &amp;, const Date &amp;)</argsstring>
        <name>daysBetween</name>
        <qualifiedname>QuantLib::Date::daysBetween</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Difference in days (including fraction of days) between dates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="272" column="10" bodyfile="ql/time/date.hpp" bodystart="438" bodyend="440" declfile="ql/time/date.hpp" declline="272" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_date_1ad51822da99f2cc001b6326ac28bd49d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Date &amp;, const Date &amp;)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::Date::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="275" column="10" bodyfile="ql/time/date.hpp" bodystart="442" bodyend="444" declfile="ql/time/date.hpp" declline="275" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_date_1a5ac1b43688828377f31de974e061006f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Date &amp;, const Date &amp;)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::Date::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="277" column="10" bodyfile="ql/time/date.hpp" bodystart="446" bodyend="448" declfile="ql/time/date.hpp" declline="277" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_date_1acbc7a012dc46ebcd65dfd2887e3a3ad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const Date &amp;, const Date &amp;)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>QuantLib::Date::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="279" column="5" bodyfile="ql/time/date.hpp" bodystart="450" bodyend="452" declfile="ql/time/date.hpp" declline="279" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_date_1aec251fea3c00fa40e6e9e07a90620f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const Date &amp;, const Date &amp;)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>QuantLib::Date::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="281" column="5" bodyfile="ql/time/date.hpp" bodystart="454" bodyend="456" declfile="ql/time/date.hpp" declline="281" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_date_1a042bfc86a816127e316415634bb99107" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const Date &amp;, const Date &amp;)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>QuantLib::Date::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="283" column="10" bodyfile="ql/time/date.hpp" bodystart="458" bodyend="460" declfile="ql/time/date.hpp" declline="283" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_date_1a04118d56c46df4ac9054f0e34d2a6ce2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const Date &amp;, const Date &amp;)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>QuantLib::Date::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="285" column="10" bodyfile="ql/time/date.hpp" bodystart="462" bodyend="464" declfile="ql/time/date.hpp" declline="285" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_date_1ab332a16e149355c29db8fd10e0cb6103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t hash_value</definition>
        <argsstring>(const Date &amp;d)</argsstring>
        <name>hash_value</name>
        <qualifiedname>QuantLib::Date::hash_value</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute a hash value of <computeroutput>d</computeroutput>.</para>
<para>This method makes <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> hashable via <computeroutput>boost::hash</computeroutput>.</para>
<para>Example:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;unordered_set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::unordered_set&lt;Date&gt;<sp/>set;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref><sp/>d<sp/>=<sp/><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>(1,<sp/>Jan,<sp/>2020);<sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">set.insert(d);</highlight></codeline>
<codeline><highlight class="normal">assert(set.count(d));<sp/></highlight><highlight class="comment">//<sp/>&apos;d&apos;<sp/>was<sp/>added<sp/>to<sp/>&apos;set&apos;</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">d</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> to hash </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A hash value of <computeroutput>d</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="308" column="17" bodyfile="ql/time/date.cpp" bodystart="846" bodyend="855" declfile="ql/time/date.hpp" declline="308" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_date_1a65ff0f219c6817d3b8b6e57724dc680a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const Date &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::Date::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/date.hpp" line="311" column="5" bodyfile="ql/time/date.cpp" bodystart="859" bodyend="861" declfile="ql/time/date.hpp" declline="311" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_date_generation_1a37ee623eedc42fca85cd00bb7f9b78ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, DateGeneration::Rule)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::DateGeneration::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_date_generation_1a3fee9b3c834b0d3be240d05886ac2f6e" kindref="member">DateGeneration::Rule</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/dategenerationrule.hpp" line="73" column="5" bodyfile="ql/time/dategenerationrule.cpp" bodystart="27" bodyend="52" declfile="ql/time/dategenerationrule.hpp" declline="73" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_day_counter_1acbca520b46832e1a53e72053c233692c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const DayCounter &amp;, const DayCounter &amp;)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::DayCounter::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <computeroutput>true</computeroutput> iff the two day counters belong to the same derived class. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/daycounter.hpp" line="99" column="10" bodyfile="ql/time/daycounter.hpp" bodystart="135" bodyend="138" declfile="ql/time/daycounter.hpp" declline="99" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_day_counter_1a0f7511e2a309e1588a2f300def9b495c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const DayCounter &amp;, const DayCounter &amp;)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::DayCounter::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/daycounter.hpp" line="103" column="10" bodyfile="ql/time/daycounter.hpp" bodystart="140" bodyend="142" declfile="ql/time/daycounter.hpp" declline="103" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_day_counter_1a68dd78dd1968d9b0c1d0702a6f3be500" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const DayCounter &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::DayCounter::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/daycounter.hpp" line="107" column="5" bodyfile="ql/time/daycounter.hpp" bodystart="144" bodyend="146" declfile="ql/time/daycounter.hpp" declline="107" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_period_1a06a4ee62bb93be97b4753ab5fa263f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real years</definition>
        <argsstring>(const Period &amp;)</argsstring>
        <name>years</name>
        <qualifiedname>QuantLib::Period::years</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="65" column="10" bodyfile="ql/time/period.cpp" bodystart="279" bodyend="294" declfile="ql/time/period.hpp" declline="65" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_period_1a92a562ccbc1e5c902fd4bd4576bb12aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real months</definition>
        <argsstring>(const Period &amp;)</argsstring>
        <name>months</name>
        <qualifiedname>QuantLib::Period::months</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="67" column="10" bodyfile="ql/time/period.cpp" bodystart="296" bodyend="311" declfile="ql/time/period.hpp" declline="67" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_period_1a81fdea029a8d7c598c96d298889d4b5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real weeks</definition>
        <argsstring>(const Period &amp;)</argsstring>
        <name>weeks</name>
        <qualifiedname>QuantLib::Period::weeks</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="69" column="10" bodyfile="ql/time/period.cpp" bodystart="313" bodyend="328" declfile="ql/time/period.hpp" declline="69" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_period_1a4fe4dabf0407c1c808b1ca5a6f2b8c79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real days</definition>
        <argsstring>(const Period &amp;)</argsstring>
        <name>days</name>
        <qualifiedname>QuantLib::Period::days</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="71" column="10" bodyfile="ql/time/period.cpp" bodystart="330" bodyend="345" declfile="ql/time/period.hpp" declline="71" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_period_1a34e24f3304fe9ac4e4228ec0aa5865e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref></type>
        <definition>Period operator*</definition>
        <argsstring>(T n, TimeUnit units)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Period::operator*</qualifiedname>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a6cdac5e2dae1e972076cc8e3302e4ad3" kindref="member">TimeUnit</ref></type>
          <declname>units</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="74" column="24" bodyfile="ql/time/period.hpp" bodystart="147" bodyend="149" declfile="ql/time/period.hpp" declline="74" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_period_1ae9caddf04a150ae3bab5c97d5a4d48ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref></type>
        <definition>Period operator*</definition>
        <argsstring>(TimeUnit units, T n)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Period::operator*</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a6cdac5e2dae1e972076cc8e3302e4ad3" kindref="member">TimeUnit</ref></type>
          <declname>units</declname>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="76" column="24" bodyfile="ql/time/period.hpp" bodystart="152" bodyend="154" declfile="ql/time/period.hpp" declline="76" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_period_1a5fd528466f1b41de52d892efff387880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref></type>
        <definition>Period operator-</definition>
        <argsstring>(const Period &amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Period::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="79" column="12" bodyfile="ql/time/period.hpp" bodystart="156" bodyend="156" declfile="ql/time/period.hpp" declline="79" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_period_1a180303cf15f77ffa79f9b538d9d53585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref></type>
        <definition>Period operator*</definition>
        <argsstring>(Integer n, const Period &amp;)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Period::operator*</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="82" column="12" bodyfile="ql/time/period.hpp" bodystart="158" bodyend="158" declfile="ql/time/period.hpp" declline="82" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_period_1adea95d933011d667b70490b0ecbf4642" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref></type>
        <definition>Period operator*</definition>
        <argsstring>(const Period &amp;, Integer n)</argsstring>
        <name>operator*</name>
        <qualifiedname>QuantLib::Period::operator*</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="84" column="12" bodyfile="ql/time/period.hpp" bodystart="160" bodyend="160" declfile="ql/time/period.hpp" declline="84" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_period_1a0d21ac755a75c581ad757b81ed775841" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref></type>
        <definition>Period operator/</definition>
        <argsstring>(const Period &amp;, Integer n)</argsstring>
        <name>operator/</name>
        <qualifiedname>QuantLib::Period::operator/</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="87" column="12" bodyfile="ql/time/period.cpp" bodystart="390" bodyend="394" declfile="ql/time/period.hpp" declline="87" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_period_1a90976f7bfed01855ca09c29295fe6f75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref></type>
        <definition>Period operator+</definition>
        <argsstring>(const Period &amp;, const Period &amp;)</argsstring>
        <name>operator+</name>
        <qualifiedname>QuantLib::Period::operator+</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="90" column="12" bodyfile="ql/time/period.cpp" bodystart="380" bodyend="384" declfile="ql/time/period.hpp" declline="90" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_period_1ad2cf128e5a3ad32209f6ba15af554d07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref></type>
        <definition>Period operator-</definition>
        <argsstring>(const Period &amp;, const Period &amp;)</argsstring>
        <name>operator-</name>
        <qualifiedname>QuantLib::Period::operator-</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="92" column="12" bodyfile="ql/time/period.cpp" bodystart="386" bodyend="388" declfile="ql/time/period.hpp" declline="92" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_period_1a6047127848f77402654c5f6969543d39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const Period &amp;, const Period &amp;)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>QuantLib::Period::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="95" column="5" bodyfile="ql/time/period.cpp" bodystart="347" bodyend="377" declfile="ql/time/period.hpp" declline="95" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_period_1a8db8f3ab9172629c5b4c4bf9fead21e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Period &amp;, const Period &amp;)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::Period::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="97" column="10" bodyfile="ql/time/period.hpp" bodystart="162" bodyend="164" declfile="ql/time/period.hpp" declline="97" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_period_1a4e4d73db93d1b0421b234e4986f02f65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Period &amp;, const Period &amp;)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::Period::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="99" column="10" bodyfile="ql/time/period.hpp" bodystart="166" bodyend="168" declfile="ql/time/period.hpp" declline="99" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_period_1a7031b0e272677d2c3058d6c6961dd718" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const Period &amp;, const Period &amp;)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>QuantLib::Period::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="101" column="10" bodyfile="ql/time/period.hpp" bodystart="170" bodyend="172" declfile="ql/time/period.hpp" declline="101" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_period_1a433aff0d16401de60895f1866e128c0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const Period &amp;, const Period &amp;)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>QuantLib::Period::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="103" column="5" bodyfile="ql/time/period.hpp" bodystart="174" bodyend="176" declfile="ql/time/period.hpp" declline="103" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_period_1add05770a8cd5ae8c9e8fb16bc5e32dbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const Period &amp;, const Period &amp;)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>QuantLib::Period::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="105" column="10" bodyfile="ql/time/period.hpp" bodystart="178" bodyend="180" declfile="ql/time/period.hpp" declline="105" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_period_1a687e398ee8fc4236d4a6d5b402ca09a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const Period &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::Period::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/period.hpp" line="108" column="5" bodyfile="ql/time/period.cpp" bodystart="398" bodyend="400" declfile="ql/time/period.hpp" declline="108" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_clone_1a9bf8c0c35554e9c1d00831c0da3e0aa6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(Clone&lt; T &gt; &amp;, Clone&lt; T &gt; &amp;) noexcept</argsstring>
        <name>swap</name>
        <qualifiedname>QuantLib::Clone::swap</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_clone" kindref="compound">Clone</ref>&lt; T &gt; &amp;</type>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_clone" kindref="compound">Clone</ref>&lt; T &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/clone.hpp" line="61" column="10" bodyfile="ql/utilities/clone.hpp" bodystart="123" bodyend="125" declfile="ql/utilities/clone.hpp" declline="61" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1step__iterator_1a8827eca53826b1ca424151b01e8bfb37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_quant_lib_1_1step__iterator" kindref="compound">step_iterator</ref>&lt; Iterator &gt;</type>
        <definition>step_iterator&lt; Iterator &gt; make_step_iterator</definition>
        <argsstring>(Iterator it, Size step)</argsstring>
        <name>make_step_iterator</name>
        <qualifiedname>QuantLib::step_iterator::make_step_iterator</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>it</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>step</declname>
        </param>
        <briefdescription>
<para>helper function to create step iterators </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/utilities/steppingiterator.hpp" line="175" column="19" bodyfile="ql/utilities/steppingiterator.hpp" bodystart="175" bodyend="177"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>abstract base class implementation specifies how to decide volatility structure for additional synthetic rates which are interleaved</para>
<para>implementation specifies how to decide volatility structure for additional synthetic rates which are interleaved</para>
<para>here we work with abcd curves and interpolate the a, b, c and d</para>
<para>Classes for computing derivative of the map taking rates one step to the next with respect to a change in the pseudo-root. We do it both numerically and analytically to provide an easy test of the analytic method. This is useful for pathwise vegas.</para>
<para>Evolution is log Euler.</para>
<para>One is tested against the other in MarketModelTest::testPathwiseVegas</para>
<para>In order to compute market vegas, we need a class that gives the derivative of a swaption implied vol against changes in pseudo-root elements. This is that class.</para>
<para>This is tested in the pathwise vegas routine in MarketModels.cpp</para>
<para>When bumping vols, bumping every pseudo-root element individually seems excessive so we need to couple some together. </para>
    </detaileddescription>
    <location file="ql/any.hpp" line="35" column="1"/>
  </compounddef>
</doxygen>
