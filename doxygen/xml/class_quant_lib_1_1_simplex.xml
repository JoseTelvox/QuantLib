<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_simplex" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::Simplex</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_optimization_method" prot="public" virt="non-virtual">QuantLib::OptimizationMethod</basecompoundref>
    <includes refid="simplex_8hpp" local="no">simplex.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_simplex_1a87b74730bc8ee97296e688b39c76feee" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Simplex::lambda_</definition>
        <argsstring></argsstring>
        <name>lambda_</name>
        <qualifiedname>QuantLib::Simplex::lambda_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/simplex.hpp" line="69" column="14" bodyfile="ql/math/optimization/simplex.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_simplex_1a4aa017fecf34628b60d297b92e3f6543" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &gt;</type>
        <definition>std::vector&lt;Array&gt; QuantLib::Simplex::vertices_</definition>
        <argsstring></argsstring>
        <name>vertices_</name>
        <qualifiedname>QuantLib::Simplex::vertices_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/simplex.hpp" line="70" column="29" bodyfile="ql/math/optimization/simplex.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_simplex_1abcec44ccae1a946f1c83cc77cc733342" prot="private" static="no" mutable="yes">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Simplex::values_</definition>
        <argsstring></argsstring>
        <name>values_</name>
        <qualifiedname>QuantLib::Simplex::values_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/simplex.hpp" line="71" column="23" bodyfile="ql/math/optimization/simplex.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_simplex_1a6fb7bbe7315ec14c0bbf0edbeddf7c81" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::Simplex::sum_</definition>
        <argsstring></argsstring>
        <name>sum_</name>
        <qualifiedname>QuantLib::Simplex::sum_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/simplex.hpp" line="71" column="31" bodyfile="ql/math/optimization/simplex.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_simplex_1a236644cc4d2079567d93de89f861a22f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Simplex::Simplex</definition>
        <argsstring>(Real lambda)</argsstring>
        <name>Simplex</name>
        <qualifiedname>QuantLib::Simplex::Simplex</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor taking as input the characteristic length </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/simplex.hpp" line="61" column="9" bodyfile="ql/math/optimization/simplex.hpp" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_simplex_1a781b28f0e84652c4c08042eec85996dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>EndCriteria::Type</type>
        <definition>EndCriteria::Type QuantLib::Simplex::minimize</definition>
        <argsstring>(Problem &amp;P, const EndCriteria &amp;endCriteria) override</argsstring>
        <name>minimize</name>
        <qualifiedname>QuantLib::Simplex::minimize</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_optimization_method_1a28097ae73d0d2a310938f51b72a48348">minimize</reimplements>
        <param>
          <type><ref refid="class_quant_lib_1_1_problem" kindref="compound">Problem</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref> &amp;</type>
          <declname>endCriteria</declname>
        </param>
        <briefdescription>
<para>minimize the optimization problem P </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/simplex.hpp" line="62" column="27" bodyfile="ql/math/optimization/simplex.cpp" bodystart="81" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_simplex_1abbe03da3e5c1557ceee485e1d1b1e7e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Simplex::lambda</definition>
        <argsstring>() const</argsstring>
        <name>lambda</name>
        <qualifiedname>QuantLib::Simplex::lambda</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/simplex.hpp" line="63" column="14" bodyfile="ql/math/optimization/simplex.hpp" bodystart="63" bodyend="63"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_simplex_1aa3e559c194d7460a9869a9ebf9336abf" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Simplex::extrapolate</definition>
        <argsstring>(Problem &amp;P, Size iHighest, Real &amp;factor) const</argsstring>
        <name>extrapolate</name>
        <qualifiedname>QuantLib::Simplex::extrapolate</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_problem" kindref="compound">Problem</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iHighest</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/simplex.hpp" line="66" column="14" bodyfile="ql/math/optimization/simplex.cpp" bodystart="54" bodyend="78"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Multi-dimensional simplex class. </para>
    </briefdescription>
    <detaileddescription>
<para>This method is rather raw and requires quite a lot of computing resources, but it has the advantage that it does not need any evaluation of the cost function&apos;s gradient, and that it is quite easily implemented. First, we choose N+1 starting points, given here by a starting point  <formula id="321">$\mathbf{P}_{0} $</formula> and N points such that   <formula id="322">\[    \mathbf{P}_{\mathbf{i}}=\mathbf{P}_{0}+\lambda \mathbf{e}_{\mathbf{i}},
\]</formula> where <formula id="323">$ \lambda $</formula> is the problem&apos;s characteristic length scale). These points will form a geometrical form called simplex. The principle of the downhill simplex method is, at each iteration, to move the worst point (highest cost function value) through the opposite face to a better point. When the simplex seems to be constrained in a valley, it will be contracted downhill, keeping the best point unchanged. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QuantLib::OptimizationMethod</label>
        <link refid="class_quant_lib_1_1_optimization_method"/>
      </node>
      <node id="1">
        <label>QuantLib::Simplex</label>
        <link refid="class_quant_lib_1_1_simplex"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>QuantLib::OptimizationMethod</label>
        <link refid="class_quant_lib_1_1_optimization_method"/>
      </node>
      <node id="1">
        <label>QuantLib::Simplex</label>
        <link refid="class_quant_lib_1_1_simplex"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/math/optimization/simplex.hpp" line="58" column="5" bodyfile="ql/math/optimization/simplex.hpp" bodystart="58" bodyend="72"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_simplex_1aa3e559c194d7460a9869a9ebf9336abf" prot="private" virt="non-virtual"><scope>QuantLib::Simplex</scope><name>extrapolate</name></member>
      <member refid="class_quant_lib_1_1_simplex_1abbe03da3e5c1557ceee485e1d1b1e7e0" prot="public" virt="non-virtual"><scope>QuantLib::Simplex</scope><name>lambda</name></member>
      <member refid="class_quant_lib_1_1_simplex_1a87b74730bc8ee97296e688b39c76feee" prot="private" virt="non-virtual"><scope>QuantLib::Simplex</scope><name>lambda_</name></member>
      <member refid="class_quant_lib_1_1_simplex_1a781b28f0e84652c4c08042eec85996dc" prot="public" virt="virtual"><scope>QuantLib::Simplex</scope><name>minimize</name></member>
      <member refid="class_quant_lib_1_1_simplex_1a236644cc4d2079567d93de89f861a22f" prot="public" virt="non-virtual"><scope>QuantLib::Simplex</scope><name>Simplex</name></member>
      <member refid="class_quant_lib_1_1_simplex_1a6fb7bbe7315ec14c0bbf0edbeddf7c81" prot="private" virt="non-virtual"><scope>QuantLib::Simplex</scope><name>sum_</name></member>
      <member refid="class_quant_lib_1_1_simplex_1abcec44ccae1a946f1c83cc77cc733342" prot="private" virt="non-virtual"><scope>QuantLib::Simplex</scope><name>values_</name></member>
      <member refid="class_quant_lib_1_1_simplex_1a4aa017fecf34628b60d297b92e3f6543" prot="private" virt="non-virtual"><scope>QuantLib::Simplex</scope><name>vertices_</name></member>
      <member refid="class_quant_lib_1_1_optimization_method_1a2e9a51f0954eaf649d075d565d43938c" prot="public" virt="virtual"><scope>QuantLib::Simplex</scope><name>~OptimizationMethod</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
