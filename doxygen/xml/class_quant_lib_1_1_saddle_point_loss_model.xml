<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_saddle_point_loss_model" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::SaddlePointLossModel</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_default_loss_model" prot="public" virt="non-virtual">QuantLib::DefaultLossModel</basecompoundref>
    <includes refid="saddlepointlossmodel_8hpp" local="no">saddlepointlossmodel.hpp</includes>
    <innerclass refid="class_quant_lib_1_1_saddle_point_loss_model_1_1_saddle_objective_function" prot="protected">QuantLib::SaddlePointLossModel::SaddleObjectiveFunction</innerclass>
    <innerclass refid="class_quant_lib_1_1_saddle_point_loss_model_1_1_saddle_perc_obj_function" prot="protected">QuantLib::SaddlePointLossModel::SaddlePercObjFunction</innerclass>
    <templateparamlist>
      <param>
        <type>class CP</type>
      </param>
    </templateparamlist>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_saddle_point_loss_model_1a5bc0dcc0cf45c2ab8b0844adba276e2a" prot="protected" static="no" mutable="no">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_constant_loss_latentmodel" kindref="compound">ConstantLossLatentmodel</ref>&lt; CP &gt; &gt;</type>
        <definition>const ext::shared_ptr&lt;ConstantLossLatentmodel&lt;CP&gt; &gt; QuantLib::SaddlePointLossModel&lt; CP &gt;::copula_</definition>
        <argsstring></argsstring>
        <name>copula_</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::copula_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="348" column="31" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="348" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_saddle_point_loss_model_1aba0019b37774dcea90e5772b3ccc5f87" prot="protected" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::SaddlePointLossModel&lt; CP &gt;::remainingSize_</definition>
        <argsstring></argsstring>
        <name>remainingSize_</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::remainingSize_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="350" column="22" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_saddle_point_loss_model_1a7760660eb1ae6ca0e083dbcabc22898e" prot="protected" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::SaddlePointLossModel&lt; CP &gt;::remainingNotionals_</definition>
        <argsstring></argsstring>
        <name>remainingNotionals_</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::remainingNotionals_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="351" column="29" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="351" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_saddle_point_loss_model_1a36d44151fdabca1b423d4d282b3972ef" prot="protected" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SaddlePointLossModel&lt; CP &gt;::remainingNotional_</definition>
        <argsstring></argsstring>
        <name>remainingNotional_</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::remainingNotional_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="352" column="22" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="352" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_saddle_point_loss_model_1a82e705b183f8f6ba5cf45d3f2eb68209" prot="protected" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SaddlePointLossModel&lt; CP &gt;::attachRatio_</definition>
        <argsstring></argsstring>
        <name>attachRatio_</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::attachRatio_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="354" column="22" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_saddle_point_loss_model_1acb8b53a69081f355284715a14981a022" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SaddlePointLossModel&lt; CP &gt;::detachRatio_</definition>
        <argsstring></argsstring>
        <name>detachRatio_</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::detachRatio_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="354" column="35" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="354" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1a424bb56ce73783b32e55f2fbdd4f7eae" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::SaddlePointLossModel&lt; CP &gt;::SaddlePointLossModel</definition>
        <argsstring>(const ext::shared_ptr&lt; ConstantLossLatentmodel&lt; CP &gt; &gt; &amp;m)</argsstring>
        <name>SaddlePointLossModel</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::SaddlePointLossModel</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_constant_loss_latentmodel" kindref="compound">ConstantLossLatentmodel</ref>&lt; CP &gt; &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="102" column="18" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1a64178e1c5af0a8887ed3cd6d4948caa3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SaddlePointLossModel&lt; CP &gt;::percentile</definition>
        <argsstring>(const Date &amp;d, Probability percentile) const override</argsstring>
        <name>percentile</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::percentile</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1ac7142d4e72958aef5a602167a138973e">percentile</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
          <declname>percentile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the loss amount at the requested date for which the probability of lossing that amount or less is equal to the value passed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="246" column="12" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="847" bodyend="874"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1ae04bf88e8206b128596094b62aa134b8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::SaddlePointLossModel&lt; CP &gt;::probOverLoss</definition>
        <argsstring>(const Date &amp;d, Real trancheLossFract) const override</argsstring>
        <name>probOverLoss</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::probOverLoss</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1a922ca5f0ea73b3a33420fbcfb2556e93">probOverLoss</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>lossFraction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> of the tranche losing the same or more than the fractional amount given.</para>
<para>The passed lossFraction is a fraction of losses over the tranche notional (not the portfolio). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="264" column="19" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="467" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1a2971a952590ebd6e333834ded04117e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::map&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>, <ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> &gt;</type>
        <definition>std::map&lt; Real, Probability &gt; QuantLib::SaddlePointLossModel&lt; CP &gt;::lossDistribution</definition>
        <argsstring>(const Date &amp;d) const override</argsstring>
        <name>lossDistribution</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::lossDistribution</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1aeff66ecf317c1dc23713424daf563f88">lossDistribution</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Full loss distribution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="266" column="16" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="896" bodyend="905"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1a198111f99d986233bb26e774ae3a51e1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::SaddlePointLossModel&lt; CP &gt;::probOverPortfLoss</definition>
        <argsstring>(const Date &amp;d, Real loss) const</argsstring>
        <name>probOverPortfLoss</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::probOverPortfLoss</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>loss</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="285" column="21" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="488" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1acbace87d9ac82ce8f9a9ed382640cebc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SaddlePointLossModel&lt; CP &gt;::expectedTrancheLoss</definition>
        <argsstring>(const Date &amp;d) const override</argsstring>
        <name>expectedTrancheLoss</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::expectedTrancheLoss</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1a258763493804fe4c84b533716df00991">expectedTrancheLoss</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="286" column="14" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="504" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1a3105f96058b4ccf4b387666512a2b30e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::SaddlePointLossModel&lt; CP &gt;::probDensity</definition>
        <argsstring>(const Date &amp;d, Real loss) const</argsstring>
        <name>probDensity</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::probDensity</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>loss</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="298" column="21" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="520" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1a043e0d936e5422163114204e5d3d15b4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::SaddlePointLossModel&lt; CP &gt;::splitVaRLevel</definition>
        <argsstring>(const Date &amp;date, Real loss) const override</argsstring>
        <name>splitVaRLevel</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::splitVaRLevel</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1ab70b30442fcdda802730fd711c5348da">splitVaRLevel</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>loss</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sensitivities of the individual names to a given portfolio loss value due to defaults. It returns ratios to the total structure notional, which aggregated add up to the requested loss value. Notice then that it refers to the total portfolio, not the tranched basket. <xrefsect id="todo_1_todo000022"><xreftitle>Todo</xreftitle><xrefdescription><para>Fix this. </para>
</xrefdescription></xrefsect><simplesect kind="par"><title></title><para>see equation 8 in <bold>VAR: who contributes and how much?</bold> by R.Martin, K.Thompson, and C. Browne in Risk Magazine, August 2001</para>
</simplesect>
The passed loss is the loss amount level at which we want to request the sensitivity. Equivalent to a percentile. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="327" column="19" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="536" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1ad951608b35188cfb419e1296fd4fa8b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SaddlePointLossModel&lt; CP &gt;::expectedShortfall</definition>
        <argsstring>(const Date &amp;d, Probability percentile) const override</argsstring>
        <name>expectedShortfall</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::expectedShortfall</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1a60bd1a166744f4de455cae1c1c83f6a1">expectedShortfall</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
          <declname>percentile</declname>
        </param>
        <briefdescription>
<para>Expected shortfall given a default loss percentile. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="328" column="12" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="1329" bodyend="1359"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1afff6d649f2216a712c173215d4ee0b30" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SaddlePointLossModel&lt; CP &gt;::CumulantGeneratingCond</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;invUncondProbs, Real lossFraction, const std::vector&lt; Real &gt; &amp;mktFactor) const</argsstring>
        <name>CumulantGeneratingCond</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::CumulantGeneratingCond</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>invUncondProbs</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>lossFraction</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the cumulant generating function (zero-th order expansion term) conditional to the mkt factor: <formula id="100">$ K = \sum_j ln(1-p_j + p_j e^{N_j \times lgd_j \times s}) $</formula> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="112" column="14" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="566" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1a765cd2b6c952b76f3dc1dd0f27a1e17d" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SaddlePointLossModel&lt; CP &gt;::CumGen1stDerivativeCond</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;invUncondProbs, Real saddle, const std::vector&lt; Real &gt; &amp;mktFactor) const</argsstring>
        <name>CumGen1stDerivativeCond</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::CumGen1stDerivativeCond</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>invUncondProbs</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>saddle</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the first derivative of the cumulant generating function (first order expansion term) conditional to the mkt factor:   <formula id="101">$ K1 = \sum_j \frac{p_j \times N_j \times LGD_j \times 
        e^{N_j \times LGD_j \times s}} \
                     {1-p_j + p_j e^{N_j \times LGD_j \times s}} $</formula> One of its properties is that its value at zero is the portfolio expected loss (in fractional units). Its value at infinity is the max attainable portfolio loss. To be understood conditional to the market factor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="126" column="14" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="587" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1ae8003c44022e683b23c39c84f298e486" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SaddlePointLossModel&lt; CP &gt;::CumGen2ndDerivativeCond</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;invUncondProbs, Real saddle, const std::vector&lt; Real &gt; &amp;mktFactor) const</argsstring>
        <name>CumGen2ndDerivativeCond</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::CumGen2ndDerivativeCond</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>invUncondProbs</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>saddle</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the second derivative of the cumulant generating function (first order expansion term) conditional to the mkt factor:      <formula id="102">$ K2 = \sum_j \frac{p_j \times (N_j \times LGD_j)^2 \times 
        e^{N_j \times LGD_j \times s}}
                     {1-p_j + p_j e^{N_j \times LGD_j \times s}}
              - (\frac{p_j \times N_j \times LGD_j \times e^{N_j \times 
              LGD_j \times s}}
                     {1-p_j + p_j e^{N_j \times LGD_j \times s}})^2 $</formula> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="139" column="14" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="610" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1a9a2304b48d810e7a8f55023a63fdcbf6" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SaddlePointLossModel&lt; CP &gt;::CumGen3rdDerivativeCond</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;invUncondProbs, Real saddle, const std::vector&lt; Real &gt; &amp;mktFactor) const</argsstring>
        <name>CumGen3rdDerivativeCond</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::CumGen3rdDerivativeCond</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>invUncondProbs</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>saddle</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="143" column="14" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="635" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1a8d5b114facaa532fae072a4e4fa5d77f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SaddlePointLossModel&lt; CP &gt;::CumGen4thDerivativeCond</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;invUncondProbs, Real saddle, const std::vector&lt; Real &gt; &amp;mktFactor) const</argsstring>
        <name>CumGen4thDerivativeCond</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::CumGen4thDerivativeCond</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>invUncondProbs</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>saddle</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="147" column="14" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="666" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1ad2660951a9a0f3acd06caa56a28e00f6" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::tuple&lt; Real, Real, Real, Real &gt; QuantLib::SaddlePointLossModel&lt; CP &gt;::CumGen0234DerivCond</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;invUncondProbs, Real saddle, const std::vector&lt; Real &gt; &amp;mktFactor) const</argsstring>
        <name>CumGen0234DerivCond</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::CumGen0234DerivCond</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>invUncondProbs</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>saddle</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the cumulant and second to fourth derivatives together. Included for optimization, most methods work on expansion of these terms. Alternatively use a local private buffer member? </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="155" column="20" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="699" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1a87bd3571c888ba98f1f9f5427905848f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::tuple&lt; Real, Real &gt; QuantLib::SaddlePointLossModel&lt; CP &gt;::CumGen02DerivCond</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;invUncondProbs, Real saddle, const std::vector&lt; Real &gt; &amp;mktFactor) const</argsstring>
        <name>CumGen02DerivCond</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::CumGen02DerivCond</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>invUncondProbs</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>saddle</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="159" column="20" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="741" bodyend="771"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1a1901caadda588f2d4bbc5edeeed0f24c" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SaddlePointLossModel&lt; CP &gt;::CumulantGenerating</definition>
        <argsstring>(const Date &amp;date, Real s) const</argsstring>
        <name>CumulantGenerating</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::CumulantGenerating</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the cumulant generating function (zero-th order expansion term) weighting the conditional value by the prob density of the market factor, called by integrations </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="170" column="14" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="387" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1a2a8a8f08b7f319ddb7ab07b76a7e2289" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SaddlePointLossModel&lt; CP &gt;::CumGen1stDerivative</definition>
        <argsstring>(const Date &amp;date, Real s) const</argsstring>
        <name>CumGen1stDerivative</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::CumGen1stDerivative</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="171" column="14" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="403" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1ac5586337968fb80e67d65e9a16b8fcb1" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SaddlePointLossModel&lt; CP &gt;::CumGen2ndDerivative</definition>
        <argsstring>(const Date &amp;date, Real s) const</argsstring>
        <name>CumGen2ndDerivative</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::CumGen2ndDerivative</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="172" column="14" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="419" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1aecc7d5a16422cc5c9b14b78ba5ddab25" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SaddlePointLossModel&lt; CP &gt;::CumGen3rdDerivative</definition>
        <argsstring>(const Date &amp;date, Real s) const</argsstring>
        <name>CumGen3rdDerivative</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::CumGen3rdDerivative</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="173" column="14" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="435" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1a9e5ec40ef72a87d627499c7369cb1683" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SaddlePointLossModel&lt; CP &gt;::CumGen4thDerivative</definition>
        <argsstring>(const Date &amp;date, Real s) const</argsstring>
        <name>CumGen4thDerivative</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::CumGen4thDerivative</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="174" column="14" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="451" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1a65cf83c7daa2c2b91bab3a4e99293259" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SaddlePointLossModel&lt; CP &gt;::findSaddle</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;invUncondProbs, Real lossLevel, const std::vector&lt; Real &gt; &amp;mktFactor, Real accuracy=1.0e-3, Natural maxEvaluations=50) const</argsstring>
        <name>findSaddle</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::findSaddle</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>invUncondProbs</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>lossLevel</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactor</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.0e-3</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref></type>
          <declname>maxEvaluations</declname>
          <defval>50</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the mkt-fct-conditional saddle point for the loss level given and the probability passed. The date is implicitly given through the probability. Performance requires to pass the probabilities for that date. Otherwise once we integrate this over the market factor we would be computing the same probabilities over and over. While this works fine here some models of the recovery rate might require the date.</para>
<para>The passed lossLevel is in total portfolio loss fractional units.</para>
<para><xrefsect id="todo_1_todo000021"><xreftitle>Todo</xreftitle><xrefdescription><para>Improve convergence speed (which is bad at the moment).See discussion in several places; references above and The Oxford Handbook of CD, sect 2.9 </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="218" column="14" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="776" bodyend="840"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1a22c5406183e410f27a3e3335681bc85b" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::SaddlePointLossModel&lt; CP &gt;::probOverLossCond</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;invUncondProbs, Real trancheLossFract, const std::vector&lt; Real &gt; &amp;mktFactor) const</argsstring>
        <name>probOverLossCond</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::probOverLossCond</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>invUncondProbs</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>trancheLossFract</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Conditional (on the mkt factor) prob of a loss fraction of the the tranched portfolio.</para>
<para>The trancheLossFract parameter is the fraction over the tranche notional and must be in [0,1]. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="255" column="21" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="877" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1a5dcc56090bcf451cd7a8b42b497d3e7f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::SaddlePointLossModel&lt; CP &gt;::probOverLossPortfCond1stOrder</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;invUncondProbs, Real loss, const std::vector&lt; Real &gt; &amp;mktFactor) const</argsstring>
        <name>probOverLossPortfCond1stOrder</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::probOverLossPortfCond1stOrder</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>invUncondProbs</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>loss</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="259" column="21" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="1013" bodyend="1072"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1a46120bee2967860cd6d8ce0b3b83099c" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::SaddlePointLossModel&lt; CP &gt;::probOverLossPortfCond</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;invUncondProbs, Real loss, const std::vector&lt; Real &gt; &amp;mktFactor) const</argsstring>
        <name>probOverLossPortfCond</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::probOverLossPortfCond</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>invUncondProbs</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>loss</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> of having losses in the portfolio due to default events equal or larger than a given absolute loss value on a given date conditional to the latent model factor. The integral expression on the expansion is the first order integration as presented in several references, see for instance; equation 8 in R.Martin, K.Thompson, and C. Browne &apos;s &apos;Taking to the Saddle&apos;, Risk Magazine, June 2001, page 91</para>
<para>The passed loss is in absolute value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="280" column="21" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="919" bodyend="1009"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1a5873026803299621a1ff0ba881f260c7" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::SaddlePointLossModel&lt; CP &gt;::probDensityCond</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;invUncondProbs, Real loss, const std::vector&lt; Real &gt; &amp;mktFactor) const</argsstring>
        <name>probDensityCond</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::probDensityCond</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>invUncondProbs</declname>
          <defname>invUncondPs</defname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>loss</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> density of having losses in the total portfolio (untranched) due to default events equal to a given value on a given date conditional to the latent model factor. Based on the integrals of the expected shortfall.</para>
<para>NOTICE THIS IS ON THE TOTAL PORTFOLIO -<mdash/> UNTRANCHED <ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> density of having losses in the portfolio due to default events equal to a given value on a given date conditional to the w latent model factor. Based on the integrals of the expected shortfall. See......refernce. </para>
        </detaileddescription>
        <inbodydescription>
<para>access them directly rather than through this copy</para>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="295" column="21" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="1082" bodyend="1113"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1a5e4f8f053406d19f6fc569f8f6d47fd7" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::SaddlePointLossModel&lt; CP &gt;::splitLossCond</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;invUncondProbs, Real loss, std::vector&lt; Real &gt; mktFactor) const</argsstring>
        <name>splitLossCond</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::splitLossCond</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>invUncondProbs</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>loss</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
          <declname>mktFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="300" column="21" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="1127" bodyend="1153"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1ae57829929758f2af1f4770e34d1a557d" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SaddlePointLossModel&lt; CP &gt;::expectedShortfallFullPortfolioCond</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;invUncondProbs, Real lossPerc, const std::vector&lt; Real &gt; &amp;mktFactor) const</argsstring>
        <name>expectedShortfallFullPortfolioCond</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::expectedShortfallFullPortfolioCond</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>invUncondProbs</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>lossPerc</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>use stl algorthms</para>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="303" column="14" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="1266" bodyend="1326"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1aeb9211704cec6efec4716ce6971cbdc6" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SaddlePointLossModel&lt; CP &gt;::expectedShortfallTrancheCond</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;invUncondProbs, Real lossPerc, Probability percentile, const std::vector&lt; Real &gt; &amp;mktFactor) const</argsstring>
        <name>expectedShortfallTrancheCond</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::expectedShortfallTrancheCond</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>invUncondProbs</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>lossPerc</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
          <declname>percentile</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="306" column="14" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="1230" bodyend="1263"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1affc599551e562cda95e978dc9d828397" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::SaddlePointLossModel&lt; CP &gt;::expectedShortfallSplitCond</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;invUncondProbs, Real lossPerc, const std::vector&lt; Real &gt; &amp;mktFactor) const</argsstring>
        <name>expectedShortfallSplitCond</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::expectedShortfallSplitCond</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>invUncondProbs</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>lossPerc</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="310" column="21" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="1195" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1aa0d607e75340d7ca18d97edcdb8a5e14" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SaddlePointLossModel&lt; CP &gt;::conditionalExpectedLoss</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;invUncondProbs, const std::vector&lt; Real &gt; &amp;mktFactor) const</argsstring>
        <name>conditionalExpectedLoss</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::conditionalExpectedLoss</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>invUncondProbs</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>USE STL.....----------------<mdash/></para>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="331" column="14" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="1156" bodyend="1171"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1afa698dabdfe399fffffbc9603b7bafa7" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SaddlePointLossModel&lt; CP &gt;::conditionalExpectedTrancheLoss</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;invUncondProbs, const std::vector&lt; Real &gt; &amp;mktFactor) const</argsstring>
        <name>conditionalExpectedTrancheLoss</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::conditionalExpectedTrancheLoss</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>invUncondProbs</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>USE STL.....----------------<mdash/></para>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="334" column="14" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="1174" bodyend="1192"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_saddle_point_loss_model_1af0096807a2c39b6f1dfff8b22d052ab1" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::SaddlePointLossModel&lt; CP &gt;::resetModel</definition>
        <argsstring>() override</argsstring>
        <name>resetModel</name>
        <qualifiedname>QuantLib::SaddlePointLossModel::resetModel</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1ac32cbab626c8ba8ebb0dcace3eed4a38">resetModel</reimplements>
        <briefdescription>
<para>Concrete models do now any updates/inits they need on basket reset. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="338" column="14" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="338" bodyend="346"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Saddle point portfolio credit default loss model. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="par"><title></title><para><ref refid="struct_quant_lib_1_1_default" kindref="compound">Default</ref> <ref refid="class_quant_lib_1_1_loss" kindref="compound">Loss</ref> model implementing the Saddle point expansion integrations on several default risk metrics. Codepence is dealt through a latent model making the integrals conditional to the latent model factor. Latent variables are integrated indirectly.</para>
</simplesect>
<simplesect kind="par"><title></title><para>See:</para>
</simplesect>
<simplesect kind="par"><title></title><para><bold>Taking to the saddle</bold> by R.Martin, K.Thompson and C.Browne; RISK JUNE 2001; p.91</para>
</simplesect>
<simplesect kind="par"><title></title><para><bold>The saddlepoint method and portfolio optionalities</bold> R.Martin in Risk December 2006</para>
</simplesect>
<simplesect kind="par"><title></title><para><bold>VAR: who contributes and how much?</bold> R.Martin, K.Thompson and C.Browne RISK AUGUST 2001</para>
</simplesect>
<simplesect kind="par"><title></title><para><bold>Shortfall: Who contributes and how much?</bold> R. J. Martin, Credit Suisse January 3, 2007 </para>
</simplesect>
<simplesect kind="par"><title></title><para><bold>Don&apos;t Fall from the Saddle: the Importance of Higher Moments of Credit <ref refid="class_quant_lib_1_1_loss" kindref="compound">Loss</ref> Distributions</bold> J.Annaert, C.Garcia Joao Batista, J.Lamoot, G.Lanine February 2006, Gent University</para>
</simplesect>
<simplesect kind="par"><title></title><para><bold>Analytical techniques for synthetic CDOs and credit default risk measures</bold> A. Antonov, S. Mechkovy, and T. Misirpashaevz; NumeriX May 23, 2005 </para>
</simplesect>
<simplesect kind="par"><title></title><para><bold>Computation of VaR and VaR contribution in the <ref refid="class_quant_lib_1_1_vasicek" kindref="compound">Vasicek</ref> portfolio credit loss model: a comparative study</bold> X.Huang, C.W.Oosterlee, M.Mesters Journal of Credit Risk (75-96) Volume 3/ Number 3, Fall 2007 </para>
</simplesect>
<simplesect kind="par"><title></title><para><bold>Higher-order saddlepoint approximations in the <ref refid="class_quant_lib_1_1_vasicek" kindref="compound">Vasicek</ref> portfolio credit loss model</bold> X.Huang, C.W.Oosterlee, M.Mesters Journal of Computational Finance (93-113) Volume 11/Number 1, Fall 2007 </para>
</simplesect>
<simplesect kind="par"><title></title><para>While more expensive, a high order expansion is used here; see the paper by Antonov et al for the terms retained.</para>
</simplesect>
<simplesect kind="par"><title></title><para>For a discussion of an alternative to fix the error at low loss levels (more relevant to pricing than risk metrics) see: </para>
</simplesect>
<simplesect kind="par"><title></title><para><bold>The hybrid saddlepoint method for credit portfolios</bold> by A.Owen, A.McLeod and K.Thompson; in Risk, August 2009. This is not implemented here though (yet?...)</para>
</simplesect>
<simplesect kind="par"><title></title><para>For the more general context mathematical theory see: <bold>Saddlepoint approximations with applications</bold> by R.W. Butler, Cambridge series in statistical and probabilistic mathematics. 2007 </para>
</simplesect>
<simplesect kind="par"><title></title><para></para>
</simplesect>
<xrefsect id="todo_1_todo000020"><xreftitle>Todo</xreftitle><xrefdescription><para>Some portfolios show instabilities in the high order expansion terms. </para>
<para>Methods here are calling and integrating using the unconditional probabilities without inverting them first; quite a lot of calls to the copula inversion can be avoided; this should improve performance. </para>
<para>Revise the model for stability of the saddle point calculation. The search for the point does not convege in extreme cases; e.g. very high value of all the factors; factors for each variable not ordered from high to low,... </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QuantLib::DefaultLossModel</label>
        <link refid="class_quant_lib_1_1_default_loss_model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="1">
        <label>QuantLib::SaddlePointLossModel&lt; CP &gt;</label>
        <link refid="class_quant_lib_1_1_saddle_point_loss_model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>QuantLib::DefaultLossModel</label>
        <link refid="class_quant_lib_1_1_default_loss_model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>basket_</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Handle&lt; QuantLib::Basket &gt;</label>
        <link refid="class_quant_lib_1_1_handle"/>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::RelinkableHandle&lt; QuantLib::Basket &gt;</label>
        <link refid="class_quant_lib_1_1_relinkable_handle"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::SaddlePointLossModel&lt; CP &gt;</label>
        <link refid="class_quant_lib_1_1_saddle_point_loss_model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/credit/saddlepointlossmodel.hpp" line="100" column="5" bodyfile="ql/experimental/credit/saddlepointlossmodel.hpp" bodystart="100" bodyend="380"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1a82e705b183f8f6ba5cf45d3f2eb68209" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>attachRatio_</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ad2700ffb7198321f52fdeb42e9a8e043" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>basket_</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1aa0d607e75340d7ca18d97edcdb8a5e14" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>conditionalExpectedLoss</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1afa698dabdfe399fffffbc9603b7bafa7" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>conditionalExpectedTrancheLoss</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1a5bc0dcc0cf45c2ab8b0844adba276e2a" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>copula_</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1ad2660951a9a0f3acd06caa56a28e00f6" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>CumGen0234DerivCond</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1a87bd3571c888ba98f1f9f5427905848f" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>CumGen02DerivCond</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1a2a8a8f08b7f319ddb7ab07b76a7e2289" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>CumGen1stDerivative</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1a765cd2b6c952b76f3dc1dd0f27a1e17d" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>CumGen1stDerivativeCond</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1ac5586337968fb80e67d65e9a16b8fcb1" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>CumGen2ndDerivative</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1ae8003c44022e683b23c39c84f298e486" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>CumGen2ndDerivativeCond</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1aecc7d5a16422cc5c9b14b78ba5ddab25" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>CumGen3rdDerivative</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1a9a2304b48d810e7a8f55023a63fdcbf6" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>CumGen3rdDerivativeCond</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1a9e5ec40ef72a87d627499c7369cb1683" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>CumGen4thDerivative</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1a8d5b114facaa532fae072a4e4fa5d77f" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>CumGen4thDerivativeCond</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1a1901caadda588f2d4bbc5edeeed0f24c" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>CumulantGenerating</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1afff6d649f2216a712c173215d4ee0b30" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>CumulantGeneratingCond</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1a25ed3ba8a38c4afaca5dca5b8cfd1d7d" prot="protected" virt="virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>defaultCorrelation</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ac51090f561e4372e495bfa9edee0000b" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>DefaultLossModel</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ab57e81d3fdd238c0cb19db2808bc5b59" prot="protected" virt="virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>densityTrancheLoss</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1acb8b53a69081f355284715a14981a022" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>detachRatio_</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1afd0d4637df1423173d5efc758a16f354" prot="protected" virt="virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>expectedRecovery</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1ad951608b35188cfb419e1296fd4fa8b9" prot="public" virt="virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>expectedShortfall</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1ae57829929758f2af1f4770e34d1a557d" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>expectedShortfallFullPortfolioCond</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1affc599551e562cda95e978dc9d828397" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>expectedShortfallSplitCond</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1aeb9211704cec6efec4716ce6971cbdc6" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>expectedShortfallTrancheCond</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1acbace87d9ac82ce8f9a9ed382640cebc" prot="public" virt="virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>expectedTrancheLoss</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1a65cf83c7daa2c2b91bab3a4e99293259" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>findSaddle</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1a2971a952590ebd6e333834ded04117e0" prot="public" virt="virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>lossDistribution</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1a64178e1c5af0a8887ed3cd6d4948caa3" prot="public" virt="virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>percentile</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ab46164d907ae7772c0a5f6788ce4568b" prot="protected" virt="virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>probAtLeastNEvents</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1a3105f96058b4ccf4b387666512a2b30e" prot="public" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>probDensity</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1a5873026803299621a1ff0ba881f260c7" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>probDensityCond</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1ae04bf88e8206b128596094b62aa134b8" prot="public" virt="virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>probOverLoss</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1a22c5406183e410f27a3e3335681bc85b" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>probOverLossCond</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1a46120bee2967860cd6d8ce0b3b83099c" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>probOverLossPortfCond</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1a5dcc56090bcf451cd7a8b42b497d3e7f" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>probOverLossPortfCond1stOrder</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1a198111f99d986233bb26e774ae3a51e1" prot="public" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>probOverPortfLoss</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ab8053b0ecb53c758939cf5c7a33fb328" prot="protected" virt="virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>probsBeingNthEvent</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1a36d44151fdabca1b423d4d282b3972ef" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>remainingNotional_</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1a7760660eb1ae6ca0e083dbcabc22898e" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>remainingNotionals_</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1aba0019b37774dcea90e5772b3ccc5f87" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>remainingSize_</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1af0096807a2c39b6f1dfff8b22d052ab1" prot="protected" virt="virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>resetModel</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1a424bb56ce73783b32e55f2fbdd4f7eae" prot="public" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>SaddlePointLossModel</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1a467843d56b00359a8fa7d0a1017079a5" prot="protected" virt="virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>splitESFLevel</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1a5e4f8f053406d19f6fc569f8f6d47fd7" prot="protected" virt="non-virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>splitLossCond</name></member>
      <member refid="class_quant_lib_1_1_saddle_point_loss_model_1a043e0d936e5422163114204e5d3d15b4" prot="public" virt="virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>splitVaRLevel</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::SaddlePointLossModel</scope><name>~Observable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
