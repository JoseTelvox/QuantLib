<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_least_square_function" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::LeastSquareFunction</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_cost_function" prot="public" virt="non-virtual">QuantLib::CostFunction</basecompoundref>
    <includes refid="leastsquare_8hpp" local="no">leastsquare.hpp</includes>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_least_square_function_1a54f628d701fe54c0576938481dc1a937" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_least_square_problem" kindref="compound">LeastSquareProblem</ref> &amp;</type>
        <definition>LeastSquareProblem&amp; QuantLib::LeastSquareFunction::lsp_</definition>
        <argsstring></argsstring>
        <name>lsp_</name>
        <qualifiedname>QuantLib::LeastSquareFunction::lsp_</qualifiedname>
        <briefdescription>
<para>least square problem </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/leastsquare.hpp" line="77" column="28" bodyfile="ql/math/optimization/leastsquare.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_least_square_function_1aa6d3e475eee6944dad47cb36317c272c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::LeastSquareFunction::LeastSquareFunction</definition>
        <argsstring>(LeastSquareProblem &amp;lsp)</argsstring>
        <name>LeastSquareFunction</name>
        <qualifiedname>QuantLib::LeastSquareFunction::LeastSquareFunction</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_least_square_problem" kindref="compound">LeastSquareProblem</ref> &amp;</type>
          <declname>lsp</declname>
        </param>
        <briefdescription>
<para><ref refid="struct_quant_lib_1_1_default" kindref="compound">Default</ref> constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/leastsquare.hpp" line="63" column="9" bodyfile="ql/math/optimization/leastsquare.hpp" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_least_square_function_1a72800f804c6ff0d779638025072febda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::LeastSquareFunction::~LeastSquareFunction</definition>
        <argsstring>() override=default</argsstring>
        <name>~LeastSquareFunction</name>
        <qualifiedname>QuantLib::LeastSquareFunction::~LeastSquareFunction</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/leastsquare.hpp" line="65" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_least_square_function_1ab2c54321e0fa6f2b028141977a53f424" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::LeastSquareFunction::value</definition>
        <argsstring>(const Array &amp;x) const override</argsstring>
        <name>value</name>
        <qualifiedname>QuantLib::LeastSquareFunction::value</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_cost_function_1a2255742e3e05477d773cdf3705411661">value</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>compute value of the least square function </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/leastsquare.hpp" line="68" column="14" bodyfile="ql/math/optimization/leastsquare.cpp" bodystart="28" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_least_square_function_1a70aa6d35e25b5e7f906a9858c8aaad08" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::LeastSquareFunction::values</definition>
        <argsstring>(const Array &amp;) const override</argsstring>
        <name>values</name>
        <qualifiedname>QuantLib::LeastSquareFunction::values</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_cost_function_1ab43da17891b724c8352c01c2478d04db">values</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>method to overload to compute the cost function values in x </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/leastsquare.hpp" line="69" column="15" bodyfile="ql/math/optimization/leastsquare.cpp" bodystart="39" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_least_square_function_1a6c60d9bfb4ac745d5112b2e1b0bc1734" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::LeastSquareFunction::gradient</definition>
        <argsstring>(Array &amp;grad_f, const Array &amp;x) const override</argsstring>
        <name>gradient</name>
        <qualifiedname>QuantLib::LeastSquareFunction::gradient</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_cost_function_1aad44fa61459514a8e55208d50716698b">gradient</reimplements>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>grad_f</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>compute vector of derivatives of the least square function </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/leastsquare.hpp" line="71" column="14" bodyfile="ql/math/optimization/leastsquare.cpp" bodystart="49" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_least_square_function_1a0b073f44832f3fbd62e6fc64ffdd6c46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::LeastSquareFunction::valueAndGradient</definition>
        <argsstring>(Array &amp;grad_f, const Array &amp;x) const override</argsstring>
        <name>valueAndGradient</name>
        <qualifiedname>QuantLib::LeastSquareFunction::valueAndGradient</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_cost_function_1ae0c8902d6ce2e535237ae4370956d161">valueAndGradient</reimplements>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>grad_f</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>compute value and gradient of the least square function </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/leastsquare.hpp" line="73" column="14" bodyfile="ql/math/optimization/leastsquare.cpp" bodystart="63" bodyend="77"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Cost function for least-square problems. </para>
    </briefdescription>
    <detaileddescription>
<para>Implements a cost function using the interface provided by the <ref refid="class_quant_lib_1_1_least_square_problem" kindref="compound">LeastSquareProblem</ref> class. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QuantLib::CostFunction</label>
        <link refid="class_quant_lib_1_1_cost_function"/>
      </node>
      <node id="1">
        <label>QuantLib::LeastSquareFunction</label>
        <link refid="class_quant_lib_1_1_least_square_function"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>QuantLib::CostFunction</label>
        <link refid="class_quant_lib_1_1_cost_function"/>
      </node>
      <node id="1">
        <label>QuantLib::LeastSquareFunction</label>
        <link refid="class_quant_lib_1_1_least_square_function"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>lsp_</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::LeastSquareProblem</label>
        <link refid="class_quant_lib_1_1_least_square_problem"/>
      </node>
    </collaborationgraph>
    <location file="ql/math/optimization/leastsquare.hpp" line="60" column="5" bodyfile="ql/math/optimization/leastsquare.hpp" bodystart="60" bodyend="78"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_cost_function_1a0dc9070b6d79cf91aef8ba48e2808263" prot="public" virt="virtual"><scope>QuantLib::LeastSquareFunction</scope><name>finiteDifferenceEpsilon</name></member>
      <member refid="class_quant_lib_1_1_least_square_function_1a6c60d9bfb4ac745d5112b2e1b0bc1734" prot="public" virt="virtual"><scope>QuantLib::LeastSquareFunction</scope><name>gradient</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a5bf2d8163ed5dea7ec811377e2835eca" prot="public" virt="virtual"><scope>QuantLib::LeastSquareFunction</scope><name>jacobian</name></member>
      <member refid="class_quant_lib_1_1_least_square_function_1aa6d3e475eee6944dad47cb36317c272c" prot="public" virt="non-virtual"><scope>QuantLib::LeastSquareFunction</scope><name>LeastSquareFunction</name></member>
      <member refid="class_quant_lib_1_1_least_square_function_1a54f628d701fe54c0576938481dc1a937" prot="protected" virt="non-virtual"><scope>QuantLib::LeastSquareFunction</scope><name>lsp_</name></member>
      <member refid="class_quant_lib_1_1_least_square_function_1ab2c54321e0fa6f2b028141977a53f424" prot="public" virt="virtual"><scope>QuantLib::LeastSquareFunction</scope><name>value</name></member>
      <member refid="class_quant_lib_1_1_least_square_function_1a0b073f44832f3fbd62e6fc64ffdd6c46" prot="public" virt="virtual"><scope>QuantLib::LeastSquareFunction</scope><name>valueAndGradient</name></member>
      <member refid="class_quant_lib_1_1_least_square_function_1a70aa6d35e25b5e7f906a9858c8aaad08" prot="public" virt="virtual"><scope>QuantLib::LeastSquareFunction</scope><name>values</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a1aa00768b27a3446404b3029660c2e68" prot="public" virt="virtual"><scope>QuantLib::LeastSquareFunction</scope><name>valuesAndJacobian</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a04929e863b85bc26f50ad9052ba7ee73" prot="public" virt="virtual"><scope>QuantLib::LeastSquareFunction</scope><name>~CostFunction</name></member>
      <member refid="class_quant_lib_1_1_least_square_function_1a72800f804c6ff0d779638025072febda" prot="public" virt="non-virtual"><scope>QuantLib::LeastSquareFunction</scope><name>~LeastSquareFunction</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
