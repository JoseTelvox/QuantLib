<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::MakeMCHullWhiteCapFloorEngine</compoundname>
    <includes refid="mchullwhiteengine_8hpp" local="no">mchullwhiteengine.hpp</includes>
    <templateparamlist>
      <param>
        <type>class RNG</type>
        <defval><ref refid="namespace_quant_lib_1a68b9aaf5f0c17983506b1a1db8575ab0" kindref="member">PseudoRandom</ref></defval>
      </param>
      <param>
        <type>class S</type>
        <defval><ref refid="namespace_quant_lib_1ae2e788da35d2b866040a03b96227ee6e" kindref="member">Statistics</ref></defval>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1a960128e8cea7c281583c6b2f808d739c" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_hull_white" kindref="compound">HullWhite</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;HullWhite&gt; QuantLib::MakeMCHullWhiteCapFloorEngine&lt; RNG, S &gt;::model_</definition>
        <argsstring></argsstring>
        <name>model_</name>
        <qualifiedname>QuantLib::MakeMCHullWhiteCapFloorEngine::model_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/capfloor/mchullwhiteengine.hpp" line="170" column="25" bodyfile="ql/pricingengines/capfloor/mchullwhiteengine.hpp" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1af1311b4cbe1e35160ae4f75fe61747d2" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::MakeMCHullWhiteCapFloorEngine&lt; RNG, S &gt;::antithetic_</definition>
        <argsstring></argsstring>
        <name>antithetic_</name>
        <qualifiedname>QuantLib::MakeMCHullWhiteCapFloorEngine::antithetic_</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/capfloor/mchullwhiteengine.hpp" line="171" column="14" bodyfile="ql/pricingengines/capfloor/mchullwhiteengine.hpp" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1aa610c9864c7d071e8a3af33630f1695f" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MakeMCHullWhiteCapFloorEngine&lt; RNG, S &gt;::samples_</definition>
        <argsstring></argsstring>
        <name>samples_</name>
        <qualifiedname>QuantLib::MakeMCHullWhiteCapFloorEngine::samples_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/capfloor/mchullwhiteengine.hpp" line="172" column="14" bodyfile="ql/pricingengines/capfloor/mchullwhiteengine.hpp" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1a00b6b2b2ad6bbcd3c61134186dcf442d" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MakeMCHullWhiteCapFloorEngine&lt; RNG, S &gt;::maxSamples_</definition>
        <argsstring></argsstring>
        <name>maxSamples_</name>
        <qualifiedname>QuantLib::MakeMCHullWhiteCapFloorEngine::maxSamples_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/capfloor/mchullwhiteengine.hpp" line="172" column="23" bodyfile="ql/pricingengines/capfloor/mchullwhiteengine.hpp" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1a043dd2b20014476c31c63baa95557a6c" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::MakeMCHullWhiteCapFloorEngine&lt; RNG, S &gt;::tolerance_</definition>
        <argsstring></argsstring>
        <name>tolerance_</name>
        <qualifiedname>QuantLib::MakeMCHullWhiteCapFloorEngine::tolerance_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/capfloor/mchullwhiteengine.hpp" line="173" column="14" bodyfile="ql/pricingengines/capfloor/mchullwhiteengine.hpp" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1a4e18c94b41b6b53dfb4a165879bfbfca" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::MakeMCHullWhiteCapFloorEngine&lt; RNG, S &gt;::brownianBridge_</definition>
        <argsstring></argsstring>
        <name>brownianBridge_</name>
        <qualifiedname>QuantLib::MakeMCHullWhiteCapFloorEngine::brownianBridge_</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/capfloor/mchullwhiteengine.hpp" line="174" column="14" bodyfile="ql/pricingengines/capfloor/mchullwhiteengine.hpp" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1a955e32ea18ca7fadbf743d00fa0a2f8e" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
        <definition>BigNatural QuantLib::MakeMCHullWhiteCapFloorEngine&lt; RNG, S &gt;::seed_</definition>
        <argsstring></argsstring>
        <name>seed_</name>
        <qualifiedname>QuantLib::MakeMCHullWhiteCapFloorEngine::seed_</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/capfloor/mchullwhiteengine.hpp" line="175" column="20" bodyfile="ql/pricingengines/capfloor/mchullwhiteengine.hpp" bodystart="175" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1af2704ede528c865105f234d3cae8702a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MakeMCHullWhiteCapFloorEngine&lt; RNG, S &gt;::MakeMCHullWhiteCapFloorEngine</definition>
        <argsstring>(ext::shared_ptr&lt; HullWhite &gt;)</argsstring>
        <name>MakeMCHullWhiteCapFloorEngine</name>
        <qualifiedname>QuantLib::MakeMCHullWhiteCapFloorEngine::MakeMCHullWhiteCapFloorEngine</qualifiedname>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_hull_white" kindref="compound">HullWhite</ref> &gt;</type>
          <defname>model</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/capfloor/mchullwhiteengine.hpp" line="159" column="9" bodyfile="ql/pricingengines/capfloor/mchullwhiteengine.hpp" bodystart="182" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1a0500243e6a8ea16f0b31635a3e29f487" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine" kindref="compound">MakeMCHullWhiteCapFloorEngine</ref> &amp;</type>
        <definition>MakeMCHullWhiteCapFloorEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCHullWhiteCapFloorEngine&lt; RNG, S &gt;::withBrownianBridge</definition>
        <argsstring>(bool b=true)</argsstring>
        <name>withBrownianBridge</name>
        <qualifiedname>QuantLib::MakeMCHullWhiteCapFloorEngine::withBrownianBridge</qualifiedname>
        <param>
          <type>bool</type>
          <declname>b</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/capfloor/mchullwhiteengine.hpp" line="161" column="39" bodyfile="ql/pricingengines/capfloor/mchullwhiteengine.hpp" bodystart="225" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1a0cc2b04cfb8f5a62a6cf7a4bcb97fae2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine" kindref="compound">MakeMCHullWhiteCapFloorEngine</ref> &amp;</type>
        <definition>MakeMCHullWhiteCapFloorEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCHullWhiteCapFloorEngine&lt; RNG, S &gt;::withSamples</definition>
        <argsstring>(Size samples)</argsstring>
        <name>withSamples</name>
        <qualifiedname>QuantLib::MakeMCHullWhiteCapFloorEngine::withSamples</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>samples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/capfloor/mchullwhiteengine.hpp" line="162" column="39" bodyfile="ql/pricingengines/capfloor/mchullwhiteengine.hpp" bodystart="189" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1a88a65c15914e29b7a4368a9129e097fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine" kindref="compound">MakeMCHullWhiteCapFloorEngine</ref> &amp;</type>
        <definition>MakeMCHullWhiteCapFloorEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCHullWhiteCapFloorEngine&lt; RNG, S &gt;::withAbsoluteTolerance</definition>
        <argsstring>(Real tolerance)</argsstring>
        <name>withAbsoluteTolerance</name>
        <qualifiedname>QuantLib::MakeMCHullWhiteCapFloorEngine::withAbsoluteTolerance</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/capfloor/mchullwhiteengine.hpp" line="163" column="39" bodyfile="ql/pricingengines/capfloor/mchullwhiteengine.hpp" bodystart="198" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1a3b027f9c9bcaa60c66a11b80e2c4cd7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine" kindref="compound">MakeMCHullWhiteCapFloorEngine</ref> &amp;</type>
        <definition>MakeMCHullWhiteCapFloorEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCHullWhiteCapFloorEngine&lt; RNG, S &gt;::withMaxSamples</definition>
        <argsstring>(Size samples)</argsstring>
        <name>withMaxSamples</name>
        <qualifiedname>QuantLib::MakeMCHullWhiteCapFloorEngine::withMaxSamples</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>samples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/capfloor/mchullwhiteengine.hpp" line="164" column="39" bodyfile="ql/pricingengines/capfloor/mchullwhiteengine.hpp" bodystart="211" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1a079b326671b738d9e5e52eb759f34527" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine" kindref="compound">MakeMCHullWhiteCapFloorEngine</ref> &amp;</type>
        <definition>MakeMCHullWhiteCapFloorEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCHullWhiteCapFloorEngine&lt; RNG, S &gt;::withSeed</definition>
        <argsstring>(BigNatural seed)</argsstring>
        <name>withSeed</name>
        <qualifiedname>QuantLib::MakeMCHullWhiteCapFloorEngine::withSeed</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/capfloor/mchullwhiteengine.hpp" line="165" column="39" bodyfile="ql/pricingengines/capfloor/mchullwhiteengine.hpp" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1a5350e7985741abf4a66f08f52a3bfaeb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine" kindref="compound">MakeMCHullWhiteCapFloorEngine</ref> &amp;</type>
        <definition>MakeMCHullWhiteCapFloorEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCHullWhiteCapFloorEngine&lt; RNG, S &gt;::withAntitheticVariate</definition>
        <argsstring>(bool b=true)</argsstring>
        <name>withAntitheticVariate</name>
        <qualifiedname>QuantLib::MakeMCHullWhiteCapFloorEngine::withAntitheticVariate</qualifiedname>
        <param>
          <type>bool</type>
          <declname>b</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/capfloor/mchullwhiteengine.hpp" line="166" column="39" bodyfile="ql/pricingengines/capfloor/mchullwhiteengine.hpp" bodystart="232" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1ab75dad903f4a4f4690faeb4cb58ae97d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MakeMCHullWhiteCapFloorEngine&lt; RNG, S &gt;::operator ext::shared_ptr&lt; PricingEngine &gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator ext::shared_ptr&lt; PricingEngine &gt;</name>
        <qualifiedname>QuantLib::MakeMCHullWhiteCapFloorEngine::shared_ptr&lt; PricingEngine &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/capfloor/mchullwhiteengine.hpp" line="168" column="9" bodyfile="ql/pricingengines/capfloor/mchullwhiteengine.hpp" bodystart="239" bodyend="245"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Monte Carlo Hull-White cap-floor engine factory. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ql/pricingengines/capfloor/mchullwhiteengine.hpp" line="157" column="5" bodyfile="ql/pricingengines/capfloor/mchullwhiteengine.hpp" bodystart="157" bodyend="176"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1af1311b4cbe1e35160ae4f75fe61747d2" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCHullWhiteCapFloorEngine</scope><name>antithetic_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1a4e18c94b41b6b53dfb4a165879bfbfca" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCHullWhiteCapFloorEngine</scope><name>brownianBridge_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1af2704ede528c865105f234d3cae8702a" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCHullWhiteCapFloorEngine</scope><name>MakeMCHullWhiteCapFloorEngine</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1a00b6b2b2ad6bbcd3c61134186dcf442d" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCHullWhiteCapFloorEngine</scope><name>maxSamples_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1a960128e8cea7c281583c6b2f808d739c" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCHullWhiteCapFloorEngine</scope><name>model_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1ab75dad903f4a4f4690faeb4cb58ae97d" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCHullWhiteCapFloorEngine</scope><name>operator ext::shared_ptr&lt; PricingEngine &gt;</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1aa610c9864c7d071e8a3af33630f1695f" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCHullWhiteCapFloorEngine</scope><name>samples_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1a955e32ea18ca7fadbf743d00fa0a2f8e" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCHullWhiteCapFloorEngine</scope><name>seed_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1a043dd2b20014476c31c63baa95557a6c" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCHullWhiteCapFloorEngine</scope><name>tolerance_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1a88a65c15914e29b7a4368a9129e097fe" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCHullWhiteCapFloorEngine</scope><name>withAbsoluteTolerance</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1a5350e7985741abf4a66f08f52a3bfaeb" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCHullWhiteCapFloorEngine</scope><name>withAntitheticVariate</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1a0500243e6a8ea16f0b31635a3e29f487" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCHullWhiteCapFloorEngine</scope><name>withBrownianBridge</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1a3b027f9c9bcaa60c66a11b80e2c4cd7e" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCHullWhiteCapFloorEngine</scope><name>withMaxSamples</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1a0cc2b04cfb8f5a62a6cf7a4bcb97fae2" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCHullWhiteCapFloorEngine</scope><name>withSamples</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_hull_white_cap_floor_engine_1a079b326671b738d9e5e52eb759f34527" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCHullWhiteCapFloorEngine</scope><name>withSeed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
