<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_random_default_model" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>QuantLib::RandomDefaultModel</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_observer" prot="public" virt="non-virtual">QuantLib::Observer</basecompoundref>
    <basecompoundref refid="class_quant_lib_1_1_observable" prot="public" virt="non-virtual">QuantLib::Observable</basecompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_gaussian_random_default_model" prot="public" virt="non-virtual">QuantLib::GaussianRandomDefaultModel</derivedcompoundref>
    <includes refid="randomdefaultmodel_8hpp" local="no">randomdefaultmodel.hpp</includes>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_random_default_model_1a6d775e4acaebec6f128d0ea50c996cde" prot="protected" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_pool" kindref="compound">Pool</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;Pool&gt; QuantLib::RandomDefaultModel::pool_</definition>
        <argsstring></argsstring>
        <name>pool_</name>
        <qualifiedname>QuantLib::RandomDefaultModel::pool_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultmodel.hpp" line="56" column="25" bodyfile="ql/experimental/credit/randomdefaultmodel.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_random_default_model_1aa3951413a0e8e7077f9f84b4448d1ae3" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_default_prob_key" kindref="compound">DefaultProbKey</ref> &gt;</type>
        <definition>std::vector&lt;DefaultProbKey&gt; QuantLib::RandomDefaultModel::defaultKeys_</definition>
        <argsstring></argsstring>
        <name>defaultKeys_</name>
        <qualifiedname>QuantLib::RandomDefaultModel::defaultKeys_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultmodel.hpp" line="57" column="21" bodyfile="ql/experimental/credit/randomdefaultmodel.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_random_default_model_1a6a722d9bd4126afd8f2ca0df203d3100" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::RandomDefaultModel::RandomDefaultModel</definition>
        <argsstring>(const ext::shared_ptr&lt; Pool &gt; &amp;pool, const std::vector&lt; DefaultProbKey &gt; &amp;defaultKeys)</argsstring>
        <name>RandomDefaultModel</name>
        <qualifiedname>QuantLib::RandomDefaultModel::RandomDefaultModel</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_pool" kindref="compound">Pool</ref> &gt; &amp;</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_default_prob_key" kindref="compound">DefaultProbKey</ref> &gt; &amp;</type>
          <declname>defaultKeys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultmodel.hpp" line="39" column="7" bodyfile="ql/experimental/credit/randomdefaultmodel.hpp" bodystart="39" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_default_model_1af0be4fd99fa5a9e140e30cf176066c69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::RandomDefaultModel::~RandomDefaultModel</definition>
        <argsstring>() override=default</argsstring>
        <name>~RandomDefaultModel</name>
        <qualifiedname>QuantLib::RandomDefaultModel::~RandomDefaultModel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultmodel.hpp" line="45" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_default_model_1a8e8518ea9773ff409594f1ce745a03ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::RandomDefaultModel::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <qualifiedname>QuantLib::RandomDefaultModel::update</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_observer_1a07905c55dca858470fcf4a1aea0005aa">update</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must be implemented in derived classes. An instance of Observer does not call this method directly: instead, it will be called by the observables the instance registered with when they need to notify any changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultmodel.hpp" line="46" column="14" bodyfile="ql/experimental/credit/randomdefaultmodel.hpp" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_default_model_1ac5137c54466ea0617da96679fbc2a25c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void QuantLib::RandomDefaultModel::nextSequence</definition>
        <argsstring>(Real tmax=QL_MAX_REAL)=0</argsstring>
        <name>nextSequence</name>
        <qualifiedname>QuantLib::RandomDefaultModel::nextSequence</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_gaussian_random_default_model_1a727e6d65542fa620a0e2e74f70099ea9">nextSequence</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>tmax</declname>
          <defval><ref refid="group__limit_macros_1ga31675a375a563ed7a1bba05c664489af" kindref="member">QL_MAX_REAL</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate a sequence of random default times, one for each name in the pool, and store the result in the <ref refid="class_quant_lib_1_1_pool" kindref="compound">Pool</ref> using method setTime(name). tmax denotes the maximum relevant time- default times &gt; tmax are not computed but set to tmax + 1 instead to save coputation time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultmodel.hpp" line="53" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_default_model_1ae67b38ec32abeb720f62586a6c24813f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void QuantLib::RandomDefaultModel::reset</definition>
        <argsstring>()=0</argsstring>
        <name>reset</name>
        <qualifiedname>QuantLib::RandomDefaultModel::reset</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_gaussian_random_default_model_1a60a244feb11c3fc49814bb053851e9ee">reset</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultmodel.hpp" line="54" column="22"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Base class for random default models. </para>
    </briefdescription>
    <detaileddescription>
<para>Provides sequences of random default times for each name in the pool. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>QuantLib::GaussianRandomDefaultModel</label>
        <link refid="class_quant_lib_1_1_gaussian_random_default_model"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="2">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="1">
        <label>QuantLib::RandomDefaultModel</label>
        <link refid="class_quant_lib_1_1_random_default_model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="2">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="1">
        <label>QuantLib::RandomDefaultModel</label>
        <link refid="class_quant_lib_1_1_random_default_model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/credit/randomdefaultmodel.hpp" line="37" column="5" bodyfile="ql/experimental/credit/randomdefaultmodel.hpp" bodystart="37" bodyend="58"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::RandomDefaultModel</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_random_default_model_1aa3951413a0e8e7077f9f84b4448d1ae3" prot="protected" virt="non-virtual"><scope>QuantLib::RandomDefaultModel</scope><name>defaultKeys_</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::RandomDefaultModel</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_random_default_model_1ac5137c54466ea0617da96679fbc2a25c" prot="public" virt="pure-virtual"><scope>QuantLib::RandomDefaultModel</scope><name>nextSequence</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultModel</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::RandomDefaultModel</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::RandomDefaultModel</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::RandomDefaultModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::RandomDefaultModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::RandomDefaultModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_random_default_model_1a6d775e4acaebec6f128d0ea50c996cde" prot="protected" virt="non-virtual"><scope>QuantLib::RandomDefaultModel</scope><name>pool_</name></member>
      <member refid="class_quant_lib_1_1_random_default_model_1a6a722d9bd4126afd8f2ca0df203d3100" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultModel</scope><name>RandomDefaultModel</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultModel</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultModel</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_random_default_model_1ae67b38ec32abeb720f62586a6c24813f" prot="public" virt="pure-virtual"><scope>QuantLib::RandomDefaultModel</scope><name>reset</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultModel</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultModel</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_random_default_model_1a8e8518ea9773ff409594f1ce745a03ed" prot="public" virt="virtual"><scope>QuantLib::RandomDefaultModel</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::RandomDefaultModel</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::RandomDefaultModel</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_random_default_model_1af0be4fd99fa5a9e140e30cf176066c69" prot="public" virt="non-virtual"><scope>QuantLib::RandomDefaultModel</scope><name>~RandomDefaultModel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
