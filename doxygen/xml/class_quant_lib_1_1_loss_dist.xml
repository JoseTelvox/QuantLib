<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_loss_dist" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>QuantLib::LossDist</compoundname>
    <derivedcompoundref refid="class_quant_lib_1_1_loss_dist_binomial" prot="public" virt="non-virtual">QuantLib::LossDistBinomial</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_loss_dist_bucketing" prot="public" virt="non-virtual">QuantLib::LossDistBucketing</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_loss_dist_homogeneous" prot="public" virt="non-virtual">QuantLib::LossDistHomogeneous</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_loss_dist_monte_carlo" prot="public" virt="non-virtual">QuantLib::LossDistMonteCarlo</derivedcompoundref>
    <includes refid="lossdistribution_8hpp" local="no">lossdistribution.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_loss_dist_1a2f119d845cb95500cb1d6ccdada4d7ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::LossDist::LossDist</definition>
        <argsstring>()=default</argsstring>
        <name>LossDist</name>
        <qualifiedname>QuantLib::LossDist::LossDist</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/lossdistribution.hpp" line="36" column="7"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_loss_dist_1a5c956aeba78889d83882e4cc28e950d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual QuantLib::LossDist::~LossDist</definition>
        <argsstring>()=default</argsstring>
        <name>~LossDist</name>
        <qualifiedname>QuantLib::LossDist::~LossDist</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/lossdistribution.hpp" line="37" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_loss_dist_1ae7a8a47c84b11e3536851b85bf324752" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_quant_lib_1_1_distribution" kindref="compound">Distribution</ref></type>
        <definition>virtual Distribution QuantLib::LossDist::operator()</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;volumes, const std::vector&lt; Real &gt; &amp;probabilities) const =0</argsstring>
        <name>operator()</name>
        <qualifiedname>QuantLib::LossDist::operator()</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_loss_dist_binomial_1a6e32228313c0725e0e0c584c3b93554c">operator()</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_loss_dist_bucketing_1a5b08e080acfb5a446c8927bacb75d768">operator()</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_loss_dist_homogeneous_1ad8317aa34911ed334771d1c0580f8e05">operator()</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_loss_dist_monte_carlo_1acc143751ef9e019cfd2855eb99bccaeb">operator()</reimplementedby>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>volumes</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>probabilities</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/lossdistribution.hpp" line="39" column="28"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_loss_dist_1aaf99a092c5bd885e8e8b1f5930a0e2aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>virtual Size QuantLib::LossDist::buckets</definition>
        <argsstring>() const =0</argsstring>
        <name>buckets</name>
        <qualifiedname>QuantLib::LossDist::buckets</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_loss_dist_binomial_1a5074f4af6a4232a3b8526f7e0a301d06">buckets</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_loss_dist_bucketing_1a4f3f426795474bac4e35f994eff0511c">buckets</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_loss_dist_homogeneous_1a1992b4aa3f1876ce4a701c6850c9fb7b">buckets</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_loss_dist_monte_carlo_1a2bbc6c0c9af4936ce11406e7d904e590">buckets</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/lossdistribution.hpp" line="41" column="20"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_loss_dist_1ae18fe2d871e5409706965ca7f60a3371" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>virtual Real QuantLib::LossDist::maximum</definition>
        <argsstring>() const =0</argsstring>
        <name>maximum</name>
        <qualifiedname>QuantLib::LossDist::maximum</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_loss_dist_binomial_1af434ad0c437b7db7cff614671018fd0f">maximum</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_loss_dist_bucketing_1a7d0b2862de4aa656d30ba65b6cdf103b">maximum</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_loss_dist_homogeneous_1af0959b255ba460839fcf1a8550406e05">maximum</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_loss_dist_monte_carlo_1a3e69b4d79296c8436c1b1c214f940156">maximum</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/lossdistribution.hpp" line="42" column="20"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_quant_lib_1_1_loss_dist_1acb7afb5f155bca79ca5875c078c088a5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::LossDist::binomialProbabilityOfNEvents</definition>
        <argsstring>(int n, std::vector&lt; Real &gt; &amp;p)</argsstring>
        <name>binomialProbabilityOfNEvents</name>
        <qualifiedname>QuantLib::LossDist::binomialProbabilityOfNEvents</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Binomial probability of n defaults using prob[0] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/lossdistribution.hpp" line="46" column="19" bodyfile="ql/experimental/credit/lossdistribution.cpp" bodystart="28" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_loss_dist_1a8c77b060ce7166827d98de461fa2f01b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::LossDist::binomialProbabilityOfAtLeastNEvents</definition>
        <argsstring>(int n, std::vector&lt; Real &gt; &amp;p)</argsstring>
        <name>binomialProbabilityOfAtLeastNEvents</name>
        <qualifiedname>QuantLib::LossDist::binomialProbabilityOfAtLeastNEvents</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Binomial probability of at least n defaults using prob[0] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/lossdistribution.hpp" line="50" column="19" bodyfile="ql/experimental/credit/lossdistribution.cpp" bodystart="35" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_loss_dist_1afb8d56a8594b6bb78d95a4d60338212c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>static std::vector&lt; Real &gt; QuantLib::LossDist::probabilityOfNEvents</definition>
        <argsstring>(std::vector&lt; Real &gt; &amp;p)</argsstring>
        <name>probabilityOfNEvents</name>
        <qualifiedname>QuantLib::LossDist::probabilityOfNEvents</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> of exactly n default events Xiaofong Ma, &quot;Numerical Methods for the Valuation of Synthetic
Collateralized Debt Obligations&quot;, PhD Thesis, Graduate Department of Computer Science, University of Toronto, 2007 <ulink url="http://www.cs.toronto.edu/pub/reports/na/ma-07-phd.pdf">http://www.cs.toronto.edu/pub/reports/na/ma-07-phd.pdf</ulink> (formula 2.1) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/lossdistribution.hpp" line="57" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_loss_dist_1a0957a883f318510faaa60118f67a850b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>static Real QuantLib::LossDist::probabilityOfNEvents</definition>
        <argsstring>(int n, std::vector&lt; Real &gt; &amp;p)</argsstring>
        <name>probabilityOfNEvents</name>
        <qualifiedname>QuantLib::LossDist::probabilityOfNEvents</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/lossdistribution.hpp" line="59" column="19"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_loss_dist_1a49f3e025f1385e01cef46caa4671ecbb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::LossDist::probabilityOfAtLeastNEvents</definition>
        <argsstring>(int n, std::vector&lt; Real &gt; &amp;p)</argsstring>
        <name>probabilityOfAtLeastNEvents</name>
        <qualifiedname>QuantLib::LossDist::probabilityOfAtLeastNEvents</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> of at least n defaults </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/lossdistribution.hpp" line="63" column="19" bodyfile="ql/experimental/credit/lossdistribution.cpp" bodystart="112" bodyend="125"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> formulas and algorithms. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::LossDist</label>
        <link refid="class_quant_lib_1_1_loss_dist"/>
      </node>
      <node id="2">
        <label>QuantLib::LossDistBinomial</label>
        <link refid="class_quant_lib_1_1_loss_dist_binomial"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::LossDistBucketing</label>
        <link refid="class_quant_lib_1_1_loss_dist_bucketing"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::LossDistHomogeneous</label>
        <link refid="class_quant_lib_1_1_loss_dist_homogeneous"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::LossDistMonteCarlo</label>
        <link refid="class_quant_lib_1_1_loss_dist_monte_carlo"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="ql/experimental/credit/lossdistribution.hpp" line="34" column="5" bodyfile="ql/experimental/credit/lossdistribution.hpp" bodystart="34" bodyend="64"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_loss_dist_1a8c77b060ce7166827d98de461fa2f01b" prot="public" virt="non-virtual"><scope>QuantLib::LossDist</scope><name>binomialProbabilityOfAtLeastNEvents</name></member>
      <member refid="class_quant_lib_1_1_loss_dist_1acb7afb5f155bca79ca5875c078c088a5" prot="public" virt="non-virtual"><scope>QuantLib::LossDist</scope><name>binomialProbabilityOfNEvents</name></member>
      <member refid="class_quant_lib_1_1_loss_dist_1aaf99a092c5bd885e8e8b1f5930a0e2aa" prot="public" virt="pure-virtual"><scope>QuantLib::LossDist</scope><name>buckets</name></member>
      <member refid="class_quant_lib_1_1_loss_dist_1a2f119d845cb95500cb1d6ccdada4d7ab" prot="public" virt="non-virtual"><scope>QuantLib::LossDist</scope><name>LossDist</name></member>
      <member refid="class_quant_lib_1_1_loss_dist_1ae18fe2d871e5409706965ca7f60a3371" prot="public" virt="pure-virtual"><scope>QuantLib::LossDist</scope><name>maximum</name></member>
      <member refid="class_quant_lib_1_1_loss_dist_1ae7a8a47c84b11e3536851b85bf324752" prot="public" virt="pure-virtual"><scope>QuantLib::LossDist</scope><name>operator()</name></member>
      <member refid="class_quant_lib_1_1_loss_dist_1a49f3e025f1385e01cef46caa4671ecbb" prot="public" virt="non-virtual"><scope>QuantLib::LossDist</scope><name>probabilityOfAtLeastNEvents</name></member>
      <member refid="class_quant_lib_1_1_loss_dist_1afb8d56a8594b6bb78d95a4d60338212c" prot="public" virt="non-virtual"><scope>QuantLib::LossDist</scope><name>probabilityOfNEvents</name></member>
      <member refid="class_quant_lib_1_1_loss_dist_1a0957a883f318510faaa60118f67a850b" prot="public" virt="non-virtual"><scope>QuantLib::LossDist</scope><name>probabilityOfNEvents</name></member>
      <member refid="class_quant_lib_1_1_loss_dist_1a5c956aeba78889d83882e4cc28e950d6" prot="public" virt="virtual"><scope>QuantLib::LossDist</scope><name>~LossDist</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
