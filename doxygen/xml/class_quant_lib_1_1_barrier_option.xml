<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_barrier_option" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::BarrierOption</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_one_asset_option" prot="public" virt="non-virtual">QuantLib::OneAssetOption</basecompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_quanto_barrier_option" prot="public" virt="non-virtual">QuantLib::QuantoBarrierOption</derivedcompoundref>
    <includes refid="barrieroption_8hpp" local="no">barrieroption.hpp</includes>
    <innerclass refid="class_quant_lib_1_1_barrier_option_1_1arguments" prot="public">QuantLib::BarrierOption::arguments</innerclass>
    <innerclass refid="class_quant_lib_1_1_barrier_option_1_1engine" prot="public">QuantLib::BarrierOption::engine</innerclass>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_barrier_option_1a5a5af534eb3296c57043da71f57ea9f8" prot="protected" static="no" mutable="no">
        <type>Barrier::Type</type>
        <definition>Barrier::Type QuantLib::BarrierOption::barrierType_</definition>
        <argsstring></argsstring>
        <name>barrierType_</name>
        <qualifiedname>QuantLib::BarrierOption::barrierType_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/barrieroption.hpp" line="76" column="23" bodyfile="ql/instruments/barrieroption.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_barrier_option_1aa96b6eecb7e5a44e8269c2cfa2867b49" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BarrierOption::barrier_</definition>
        <argsstring></argsstring>
        <name>barrier_</name>
        <qualifiedname>QuantLib::BarrierOption::barrier_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/barrieroption.hpp" line="77" column="14" bodyfile="ql/instruments/barrieroption.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_barrier_option_1a8ca09d4a4310deddc1ada5aa5afc1efd" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BarrierOption::rebate_</definition>
        <argsstring></argsstring>
        <name>rebate_</name>
        <qualifiedname>QuantLib::BarrierOption::rebate_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/barrieroption.hpp" line="78" column="14" bodyfile="ql/instruments/barrieroption.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_barrier_option_1a598111401f09a4551592ba270d393519" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::BarrierOption::BarrierOption</definition>
        <argsstring>(Barrier::Type barrierType, Real barrier, Real rebate, const ext::shared_ptr&lt; StrikedTypePayoff &gt; &amp;payoff, const ext::shared_ptr&lt; Exercise &gt; &amp;exercise)</argsstring>
        <name>BarrierOption</name>
        <qualifiedname>QuantLib::BarrierOption::BarrierOption</qualifiedname>
        <param>
          <type>Barrier::Type</type>
          <declname>barrierType</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>barrier</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>rebate</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_striked_type_payoff" kindref="compound">StrikedTypePayoff</ref> &gt; &amp;</type>
          <declname>payoff</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_exercise" kindref="compound">Exercise</ref> &gt; &amp;</type>
          <declname>exercise</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/barrieroption.hpp" line="47" column="9" bodyfile="ql/instruments/barrieroption.cpp" bodystart="31" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_barrier_option_1a92913a3c4f9f15e5520ea980bd198c1d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::BarrierOption::setupArguments</definition>
        <argsstring>(PricingEngine::arguments *) const override</argsstring>
        <name>setupArguments</name>
        <qualifiedname>QuantLib::BarrierOption::setupArguments</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_instrument_1af7344eebc48a1a361386e5c5a90a8fcc">setupArguments</reimplements>
        <param>
          <type><ref refid="class_quant_lib_1_1_pricing_engine_1_1arguments" kindref="compound">PricingEngine::arguments</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When a derived argument structure is defined for an instrument, this method should be overridden to fill it. This is mandatory in case a pricing engine is used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/barrieroption.hpp" line="52" column="14" bodyfile="ql/instruments/barrieroption.cpp" bodystart="40" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_barrier_option_1a320a695fa4563a49ba6ba2c42ee4ea94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref></type>
        <definition>Volatility QuantLib::BarrierOption::impliedVolatility</definition>
        <argsstring>(Real price, const ext::shared_ptr&lt; GeneralizedBlackScholesProcess &gt; &amp;process, Real accuracy=1.0e-4, Size maxEvaluations=100, Volatility minVol=1.0e-7, Volatility maxVol=4.0) const</argsstring>
        <name>impliedVolatility</name>
        <qualifiedname>QuantLib::BarrierOption::impliedVolatility</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>price</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt; &amp;</type>
          <declname>process</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.0e-4</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxEvaluations</declname>
          <defval>100</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref></type>
          <declname>minVol</declname>
          <defval>1.0e-7</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref></type>
          <declname>maxVol</declname>
          <defval>4.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>see <ref refid="class_quant_lib_1_1_vanilla_option" kindref="compound">VanillaOption</ref> for notes on implied-volatility calculation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/barrieroption.hpp" line="58" column="20" bodyfile="ql/instruments/barrieroption.cpp" bodystart="52" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_barrier_option_1a403b320be831bb4d312a1e4a5192176d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref></type>
        <definition>Volatility QuantLib::BarrierOption::impliedVolatility</definition>
        <argsstring>(Real price, const ext::shared_ptr&lt; GeneralizedBlackScholesProcess &gt; &amp;process, const DividendSchedule &amp;dividends, Real accuracy=1.0e-4, Size maxEvaluations=100, Volatility minVol=1.0e-7, Volatility maxVol=4.0) const</argsstring>
        <name>impliedVolatility</name>
        <qualifiedname>QuantLib::BarrierOption::impliedVolatility</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>price</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt; &amp;</type>
          <declname>process</declname>
        </param>
        <param>
          <type>const DividendSchedule &amp;</type>
          <declname>dividends</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.0e-4</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxEvaluations</declname>
          <defval>100</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref></type>
          <declname>minVol</declname>
          <defval>1.0e-7</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref></type>
          <declname>maxVol</declname>
          <defval>4.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/barrieroption.hpp" line="65" column="20" bodyfile="ql/instruments/barrieroption.cpp" bodystart="63" bodyend="102"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Barrier option on a single asset. </para>
    </briefdescription>
    <detaileddescription>
<para>The analytic pricing engine will be used if none if passed. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::BarrierOption</label>
        <link refid="class_quant_lib_1_1_barrier_option"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Instrument</label>
        <link refid="class_quant_lib_1_1_instrument"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="7">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::OneAssetOption</label>
        <link refid="class_quant_lib_1_1_one_asset_option"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Option</label>
        <link refid="class_quant_lib_1_1_option"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QuantLib::QuantoBarrierOption</label>
        <link refid="class_quant_lib_1_1_quanto_barrier_option"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::BarrierOption</label>
        <link refid="class_quant_lib_1_1_barrier_option"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QuantLib::Date</label>
        <link refid="class_quant_lib_1_1_date"/>
      </node>
      <node id="4">
        <label>QuantLib::Instrument</label>
        <link refid="class_quant_lib_1_1_instrument"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>valuationDate_</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="7">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::OneAssetOption</label>
        <link refid="class_quant_lib_1_1_one_asset_option"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Option</label>
        <link refid="class_quant_lib_1_1_option"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/instruments/barrieroption.hpp" line="43" column="5" bodyfile="ql/instruments/barrieroption.hpp" bodystart="43" bodyend="79"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_instrument_1a468edb294da268b097c91bf821084c07" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>additionalResults</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a57d2b34e8625ab3d9ffa50c0c7931099" prot="protected" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>additionalResults_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a02070ea7442d30625992c1711030d4b8" prot="protected" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>alwaysForward_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a17c9433135a259e4776baec66204a484" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>alwaysForwardNotifications</name></member>
      <member refid="class_quant_lib_1_1_barrier_option_1aa96b6eecb7e5a44e8269c2cfa2867b49" prot="protected" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>barrier_</name></member>
      <member refid="class_quant_lib_1_1_barrier_option_1a598111401f09a4551592ba270d393519" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>BarrierOption</name></member>
      <member refid="class_quant_lib_1_1_barrier_option_1a5a5af534eb3296c57043da71f57ea9f8" prot="protected" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>barrierType_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a4c573c48f7eaead5042864ac0eb5b025" prot="protected" virt="virtual"><scope>QuantLib::BarrierOption</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a58b4986a80efa18634483a92c121e26e" prot="protected" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>calculated_</name></member>
      <member refid="class_quant_lib_1_1_option_1abaee7fc605354c444867545492cd5845a4f872c1ba3286c1af60485c2f4a4d3c1" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>Call</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::BarrierOption</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1ade9880b1f51bd7b94ea4d176e1cb259f" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>delta</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1a0f2486ef271b5cfda29f59d6b21726d5" prot="protected" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>delta_</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1ab01837864824837e07151b9d7b218e60" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>deltaForward</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1a46ff6fe39afba281f273310751de4523" prot="protected" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>deltaForward_</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1aa08f7265cbca4f4e026e4c80a545af64" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>dividendRho</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1acec199353113b55df04b0b1758988f47" prot="protected" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>dividendRho_</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1ac4b96563e0650f3f486402eca600707c" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>elasticity</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1a62eee9c1e86fa3606446f7cb6f5b89fe" prot="protected" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>elasticity_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1ac548cb61c864779db09bd0fac6ae7c81" prot="protected" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>engine_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a03502fb6c606b262c25acd94ff4c1e52" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>errorEstimate</name></member>
      <member refid="class_quant_lib_1_1_instrument_1abb8f4cfa7346fab7a2f3a8c8b4da30f3" prot="protected" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>errorEstimate_</name></member>
      <member refid="class_quant_lib_1_1_option_1a983bd3fd1eb1437bbdef1f3fa2adf899" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>exercise</name></member>
      <member refid="class_quant_lib_1_1_option_1a3e8fca2ab5ba46c45b99badeeacd7e7a" prot="protected" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>exercise_</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1a7c9dadd5ebc375b371ca4e12c11d8c55" prot="public" virt="virtual"><scope>QuantLib::BarrierOption</scope><name>fetchResults</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1afac6ee19c3107c453e1347dd8000e023" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>forwardFirstNotificationOnly</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7157f41e83f2c5d924f5c5bafda04d1d" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>freeze</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7bb721fe00c6854e602758aba629ab77" prot="protected" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>frozen_</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1a0e6f1fae2659124479c772cc76fd93bb" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>gamma</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1acd566d7bddc02fc9b822a27072ccad90" prot="protected" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>gamma_</name></member>
      <member refid="class_quant_lib_1_1_barrier_option_1a320a695fa4563a49ba6ba2c42ee4ea94" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>impliedVolatility</name></member>
      <member refid="class_quant_lib_1_1_barrier_option_1a403b320be831bb4d312a1e4a5192176d" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>impliedVolatility</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a5e4c746cbf7999c83dc57f87e241f1cc" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>Instrument</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a0a7c5d42815a4e16ee2158e24dbfc748" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>isCalculated</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1a504f249f48aad9a3053d6b40ae1d9e6d" prot="public" virt="virtual"><scope>QuantLib::BarrierOption</scope><name>isExpired</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1ad5e7faea3a7aada73da20453f5bd67a9" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>itmCashProbability</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1ac7be4123d83cf536d9dc812a138d87d1" prot="protected" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>itmCashProbability_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a26f18f4ff7faaaebd8eae50e064b493e" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>LazyObject</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a5afdd9698267cd30ddd10cf01f3487b0" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>NPV</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a997663780100d30ae59b14ac0285322d" prot="protected" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>NPV_</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::BarrierOption</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::BarrierOption</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::BarrierOption</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1a48dbb5aa57ecc6dd55a3fd579f2a0163" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>OneAssetOption</name></member>
      <member refid="class_quant_lib_1_1_option_1a03bf400e04666eadc73907b0c716739e" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::BarrierOption</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::BarrierOption</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::QuantLib::Observer::"><scope>QuantLib::BarrierOption</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_option_1a53a00c225649c5da693898cb8b4b364b" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>Option</name></member>
      <member refid="class_quant_lib_1_1_option_1a85744e7ba21d0df6987f618893ea76ce" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>payoff</name></member>
      <member refid="class_quant_lib_1_1_option_1ada24896615e540bebf2b9623c3537def" prot="protected" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>payoff_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1aad23f546bbca156a49a95ca2bee124c4" prot="protected" virt="virtual"><scope>QuantLib::BarrierOption</scope><name>performCalculations</name></member>
      <member refid="class_quant_lib_1_1_option_1abaee7fc605354c444867545492cd5845aa96ffa37e51c7bbea13951f106dbd3c0" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>Put</name></member>
      <member refid="class_quant_lib_1_1_barrier_option_1a8ca09d4a4310deddc1ada5aa5afc1efd" prot="protected" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>rebate_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a70c9b24e50132408d8d9ce4f6674662a" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>recalculate</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a266c15a12160a89f4f9707db85f9fa27" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>result</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1a8cf492dbdd0ca337ee07f4dad8a45b59" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>rho</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1a7a8b8781122df61dc8d29352d3337621" prot="protected" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>rho_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a3444386491f179f64f4f0aac24997071" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>setPricingEngine</name></member>
      <member refid="class_quant_lib_1_1_barrier_option_1a92913a3c4f9f15e5520ea980bd198c1d" prot="public" virt="virtual"><scope>QuantLib::BarrierOption</scope><name>setupArguments</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1ac550518bed1cbfd3d7a5f3a64d830099" prot="protected" virt="virtual"><scope>QuantLib::BarrierOption</scope><name>setupExpired</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1aeb6d5f004784c578a95e8a12a0d44e0d" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>strikeSensitivity</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1a60b4335a10c0e0e080eee3685faee269" prot="protected" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>strikeSensitivity_</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1a572436642dd053662198cd1ce7705d15" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>theta</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1a06d44ade435f5aeced2117952abfda11" prot="protected" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>theta_</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1a4dc87d12fff8ba2783a17e062d2195e1" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>thetaPerDay</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1a2eaaa309e0848702e8c8328334edacdd" prot="protected" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>thetaPerDay_</name></member>
      <member refid="class_quant_lib_1_1_option_1abaee7fc605354c444867545492cd5845" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>Type</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a2e0e4786666453024b9d4e0761f2770b" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>unfreeze</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1adee2bf49be5c4c78736be293321a856d" prot="public" virt="virtual"><scope>QuantLib::BarrierOption</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a53a0fc1adc70b73387ad53009725835d" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>valuationDate</name></member>
      <member refid="class_quant_lib_1_1_instrument_1aa60b558fc82f022e13535360ac4a6fed" prot="protected" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>valuationDate_</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1a52b2075516ffa4961681a1d4e800a730" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>vega</name></member>
      <member refid="class_quant_lib_1_1_one_asset_option_1aaa99d88f04727d63bca4cb23e164b6e1" prot="protected" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>vega_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a9d719c43bb627177a90d7d12324a2d6e" prot="public" virt="non-virtual"><scope>QuantLib::BarrierOption</scope><name>~LazyObject</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::BarrierOption</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::BarrierOption</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
