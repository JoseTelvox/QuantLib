<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::MakeMCDiscreteArithmeticASEngine</compoundname>
    <templateparamlist>
      <param>
        <type>class RNG</type>
        <defval><ref refid="namespace_quant_lib_1a68b9aaf5f0c17983506b1a1db8575ab0" kindref="member">PseudoRandom</ref></defval>
      </param>
      <param>
        <type>class S</type>
        <defval><ref refid="namespace_quant_lib_1ae2e788da35d2b866040a03b96227ee6e" kindref="member">Statistics</ref></defval>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1adf4e661c70480a51539bd3aa0d210d5e" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;GeneralizedBlackScholesProcess&gt; QuantLib::MakeMCDiscreteArithmeticASEngine&lt; RNG, S &gt;::process_</definition>
        <argsstring></argsstring>
        <name>process_</name>
        <qualifiedname>QuantLib::MakeMCDiscreteArithmeticASEngine::process_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" line="146" column="25" bodyfile="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1a2a71e2e0aa1896beb4fce32e1fcf2ccf" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::MakeMCDiscreteArithmeticASEngine&lt; RNG, S &gt;::antithetic_</definition>
        <argsstring></argsstring>
        <name>antithetic_</name>
        <qualifiedname>QuantLib::MakeMCDiscreteArithmeticASEngine::antithetic_</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" line="147" column="14" bodyfile="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1abe0c9b4f58345b2b9c685a304217ea6c" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MakeMCDiscreteArithmeticASEngine&lt; RNG, S &gt;::samples_</definition>
        <argsstring></argsstring>
        <name>samples_</name>
        <qualifiedname>QuantLib::MakeMCDiscreteArithmeticASEngine::samples_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" line="148" column="14" bodyfile="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1a1177cc807a4460b7c8ec703b2ea4a0e7" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MakeMCDiscreteArithmeticASEngine&lt; RNG, S &gt;::maxSamples_</definition>
        <argsstring></argsstring>
        <name>maxSamples_</name>
        <qualifiedname>QuantLib::MakeMCDiscreteArithmeticASEngine::maxSamples_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" line="148" column="23" bodyfile="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1a78bd3afef49d36d46907c77133f460c3" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::MakeMCDiscreteArithmeticASEngine&lt; RNG, S &gt;::tolerance_</definition>
        <argsstring></argsstring>
        <name>tolerance_</name>
        <qualifiedname>QuantLib::MakeMCDiscreteArithmeticASEngine::tolerance_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" line="149" column="14" bodyfile="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1a9ef00ad4230bc0dfe921f2865d397e03" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::MakeMCDiscreteArithmeticASEngine&lt; RNG, S &gt;::brownianBridge_</definition>
        <argsstring></argsstring>
        <name>brownianBridge_</name>
        <qualifiedname>QuantLib::MakeMCDiscreteArithmeticASEngine::brownianBridge_</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" line="150" column="14" bodyfile="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1af708bb031a7903a053cb5d5bec69e20e" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
        <definition>BigNatural QuantLib::MakeMCDiscreteArithmeticASEngine&lt; RNG, S &gt;::seed_</definition>
        <argsstring></argsstring>
        <name>seed_</name>
        <qualifiedname>QuantLib::MakeMCDiscreteArithmeticASEngine::seed_</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" line="151" column="20" bodyfile="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" bodystart="151" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1ace8a1458600af1c675699bd76e24ead5" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MakeMCDiscreteArithmeticASEngine&lt; RNG, S &gt;::MakeMCDiscreteArithmeticASEngine</definition>
        <argsstring>(ext::shared_ptr&lt; GeneralizedBlackScholesProcess &gt; process)</argsstring>
        <name>MakeMCDiscreteArithmeticASEngine</name>
        <qualifiedname>QuantLib::MakeMCDiscreteArithmeticASEngine::MakeMCDiscreteArithmeticASEngine</qualifiedname>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt;</type>
          <declname>process</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" line="134" column="18" bodyfile="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1ac15972ae55f09fb2c35380f835fe10ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine" kindref="compound">MakeMCDiscreteArithmeticASEngine</ref> &amp;</type>
        <definition>MakeMCDiscreteArithmeticASEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCDiscreteArithmeticASEngine&lt; RNG, S &gt;::withBrownianBridge</definition>
        <argsstring>(bool b=true)</argsstring>
        <name>withBrownianBridge</name>
        <qualifiedname>QuantLib::MakeMCDiscreteArithmeticASEngine::withBrownianBridge</qualifiedname>
        <param>
          <type>bool</type>
          <declname>b</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" line="137" column="42" bodyfile="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1a3cedad6cb78e92aff3565dae0ffa3044" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine" kindref="compound">MakeMCDiscreteArithmeticASEngine</ref> &amp;</type>
        <definition>MakeMCDiscreteArithmeticASEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCDiscreteArithmeticASEngine&lt; RNG, S &gt;::withSamples</definition>
        <argsstring>(Size samples)</argsstring>
        <name>withSamples</name>
        <qualifiedname>QuantLib::MakeMCDiscreteArithmeticASEngine::withSamples</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>samples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" line="138" column="42" bodyfile="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" bodystart="162" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1a739d552f398d4752e11551648fde2fe2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine" kindref="compound">MakeMCDiscreteArithmeticASEngine</ref> &amp;</type>
        <definition>MakeMCDiscreteArithmeticASEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCDiscreteArithmeticASEngine&lt; RNG, S &gt;::withAbsoluteTolerance</definition>
        <argsstring>(Real tolerance)</argsstring>
        <name>withAbsoluteTolerance</name>
        <qualifiedname>QuantLib::MakeMCDiscreteArithmeticASEngine::withAbsoluteTolerance</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" line="139" column="42" bodyfile="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" bodystart="171" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1acc42b62feb528a8c779626807803786c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine" kindref="compound">MakeMCDiscreteArithmeticASEngine</ref> &amp;</type>
        <definition>MakeMCDiscreteArithmeticASEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCDiscreteArithmeticASEngine&lt; RNG, S &gt;::withMaxSamples</definition>
        <argsstring>(Size samples)</argsstring>
        <name>withMaxSamples</name>
        <qualifiedname>QuantLib::MakeMCDiscreteArithmeticASEngine::withMaxSamples</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>samples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" line="140" column="42" bodyfile="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1afdd0a6e5cce832e63fa497ac29a2f671" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine" kindref="compound">MakeMCDiscreteArithmeticASEngine</ref> &amp;</type>
        <definition>MakeMCDiscreteArithmeticASEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCDiscreteArithmeticASEngine&lt; RNG, S &gt;::withSeed</definition>
        <argsstring>(BigNatural seed)</argsstring>
        <name>withSeed</name>
        <qualifiedname>QuantLib::MakeMCDiscreteArithmeticASEngine::withSeed</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" line="141" column="42" bodyfile="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1a4d8c5ba80bc65313b0bdcd8050937351" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine" kindref="compound">MakeMCDiscreteArithmeticASEngine</ref> &amp;</type>
        <definition>MakeMCDiscreteArithmeticASEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCDiscreteArithmeticASEngine&lt; RNG, S &gt;::withAntitheticVariate</definition>
        <argsstring>(bool b=true)</argsstring>
        <name>withAntitheticVariate</name>
        <qualifiedname>QuantLib::MakeMCDiscreteArithmeticASEngine::withAntitheticVariate</qualifiedname>
        <param>
          <type>bool</type>
          <declname>b</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" line="142" column="42" bodyfile="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1a18779da0a31f3a58a4a8dc86dba525d3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MakeMCDiscreteArithmeticASEngine&lt; RNG, S &gt;::operator ext::shared_ptr&lt; PricingEngine &gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator ext::shared_ptr&lt; PricingEngine &gt;</name>
        <qualifiedname>QuantLib::MakeMCDiscreteArithmeticASEngine::shared_ptr&lt; PricingEngine &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" line="144" column="9" bodyfile="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" bodystart="213" bodyend="221"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" line="132" column="5" bodyfile="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" bodystart="132" bodyend="152"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1a2a71e2e0aa1896beb4fce32e1fcf2ccf" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCDiscreteArithmeticASEngine</scope><name>antithetic_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1a9ef00ad4230bc0dfe921f2865d397e03" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCDiscreteArithmeticASEngine</scope><name>brownianBridge_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1ace8a1458600af1c675699bd76e24ead5" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCDiscreteArithmeticASEngine</scope><name>MakeMCDiscreteArithmeticASEngine</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1a1177cc807a4460b7c8ec703b2ea4a0e7" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCDiscreteArithmeticASEngine</scope><name>maxSamples_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1a18779da0a31f3a58a4a8dc86dba525d3" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCDiscreteArithmeticASEngine</scope><name>operator ext::shared_ptr&lt; PricingEngine &gt;</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1adf4e661c70480a51539bd3aa0d210d5e" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCDiscreteArithmeticASEngine</scope><name>process_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1abe0c9b4f58345b2b9c685a304217ea6c" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCDiscreteArithmeticASEngine</scope><name>samples_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1af708bb031a7903a053cb5d5bec69e20e" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCDiscreteArithmeticASEngine</scope><name>seed_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1a78bd3afef49d36d46907c77133f460c3" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCDiscreteArithmeticASEngine</scope><name>tolerance_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1a739d552f398d4752e11551648fde2fe2" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCDiscreteArithmeticASEngine</scope><name>withAbsoluteTolerance</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1a4d8c5ba80bc65313b0bdcd8050937351" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCDiscreteArithmeticASEngine</scope><name>withAntitheticVariate</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1ac15972ae55f09fb2c35380f835fe10ea" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCDiscreteArithmeticASEngine</scope><name>withBrownianBridge</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1acc42b62feb528a8c779626807803786c" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCDiscreteArithmeticASEngine</scope><name>withMaxSamples</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1a3cedad6cb78e92aff3565dae0ffa3044" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCDiscreteArithmeticASEngine</scope><name>withSamples</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_discrete_arithmetic_a_s_engine_1afdd0a6e5cce832e63fa497ac29a2f671" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCDiscreteArithmeticASEngine</scope><name>withSeed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
