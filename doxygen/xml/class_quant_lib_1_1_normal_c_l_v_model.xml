<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_normal_c_l_v_model" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::NormalCLVModel</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_lazy_object" prot="public" virt="non-virtual">QuantLib::LazyObject</basecompoundref>
    <innerclass refid="class_quant_lib_1_1_normal_c_l_v_model_1_1_mapping_function" prot="private">QuantLib::NormalCLVModel::MappingFunction</innerclass>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_normal_c_l_v_model_1a31e7ebd5fac7bb62fb2a825239b3dfbe" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>const Array QuantLib::NormalCLVModel::x_</definition>
        <argsstring></argsstring>
        <name>x_</name>
        <qualifiedname>QuantLib::NormalCLVModel::x_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/models/normalclvmodel.hpp" line="106" column="21" bodyfile="ql/experimental/models/normalclvmodel.hpp" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_normal_c_l_v_model_1a1fe8aebd7c592c4df076585719304be5" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref></type>
        <definition>const Volatility QuantLib::NormalCLVModel::sigma_</definition>
        <argsstring></argsstring>
        <name>sigma_</name>
        <qualifiedname>QuantLib::NormalCLVModel::sigma_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/models/normalclvmodel.hpp" line="107" column="26" bodyfile="ql/experimental/models/normalclvmodel.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_normal_c_l_v_model_1a2c62202f93068fa946b08fba3274aade" prot="private" static="no" mutable="no">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt;</type>
        <definition>const ext::shared_ptr&lt;GeneralizedBlackScholesProcess&gt; QuantLib::NormalCLVModel::bsProcess_</definition>
        <argsstring></argsstring>
        <name>bsProcess_</name>
        <qualifiedname>QuantLib::NormalCLVModel::bsProcess_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/models/normalclvmodel.hpp" line="108" column="31" bodyfile="ql/experimental/models/normalclvmodel.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_normal_c_l_v_model_1a8cf17f698f064940e7817c4c5ba7295c" prot="private" static="no" mutable="no">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_ornstein_uhlenbeck_process" kindref="compound">OrnsteinUhlenbeckProcess</ref> &gt;</type>
        <definition>const ext::shared_ptr&lt;OrnsteinUhlenbeckProcess&gt; QuantLib::NormalCLVModel::ouProcess_</definition>
        <argsstring></argsstring>
        <name>ouProcess_</name>
        <qualifiedname>QuantLib::NormalCLVModel::ouProcess_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/models/normalclvmodel.hpp" line="109" column="31" bodyfile="ql/experimental/models/normalclvmodel.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_normal_c_l_v_model_1ac0b011640da7d63fa86e172b5f0495ab" prot="private" static="no" mutable="no">
        <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt;</type>
        <definition>const std::vector&lt;Date&gt; QuantLib::NormalCLVModel::maturityDates_</definition>
        <argsstring></argsstring>
        <name>maturityDates_</name>
        <qualifiedname>QuantLib::NormalCLVModel::maturityDates_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/models/normalclvmodel.hpp" line="110" column="27" bodyfile="ql/experimental/models/normalclvmodel.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_normal_c_l_v_model_1a89256af0356a7f7a76bd80e437ee11ea" prot="private" static="no" mutable="no">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_g_b_s_m_r_n_d_calculator" kindref="compound">GBSMRNDCalculator</ref> &gt;</type>
        <definition>const ext::shared_ptr&lt;GBSMRNDCalculator&gt; QuantLib::NormalCLVModel::rndCalculator_</definition>
        <argsstring></argsstring>
        <name>rndCalculator_</name>
        <qualifiedname>QuantLib::NormalCLVModel::rndCalculator_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/models/normalclvmodel.hpp" line="111" column="31" bodyfile="ql/experimental/models/normalclvmodel.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_normal_c_l_v_model_1a18d81da92814d532b16aa3e3e09ba84b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt;</type>
        <definition>std::vector&lt;Time&gt; QuantLib::NormalCLVModel::maturityTimes_</definition>
        <argsstring></argsstring>
        <name>maturityTimes_</name>
        <qualifiedname>QuantLib::NormalCLVModel::maturityTimes_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/models/normalclvmodel.hpp" line="113" column="21" bodyfile="ql/experimental/models/normalclvmodel.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_normal_c_l_v_model_1a1796fa51d1d72ad78a488209796d48f7" prot="private" static="no" mutable="yes">
        <type>std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(<ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref>, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>)&gt;</type>
        <definition>std::function&lt;Real(Time, Real)&gt; QuantLib::NormalCLVModel::g_</definition>
        <argsstring></argsstring>
        <name>g_</name>
        <qualifiedname>QuantLib::NormalCLVModel::g_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/models/normalclvmodel.hpp" line="114" column="31" bodyfile="ql/experimental/models/normalclvmodel.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_normal_c_l_v_model_1a14a3461899213a714fd7fe0077da1ee8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::NormalCLVModel::NormalCLVModel</definition>
        <argsstring>(const ext::shared_ptr&lt; GeneralizedBlackScholesProcess &gt; &amp;bsProcess, ext::shared_ptr&lt; OrnsteinUhlenbeckProcess &gt; ouProcess, const std::vector&lt; Date &gt; &amp;maturityDates, Size lagrangeOrder, Real pMax=Null&lt; Real &gt;(), Real pMin=Null&lt; Real &gt;())</argsstring>
        <name>NormalCLVModel</name>
        <qualifiedname>QuantLib::NormalCLVModel::NormalCLVModel</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt; &amp;</type>
          <declname>bsProcess</declname>
        </param>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_ornstein_uhlenbeck_process" kindref="compound">OrnsteinUhlenbeckProcess</ref> &gt;</type>
          <declname>ouProcess</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt; &amp;</type>
          <declname>maturityDates</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>lagrangeOrder</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>pMax</declname>
          <defval><ref refid="class_quant_lib_1_1_null" kindref="compound">Null</ref>&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;()</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>pMin</declname>
          <defval><ref refid="class_quant_lib_1_1_null" kindref="compound">Null</ref>&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/models/normalclvmodel.hpp" line="50" column="9" bodyfile="ql/experimental/models/normalclvmodel.cpp" bodystart="39" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_normal_c_l_v_model_1a2703b4047307599022802b5d5cfe95c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::NormalCLVModel::cdf</definition>
        <argsstring>(const Date &amp;d, Real x) const</argsstring>
        <name>cdf</name>
        <qualifiedname>QuantLib::NormalCLVModel::cdf</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/models/normalclvmodel.hpp" line="58" column="14" bodyfile="ql/experimental/models/normalclvmodel.cpp" bodystart="63" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_normal_c_l_v_model_1a7906d24588c844e0e74bf1ad3f2e48e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::NormalCLVModel::invCDF</definition>
        <argsstring>(const Date &amp;d, Real q) const</argsstring>
        <name>invCDF</name>
        <qualifiedname>QuantLib::NormalCLVModel::invCDF</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/models/normalclvmodel.hpp" line="61" column="14" bodyfile="ql/experimental/models/normalclvmodel.cpp" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_normal_c_l_v_model_1adc638b76334ff777cfcb647375761600" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::NormalCLVModel::collocationPointsX</definition>
        <argsstring>(const Date &amp;d) const</argsstring>
        <name>collocationPointsX</name>
        <qualifiedname>QuantLib::NormalCLVModel::collocationPointsX</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/models/normalclvmodel.hpp" line="64" column="15" bodyfile="ql/experimental/models/normalclvmodel.cpp" bodystart="72" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_normal_c_l_v_model_1ace6b1fb9382e08463c05b89672d31d45" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::NormalCLVModel::collocationPointsY</definition>
        <argsstring>(const Date &amp;d) const</argsstring>
        <name>collocationPointsY</name>
        <qualifiedname>QuantLib::NormalCLVModel::collocationPointsY</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/models/normalclvmodel.hpp" line="67" column="15" bodyfile="ql/experimental/models/normalclvmodel.cpp" bodystart="83" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_normal_c_l_v_model_1a69742aa147d4efc20fffca21af4dba5e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(<ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref>, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>)&gt;</type>
        <definition>std::function&lt; Real(Time, Real)&gt; QuantLib::NormalCLVModel::g</definition>
        <argsstring>() const</argsstring>
        <name>g</name>
        <qualifiedname>QuantLib::NormalCLVModel::g</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/models/normalclvmodel.hpp" line="70" column="23" bodyfile="ql/experimental/models/normalclvmodel.cpp" bodystart="95" bodyend="98"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_normal_c_l_v_model_1a7b2b780f07a371df7045343aeb1eb2bf" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::NormalCLVModel::performCalculations</definition>
        <argsstring>() const override</argsstring>
        <name>performCalculations</name>
        <qualifiedname>QuantLib::NormalCLVModel::performCalculations</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_lazy_object_1aafa5583a3743d9f93fa40da5b62e1ff8">performCalculations</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must implement any calculations which must be (re)done in order to calculate the desired results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/models/normalclvmodel.hpp" line="73" column="14" bodyfile="ql/experimental/models/normalclvmodel.cpp" bodystart="134" bodyend="136"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::NormalCLVModel</label>
        <link refid="class_quant_lib_1_1_normal_c_l_v_model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::NormalCLVModel</label>
        <link refid="class_quant_lib_1_1_normal_c_l_v_model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/models/normalclvmodel.hpp" line="48" column="5" bodyfile="ql/experimental/models/normalclvmodel.hpp" bodystart="48" bodyend="115"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_lazy_object_1a02070ea7442d30625992c1711030d4b8" prot="protected" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>alwaysForward_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a17c9433135a259e4776baec66204a484" prot="public" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>alwaysForwardNotifications</name></member>
      <member refid="class_quant_lib_1_1_normal_c_l_v_model_1a2c62202f93068fa946b08fba3274aade" prot="private" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>bsProcess_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a5244c7f83592375a0ea9048296435fd1" prot="protected" virt="virtual"><scope>QuantLib::NormalCLVModel</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a58b4986a80efa18634483a92c121e26e" prot="protected" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>calculated_</name></member>
      <member refid="class_quant_lib_1_1_normal_c_l_v_model_1a2703b4047307599022802b5d5cfe95c3" prot="public" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>cdf</name></member>
      <member refid="class_quant_lib_1_1_normal_c_l_v_model_1adc638b76334ff777cfcb647375761600" prot="public" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>collocationPointsX</name></member>
      <member refid="class_quant_lib_1_1_normal_c_l_v_model_1ace6b1fb9382e08463c05b89672d31d45" prot="public" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>collocationPointsY</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::NormalCLVModel</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1afac6ee19c3107c453e1347dd8000e023" prot="public" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>forwardFirstNotificationOnly</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7157f41e83f2c5d924f5c5bafda04d1d" prot="public" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>freeze</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7bb721fe00c6854e602758aba629ab77" prot="protected" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>frozen_</name></member>
      <member refid="class_quant_lib_1_1_normal_c_l_v_model_1a69742aa147d4efc20fffca21af4dba5e" prot="public" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>g</name></member>
      <member refid="class_quant_lib_1_1_normal_c_l_v_model_1a1796fa51d1d72ad78a488209796d48f7" prot="private" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>g_</name></member>
      <member refid="class_quant_lib_1_1_normal_c_l_v_model_1a7906d24588c844e0e74bf1ad3f2e48e6" prot="public" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>invCDF</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a0a7c5d42815a4e16ee2158e24dbfc748" prot="public" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>isCalculated</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a26f18f4ff7faaaebd8eae50e064b493e" prot="public" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>LazyObject</name></member>
      <member refid="class_quant_lib_1_1_normal_c_l_v_model_1ac0b011640da7d63fa86e172b5f0495ab" prot="private" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>maturityDates_</name></member>
      <member refid="class_quant_lib_1_1_normal_c_l_v_model_1a18d81da92814d532b16aa3e3e09ba84b" prot="private" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>maturityTimes_</name></member>
      <member refid="class_quant_lib_1_1_normal_c_l_v_model_1a14a3461899213a714fd7fe0077da1ee8" prot="public" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>NormalCLVModel</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::NormalCLVModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::NormalCLVModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::NormalCLVModel</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::NormalCLVModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::NormalCLVModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::QuantLib::Observer::"><scope>QuantLib::NormalCLVModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_normal_c_l_v_model_1a8cf17f698f064940e7817c4c5ba7295c" prot="private" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>ouProcess_</name></member>
      <member refid="class_quant_lib_1_1_normal_c_l_v_model_1a7b2b780f07a371df7045343aeb1eb2bf" prot="protected" virt="virtual"><scope>QuantLib::NormalCLVModel</scope><name>performCalculations</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a70c9b24e50132408d8d9ce4f6674662a" prot="public" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>recalculate</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_normal_c_l_v_model_1a89256af0356a7f7a76bd80e437ee11ea" prot="private" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>rndCalculator_</name></member>
      <member refid="class_quant_lib_1_1_normal_c_l_v_model_1a1fe8aebd7c592c4df076585719304be5" prot="private" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>sigma_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a2e0e4786666453024b9d4e0761f2770b" prot="public" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>unfreeze</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1adee2bf49be5c4c78736be293321a856d" prot="public" virt="virtual"><scope>QuantLib::NormalCLVModel</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_normal_c_l_v_model_1a31e7ebd5fac7bb62fb2a825239b3dfbe" prot="private" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>x_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a9d719c43bb627177a90d7d12324a2d6e" prot="public" virt="non-virtual"><scope>QuantLib::NormalCLVModel</scope><name>~LazyObject</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::NormalCLVModel</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::NormalCLVModel</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
