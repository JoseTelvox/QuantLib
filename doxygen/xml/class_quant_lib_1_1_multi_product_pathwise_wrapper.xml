<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_multi_product_pathwise_wrapper" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::MultiProductPathwiseWrapper</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_market_model_multi_product" prot="public" virt="non-virtual">QuantLib::MarketModelMultiProduct</basecompoundref>
    <includes refid="multisteppathwisewrapper_8hpp" local="no">multisteppathwisewrapper.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_multi_product_pathwise_wrapper_1a901a702ef85783a6e0f3a395816e010e" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_clone" kindref="compound">Clone</ref>&lt; <ref refid="class_quant_lib_1_1_market_model_pathwise_multi_product" kindref="compound">MarketModelPathwiseMultiProduct</ref> &gt;</type>
        <definition>Clone&lt;MarketModelPathwiseMultiProduct&gt; QuantLib::MultiProductPathwiseWrapper::innerProduct_</definition>
        <argsstring></argsstring>
        <name>innerProduct_</name>
        <qualifiedname>QuantLib::MultiProductPathwiseWrapper::innerProduct_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.hpp" line="55" column="17" bodyfile="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_multi_product_pathwise_wrapper_1a680dd3f9f0f9d0261d3516a74a52d142" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="struct_quant_lib_1_1_market_model_pathwise_multi_product_1_1_cash_flow" kindref="compound">MarketModelPathwiseMultiProduct::CashFlow</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;MarketModelPathwiseMultiProduct::CashFlow&gt; &gt; QuantLib::MultiProductPathwiseWrapper::cashFlowsGenerated_</definition>
        <argsstring></argsstring>
        <name>cashFlowsGenerated_</name>
        <qualifiedname>QuantLib::MultiProductPathwiseWrapper::cashFlowsGenerated_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.hpp" line="56" column="23" bodyfile="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_multi_product_pathwise_wrapper_1a9d8733afeb67dcd8d4e76acb71e88f05" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MultiProductPathwiseWrapper::numberOfProducts_</definition>
        <argsstring></argsstring>
        <name>numberOfProducts_</name>
        <qualifiedname>QuantLib::MultiProductPathwiseWrapper::numberOfProducts_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.hpp" line="57" column="16" bodyfile="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_multi_product_pathwise_wrapper_1ab054e6f0b8d2eda20120b6426a920921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MultiProductPathwiseWrapper::MultiProductPathwiseWrapper</definition>
        <argsstring>(const MarketModelPathwiseMultiProduct &amp;innerProduct_)</argsstring>
        <name>MultiProductPathwiseWrapper</name>
        <qualifiedname>QuantLib::MultiProductPathwiseWrapper::MultiProductPathwiseWrapper</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_market_model_pathwise_multi_product" kindref="compound">MarketModelPathwiseMultiProduct</ref> &amp;</type>
          <declname>innerProduct_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.hpp" line="42" column="9" bodyfile="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.cpp" bodystart="27" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multi_product_pathwise_wrapper_1a5cce3565f491fce472c3717bb3d02efb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt;</type>
        <definition>std::vector&lt; Time &gt; QuantLib::MultiProductPathwiseWrapper::possibleCashFlowTimes</definition>
        <argsstring>() const override</argsstring>
        <name>possibleCashFlowTimes</name>
        <qualifiedname>QuantLib::MultiProductPathwiseWrapper::possibleCashFlowTimes</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_market_model_multi_product_1aa259aa618047ab435766e71eb43f41a7">possibleCashFlowTimes</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.hpp" line="43" column="21" bodyfile="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.cpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multi_product_pathwise_wrapper_1a2685f6be748824ff4409dc643f59e2ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MultiProductPathwiseWrapper::numberOfProducts</definition>
        <argsstring>() const override</argsstring>
        <name>numberOfProducts</name>
        <qualifiedname>QuantLib::MultiProductPathwiseWrapper::numberOfProducts</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_market_model_multi_product_1a2dede52d7bff85221b39246ac4b2b08f">numberOfProducts</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.hpp" line="44" column="14" bodyfile="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.cpp" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multi_product_pathwise_wrapper_1abe164319199a6fc35c1b915b9b35b315" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MultiProductPathwiseWrapper::maxNumberOfCashFlowsPerProductPerStep</definition>
        <argsstring>() const override</argsstring>
        <name>maxNumberOfCashFlowsPerProductPerStep</name>
        <qualifiedname>QuantLib::MultiProductPathwiseWrapper::maxNumberOfCashFlowsPerProductPerStep</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_market_model_multi_product_1a12e6d1142856abb37586473cbcd2d4a1">maxNumberOfCashFlowsPerProductPerStep</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.hpp" line="45" column="14" bodyfile="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.cpp" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multi_product_pathwise_wrapper_1a933138c0ddfc6ba2fcde10709894dd4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::MultiProductPathwiseWrapper::reset</definition>
        <argsstring>() override</argsstring>
        <name>reset</name>
        <qualifiedname>QuantLib::MultiProductPathwiseWrapper::reset</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_market_model_multi_product_1a1f1a0d792039158a3d70f79baa20e020">reset</reimplements>
        <briefdescription>
<para>during simulation put product at start of path </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.hpp" line="46" column="14" bodyfile="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.cpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multi_product_pathwise_wrapper_1a7f46817060c08eae441b0ca8cb9f352d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool QuantLib::MultiProductPathwiseWrapper::nextTimeStep</definition>
        <argsstring>(const CurveState &amp;currentState, std::vector&lt; Size &gt; &amp;numberCashFlowsThisStep, std::vector&lt; std::vector&lt; CashFlow &gt; &gt; &amp;cashFlowsGenerated) override</argsstring>
        <name>nextTimeStep</name>
        <qualifiedname>QuantLib::MultiProductPathwiseWrapper::nextTimeStep</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_market_model_multi_product_1a4f02e7bcdb5c23c431183fb3a499ca28">nextTimeStep</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_curve_state" kindref="compound">CurveState</ref> &amp;</type>
          <declname>currentState</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt; &amp;</type>
          <declname>numberCashFlowsThisStep</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="struct_quant_lib_1_1_market_model_multi_product_1_1_cash_flow" kindref="compound">CashFlow</ref> &gt; &gt; &amp;</type>
          <declname>cashFlowsGenerated</declname>
        </param>
        <briefdescription>
<para>return value indicates whether path is finished, TRUE means done </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.hpp" line="47" column="14" bodyfile="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.cpp" bodystart="57" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multi_product_pathwise_wrapper_1a5d5073d2f6bdb8939c728f152b93beb2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="class_quant_lib_1_1_market_model_multi_product" kindref="compound">MarketModelMultiProduct</ref> &gt;</type>
        <definition>std::unique_ptr&lt; MarketModelMultiProduct &gt; QuantLib::MultiProductPathwiseWrapper::clone</definition>
        <argsstring>() const override</argsstring>
        <name>clone</name>
        <qualifiedname>QuantLib::MultiProductPathwiseWrapper::clone</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_market_model_multi_product_1ad4ded115a66268f3e9d92efebbda6ba1">clone</reimplements>
        <briefdescription>
<para>returns a newly-allocated copy of itself </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.hpp" line="50" column="25" bodyfile="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.cpp" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multi_product_pathwise_wrapper_1a706b623265de1880eab1158170b9da56" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt;</type>
        <definition>std::vector&lt; Size &gt; QuantLib::MultiProductPathwiseWrapper::suggestedNumeraires</definition>
        <argsstring>() const override</argsstring>
        <name>suggestedNumeraires</name>
        <qualifiedname>QuantLib::MultiProductPathwiseWrapper::suggestedNumeraires</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_market_model_multi_product_1a488a02acf72b6641ae2b20ff86e73b46">suggestedNumeraires</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.hpp" line="51" column="21" bodyfile="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.cpp" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multi_product_pathwise_wrapper_1abe0f76e578eac99b8afc3a38eb211aba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="class_quant_lib_1_1_evolution_description" kindref="compound">EvolutionDescription</ref> &amp;</type>
        <definition>const EvolutionDescription &amp; QuantLib::MultiProductPathwiseWrapper::evolution</definition>
        <argsstring>() const override</argsstring>
        <name>evolution</name>
        <qualifiedname>QuantLib::MultiProductPathwiseWrapper::evolution</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_market_model_multi_product_1a7aea4bb45405d468cda5739f4d63da8b">evolution</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.hpp" line="52" column="36" bodyfile="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.cpp" bodystart="81" bodyend="84"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>MultiStepPathwiseWrapper Pathwise products do everything that ordinary products do and more. This lets you treat a pathwise product as an ordinary product. So you only have to write the product once.</para>
<para>Tested in MarketModels::testInverseFloater() </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QuantLib::MarketModelMultiProduct</label>
        <link refid="class_quant_lib_1_1_market_model_multi_product"/>
      </node>
      <node id="1">
        <label>QuantLib::MultiProductPathwiseWrapper</label>
        <link refid="class_quant_lib_1_1_multi_product_pathwise_wrapper"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>QuantLib::MarketModelMultiProduct</label>
        <link refid="class_quant_lib_1_1_market_model_multi_product"/>
      </node>
      <node id="1">
        <label>QuantLib::MultiProductPathwiseWrapper</label>
        <link refid="class_quant_lib_1_1_multi_product_pathwise_wrapper"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.hpp" line="39" column="5" bodyfile="ql/models/marketmodels/products/multistep/multisteppathwisewrapper.hpp" bodystart="40" bodyend="59"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_multi_product_pathwise_wrapper_1a680dd3f9f0f9d0261d3516a74a52d142" prot="private" virt="non-virtual"><scope>QuantLib::MultiProductPathwiseWrapper</scope><name>cashFlowsGenerated_</name></member>
      <member refid="class_quant_lib_1_1_multi_product_pathwise_wrapper_1a5d5073d2f6bdb8939c728f152b93beb2" prot="public" virt="virtual"><scope>QuantLib::MultiProductPathwiseWrapper</scope><name>clone</name></member>
      <member refid="class_quant_lib_1_1_multi_product_pathwise_wrapper_1abe0f76e578eac99b8afc3a38eb211aba" prot="public" virt="virtual"><scope>QuantLib::MultiProductPathwiseWrapper</scope><name>evolution</name></member>
      <member refid="class_quant_lib_1_1_multi_product_pathwise_wrapper_1a901a702ef85783a6e0f3a395816e010e" prot="private" virt="non-virtual"><scope>QuantLib::MultiProductPathwiseWrapper</scope><name>innerProduct_</name></member>
      <member refid="class_quant_lib_1_1_multi_product_pathwise_wrapper_1abe164319199a6fc35c1b915b9b35b315" prot="public" virt="virtual"><scope>QuantLib::MultiProductPathwiseWrapper</scope><name>maxNumberOfCashFlowsPerProductPerStep</name></member>
      <member refid="class_quant_lib_1_1_multi_product_pathwise_wrapper_1ab054e6f0b8d2eda20120b6426a920921" prot="public" virt="non-virtual"><scope>QuantLib::MultiProductPathwiseWrapper</scope><name>MultiProductPathwiseWrapper</name></member>
      <member refid="class_quant_lib_1_1_multi_product_pathwise_wrapper_1a7f46817060c08eae441b0ca8cb9f352d" prot="public" virt="virtual"><scope>QuantLib::MultiProductPathwiseWrapper</scope><name>nextTimeStep</name></member>
      <member refid="class_quant_lib_1_1_multi_product_pathwise_wrapper_1a2685f6be748824ff4409dc643f59e2ef" prot="public" virt="virtual"><scope>QuantLib::MultiProductPathwiseWrapper</scope><name>numberOfProducts</name></member>
      <member refid="class_quant_lib_1_1_multi_product_pathwise_wrapper_1a9d8733afeb67dcd8d4e76acb71e88f05" prot="private" virt="non-virtual"><scope>QuantLib::MultiProductPathwiseWrapper</scope><name>numberOfProducts_</name></member>
      <member refid="class_quant_lib_1_1_multi_product_pathwise_wrapper_1a5cce3565f491fce472c3717bb3d02efb" prot="public" virt="virtual"><scope>QuantLib::MultiProductPathwiseWrapper</scope><name>possibleCashFlowTimes</name></member>
      <member refid="class_quant_lib_1_1_multi_product_pathwise_wrapper_1a933138c0ddfc6ba2fcde10709894dd4a" prot="public" virt="virtual"><scope>QuantLib::MultiProductPathwiseWrapper</scope><name>reset</name></member>
      <member refid="class_quant_lib_1_1_multi_product_pathwise_wrapper_1a706b623265de1880eab1158170b9da56" prot="public" virt="virtual"><scope>QuantLib::MultiProductPathwiseWrapper</scope><name>suggestedNumeraires</name></member>
      <member refid="class_quant_lib_1_1_market_model_multi_product_1ac7c964a1ca915e17b72f560e1dc52883" prot="public" virt="virtual"><scope>QuantLib::MultiProductPathwiseWrapper</scope><name>~MarketModelMultiProduct</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
