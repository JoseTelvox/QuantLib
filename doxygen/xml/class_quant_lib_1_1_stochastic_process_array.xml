<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_stochastic_process_array" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::StochasticProcessArray</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_stochastic_process" prot="public" virt="non-virtual">QuantLib::StochasticProcess</basecompoundref>
    <includes refid="stochasticprocessarray_8hpp" local="no">stochasticprocessarray.hpp</includes>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_stochastic_process_array_1aa75a7416dbdc23ebb1905d8196c66587" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_stochastic_process1_d" kindref="compound">StochasticProcess1D</ref> &gt; &gt;</type>
        <definition>std::vector&lt;ext::shared_ptr&lt;StochasticProcess1D&gt; &gt; QuantLib::StochasticProcessArray::processes_</definition>
        <argsstring></argsstring>
        <name>processes_</name>
        <qualifiedname>QuantLib::StochasticProcessArray::processes_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/stochasticprocessarray.hpp" line="58" column="21" bodyfile="ql/processes/stochasticprocessarray.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_stochastic_process_array_1a38ba8a5a4acdebefabe45a47a23f584e" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::StochasticProcessArray::sqrtCorrelation_</definition>
        <argsstring></argsstring>
        <name>sqrtCorrelation_</name>
        <qualifiedname>QuantLib::StochasticProcessArray::sqrtCorrelation_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/stochasticprocessarray.hpp" line="59" column="16" bodyfile="ql/processes/stochasticprocessarray.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_array_1a68fef4266f7d6128f7c107fb3367bf95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::StochasticProcessArray::StochasticProcessArray</definition>
        <argsstring>(const std::vector&lt; ext::shared_ptr&lt; StochasticProcess1D &gt; &gt; &amp;, const Matrix &amp;correlation)</argsstring>
        <name>StochasticProcessArray</name>
        <qualifiedname>QuantLib::StochasticProcessArray::StochasticProcessArray</qualifiedname>
        <param>
          <type>const std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_stochastic_process1_d" kindref="compound">StochasticProcess1D</ref> &gt; &gt; &amp;</type>
          <defname>processes</defname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>correlation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/stochasticprocessarray.hpp" line="37" column="9" bodyfile="ql/processes/stochasticprocessarray.cpp" bodystart="26" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_array_1ae76f170bd674159bd4b271c01ed8863b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::StochasticProcessArray::size</definition>
        <argsstring>() const override</argsstring>
        <name>size</name>
        <qualifiedname>QuantLib::StochasticProcessArray::size</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a92e9b468d781e9ceb566d6e546113540">size</reimplements>
        <briefdescription>
<para>returns the number of dimensions of the stochastic process </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/stochasticprocessarray.hpp" line="41" column="14" bodyfile="ql/processes/stochasticprocessarray.cpp" bodystart="42" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_array_1a46fee2e8c0739e01cc3d0d9980eaae36" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::StochasticProcessArray::initialValues</definition>
        <argsstring>() const override</argsstring>
        <name>initialValues</name>
        <qualifiedname>QuantLib::StochasticProcessArray::initialValues</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a4277a74107d071252a2445d23c90b654">initialValues</reimplements>
        <briefdescription>
<para>returns the initial values of the state variables </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/stochasticprocessarray.hpp" line="42" column="15" bodyfile="ql/processes/stochasticprocessarray.cpp" bodystart="46" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_array_1adc37a3c3361fb193e6c632269fa33398" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::StochasticProcessArray::drift</definition>
        <argsstring>(Time t, const Array &amp;x) const override</argsstring>
        <name>drift</name>
        <qualifiedname>QuantLib::StochasticProcessArray::drift</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a467056bfaa17a1ea3debd1dc21402bb8">drift</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the drift part of the equation, i.e., <formula id="468">$ \mu(t, \mathrm{x}_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/stochasticprocessarray.hpp" line="43" column="15" bodyfile="ql/processes/stochasticprocessarray.cpp" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_array_1aae5a87966f02f50f1b687a9576d3ffbf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::StochasticProcessArray::expectation</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt) const override</argsstring>
        <name>expectation</name>
        <qualifiedname>QuantLib::StochasticProcessArray::expectation</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1af225d654ba08bc09bf2ecab7d787ca9b">expectation</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the expectation  <formula id="470">$ E(\mathrm{x}_{t_0 + \Delta t}
    | \mathrm{x}_{t_0} = \mathrm{x}_0) $</formula> of the process after a time interval <formula id="471">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/stochasticprocessarray.hpp" line="44" column="15" bodyfile="ql/processes/stochasticprocessarray.cpp" bodystart="73" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_array_1af6c78a889bf329d531ac10ba77a80bb5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::StochasticProcessArray::diffusion</definition>
        <argsstring>(Time t, const Array &amp;x) const override</argsstring>
        <name>diffusion</name>
        <qualifiedname>QuantLib::StochasticProcessArray::diffusion</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a45df6a954a177df19d31de5a7f2bef35">diffusion</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the diffusion part of the equation, i.e. <formula id="469">$ \sigma(t, \mathrm{x}_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/stochasticprocessarray.hpp" line="46" column="16" bodyfile="ql/processes/stochasticprocessarray.cpp" bodystart="61" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_array_1a5ff1a948c3ac857bb2d02970aad48f60" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::StochasticProcessArray::covariance</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt) const override</argsstring>
        <name>covariance</name>
        <qualifiedname>QuantLib::StochasticProcessArray::covariance</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a3a92717719d8621148989905a132c5e1">covariance</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the covariance  <formula id="473">$ V(\mathrm{x}_{t_0 + \Delta t}
    | \mathrm{x}_{t_0} = \mathrm{x}_0) $</formula> of the process after a time interval <formula id="471">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/stochasticprocessarray.hpp" line="47" column="16" bodyfile="ql/processes/stochasticprocessarray.cpp" bodystart="95" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_array_1aad7fe05d67a2718e6545cb9d6c48b011" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::StochasticProcessArray::stdDeviation</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt) const override</argsstring>
        <name>stdDeviation</name>
        <qualifiedname>QuantLib::StochasticProcessArray::stdDeviation</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a47e9f5540b2ca9c32650dc81d051ca86">stdDeviation</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the standard deviation  <formula id="472">$ S(\mathrm{x}_{t_0 + \Delta t}
    | \mathrm{x}_{t_0} = \mathrm{x}_0) $</formula> of the process after a time interval <formula id="471">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/stochasticprocessarray.hpp" line="48" column="16" bodyfile="ql/processes/stochasticprocessarray.cpp" bodystart="82" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_array_1a8997758462a3022c550c42c83f4f9740" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::StochasticProcessArray::apply</definition>
        <argsstring>(const Array &amp;x0, const Array &amp;dx) const override</argsstring>
        <name>apply</name>
        <qualifiedname>QuantLib::StochasticProcessArray::apply</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1ae2e3d89d3595fcd73be5e6e7e195f3e7">apply</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>dx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>applies a change to the asset value. By default, it returns <formula id="477">$ \mathrm{x} + \Delta \mathrm{x} $</formula>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/stochasticprocessarray.hpp" line="50" column="15" bodyfile="ql/processes/stochasticprocessarray.cpp" bodystart="112" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_array_1ac9ddc7d0f596d17ee898873c0d574082" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::StochasticProcessArray::evolve</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt, const Array &amp;dw) const override</argsstring>
        <name>evolve</name>
        <qualifiedname>QuantLib::StochasticProcessArray::evolve</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a8d99a715b297d5b6543b1d303a6002c0">evolve</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>dw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the asset value after a time interval  <formula id="474">$ \Delta t
$</formula> according to the given discretization. By default, it returns    <formula id="475">\[E(\mathrm{x}_0,t_0,\Delta t) +
S(\mathrm{x}_0,t_0,\Delta t) \cdot \Delta \mathrm{w}
\]</formula> where <formula id="476">$ E $</formula> is the expectation and <formula id="290">$ S $</formula> the standard deviation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/stochasticprocessarray.hpp" line="51" column="15" bodyfile="ql/processes/stochasticprocessarray.cpp" bodystart="102" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_array_1abcad9ab6e2b6fc7dfd4b403cdb8a64bf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        <definition>Time QuantLib::StochasticProcessArray::time</definition>
        <argsstring>(const Date &amp;) const override</argsstring>
        <name>time</name>
        <qualifiedname>QuantLib::StochasticProcessArray::time</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a39c5f08a3779665f9185a558d2b8418d">time</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the time value corresponding to the given date in the reference system of the stochastic process.</para>
<para><simplesect kind="note"><para>As a number of processes might not need this functionality, a default implementation is given which raises an exception. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/stochasticprocessarray.hpp" line="53" column="14" bodyfile="ql/processes/stochasticprocessarray.cpp" bodystart="120" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_array_1af9cd34b20802c82afab4660a2c91f156" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_stochastic_process1_d" kindref="compound">StochasticProcess1D</ref> &gt; &amp;</type>
        <definition>const ext::shared_ptr&lt; StochasticProcess1D &gt; &amp; QuantLib::StochasticProcessArray::process</definition>
        <argsstring>(Size i) const</argsstring>
        <name>process</name>
        <qualifiedname>QuantLib::StochasticProcessArray::process</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/stochasticprocessarray.hpp" line="55" column="31" bodyfile="ql/processes/stochasticprocessarray.cpp" bodystart="125" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_array_1ae49bf055df2ccbb4f66589a84fbdd393" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::StochasticProcessArray::correlation</definition>
        <argsstring>() const</argsstring>
        <name>correlation</name>
        <qualifiedname>QuantLib::StochasticProcessArray::correlation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/stochasticprocessarray.hpp" line="56" column="16" bodyfile="ql/processes/stochasticprocessarray.cpp" bodystart="129" bodyend="131"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Array of correlated 1-D stochastic processes </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="3">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::StochasticProcess</label>
        <link refid="class_quant_lib_1_1_stochastic_process"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::StochasticProcessArray</label>
        <link refid="class_quant_lib_1_1_stochastic_process_array"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>QuantLib::Matrix</label>
        <link refid="class_quant_lib_1_1_matrix"/>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="3">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::StochasticProcess</label>
        <link refid="class_quant_lib_1_1_stochastic_process"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::StochasticProcessArray</label>
        <link refid="class_quant_lib_1_1_stochastic_process_array"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>sqrtCorrelation_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/processes/stochasticprocessarray.hpp" line="35" column="5" bodyfile="ql/processes/stochasticprocessarray.hpp" bodystart="35" bodyend="60"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_stochastic_process_array_1a8997758462a3022c550c42c83f4f9740" prot="public" virt="virtual"><scope>QuantLib::StochasticProcessArray</scope><name>apply</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_array_1ae49bf055df2ccbb4f66589a84fbdd393" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcessArray</scope><name>correlation</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_array_1a5ff1a948c3ac857bb2d02970aad48f60" prot="public" virt="virtual"><scope>QuantLib::StochasticProcessArray</scope><name>covariance</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::StochasticProcessArray</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_array_1af6c78a889bf329d531ac10ba77a80bb5" prot="public" virt="virtual"><scope>QuantLib::StochasticProcessArray</scope><name>diffusion</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a98cd541abbfd37f62d10d3ec2ed214be" prot="protected" virt="non-virtual"><scope>QuantLib::StochasticProcessArray</scope><name>discretization_</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_array_1adc37a3c3361fb193e6c632269fa33398" prot="public" virt="virtual"><scope>QuantLib::StochasticProcessArray</scope><name>drift</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_array_1ac9ddc7d0f596d17ee898873c0d574082" prot="public" virt="virtual"><scope>QuantLib::StochasticProcessArray</scope><name>evolve</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_array_1aae5a87966f02f50f1b687a9576d3ffbf" prot="public" virt="virtual"><scope>QuantLib::StochasticProcessArray</scope><name>expectation</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0346d38598fb9a5a1cd58024f05081aa" prot="public" virt="virtual"><scope>QuantLib::StochasticProcessArray</scope><name>factors</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_array_1a46fee2e8c0739e01cc3d0d9980eaae36" prot="public" virt="virtual"><scope>QuantLib::StochasticProcessArray</scope><name>initialValues</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::StochasticProcessArray</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcessArray</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcessArray</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcessArray</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcessArray</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::StochasticProcessArray</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::StochasticProcessArray</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::StochasticProcessArray</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::StochasticProcessArray</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::StochasticProcessArray</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_array_1af9cd34b20802c82afab4660a2c91f156" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcessArray</scope><name>process</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_array_1aa75a7416dbdc23ebb1905d8196c66587" prot="protected" virt="non-virtual"><scope>QuantLib::StochasticProcessArray</scope><name>processes_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcessArray</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcessArray</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_array_1ae76f170bd674159bd4b271c01ed8863b" prot="public" virt="virtual"><scope>QuantLib::StochasticProcessArray</scope><name>size</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_array_1a38ba8a5a4acdebefabe45a47a23f584e" prot="protected" virt="non-virtual"><scope>QuantLib::StochasticProcessArray</scope><name>sqrtCorrelation_</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_array_1aad7fe05d67a2718e6545cb9d6c48b011" prot="public" virt="virtual"><scope>QuantLib::StochasticProcessArray</scope><name>stdDeviation</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a2dd24b794a6b320bc60ba9e1a87bf48e" prot="protected" virt="non-virtual"><scope>QuantLib::StochasticProcessArray</scope><name>StochasticProcess</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a957ee9776d6048835106ea29ea44927f" prot="protected" virt="non-virtual"><scope>QuantLib::StochasticProcessArray</scope><name>StochasticProcess</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_array_1a68fef4266f7d6128f7c107fb3367bf95" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcessArray</scope><name>StochasticProcessArray</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_array_1abcad9ab6e2b6fc7dfd4b403cdb8a64bf" prot="public" virt="virtual"><scope>QuantLib::StochasticProcessArray</scope><name>time</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcessArray</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcessArray</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0f22628658fd2dc702c13c354ef3244e" prot="public" virt="virtual"><scope>QuantLib::StochasticProcessArray</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::StochasticProcessArray</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::StochasticProcessArray</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0e2b6a14e675db5abd0ab8965ff7b2c3" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcessArray</scope><name>~StochasticProcess</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
