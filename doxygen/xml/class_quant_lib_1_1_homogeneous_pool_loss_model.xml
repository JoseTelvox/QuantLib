<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_homogeneous_pool_loss_model" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::HomogeneousPoolLossModel</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_default_loss_model" prot="public" virt="non-virtual">QuantLib::DefaultLossModel</basecompoundref>
    <includes refid="homogeneouspooldef_8hpp" local="no">homogeneouspooldef.hpp</includes>
    <templateparamlist>
      <param>
        <type>class copulaPolicy</type>
      </param>
    </templateparamlist>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_homogeneous_pool_loss_model_1af3a64ff7fb0e4f76e29fffd02458e31a" prot="protected" static="no" mutable="no">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_constant_loss_latentmodel" kindref="compound">ConstantLossLatentmodel</ref>&lt; copulaPolicy &gt; &gt;</type>
        <definition>const ext::shared_ptr&lt;ConstantLossLatentmodel&lt;copulaPolicy&gt; &gt; QuantLib::HomogeneousPoolLossModel&lt; copulaPolicy &gt;::copula_</definition>
        <argsstring></argsstring>
        <name>copula_</name>
        <qualifiedname>QuantLib::HomogeneousPoolLossModel::copula_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/homogeneouspooldef.hpp" line="85" column="31" bodyfile="ql/experimental/credit/homogeneouspooldef.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_homogeneous_pool_loss_model_1acdb57084c8e17b473007b0cea0726076" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::HomogeneousPoolLossModel&lt; copulaPolicy &gt;::nBuckets_</definition>
        <argsstring></argsstring>
        <name>nBuckets_</name>
        <qualifiedname>QuantLib::HomogeneousPoolLossModel::nBuckets_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/homogeneouspooldef.hpp" line="86" column="14" bodyfile="ql/experimental/credit/homogeneouspooldef.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_homogeneous_pool_loss_model_1a74817d49660d5678bcfd724c553a94e2" prot="protected" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::HomogeneousPoolLossModel&lt; copulaPolicy &gt;::attach_</definition>
        <argsstring></argsstring>
        <name>attach_</name>
        <qualifiedname>QuantLib::HomogeneousPoolLossModel::attach_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/homogeneouspooldef.hpp" line="87" column="22" bodyfile="ql/experimental/credit/homogeneouspooldef.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_homogeneous_pool_loss_model_1a98cd73a1ca5034f6e702af64deab9276" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::HomogeneousPoolLossModel&lt; copulaPolicy &gt;::detach_</definition>
        <argsstring></argsstring>
        <name>detach_</name>
        <qualifiedname>QuantLib::HomogeneousPoolLossModel::detach_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/homogeneouspooldef.hpp" line="87" column="30" bodyfile="ql/experimental/credit/homogeneouspooldef.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_homogeneous_pool_loss_model_1a905806844e0f24f8da60a22f2f045ea9" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::HomogeneousPoolLossModel&lt; copulaPolicy &gt;::notional_</definition>
        <argsstring></argsstring>
        <name>notional_</name>
        <qualifiedname>QuantLib::HomogeneousPoolLossModel::notional_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/homogeneouspooldef.hpp" line="87" column="38" bodyfile="ql/experimental/credit/homogeneouspooldef.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_homogeneous_pool_loss_model_1ade7eb38dca09e786ec2167bcd45c4c8c" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::HomogeneousPoolLossModel&lt; copulaPolicy &gt;::attachAmount_</definition>
        <argsstring></argsstring>
        <name>attachAmount_</name>
        <qualifiedname>QuantLib::HomogeneousPoolLossModel::attachAmount_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/homogeneouspooldef.hpp" line="87" column="48" bodyfile="ql/experimental/credit/homogeneouspooldef.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_homogeneous_pool_loss_model_1ae49b49408151d79c0482e7d39ee72902" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::HomogeneousPoolLossModel&lt; copulaPolicy &gt;::detachAmount_</definition>
        <argsstring></argsstring>
        <name>detachAmount_</name>
        <qualifiedname>QuantLib::HomogeneousPoolLossModel::detachAmount_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/homogeneouspooldef.hpp" line="87" column="62" bodyfile="ql/experimental/credit/homogeneouspooldef.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_homogeneous_pool_loss_model_1afb324805c9f7487aab6eacbbcf9bb911" prot="protected" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::HomogeneousPoolLossModel&lt; copulaPolicy &gt;::notionals_</definition>
        <argsstring></argsstring>
        <name>notionals_</name>
        <qualifiedname>QuantLib::HomogeneousPoolLossModel::notionals_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/homogeneouspooldef.hpp" line="88" column="29" bodyfile="ql/experimental/credit/homogeneouspooldef.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_homogeneous_pool_loss_model_1a92575086c15360e022af59645c159ad1" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::HomogeneousPoolLossModel&lt; copulaPolicy &gt;::max_</definition>
        <argsstring></argsstring>
        <name>max_</name>
        <qualifiedname>QuantLib::HomogeneousPoolLossModel::max_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/homogeneouspooldef.hpp" line="93" column="20" bodyfile="ql/experimental/credit/homogeneouspooldef.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_homogeneous_pool_loss_model_1a70679b207d9a0cb53883f136dcedd435" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::HomogeneousPoolLossModel&lt; copulaPolicy &gt;::min_</definition>
        <argsstring></argsstring>
        <name>min_</name>
        <qualifiedname>QuantLib::HomogeneousPoolLossModel::min_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/homogeneouspooldef.hpp" line="94" column="20" bodyfile="ql/experimental/credit/homogeneouspooldef.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_homogeneous_pool_loss_model_1aa07d5bc8912a32e4eee46660a6ccc822" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>const Size QuantLib::HomogeneousPoolLossModel&lt; copulaPolicy &gt;::nSteps_</definition>
        <argsstring></argsstring>
        <name>nSteps_</name>
        <qualifiedname>QuantLib::HomogeneousPoolLossModel::nSteps_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/homogeneouspooldef.hpp" line="95" column="20" bodyfile="ql/experimental/credit/homogeneouspooldef.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_homogeneous_pool_loss_model_1ad47571fbd81c9c9e59b0c6e5ecb6f479" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::HomogeneousPoolLossModel&lt; copulaPolicy &gt;::delta_</definition>
        <argsstring></argsstring>
        <name>delta_</name>
        <qualifiedname>QuantLib::HomogeneousPoolLossModel::delta_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/homogeneouspooldef.hpp" line="96" column="20" bodyfile="ql/experimental/credit/homogeneouspooldef.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_homogeneous_pool_loss_model_1a6d614077156a82288626b268d133c081" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::HomogeneousPoolLossModel&lt; CP &gt;::resetModel</definition>
        <argsstring>() override</argsstring>
        <name>resetModel</name>
        <qualifiedname>QuantLib::HomogeneousPoolLossModel::resetModel</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1ac32cbab626c8ba8ebb0dcace3eed4a38">resetModel</reimplements>
        <briefdescription>
<para>Concrete models do now any updates/inits they need on basket reset. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/homogeneouspooldef.hpp" line="45" column="12" bodyfile="ql/experimental/credit/homogeneouspooldef.hpp" bodystart="106" bodyend="120"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_homogeneous_pool_loss_model_1a8ef16cc51d06221d68f809cecaf323c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::HomogeneousPoolLossModel&lt; copulaPolicy &gt;::HomogeneousPoolLossModel</definition>
        <argsstring>(const ext::shared_ptr&lt; ConstantLossLatentmodel&lt; copulaPolicy &gt; &gt; &amp;copula, Size nBuckets, Real max=5., Real min=-5., Size nSteps=50)</argsstring>
        <name>HomogeneousPoolLossModel</name>
        <qualifiedname>QuantLib::HomogeneousPoolLossModel::HomogeneousPoolLossModel</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_constant_loss_latentmodel" kindref="compound">ConstantLossLatentmodel</ref>&lt; copulaPolicy &gt; &gt; &amp;</type>
          <declname>copula</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>nBuckets</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>max</declname>
          <defval>5.</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>min</declname>
          <defval>-5.</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>nSteps</declname>
          <defval>50</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/homogeneouspooldef.hpp" line="48" column="9" bodyfile="ql/experimental/credit/homogeneouspooldef.hpp" bodystart="48" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_homogeneous_pool_loss_model_1a9c911f7f1be1d27ed205d250d4d99fb9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::HomogeneousPoolLossModel&lt; copulaPolicy &gt;::expectedTrancheLoss</definition>
        <argsstring>(const Date &amp;d) const override</argsstring>
        <name>expectedTrancheLoss</name>
        <qualifiedname>QuantLib::HomogeneousPoolLossModel::expectedTrancheLoss</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1a258763493804fe4c84b533716df00991">expectedTrancheLoss</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/homogeneouspooldef.hpp" line="65" column="12" bodyfile="ql/experimental/credit/homogeneouspooldef.hpp" bodystart="65" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_homogeneous_pool_loss_model_1a45d1c40741d55333068662c3a8050899" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::HomogeneousPoolLossModel&lt; copulaPolicy &gt;::percentile</definition>
        <argsstring>(const Date &amp;d, Real percentile) const override</argsstring>
        <name>percentile</name>
        <qualifiedname>QuantLib::HomogeneousPoolLossModel::percentile</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1ac7142d4e72958aef5a602167a138973e">percentile</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>percentile</declname>
        </param>
        <briefdescription>
<para>Value at Risk given a default loss percentile. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/homogeneouspooldef.hpp" line="74" column="12" bodyfile="ql/experimental/credit/homogeneouspooldef.hpp" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_homogeneous_pool_loss_model_1aa9b71d1eefd33575ad6a98d421c946f0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::HomogeneousPoolLossModel&lt; copulaPolicy &gt;::expectedShortfall</definition>
        <argsstring>(const Date &amp;d, Probability percentile) const override</argsstring>
        <name>expectedShortfall</name>
        <qualifiedname>QuantLib::HomogeneousPoolLossModel::expectedShortfall</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1a60bd1a166744f4de455cae1c1c83f6a1">expectedShortfall</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
          <declname>percentile</declname>
        </param>
        <briefdescription>
<para>Expected shortfall given a default loss percentile. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/homogeneouspooldef.hpp" line="78" column="12" bodyfile="ql/experimental/credit/homogeneouspooldef.hpp" bodystart="78" bodyend="82"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_homogeneous_pool_loss_model_1ac9f1a16f7069ab5f850d6c1e30260813" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_distribution" kindref="compound">Distribution</ref></type>
        <definition>Distribution QuantLib::HomogeneousPoolLossModel&lt; CP &gt;::lossDistrib</definition>
        <argsstring>(const Date &amp;d) const</argsstring>
        <name>lossDistrib</name>
        <qualifiedname>QuantLib::HomogeneousPoolLossModel::lossDistrib</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/homogeneouspooldef.hpp" line="63" column="22" bodyfile="ql/experimental/credit/homogeneouspooldef.hpp" bodystart="123" bodyend="160"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para><ref refid="struct_quant_lib_1_1_default" kindref="compound">Default</ref> loss distribution convolution for finite homogeneous pool. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QuantLib::DefaultLossModel</label>
        <link refid="class_quant_lib_1_1_default_loss_model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::HomogeneousPoolLossModel&lt; copulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_homogeneous_pool_loss_model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>QuantLib::DefaultLossModel</label>
        <link refid="class_quant_lib_1_1_default_loss_model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>basket_</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Handle&lt; QuantLib::Basket &gt;</label>
        <link refid="class_quant_lib_1_1_handle"/>
      </node>
      <node id="1">
        <label>QuantLib::HomogeneousPoolLossModel&lt; copulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_homogeneous_pool_loss_model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::RelinkableHandle&lt; QuantLib::Basket &gt;</label>
        <link refid="class_quant_lib_1_1_relinkable_handle"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/credit/homogeneouspooldef.hpp" line="43" column="5" bodyfile="ql/experimental/credit/homogeneouspooldef.hpp" bodystart="43" bodyend="97"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_homogeneous_pool_loss_model_1a74817d49660d5678bcfd724c553a94e2" prot="protected" virt="non-virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>attach_</name></member>
      <member refid="class_quant_lib_1_1_homogeneous_pool_loss_model_1ade7eb38dca09e786ec2167bcd45c4c8c" prot="protected" virt="non-virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>attachAmount_</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ad2700ffb7198321f52fdeb42e9a8e043" prot="protected" virt="non-virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>basket_</name></member>
      <member refid="class_quant_lib_1_1_homogeneous_pool_loss_model_1af3a64ff7fb0e4f76e29fffd02458e31a" prot="protected" virt="non-virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>copula_</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1a25ed3ba8a38c4afaca5dca5b8cfd1d7d" prot="protected" virt="virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>defaultCorrelation</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ac51090f561e4372e495bfa9edee0000b" prot="protected" virt="non-virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>DefaultLossModel</name></member>
      <member refid="class_quant_lib_1_1_homogeneous_pool_loss_model_1ad47571fbd81c9c9e59b0c6e5ecb6f479" prot="private" virt="non-virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>delta_</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ab57e81d3fdd238c0cb19db2808bc5b59" prot="protected" virt="virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>densityTrancheLoss</name></member>
      <member refid="class_quant_lib_1_1_homogeneous_pool_loss_model_1a98cd73a1ca5034f6e702af64deab9276" prot="protected" virt="non-virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>detach_</name></member>
      <member refid="class_quant_lib_1_1_homogeneous_pool_loss_model_1ae49b49408151d79c0482e7d39ee72902" prot="protected" virt="non-virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>detachAmount_</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1afd0d4637df1423173d5efc758a16f354" prot="protected" virt="virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>expectedRecovery</name></member>
      <member refid="class_quant_lib_1_1_homogeneous_pool_loss_model_1aa9b71d1eefd33575ad6a98d421c946f0" prot="public" virt="virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>expectedShortfall</name></member>
      <member refid="class_quant_lib_1_1_homogeneous_pool_loss_model_1a9c911f7f1be1d27ed205d250d4d99fb9" prot="public" virt="virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>expectedTrancheLoss</name></member>
      <member refid="class_quant_lib_1_1_homogeneous_pool_loss_model_1a8ef16cc51d06221d68f809cecaf323c6" prot="public" virt="non-virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>HomogeneousPoolLossModel</name></member>
      <member refid="class_quant_lib_1_1_homogeneous_pool_loss_model_1ac9f1a16f7069ab5f850d6c1e30260813" prot="protected" virt="non-virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>lossDistrib</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1aeff66ecf317c1dc23713424daf563f88" prot="protected" virt="virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>lossDistribution</name></member>
      <member refid="class_quant_lib_1_1_homogeneous_pool_loss_model_1a92575086c15360e022af59645c159ad1" prot="private" virt="non-virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>max_</name></member>
      <member refid="class_quant_lib_1_1_homogeneous_pool_loss_model_1a70679b207d9a0cb53883f136dcedd435" prot="private" virt="non-virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>min_</name></member>
      <member refid="class_quant_lib_1_1_homogeneous_pool_loss_model_1acdb57084c8e17b473007b0cea0726076" prot="protected" virt="non-virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>nBuckets_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_homogeneous_pool_loss_model_1a905806844e0f24f8da60a22f2f045ea9" prot="protected" virt="non-virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>notional_</name></member>
      <member refid="class_quant_lib_1_1_homogeneous_pool_loss_model_1afb324805c9f7487aab6eacbbcf9bb911" prot="protected" virt="non-virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>notionals_</name></member>
      <member refid="class_quant_lib_1_1_homogeneous_pool_loss_model_1aa07d5bc8912a32e4eee46660a6ccc822" prot="private" virt="non-virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>nSteps_</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_homogeneous_pool_loss_model_1a45d1c40741d55333068662c3a8050899" prot="public" virt="virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>percentile</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ab46164d907ae7772c0a5f6788ce4568b" prot="protected" virt="virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>probAtLeastNEvents</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1a922ca5f0ea73b3a33420fbcfb2556e93" prot="protected" virt="virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>probOverLoss</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ab8053b0ecb53c758939cf5c7a33fb328" prot="protected" virt="virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>probsBeingNthEvent</name></member>
      <member refid="class_quant_lib_1_1_homogeneous_pool_loss_model_1a6d614077156a82288626b268d133c081" prot="private" virt="virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>resetModel</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1a467843d56b00359a8fa7d0a1017079a5" prot="protected" virt="virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>splitESFLevel</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ab70b30442fcdda802730fd711c5348da" prot="protected" virt="virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>splitVaRLevel</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::HomogeneousPoolLossModel</scope><name>~Observable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
