<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_sobol_rsg" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::SobolRsg</compoundname>
    <includes refid="sobolrsg_8hpp" local="no">sobolrsg.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_quant_lib_1_1_sobol_rsg_1a8f49db623f15993ffd3c00abf9fe198e" prot="public" static="no" strong="no">
        <type></type>
        <name>DirectionIntegers</name>
        <qualifiedname>QuantLib::SobolRsg::DirectionIntegers</qualifiedname>
        <enumvalue id="class_quant_lib_1_1_sobol_rsg_1a8f49db623f15993ffd3c00abf9fe198ea7062e2e83a0101c29f22f093d607d73d" prot="public">
          <name>Unit</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_sobol_rsg_1a8f49db623f15993ffd3c00abf9fe198ea19ee2700505c6baba904334441ed3f3a" prot="public">
          <name>Jaeckel</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_sobol_rsg_1a8f49db623f15993ffd3c00abf9fe198eac905d7dad337425451148623dd611852" prot="public">
          <name>SobolLevitan</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_sobol_rsg_1a8f49db623f15993ffd3c00abf9fe198ea7c05aca73695d816b1ca14c9c1a73d0a" prot="public">
          <name>SobolLevitanLemieux</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_sobol_rsg_1a8f49db623f15993ffd3c00abf9fe198ea291be55f0d4a4e76723d0576192e140e" prot="public">
          <name>JoeKuoD5</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_sobol_rsg_1a8f49db623f15993ffd3c00abf9fe198ea3e87f4b80a2255b2182b754a3f8090f7" prot="public">
          <name>JoeKuoD6</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_sobol_rsg_1a8f49db623f15993ffd3c00abf9fe198eae537726fb0cc93018c3c24715c34103f" prot="public">
          <name>JoeKuoD7</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_sobol_rsg_1a8f49db623f15993ffd3c00abf9fe198ea5f4682bbab602a2be86aae2e4b7717c8" prot="public">
          <name>Kuo</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_sobol_rsg_1a8f49db623f15993ffd3c00abf9fe198ea313b0c1cb348bf427ca25928ff0a7b52" prot="public">
          <name>Kuo2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_sobol_rsg_1a8f49db623f15993ffd3c00abf9fe198ea27e06eba18e90f7b454972df9c558a17" prot="public">
          <name>Kuo3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/sobolrsg.hpp" line="113" column="9" bodyfile="ql/math/randomnumbers/sobolrsg.hpp" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_sobol_rsg_1aeb1f097c92ea0ee29444cdf737679831" prot="public" static="no">
        <type><ref refid="struct_quant_lib_1_1_sample" kindref="compound">Sample</ref>&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt;</type>
        <definition>typedef Sample&lt;std::vector&lt;Real&gt; &gt; QuantLib::SobolRsg::sample_type</definition>
        <argsstring></argsstring>
        <name>sample_type</name>
        <qualifiedname>QuantLib::SobolRsg::sample_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/sobolrsg.hpp" line="112" column="24" bodyfile="ql/math/randomnumbers/sobolrsg.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_sobol_rsg_1abe1cbef49aa096c3fc503303c3dcc85c" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::SobolRsg::dimensionality_</definition>
        <argsstring></argsstring>
        <name>dimensionality_</name>
        <qualifiedname>QuantLib::SobolRsg::dimensionality_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/sobolrsg.hpp" line="144" column="14" bodyfile="ql/math/randomnumbers/sobolrsg.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_sobol_rsg_1ae452c5aff56e7215b0c96e492697daf5" prot="private" static="no" mutable="yes">
        <type>std::uint32_t</type>
        <definition>std::uint32_t QuantLib::SobolRsg::sequenceCounter_</definition>
        <argsstring></argsstring>
        <name>sequenceCounter_</name>
        <qualifiedname>QuantLib::SobolRsg::sequenceCounter_</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/sobolrsg.hpp" line="145" column="31" bodyfile="ql/math/randomnumbers/sobolrsg.hpp" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_sobol_rsg_1a634729475f839566d0c7e5bfc909c5b5" prot="private" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool QuantLib::SobolRsg::firstDraw_</definition>
        <argsstring></argsstring>
        <name>firstDraw_</name>
        <qualifiedname>QuantLib::SobolRsg::firstDraw_</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/sobolrsg.hpp" line="146" column="22" bodyfile="ql/math/randomnumbers/sobolrsg.hpp" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_sobol_rsg_1ad7d8aa0d8dd78a57d2cdfb63f07040cc" prot="private" static="no" mutable="yes">
        <type><ref refid="struct_quant_lib_1_1_sample" kindref="compound">sample_type</ref></type>
        <definition>sample_type QuantLib::SobolRsg::sequence_</definition>
        <argsstring></argsstring>
        <name>sequence_</name>
        <qualifiedname>QuantLib::SobolRsg::sequence_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/sobolrsg.hpp" line="147" column="29" bodyfile="ql/math/randomnumbers/sobolrsg.hpp" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_sobol_rsg_1acc537eb93cac61d40dc93fd903bba3f9" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; std::uint32_t &gt;</type>
        <definition>std::vector&lt;std::uint32_t&gt; QuantLib::SobolRsg::integerSequence_</definition>
        <argsstring></argsstring>
        <name>integerSequence_</name>
        <qualifiedname>QuantLib::SobolRsg::integerSequence_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/sobolrsg.hpp" line="148" column="29" bodyfile="ql/math/randomnumbers/sobolrsg.hpp" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_sobol_rsg_1ae37ca31a460f35c4ff4aa02310ff1da3" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; std::uint32_t &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;std::uint32_t&gt; &gt; QuantLib::SobolRsg::directionIntegers_</definition>
        <argsstring></argsstring>
        <name>directionIntegers_</name>
        <qualifiedname>QuantLib::SobolRsg::directionIntegers_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/sobolrsg.hpp" line="149" column="21" bodyfile="ql/math/randomnumbers/sobolrsg.hpp" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_sobol_rsg_1a67cde39c79ea23a1d73584ebf1caa14c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::SobolRsg::useGrayCode_</definition>
        <argsstring></argsstring>
        <name>useGrayCode_</name>
        <qualifiedname>QuantLib::SobolRsg::useGrayCode_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/sobolrsg.hpp" line="150" column="14" bodyfile="ql/math/randomnumbers/sobolrsg.hpp" bodystart="150" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_sobol_rsg_1a03d39473668efc55dbf1ee94616f78e4" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::SobolRsg::SobolRsg</definition>
        <argsstring>(Size dimensionality, unsigned long seed=0, DirectionIntegers directionIntegers=Jaeckel, bool useGrayCode=true)</argsstring>
        <name>SobolRsg</name>
        <qualifiedname>QuantLib::SobolRsg::SobolRsg</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>dimensionality</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>seed</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>DirectionIntegers</type>
          <declname>directionIntegers</declname>
          <defval>Jaeckel</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>useGrayCode</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The so called generating integer is chosen to be <formula id="331">$\gamma(n) = n$</formula> if useGrayCode is set to false and <formula id="332">$\gamma(n) = G(n)$</formula> where <formula id="333">$G(n)$</formula> is the Gray code of <formula id="334">$n$</formula> otherwise. The Sobol integers are then constructed using formula 8.20 resp. 8.23, see &quot;Monte Carlo Methods in Finance&quot; by Peter Jäckel. The default is to use the Gray code since this allows a faster sequence generation. The <ref refid="class_quant_lib_1_1_burley2020_sobol_rsg" kindref="compound">Burley2020SobolRsg</ref> relies on an underlying <ref refid="class_quant_lib_1_1_sobol_rsg" kindref="compound">SobolRsg</ref> not using the Gray code on the other hand due to its specific way of constructing the integer sequence.</para>
<para><simplesect kind="pre"><para>dimensionality must be &lt;= PPMT_MAX_DIM </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/sobolrsg.hpp" line="126" column="18" bodyfile="ql/math/randomnumbers/sobolrsg.cpp" bodystart="78477" bodyend="78773"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_sobol_rsg_1add6cd6ae2601c37c645250d3cde1f258" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; std::uint32_t &gt; &amp;</type>
        <definition>const std::vector&lt; std::uint32_t &gt; &amp; QuantLib::SobolRsg::skipTo</definition>
        <argsstring>(std::uint32_t n) const</argsstring>
        <name>skipTo</name>
        <qualifiedname>QuantLib::SobolRsg::skipTo</qualifiedname>
        <param>
          <type>std::uint32_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>skip to the n-th sample in the low-discrepancy sequence </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/sobolrsg.hpp" line="131" column="27" bodyfile="ql/math/randomnumbers/sobolrsg.cpp" bodystart="78775" bodyend="78805"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_sobol_rsg_1a0a9e224adfa75e2f681f23cf19afd321" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; std::uint32_t &gt; &amp;</type>
        <definition>const std::vector&lt; std::uint32_t &gt; &amp; QuantLib::SobolRsg::nextInt32Sequence</definition>
        <argsstring>() const</argsstring>
        <name>nextInt32Sequence</name>
        <qualifiedname>QuantLib::SobolRsg::nextInt32Sequence</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/sobolrsg.hpp" line="132" column="27" bodyfile="ql/math/randomnumbers/sobolrsg.cpp" bodystart="78807" bodyend="78848"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_sobol_rsg_1a5838c1f6ab22edf5227e846de5c7c9f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="struct_quant_lib_1_1_sample" kindref="compound">SobolRsg::sample_type</ref> &amp;</type>
        <definition>const SobolRsg::sample_type &amp; QuantLib::SobolRsg::nextSequence</definition>
        <argsstring>() const</argsstring>
        <name>nextSequence</name>
        <qualifiedname>QuantLib::SobolRsg::nextSequence</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/sobolrsg.hpp" line="134" column="37" bodyfile="ql/math/randomnumbers/sobolrsg.hpp" bodystart="134" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_sobol_rsg_1a3185047867263bc538b7236f9db01800" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="struct_quant_lib_1_1_sample" kindref="compound">sample_type</ref> &amp;</type>
        <definition>const sample_type &amp; QuantLib::SobolRsg::lastSequence</definition>
        <argsstring>() const</argsstring>
        <name>lastSequence</name>
        <qualifiedname>QuantLib::SobolRsg::lastSequence</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/sobolrsg.hpp" line="141" column="27" bodyfile="ql/math/randomnumbers/sobolrsg.hpp" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_sobol_rsg_1a063fac6a8c789c8603364a84607d2580" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::SobolRsg::dimension</definition>
        <argsstring>() const</argsstring>
        <name>dimension</name>
        <qualifiedname>QuantLib::SobolRsg::dimension</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/sobolrsg.hpp" line="142" column="14" bodyfile="ql/math/randomnumbers/sobolrsg.hpp" bodystart="142" bodyend="142"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Sobol low-discrepancy sequence generator. </para>
    </briefdescription>
    <detaileddescription>
<para>A Gray code counter and bitwise operations are used for very fast sequence generation.</para>
<para>The implementation relies on primitive polynomials modulo two from the book &quot;Monte Carlo Methods in Finance&quot; by Peter Jäckel.</para>
<para>21 200 primitive polynomials modulo two are provided in <ref refid="namespace_quant_lib" kindref="compound">QuantLib</ref>. Jäckel has calculated 8 129 334 polynomials: if you need that many dimensions you can replace the primitivepolynomials.cpp file included in <ref refid="namespace_quant_lib" kindref="compound">QuantLib</ref> with the one provided in the CD of the &quot;Monte Carlo
Methods in Finance&quot; book.</para>
<para>The choice of initialization numbers (also know as free direction integers) is crucial for the homogeneity properties of the sequence. Sobol defines two homogeneity properties: Property A and Property A&apos;.</para>
<para>The unit initialization numbers suggested in &quot;Numerical
Recipes in C&quot;, 2nd edition, by Press, Teukolsky, Vetterling, and Flannery (section 7.7) fail the test for Property A even for low dimensions.</para>
<para>Bratley and Fox published coefficients of the free direction integers up to dimension 40, crediting unpublished work of Sobol&apos; and Levitan. See Bratley, P., Fox, B.L. (1988) &quot;Algorithm 659: Implementing Sobol&apos;s quasirandom sequence
generator,&quot; ACM Transactions on Mathematical Software 14:88-100. These values satisfy Property A for d&lt;=20 and d = 23, 31, 33, 34, 37; Property A&apos; holds for d&lt;=6.</para>
<para>Jäckel provides in his book (section 8.3) initialization numbers up to dimension 32. Coefficients for d&lt;=8 are the same as in Bradley-Fox, so Property A&apos; holds for d&lt;=6 but Property A holds for d&lt;=32.</para>
<para>The implementation of Lemieux, Cieslak, and Luttmer includes coefficients of the free direction integers up to dimension<orderedlist>
<listitem><para>Coefficients for d&lt;=40 are the same as in Bradley-Fox. For dimension 40&lt;d&lt;=360 the coefficients have been calculated as optimal values based on the &quot;resolution&quot; criterion. See &quot;RandQMC user&apos;s guide - A package for
randomized quasi-Monte Carlo methods in C,&quot; by C. Lemieux, M. Cieslak, and K. Luttmer, version January 13 2004, and references cited there (<ulink url="http://www.math.ucalgary.ca/~lemieux/randqmc.html">http://www.math.ucalgary.ca/~lemieux/randqmc.html</ulink>). The values up to d&lt;=360 has been provided to the <ref refid="namespace_quant_lib" kindref="compound">QuantLib</ref> team by Christiane Lemieux, private communication, September 2004.</para>
</listitem></orderedlist>
</para>
<para>For more info on Sobol&apos; sequences see also &quot;Monte Carlo
Methods in Financial Engineering,&quot; by P. Glasserman, 2004, Springer, section 5.2.3</para>
<para>The Joe<ndash/>Kuo numbers and the Kuo numbers are due to Stephen Joe and Frances Kuo.</para>
<para>S. Joe and F. Y. Kuo, Constructing Sobol sequences with better two-dimensional projections, preprint Nov 22 2007</para>
<para>See <ulink url="http://web.maths.unsw.edu.au/~fkuo/sobol/">http://web.maths.unsw.edu.au/~fkuo/sobol/</ulink> for more information.</para>
<para>The Joe-Kuo numbers are available under a BSD-style license available at the above link.</para>
<para>Note that the Kuo numbers were generated to work with a different ordering of primitive polynomials for the first 40 or so dimensions which is why we have the Alternative Primitive Polynomials.</para>
<para><xrefsect id="test_1_test000064"><xreftitle>Test</xreftitle><xrefdescription><para><itemizedlist>
<listitem><para>the correctness of the returned values is tested by reproducing known good values.</para>
</listitem><listitem><para>the correctness of the returned values is tested by checking their discrepancy against known good values. </para>
</listitem></itemizedlist>
</para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <location file="ql/math/randomnumbers/sobolrsg.hpp" line="110" column="5" bodyfile="ql/math/randomnumbers/sobolrsg.hpp" bodystart="110" bodyend="151"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_sobol_rsg_1a063fac6a8c789c8603364a84607d2580" prot="public" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>dimension</name></member>
      <member refid="class_quant_lib_1_1_sobol_rsg_1abe1cbef49aa096c3fc503303c3dcc85c" prot="private" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>dimensionality_</name></member>
      <member refid="class_quant_lib_1_1_sobol_rsg_1a8f49db623f15993ffd3c00abf9fe198e" prot="public" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>DirectionIntegers</name></member>
      <member refid="class_quant_lib_1_1_sobol_rsg_1ae37ca31a460f35c4ff4aa02310ff1da3" prot="private" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>directionIntegers_</name></member>
      <member refid="class_quant_lib_1_1_sobol_rsg_1a634729475f839566d0c7e5bfc909c5b5" prot="private" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>firstDraw_</name></member>
      <member refid="class_quant_lib_1_1_sobol_rsg_1acc537eb93cac61d40dc93fd903bba3f9" prot="private" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>integerSequence_</name></member>
      <member refid="class_quant_lib_1_1_sobol_rsg_1a8f49db623f15993ffd3c00abf9fe198ea19ee2700505c6baba904334441ed3f3a" prot="public" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>Jaeckel</name></member>
      <member refid="class_quant_lib_1_1_sobol_rsg_1a8f49db623f15993ffd3c00abf9fe198ea291be55f0d4a4e76723d0576192e140e" prot="public" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>JoeKuoD5</name></member>
      <member refid="class_quant_lib_1_1_sobol_rsg_1a8f49db623f15993ffd3c00abf9fe198ea3e87f4b80a2255b2182b754a3f8090f7" prot="public" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>JoeKuoD6</name></member>
      <member refid="class_quant_lib_1_1_sobol_rsg_1a8f49db623f15993ffd3c00abf9fe198eae537726fb0cc93018c3c24715c34103f" prot="public" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>JoeKuoD7</name></member>
      <member refid="class_quant_lib_1_1_sobol_rsg_1a8f49db623f15993ffd3c00abf9fe198ea5f4682bbab602a2be86aae2e4b7717c8" prot="public" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>Kuo</name></member>
      <member refid="class_quant_lib_1_1_sobol_rsg_1a8f49db623f15993ffd3c00abf9fe198ea313b0c1cb348bf427ca25928ff0a7b52" prot="public" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>Kuo2</name></member>
      <member refid="class_quant_lib_1_1_sobol_rsg_1a8f49db623f15993ffd3c00abf9fe198ea27e06eba18e90f7b454972df9c558a17" prot="public" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>Kuo3</name></member>
      <member refid="class_quant_lib_1_1_sobol_rsg_1a3185047867263bc538b7236f9db01800" prot="public" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>lastSequence</name></member>
      <member refid="class_quant_lib_1_1_sobol_rsg_1a0a9e224adfa75e2f681f23cf19afd321" prot="public" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>nextInt32Sequence</name></member>
      <member refid="class_quant_lib_1_1_sobol_rsg_1a5838c1f6ab22edf5227e846de5c7c9f7" prot="public" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>nextSequence</name></member>
      <member refid="class_quant_lib_1_1_sobol_rsg_1aeb1f097c92ea0ee29444cdf737679831" prot="public" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>sample_type</name></member>
      <member refid="class_quant_lib_1_1_sobol_rsg_1ad7d8aa0d8dd78a57d2cdfb63f07040cc" prot="private" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>sequence_</name></member>
      <member refid="class_quant_lib_1_1_sobol_rsg_1ae452c5aff56e7215b0c96e492697daf5" prot="private" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>sequenceCounter_</name></member>
      <member refid="class_quant_lib_1_1_sobol_rsg_1add6cd6ae2601c37c645250d3cde1f258" prot="public" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>skipTo</name></member>
      <member refid="class_quant_lib_1_1_sobol_rsg_1a8f49db623f15993ffd3c00abf9fe198eac905d7dad337425451148623dd611852" prot="public" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>SobolLevitan</name></member>
      <member refid="class_quant_lib_1_1_sobol_rsg_1a8f49db623f15993ffd3c00abf9fe198ea7c05aca73695d816b1ca14c9c1a73d0a" prot="public" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>SobolLevitanLemieux</name></member>
      <member refid="class_quant_lib_1_1_sobol_rsg_1a03d39473668efc55dbf1ee94616f78e4" prot="public" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>SobolRsg</name></member>
      <member refid="class_quant_lib_1_1_sobol_rsg_1a8f49db623f15993ffd3c00abf9fe198ea7062e2e83a0101c29f22f093d607d73d" prot="public" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>Unit</name></member>
      <member refid="class_quant_lib_1_1_sobol_rsg_1a67cde39c79ea23a1d73584ebf1caa14c" prot="private" virt="non-virtual"><scope>QuantLib::SobolRsg</scope><name>useGrayCode_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
