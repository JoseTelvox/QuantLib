<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_constant_recovery_model" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::ConstantRecoveryModel</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_recovery_rate_model" prot="public" virt="non-virtual">QuantLib::RecoveryRateModel</basecompoundref>
    <basecompoundref refid="class_quant_lib_1_1_observer" prot="public" virt="non-virtual">QuantLib::Observer</basecompoundref>
    <includes refid="recoveryratemodel_8hpp" local="no">recoveryratemodel.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_constant_recovery_model_1afd66776ea1beb389958e63defceae839" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_recovery_rate_quote" kindref="compound">RecoveryRateQuote</ref> &gt;</type>
        <definition>Handle&lt;RecoveryRateQuote&gt; QuantLib::ConstantRecoveryModel::quote_</definition>
        <argsstring></argsstring>
        <name>quote_</name>
        <qualifiedname>QuantLib::ConstantRecoveryModel::quote_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recoveryratemodel.hpp" line="82" column="16" bodyfile="ql/experimental/credit/recoveryratemodel.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_constant_recovery_model_1ad2403241f592b09bb8c52ec14c7b44f3" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::ConstantRecoveryModel::ConstantRecoveryModel</definition>
        <argsstring>(const Handle&lt; RecoveryRateQuote &gt; &amp;quote)</argsstring>
        <name>ConstantRecoveryModel</name>
        <qualifiedname>QuantLib::ConstantRecoveryModel::ConstantRecoveryModel</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_recovery_rate_quote" kindref="compound">RecoveryRateQuote</ref> &gt; &amp;</type>
          <declname>quote</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recoveryratemodel.hpp" line="65" column="18" bodyfile="ql/experimental/credit/recoveryratemodel.cpp" bodystart="24" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_constant_recovery_model_1aa34e27a7813000e6abeaae39f7373614" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::ConstantRecoveryModel::ConstantRecoveryModel</definition>
        <argsstring>(Real recovery, Seniority sen=NoSeniority)</argsstring>
        <name>ConstantRecoveryModel</name>
        <qualifiedname>QuantLib::ConstantRecoveryModel::ConstantRecoveryModel</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>recovery</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a197bfb2321381d9a5d8c94b56f6ef6cf" kindref="member">Seniority</ref></type>
          <declname>sen</declname>
          <defval>NoSeniority</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recoveryratemodel.hpp" line="66" column="18" bodyfile="ql/experimental/credit/recoveryratemodel.cpp" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_constant_recovery_model_1a8f7a0eadc81a8469863e62274e34395f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::ConstantRecoveryModel::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <qualifiedname>QuantLib::ConstantRecoveryModel::update</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_observer_1a07905c55dca858470fcf4a1aea0005aa">update</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must be implemented in derived classes. An instance of Observer does not call this method directly: instead, it will be called by the observables the instance registered with when they need to notify any changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recoveryratemodel.hpp" line="68" column="14" bodyfile="ql/experimental/credit/recoveryratemodel.hpp" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_constant_recovery_model_1a24136ad70555a4b228fa382d9ae1c738" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool QuantLib::ConstantRecoveryModel::appliesToSeniority</definition>
        <argsstring>(Seniority) const override</argsstring>
        <name>appliesToSeniority</name>
        <qualifiedname>QuantLib::ConstantRecoveryModel::appliesToSeniority</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_recovery_rate_model_1a6848563c275b880210eb8d61752941b4">appliesToSeniority</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a197bfb2321381d9a5d8c94b56f6ef6cf" kindref="member">Seniority</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the model will return recovery rates for the requested seniority. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recoveryratemodel.hpp" line="69" column="14" bodyfile="ql/experimental/credit/recoveryratemodel.hpp" bodystart="69" bodyend="69"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_constant_recovery_model_1ac6c56f99ef42378a4d8aaa1dfe086732" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ConstantRecoveryModel::recoveryValueImpl</definition>
        <argsstring>(const Date &amp;, const DefaultProbKey &amp;) const override</argsstring>
        <name>recoveryValueImpl</name>
        <qualifiedname>QuantLib::ConstantRecoveryModel::recoveryValueImpl</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_recovery_rate_model_1acbf46fd6332006ffa6878951573ad1a5">recoveryValueImpl</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_default_prob_key" kindref="compound">DefaultProbKey</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Notice the quote&apos;s value is returned without a check on a match of the seniorties of the quote and the request. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recoveryratemodel.hpp" line="76" column="14" bodyfile="ql/experimental/credit/recoveryratemodel.hpp" bodystart="76" bodyend="79"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Simple Recovery <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> model returning the constant value of the quote independently of the date and the seniority. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::ConstantRecoveryModel</label>
        <link refid="class_quant_lib_1_1_constant_recovery_model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::RecoveryRateModel</label>
        <link refid="class_quant_lib_1_1_recovery_rate_model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::ConstantRecoveryModel</label>
        <link refid="class_quant_lib_1_1_constant_recovery_model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::RecoveryRateModel</label>
        <link refid="class_quant_lib_1_1_recovery_rate_model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/credit/recoveryratemodel.hpp" line="62" column="5" bodyfile="ql/experimental/credit/recoveryratemodel.hpp" bodystart="63" bodyend="83"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_constant_recovery_model_1a24136ad70555a4b228fa382d9ae1c738" prot="public" virt="virtual"><scope>QuantLib::ConstantRecoveryModel</scope><name>appliesToSeniority</name></member>
      <member refid="class_quant_lib_1_1_constant_recovery_model_1ad2403241f592b09bb8c52ec14c7b44f3" prot="public" virt="non-virtual"><scope>QuantLib::ConstantRecoveryModel</scope><name>ConstantRecoveryModel</name></member>
      <member refid="class_quant_lib_1_1_constant_recovery_model_1aa34e27a7813000e6abeaae39f7373614" prot="public" virt="non-virtual"><scope>QuantLib::ConstantRecoveryModel</scope><name>ConstantRecoveryModel</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::ConstantRecoveryModel</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::ConstantRecoveryModel</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::ConstantRecoveryModel</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::ConstantRecoveryModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::RecoveryRateModel::"><scope>QuantLib::ConstantRecoveryModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::RecoveryRateModel::"><scope>QuantLib::ConstantRecoveryModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::ConstantRecoveryModel</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::ConstantRecoveryModel</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::ConstantRecoveryModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::RecoveryRateModel::"><scope>QuantLib::ConstantRecoveryModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::RecoveryRateModel::"><scope>QuantLib::ConstantRecoveryModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_constant_recovery_model_1afd66776ea1beb389958e63defceae839" prot="private" virt="non-virtual"><scope>QuantLib::ConstantRecoveryModel</scope><name>quote_</name></member>
      <member refid="class_quant_lib_1_1_recovery_rate_model_1aa3997899ded9e83da4c6820adc86bb50" prot="public" virt="virtual"><scope>QuantLib::ConstantRecoveryModel</scope><name>recoveryValue</name></member>
      <member refid="class_quant_lib_1_1_constant_recovery_model_1ac6c56f99ef42378a4d8aaa1dfe086732" prot="protected" virt="virtual"><scope>QuantLib::ConstantRecoveryModel</scope><name>recoveryValueImpl</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::ConstantRecoveryModel</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::ConstantRecoveryModel</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::ConstantRecoveryModel</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::ConstantRecoveryModel</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_constant_recovery_model_1a8f7a0eadc81a8469863e62274e34395f" prot="public" virt="virtual"><scope>QuantLib::ConstantRecoveryModel</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::ConstantRecoveryModel</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::ConstantRecoveryModel</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_recovery_rate_model_1a7e60142b6e6e01103a4fa1b0d6720f38" prot="public" virt="non-virtual"><scope>QuantLib::ConstantRecoveryModel</scope><name>~RecoveryRateModel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
