<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_bond_forward" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::BondForward</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_forward" prot="public" virt="non-virtual">QuantLib::Forward</basecompoundref>
    <includes refid="bondforward_8hpp" local="no">bondforward.hpp</includes>
    <sectiondef kind="user-defined">
      <header>Calculations</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_bond_forward_1a2e26a5072119a1ad7fcc59a45d0fb6f9" prot="protected" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;Bond&gt; QuantLib::BondForward::bond_</definition>
        <argsstring></argsstring>
        <name>bond_</name>
        <qualifiedname>QuantLib::BondForward::bond_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bondforward.hpp" line="116" column="25" bodyfile="ql/instruments/bondforward.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_forward_1ae6c15b88c8e6561fef70c77b71044e04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondForward::forwardPrice</definition>
        <argsstring>() const</argsstring>
        <name>forwardPrice</name>
        <qualifiedname>QuantLib::BondForward::forwardPrice</qualifiedname>
        <briefdescription>
<para>(dirty) forward bond price </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bondforward.hpp" line="98" column="14" bodyfile="ql/instruments/bondforward.cpp" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_forward_1aa79dec044e1c65b74ad954dd2efaa21b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondForward::cleanForwardPrice</definition>
        <argsstring>() const</argsstring>
        <name>cleanForwardPrice</name>
        <qualifiedname>QuantLib::BondForward::cleanForwardPrice</qualifiedname>
        <briefdescription>
<para>(dirty) forward bond price minus accrued on bond at delivery </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bondforward.hpp" line="101" column="14" bodyfile="ql/instruments/bondforward.cpp" bodystart="49" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_forward_1a3d5c74638e9ca85e5e7f47a4617ba353" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondForward::spotIncome</definition>
        <argsstring>(const Handle&lt; YieldTermStructure &gt; &amp;incomeDiscountCurve) const override</argsstring>
        <name>spotIncome</name>
        <qualifiedname>QuantLib::BondForward::spotIncome</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_forward_1a5c7aecf175d13720287ae2f67eb416dd">spotIncome</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
          <declname>incomeDiscountCurve</declname>
        </param>
        <briefdescription>
<para>NPV of bond coupons discounted using incomeDiscountCurve. </para>
        </briefdescription>
        <detaileddescription>
<para>Here only coupons between max(evaluation date,settlement
date) and maturity date of bond forward contract are considered income. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bondforward.hpp" line="108" column="14" bodyfile="ql/instruments/bondforward.cpp" bodystart="59" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_forward_1ac3cd1bd668e133bfef475f0496a6cffd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BondForward::spotValue</definition>
        <argsstring>() const override</argsstring>
        <name>spotValue</name>
        <qualifiedname>QuantLib::BondForward::spotValue</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_forward_1ae0e5cb4fcca8cf33cc53d816c008ade6">spotValue</reimplements>
        <briefdescription>
<para>NPV of underlying bond. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bondforward.hpp" line="111" column="14" bodyfile="ql/instruments/bondforward.cpp" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_forward_1aeb42687d0dcfee0e6f589393f0943542" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::BondForward::performCalculations</definition>
        <argsstring>() const override</argsstring>
        <name>performCalculations</name>
        <qualifiedname>QuantLib::BondForward::performCalculations</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_lazy_object_1aafa5583a3743d9f93fa40da5b62e1ff8">performCalculations</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must implement any calculations which must be (re)done in order to calculate the desired results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bondforward.hpp" line="117" column="14" bodyfile="ql/instruments/bondforward.cpp" bodystart="91" bodyend="97"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Constructors</header>
      <memberdef kind="function" id="class_quant_lib_1_1_bond_forward_1aa8a7b12b604c6c6215f1fea9cfac81df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::BondForward::BondForward</definition>
        <argsstring>(const Date &amp;valueDate, const Date &amp;maturityDate, Position::Type type, Real strike, Natural settlementDays, const DayCounter &amp;dayCounter, const Calendar &amp;calendar, BusinessDayConvention businessDayConvention, const ext::shared_ptr&lt; Bond &gt; &amp;bond, const Handle&lt; YieldTermStructure &gt; &amp;discountCurve=Handle&lt; YieldTermStructure &gt;(), const Handle&lt; YieldTermStructure &gt; &amp;incomeDiscountCurve=Handle&lt; YieldTermStructure &gt;())</argsstring>
        <name>BondForward</name>
        <qualifiedname>QuantLib::BondForward::BondForward</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>valueDate</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>maturityDate</declname>
        </param>
        <param>
          <type>Position::Type</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref></type>
          <declname>settlementDays</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;</type>
          <declname>calendar</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881" kindref="member">BusinessDayConvention</ref></type>
          <declname>businessDayConvention</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &gt; &amp;</type>
          <declname>bond</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
          <declname>discountCurve</declname>
          <defval><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt;()</defval>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
          <declname>incomeDiscountCurve</declname>
          <defval><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If strike is given in the constructor, can calculate the NPV of the contract via <ref refid="class_quant_lib_1_1_instrument_1a5afdd9698267cd30ddd10cf01f3487b0" kindref="member">NPV()</ref>.</para>
<para>If strike/forward price is desired, it can be obtained via <ref refid="class_quant_lib_1_1_bond_forward_1ae6c15b88c8e6561fef70c77b71044e04" kindref="member">forwardPrice()</ref>. In this case, the strike variable in the constructor is irrelevant and will be ignored. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/bondforward.hpp" line="80" column="9" bodyfile="ql/instruments/bondforward.cpp" bodystart="27" bodyend="46"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Forward contract on a bond </para>
    </briefdescription>
    <detaileddescription>
<para><orderedlist>
<listitem><para>valueDate refers to the settlement date of the bond forward contract. maturityDate is the delivery (or repurchase) date for the underlying bond (not the bond&apos;s maturity date).</para>
</listitem><listitem><para>Relevant formulas used in the calculations ( <formula id="194">$P$</formula> refers to a price):</para>
<para>a.  <formula id="195">$ P_{CleanFwd}(t) = P_{DirtyFwd}(t) -
      AI(t=deliveryDate) $</formula> where <formula id="196">$ AI $</formula> refers to the accrued interest on the underlying bond.</para>
<para>b.  <formula id="197">$ P_{DirtyFwd}(t) = \frac{P_{DirtySpot}(t) -
      SpotIncome(t)} {discountCurve-&gt;discount(t=deliveryDate)} $</formula></para>
<para>c.  <formula id="198">$ SpotIncome(t) = \sum_i \left( CF_i \times
      incomeDiscountCurve-&gt;discount(t_i) \right) $</formula> where  <formula id="199">$      CF_i $</formula> represents the ith bond cash flow (coupon payment) associated with the underlying bond falling between the settlementDate and the deliveryDate. (Note the two different discount curves used in b. and c.)</para>
<para><xrefsect id="todo_1_todo000037"><xreftitle>Todo</xreftitle><xrefdescription><para>Add preconditions and tests</para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000038"><xreftitle>Todo</xreftitle><xrefdescription><para>Create switch- if coupon goes to seller is toggled on, don&apos;t consider income in the <formula id="200">$ P_{DirtyFwd}(t) $</formula> calculation.</para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000039"><xreftitle>Todo</xreftitle><xrefdescription><para>Verify this works when the underlying is paper (in which case ignore all AI.)</para>
</xrefdescription></xrefsect></para>
</listitem></orderedlist>
</para>
<para><simplesect kind="warning"><para>This class still needs to be rigorously tested </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::BondForward</label>
        <link refid="class_quant_lib_1_1_bond_forward"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::Forward</label>
        <link refid="class_quant_lib_1_1_forward"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Instrument</label>
        <link refid="class_quant_lib_1_1_instrument"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="6">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::BondForward</label>
        <link refid="class_quant_lib_1_1_bond_forward"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>QuantLib::Calendar</label>
        <link refid="class_quant_lib_1_1_calendar"/>
      </node>
      <node id="7">
        <label>QuantLib::Date</label>
        <link refid="class_quant_lib_1_1_date"/>
      </node>
      <node id="8">
        <label>QuantLib::DayCounter</label>
        <link refid="class_quant_lib_1_1_day_counter"/>
      </node>
      <node id="2">
        <label>QuantLib::Forward</label>
        <link refid="class_quant_lib_1_1_forward"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>dayCounter_</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>calendar_</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>maturityDate_</edgelabel>
          <edgelabel>valueDate_</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>discountCurve_</edgelabel>
          <edgelabel>incomeDiscountCurve_</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>QuantLib::Handle&lt; QuantLib::YieldTermStructure &gt;</label>
        <link refid="class_quant_lib_1_1_handle"/>
      </node>
      <node id="3">
        <label>QuantLib::Instrument</label>
        <link refid="class_quant_lib_1_1_instrument"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>valuationDate_</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="6">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
    </collaborationgraph>
    <location file="ql/instruments/bondforward.hpp" line="69" column="5" bodyfile="ql/instruments/bondforward.hpp" bodystart="69" bodyend="118"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_instrument_1a468edb294da268b097c91bf821084c07" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>additionalResults</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a57d2b34e8625ab3d9ffa50c0c7931099" prot="protected" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>additionalResults_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a02070ea7442d30625992c1711030d4b8" prot="protected" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>alwaysForward_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a17c9433135a259e4776baec66204a484" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>alwaysForwardNotifications</name></member>
      <member refid="class_quant_lib_1_1_bond_forward_1a2e26a5072119a1ad7fcc59a45d0fb6f9" prot="protected" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>bond_</name></member>
      <member refid="class_quant_lib_1_1_bond_forward_1aa8a7b12b604c6c6215f1fea9cfac81df" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>BondForward</name></member>
      <member refid="class_quant_lib_1_1_forward_1a0020d6772c1cc44440918880b429eef5" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>businessDayConvention</name></member>
      <member refid="class_quant_lib_1_1_forward_1a9d885c317ea8e1f3736d27acb84d640c" prot="protected" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>businessDayConvention_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a4c573c48f7eaead5042864ac0eb5b025" prot="protected" virt="virtual"><scope>QuantLib::BondForward</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a58b4986a80efa18634483a92c121e26e" prot="protected" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>calculated_</name></member>
      <member refid="class_quant_lib_1_1_forward_1abb8f5b830d014ef3eb6da8694c4dd04c" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>calendar</name></member>
      <member refid="class_quant_lib_1_1_forward_1af7d5d763ca827fba16dca1f6a58628c8" prot="protected" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>calendar_</name></member>
      <member refid="class_quant_lib_1_1_bond_forward_1aa79dec044e1c65b74ad954dd2efaa21b" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>cleanForwardPrice</name></member>
      <member refid="class_quant_lib_1_1_forward_1a1c25bcba00e199d0ffea182b33b85f1d" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>dayCounter</name></member>
      <member refid="class_quant_lib_1_1_forward_1ae4ab04af485ae5cfa36eaacf7f6a0e18" prot="protected" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>dayCounter_</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::BondForward</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_forward_1a81bfb4ec786c8ac8d88d2d60f230201b" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>discountCurve</name></member>
      <member refid="class_quant_lib_1_1_forward_1a0d20518281bd7c01bce0e0959dcfba4d" prot="protected" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>discountCurve_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1ac548cb61c864779db09bd0fac6ae7c81" prot="protected" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>engine_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a03502fb6c606b262c25acd94ff4c1e52" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>errorEstimate</name></member>
      <member refid="class_quant_lib_1_1_instrument_1abb8f4cfa7346fab7a2f3a8c8b4da30f3" prot="protected" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>errorEstimate_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1aebe809131db2941325d037c031bbf41b" prot="public" virt="virtual"><scope>QuantLib::BondForward</scope><name>fetchResults</name></member>
      <member refid="class_quant_lib_1_1_forward_1a75363821617cef8b333ae513cdc4d208" prot="protected" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>Forward</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1afac6ee19c3107c453e1347dd8000e023" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>forwardFirstNotificationOnly</name></member>
      <member refid="class_quant_lib_1_1_bond_forward_1ae6c15b88c8e6561fef70c77b71044e04" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>forwardPrice</name></member>
      <member refid="class_quant_lib_1_1_forward_1a7b5ba71c068a4497da85464b40d57e57" prot="public" virt="virtual"><scope>QuantLib::BondForward</scope><name>forwardValue</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7157f41e83f2c5d924f5c5bafda04d1d" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>freeze</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7bb721fe00c6854e602758aba629ab77" prot="protected" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>frozen_</name></member>
      <member refid="class_quant_lib_1_1_forward_1a8ec033473f09000a20c68087a368cf34" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>impliedYield</name></member>
      <member refid="class_quant_lib_1_1_forward_1a1166ed92b6d15d7c9afd8ee1b711e47b" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>incomeDiscountCurve</name></member>
      <member refid="class_quant_lib_1_1_forward_1ab0bb02779606e3e23cc54358b165fc26" prot="protected" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>incomeDiscountCurve_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a5e4c746cbf7999c83dc57f87e241f1cc" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>Instrument</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a0a7c5d42815a4e16ee2158e24dbfc748" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>isCalculated</name></member>
      <member refid="class_quant_lib_1_1_forward_1a5c13d5112b6221fbdd2736ca9aa2b35d" prot="public" virt="virtual"><scope>QuantLib::BondForward</scope><name>isExpired</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a26f18f4ff7faaaebd8eae50e064b493e" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>LazyObject</name></member>
      <member refid="class_quant_lib_1_1_forward_1a3dc0d0f2332f1c25acb4d929139ce339" prot="protected" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>maturityDate_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a5afdd9698267cd30ddd10cf01f3487b0" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>NPV</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a997663780100d30ae59b14ac0285322d" prot="protected" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>NPV_</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::BondForward</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::BondForward</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::BondForward</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::BondForward</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::BondForward</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::QuantLib::Observer::"><scope>QuantLib::BondForward</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_forward_1a6c6db14005514343f7d23ca683baded5" prot="protected" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>payoff_</name></member>
      <member refid="class_quant_lib_1_1_bond_forward_1aeb42687d0dcfee0e6f589393f0943542" prot="protected" virt="virtual"><scope>QuantLib::BondForward</scope><name>performCalculations</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a70c9b24e50132408d8d9ce4f6674662a" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>recalculate</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a266c15a12160a89f4f9707db85f9fa27" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>result</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a3444386491f179f64f4f0aac24997071" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>setPricingEngine</name></member>
      <member refid="class_quant_lib_1_1_forward_1a03822810b0b69602c1efc94cda751dc8" prot="public" virt="virtual"><scope>QuantLib::BondForward</scope><name>settlementDate</name></member>
      <member refid="class_quant_lib_1_1_forward_1a2d084076e1c44718ddd03c70953abbea" prot="protected" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>settlementDays_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1af7344eebc48a1a361386e5c5a90a8fcc" prot="public" virt="virtual"><scope>QuantLib::BondForward</scope><name>setupArguments</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a73d90597fcd3ff52a8aed674393ab574" prot="protected" virt="virtual"><scope>QuantLib::BondForward</scope><name>setupExpired</name></member>
      <member refid="class_quant_lib_1_1_bond_forward_1a3d5c74638e9ca85e5e7f47a4617ba353" prot="public" virt="virtual"><scope>QuantLib::BondForward</scope><name>spotIncome</name></member>
      <member refid="class_quant_lib_1_1_bond_forward_1ac3cd1bd668e133bfef475f0496a6cffd" prot="public" virt="virtual"><scope>QuantLib::BondForward</scope><name>spotValue</name></member>
      <member refid="class_quant_lib_1_1_forward_1aeb299610c4b6a2a00966883339366a26" prot="protected" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>underlyingIncome_</name></member>
      <member refid="class_quant_lib_1_1_forward_1a6aba48f67b6e6436117151fc9e9d9d75" prot="protected" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>underlyingSpotValue_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a2e0e4786666453024b9d4e0761f2770b" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>unfreeze</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1adee2bf49be5c4c78736be293321a856d" prot="public" virt="virtual"><scope>QuantLib::BondForward</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a53a0fc1adc70b73387ad53009725835d" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>valuationDate</name></member>
      <member refid="class_quant_lib_1_1_instrument_1aa60b558fc82f022e13535360ac4a6fed" prot="protected" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>valuationDate_</name></member>
      <member refid="class_quant_lib_1_1_forward_1a892cb1fb8680a85b8cbd9b0a414ab5d5" prot="protected" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>valueDate_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a9d719c43bb627177a90d7d12324a2d6e" prot="public" virt="non-virtual"><scope>QuantLib::BondForward</scope><name>~LazyObject</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::BondForward</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::BondForward</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
