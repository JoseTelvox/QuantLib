<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_brownian_bridge" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::BrownianBridge</compoundname>
    <includes refid="brownianbridge_8hpp" local="no">brownianbridge.hpp</includes>
    <sectiondef kind="user-defined">
      <header>inspectors</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_brownian_bridge_1a5b3b2663cc920ca5ecc82987aa745444" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::BrownianBridge::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <qualifiedname>QuantLib::BrownianBridge::size_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/brownianbridge.hpp" line="140" column="14" bodyfile="ql/methods/montecarlo/brownianbridge.hpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_brownian_bridge_1aa34acac343b30cac93b9872f5cbecc5a" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt;</type>
        <definition>std::vector&lt;Time&gt; QuantLib::BrownianBridge::t_</definition>
        <argsstring></argsstring>
        <name>t_</name>
        <qualifiedname>QuantLib::BrownianBridge::t_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/brownianbridge.hpp" line="141" column="21" bodyfile="ql/methods/montecarlo/brownianbridge.hpp" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_brownian_bridge_1a0b21496ee191fb94f196f3a3618a0139" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::BrownianBridge::sqrtdt_</definition>
        <argsstring></argsstring>
        <name>sqrtdt_</name>
        <qualifiedname>QuantLib::BrownianBridge::sqrtdt_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/brownianbridge.hpp" line="142" column="21" bodyfile="ql/methods/montecarlo/brownianbridge.hpp" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_brownian_bridge_1a232ab8143534ae03047cb6d8c22e02e5" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt;</type>
        <definition>std::vector&lt;Size&gt; QuantLib::BrownianBridge::bridgeIndex_</definition>
        <argsstring></argsstring>
        <name>bridgeIndex_</name>
        <qualifiedname>QuantLib::BrownianBridge::bridgeIndex_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/brownianbridge.hpp" line="143" column="21" bodyfile="ql/methods/montecarlo/brownianbridge.hpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_brownian_bridge_1a414d4158669ce92c0192331bbbab1c5e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt;</type>
        <definition>std::vector&lt;Size&gt; QuantLib::BrownianBridge::leftIndex_</definition>
        <argsstring></argsstring>
        <name>leftIndex_</name>
        <qualifiedname>QuantLib::BrownianBridge::leftIndex_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/brownianbridge.hpp" line="143" column="34" bodyfile="ql/methods/montecarlo/brownianbridge.hpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_brownian_bridge_1afb9a2908853d4a6d344ef3b6f9c5fe0e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt;</type>
        <definition>std::vector&lt;Size&gt; QuantLib::BrownianBridge::rightIndex_</definition>
        <argsstring></argsstring>
        <name>rightIndex_</name>
        <qualifiedname>QuantLib::BrownianBridge::rightIndex_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/brownianbridge.hpp" line="143" column="45" bodyfile="ql/methods/montecarlo/brownianbridge.hpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_brownian_bridge_1af4695a96a2d267209f349f54c4ffdbb7" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::BrownianBridge::leftWeight_</definition>
        <argsstring></argsstring>
        <name>leftWeight_</name>
        <qualifiedname>QuantLib::BrownianBridge::leftWeight_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/brownianbridge.hpp" line="144" column="21" bodyfile="ql/methods/montecarlo/brownianbridge.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_brownian_bridge_1ab35c20db61318c9477771f6ba33406f3" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::BrownianBridge::rightWeight_</definition>
        <argsstring></argsstring>
        <name>rightWeight_</name>
        <qualifiedname>QuantLib::BrownianBridge::rightWeight_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/brownianbridge.hpp" line="144" column="33" bodyfile="ql/methods/montecarlo/brownianbridge.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_brownian_bridge_1a2efe2cdefcfa2e717ea56641b50a1ddb" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::BrownianBridge::stdDev_</definition>
        <argsstring></argsstring>
        <name>stdDev_</name>
        <qualifiedname>QuantLib::BrownianBridge::stdDev_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/brownianbridge.hpp" line="144" column="46" bodyfile="ql/methods/montecarlo/brownianbridge.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_brownian_bridge_1a23e6439a229440c3f59d0ae7b0763013" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::BrownianBridge::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>QuantLib::BrownianBridge::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/brownianbridge.hpp" line="79" column="14" bodyfile="ql/methods/montecarlo/brownianbridge.hpp" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_brownian_bridge_1a4253b072b74b4b868772f3f2aeb61c0d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Time &gt; &amp; QuantLib::BrownianBridge::times</definition>
        <argsstring>() const</argsstring>
        <name>times</name>
        <qualifiedname>QuantLib::BrownianBridge::times</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/brownianbridge.hpp" line="80" column="27" bodyfile="ql/methods/montecarlo/brownianbridge.hpp" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_brownian_bridge_1af37c4f7b7e7fcfe94a8d8330b3fab37a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Size &gt; &amp; QuantLib::BrownianBridge::bridgeIndex</definition>
        <argsstring>() const</argsstring>
        <name>bridgeIndex</name>
        <qualifiedname>QuantLib::BrownianBridge::bridgeIndex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/brownianbridge.hpp" line="81" column="27" bodyfile="ql/methods/montecarlo/brownianbridge.hpp" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_brownian_bridge_1a2bafb948ce8572fbb52236dbd0974abf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Size &gt; &amp; QuantLib::BrownianBridge::leftIndex</definition>
        <argsstring>() const</argsstring>
        <name>leftIndex</name>
        <qualifiedname>QuantLib::BrownianBridge::leftIndex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/brownianbridge.hpp" line="82" column="27" bodyfile="ql/methods/montecarlo/brownianbridge.hpp" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_brownian_bridge_1ab3dc9f94316bdd4ddeed7bed6eb84ea9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Size &gt; &amp; QuantLib::BrownianBridge::rightIndex</definition>
        <argsstring>() const</argsstring>
        <name>rightIndex</name>
        <qualifiedname>QuantLib::BrownianBridge::rightIndex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/brownianbridge.hpp" line="83" column="27" bodyfile="ql/methods/montecarlo/brownianbridge.hpp" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_brownian_bridge_1a7afb8dde5c8b6230139f11721130ee91" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Real &gt; &amp; QuantLib::BrownianBridge::leftWeight</definition>
        <argsstring>() const</argsstring>
        <name>leftWeight</name>
        <qualifiedname>QuantLib::BrownianBridge::leftWeight</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/brownianbridge.hpp" line="84" column="27" bodyfile="ql/methods/montecarlo/brownianbridge.hpp" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_brownian_bridge_1abc12c7d8e06fccc8013c0bd9669c87f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Real &gt; &amp; QuantLib::BrownianBridge::rightWeight</definition>
        <argsstring>() const</argsstring>
        <name>rightWeight</name>
        <qualifiedname>QuantLib::BrownianBridge::rightWeight</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/brownianbridge.hpp" line="85" column="27" bodyfile="ql/methods/montecarlo/brownianbridge.hpp" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_brownian_bridge_1afc7a84ff583f316e136e297243800df6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Real &gt; &amp; QuantLib::BrownianBridge::stdDeviation</definition>
        <argsstring>() const</argsstring>
        <name>stdDeviation</name>
        <qualifiedname>QuantLib::BrownianBridge::stdDeviation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/brownianbridge.hpp" line="86" column="27" bodyfile="ql/methods/montecarlo/brownianbridge.hpp" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_brownian_bridge_1ac4134285d5572d4a0346d3d0423df935" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RandomAccessIterator1</type>
          </param>
          <param>
            <type>class RandomAccessIterator2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void QuantLib::BrownianBridge::transform</definition>
        <argsstring>(RandomAccessIterator1 begin, RandomAccessIterator1 end, RandomAccessIterator2 output) const</argsstring>
        <name>transform</name>
        <qualifiedname>QuantLib::BrownianBridge::transform</qualifiedname>
        <param>
          <type>RandomAccessIterator1</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>RandomAccessIterator1</type>
          <declname>end</declname>
        </param>
        <param>
          <type>RandomAccessIterator2</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Brownian-bridge generator function. </para>
        </briefdescription>
        <detaileddescription>
<para>Transforms an input sequence of random variates into a sequence of variations in a Brownian bridge path.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>The start iterator of the input sequence. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>The end iterator of the input sequence. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The start iterator of the output sequence.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>To get the canonical Brownian bridge which starts and finishes at the same value, the first element of the input sequence must be zero. Conversely, to get a sloped bridge set the first element to a non-zero value. In this case, the final value in the bridge will be sqrt(last time point)*(first element of input sequence). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/brownianbridge.hpp" line="107" column="14" bodyfile="ql/methods/montecarlo/brownianbridge.hpp" bodystart="107" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_brownian_bridge_1ac345cf1232e3049cd809f3a191b87ca0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::BrownianBridge::initialize</definition>
        <argsstring>()</argsstring>
        <name>initialize</name>
        <qualifiedname>QuantLib::BrownianBridge::initialize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/brownianbridge.hpp" line="139" column="14" bodyfile="ql/methods/montecarlo/brownianbridge.cpp" bodystart="60" bodyend="110"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_brownian_bridge_1a1d6aecc8ec7893bd59321aca3625ff67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::BrownianBridge::BrownianBridge</definition>
        <argsstring>(Size steps)</argsstring>
        <name>BrownianBridge</name>
        <qualifiedname>QuantLib::BrownianBridge::BrownianBridge</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>steps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The constructor generates the time grid so that each step is of unit-time length.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>steps</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of steps in the path </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/brownianbridge.hpp" line="60" column="9" bodyfile="ql/methods/montecarlo/brownianbridge.cpp" bodystart="34" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_brownian_bridge_1aa6f9592e8b135e4f65cf5cee596059dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::BrownianBridge::BrownianBridge</definition>
        <argsstring>(const std::vector&lt; Time &gt; &amp;times)</argsstring>
        <name>BrownianBridge</name>
        <qualifiedname>QuantLib::BrownianBridge::BrownianBridge</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt; &amp;</type>
          <declname>times</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The step times are copied from the supplied vector</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>times</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector containing the times at which the steps occur. This also defines the number of steps that will be generated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>the starting time of the path is assumed to be 0 and must not be included </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/brownianbridge.hpp" line="70" column="9" bodyfile="ql/methods/montecarlo/brownianbridge.cpp" bodystart="43" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_brownian_bridge_1a4028f0c26cb82049ea6d4f6bfbd79902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::BrownianBridge::BrownianBridge</definition>
        <argsstring>(const TimeGrid &amp;timeGrid)</argsstring>
        <name>BrownianBridge</name>
        <qualifiedname>QuantLib::BrownianBridge::BrownianBridge</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_time_grid" kindref="compound">TimeGrid</ref> &amp;</type>
          <declname>timeGrid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The step times are copied from the <ref refid="class_quant_lib_1_1_time_grid" kindref="compound">TimeGrid</ref> object</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeGrid</parametername>
</parameternamelist>
<parameterdescription>
<para>a time grid containing the times at which the steps will occur </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/montecarlo/brownianbridge.hpp" line="76" column="9" bodyfile="ql/methods/montecarlo/brownianbridge.cpp" bodystart="50" bodyend="57"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Builds Wiener process paths using Gaussian variates. </para>
    </briefdescription>
    <detaileddescription>
<para>This class generates normalized (i.e., unit-variance) paths as sequences of variations. In order to obtain the actual path of the underlying, the returned variations must be multiplied by the integrated variance (including time) over the corresponding time step. </para>
    </detaileddescription>
    <location file="ql/methods/montecarlo/brownianbridge.hpp" line="53" column="5" bodyfile="ql/methods/montecarlo/brownianbridge.hpp" bodystart="53" bodyend="145"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_brownian_bridge_1af37c4f7b7e7fcfe94a8d8330b3fab37a" prot="public" virt="non-virtual"><scope>QuantLib::BrownianBridge</scope><name>bridgeIndex</name></member>
      <member refid="class_quant_lib_1_1_brownian_bridge_1a232ab8143534ae03047cb6d8c22e02e5" prot="private" virt="non-virtual"><scope>QuantLib::BrownianBridge</scope><name>bridgeIndex_</name></member>
      <member refid="class_quant_lib_1_1_brownian_bridge_1a1d6aecc8ec7893bd59321aca3625ff67" prot="public" virt="non-virtual"><scope>QuantLib::BrownianBridge</scope><name>BrownianBridge</name></member>
      <member refid="class_quant_lib_1_1_brownian_bridge_1aa6f9592e8b135e4f65cf5cee596059dd" prot="public" virt="non-virtual"><scope>QuantLib::BrownianBridge</scope><name>BrownianBridge</name></member>
      <member refid="class_quant_lib_1_1_brownian_bridge_1a4028f0c26cb82049ea6d4f6bfbd79902" prot="public" virt="non-virtual"><scope>QuantLib::BrownianBridge</scope><name>BrownianBridge</name></member>
      <member refid="class_quant_lib_1_1_brownian_bridge_1ac345cf1232e3049cd809f3a191b87ca0" prot="private" virt="non-virtual"><scope>QuantLib::BrownianBridge</scope><name>initialize</name></member>
      <member refid="class_quant_lib_1_1_brownian_bridge_1a2bafb948ce8572fbb52236dbd0974abf" prot="public" virt="non-virtual"><scope>QuantLib::BrownianBridge</scope><name>leftIndex</name></member>
      <member refid="class_quant_lib_1_1_brownian_bridge_1a414d4158669ce92c0192331bbbab1c5e" prot="private" virt="non-virtual"><scope>QuantLib::BrownianBridge</scope><name>leftIndex_</name></member>
      <member refid="class_quant_lib_1_1_brownian_bridge_1a7afb8dde5c8b6230139f11721130ee91" prot="public" virt="non-virtual"><scope>QuantLib::BrownianBridge</scope><name>leftWeight</name></member>
      <member refid="class_quant_lib_1_1_brownian_bridge_1af4695a96a2d267209f349f54c4ffdbb7" prot="private" virt="non-virtual"><scope>QuantLib::BrownianBridge</scope><name>leftWeight_</name></member>
      <member refid="class_quant_lib_1_1_brownian_bridge_1ab3dc9f94316bdd4ddeed7bed6eb84ea9" prot="public" virt="non-virtual"><scope>QuantLib::BrownianBridge</scope><name>rightIndex</name></member>
      <member refid="class_quant_lib_1_1_brownian_bridge_1afb9a2908853d4a6d344ef3b6f9c5fe0e" prot="private" virt="non-virtual"><scope>QuantLib::BrownianBridge</scope><name>rightIndex_</name></member>
      <member refid="class_quant_lib_1_1_brownian_bridge_1abc12c7d8e06fccc8013c0bd9669c87f5" prot="public" virt="non-virtual"><scope>QuantLib::BrownianBridge</scope><name>rightWeight</name></member>
      <member refid="class_quant_lib_1_1_brownian_bridge_1ab35c20db61318c9477771f6ba33406f3" prot="private" virt="non-virtual"><scope>QuantLib::BrownianBridge</scope><name>rightWeight_</name></member>
      <member refid="class_quant_lib_1_1_brownian_bridge_1a23e6439a229440c3f59d0ae7b0763013" prot="public" virt="non-virtual"><scope>QuantLib::BrownianBridge</scope><name>size</name></member>
      <member refid="class_quant_lib_1_1_brownian_bridge_1a5b3b2663cc920ca5ecc82987aa745444" prot="private" virt="non-virtual"><scope>QuantLib::BrownianBridge</scope><name>size_</name></member>
      <member refid="class_quant_lib_1_1_brownian_bridge_1a0b21496ee191fb94f196f3a3618a0139" prot="private" virt="non-virtual"><scope>QuantLib::BrownianBridge</scope><name>sqrtdt_</name></member>
      <member refid="class_quant_lib_1_1_brownian_bridge_1a2efe2cdefcfa2e717ea56641b50a1ddb" prot="private" virt="non-virtual"><scope>QuantLib::BrownianBridge</scope><name>stdDev_</name></member>
      <member refid="class_quant_lib_1_1_brownian_bridge_1afc7a84ff583f316e136e297243800df6" prot="public" virt="non-virtual"><scope>QuantLib::BrownianBridge</scope><name>stdDeviation</name></member>
      <member refid="class_quant_lib_1_1_brownian_bridge_1aa34acac343b30cac93b9872f5cbecc5a" prot="private" virt="non-virtual"><scope>QuantLib::BrownianBridge</scope><name>t_</name></member>
      <member refid="class_quant_lib_1_1_brownian_bridge_1a4253b072b74b4b868772f3f2aeb61c0d" prot="public" virt="non-virtual"><scope>QuantLib::BrownianBridge</scope><name>times</name></member>
      <member refid="class_quant_lib_1_1_brownian_bridge_1ac4134285d5572d4a0346d3d0423df935" prot="public" virt="non-virtual"><scope>QuantLib::BrownianBridge</scope><name>transform</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
