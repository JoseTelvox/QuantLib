<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_tree_lattice" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::TreeLattice</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_lattice" prot="public" virt="non-virtual">QuantLib::Lattice</basecompoundref>
    <basecompoundref refid="class_quant_lib_1_1_curiously_recurring_template" prot="public" virt="non-virtual">QuantLib::CuriouslyRecurringTemplate&lt; Impl &gt;</basecompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_tree_lattice1_d" prot="public" virt="non-virtual">QuantLib::TreeLattice1D&lt; Impl &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_tree_lattice2_d" prot="public" virt="non-virtual">QuantLib::TreeLattice2D&lt; Impl, T &gt;</derivedcompoundref>
    <includes refid="lattice_8hpp" local="no">lattice.hpp</includes>
    <templateparamlist>
      <param>
        <type>class Impl</type>
      </param>
    </templateparamlist>
    <sectiondef kind="user-defined">
      <header>Lattice interface</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_tree_lattice_1abcd8fa93a0c49f6f79a94077cc945e24" prot="protected" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &gt;</type>
        <definition>std::vector&lt;Array&gt; QuantLib::TreeLattice&lt; Impl &gt;::statePrices_</definition>
        <argsstring></argsstring>
        <name>statePrices_</name>
        <qualifiedname>QuantLib::TreeLattice::statePrices_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/lattices/lattice.hpp" line="87" column="29" bodyfile="ql/methods/lattices/lattice.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_tree_lattice_1a9de27844ca23330bf069d5b11d2f2d6e" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::TreeLattice&lt; Impl &gt;::n_</definition>
        <argsstring></argsstring>
        <name>n_</name>
        <qualifiedname>QuantLib::TreeLattice::n_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/lattices/lattice.hpp" line="90" column="14" bodyfile="ql/methods/lattices/lattice.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_tree_lattice_1a571c9e305674c72f171af28552782daf" prot="private" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::TreeLattice&lt; Impl &gt;::statePricesLimit_</definition>
        <argsstring></argsstring>
        <name>statePricesLimit_</name>
        <qualifiedname>QuantLib::TreeLattice::statePricesLimit_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/lattices/lattice.hpp" line="91" column="22" bodyfile="ql/methods/lattices/lattice.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_tree_lattice_1a33d74ea97e97eb59a0e54e79a51c9a86" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::TreeLattice&lt; Impl &gt;::initialize</definition>
        <argsstring>(DiscretizedAsset &amp;, Time t) const override</argsstring>
        <name>initialize</name>
        <qualifiedname>QuantLib::TreeLattice::initialize</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_lattice_1a49d43dd157ad0cb33c529a00bac27f74">initialize</reimplements>
        <param>
          <type><ref refid="class_quant_lib_1_1_discretized_asset" kindref="compound">DiscretizedAsset</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>initialize an asset at the given time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/lattices/lattice.hpp" line="70" column="14" bodyfile="ql/methods/lattices/lattice.hpp" bodystart="127" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_tree_lattice_1ad4df1c2dd46c759fa2553fdb3d95ab0b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::TreeLattice&lt; Impl &gt;::rollback</definition>
        <argsstring>(DiscretizedAsset &amp;, Time to) const override</argsstring>
        <name>rollback</name>
        <qualifiedname>QuantLib::TreeLattice::rollback</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_lattice_1a82f57b8f21105fa56a4eebbfddf7c972">rollback</reimplements>
        <reimplementedby refid="class_quant_lib_1_1_tsiveriotis_fernandes_lattice_1aa011e7dbe8d9970c1068fa22beef736a">rollback</reimplementedby>
        <param>
          <type><ref refid="class_quant_lib_1_1_discretized_asset" kindref="compound">DiscretizedAsset</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Roll back an asset until the given time, performing any needed adjustment. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/lattices/lattice.hpp" line="71" column="14" bodyfile="ql/methods/lattices/lattice.hpp" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_tree_lattice_1a09aedab2e04fc74f4924b7a7eddb37d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::TreeLattice&lt; Impl &gt;::partialRollback</definition>
        <argsstring>(DiscretizedAsset &amp;, Time to) const override</argsstring>
        <name>partialRollback</name>
        <qualifiedname>QuantLib::TreeLattice::partialRollback</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_lattice_1a96be0dfbf31527220bd7aac2217b4c51">partialRollback</reimplements>
        <reimplementedby refid="class_quant_lib_1_1_tsiveriotis_fernandes_lattice_1acb89e35250cfa99d1189a59929b21304">partialRollback</reimplementedby>
        <param>
          <type><ref refid="class_quant_lib_1_1_discretized_asset" kindref="compound">DiscretizedAsset</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Roll back an asset until the given time, but do not perform the final adjustment.</para>
<para><simplesect kind="warning"><para>In version 0.3.7 and earlier, this method was called rollAlmostBack method and performed pre-adjustment. This is no longer true; when migrating your code, you&apos;ll have to replace calls such as: <programlisting><codeline><highlight class="normal">method-&gt;rollAlmostBack(asset,t);</highlight></codeline>
</programlisting> with the two statements: <programlisting><codeline><highlight class="normal">method-&gt;partialRollback(asset,t);</highlight></codeline>
<codeline><highlight class="normal">asset-&gt;preAdjustValues();</highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/lattices/lattice.hpp" line="72" column="14" bodyfile="ql/methods/lattices/lattice.hpp" bodystart="140" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_tree_lattice_1a64f73976b6ca374d7db218bb17325265" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::TreeLattice&lt; Impl &gt;::presentValue</definition>
        <argsstring>(DiscretizedAsset &amp;) const override</argsstring>
        <name>presentValue</name>
        <qualifiedname>QuantLib::TreeLattice::presentValue</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_lattice_1aa61cde9479e924b633714eb5afa9dc37">presentValue</reimplements>
        <param>
          <type><ref refid="class_quant_lib_1_1_discretized_asset" kindref="compound">DiscretizedAsset</ref> &amp;</type>
          <defname>asset</defname>
        </param>
        <briefdescription>
<para>Computes the present value of an asset using Arrow-Debrew prices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/lattices/lattice.hpp" line="74" column="14" bodyfile="ql/methods/lattices/lattice.hpp" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_tree_lattice_1aba703e7ad6dbc1d481e8d1b0cfce75fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        <definition>const Array &amp; QuantLib::TreeLattice&lt; Impl &gt;::statePrices</definition>
        <argsstring>(Size i) const</argsstring>
        <name>statePrices</name>
        <qualifiedname>QuantLib::TreeLattice::statePrices</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/lattices/lattice.hpp" line="77" column="21" bodyfile="ql/methods/lattices/lattice.hpp" bodystart="114" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_tree_lattice_1a8b35328c08042a7d515d56e596aca076" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::TreeLattice&lt; Impl &gt;::stepback</definition>
        <argsstring>(Size i, const Array &amp;values, Array &amp;newValues) const</argsstring>
        <name>stepback</name>
        <qualifiedname>QuantLib::TreeLattice::stepback</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>newValues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/lattices/lattice.hpp" line="79" column="14" bodyfile="ql/methods/lattices/lattice.hpp" bodystart="167" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_tree_lattice_1a85438e107417fef54b34ffc0a61a9478" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::TreeLattice&lt; Impl &gt;::computeStatePrices</definition>
        <argsstring>(Size until) const</argsstring>
        <name>computeStatePrices</name>
        <qualifiedname>QuantLib::TreeLattice::computeStatePrices</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>until</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/lattices/lattice.hpp" line="84" column="14" bodyfile="ql/methods/lattices/lattice.hpp" bodystart="98" bodyend="111"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_tree_lattice_1ac5c0f8d4ca53ffb5e0e47a61c1ba64a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::TreeLattice&lt; Impl &gt;::TreeLattice</definition>
        <argsstring>(const TimeGrid &amp;timeGrid, Size n)</argsstring>
        <name>TreeLattice</name>
        <qualifiedname>QuantLib::TreeLattice::TreeLattice</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_time_grid" kindref="compound">TimeGrid</ref> &amp;</type>
          <declname>timeGrid</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/lattices/lattice.hpp" line="60" column="9" bodyfile="ql/methods/lattices/lattice.hpp" bodystart="60" bodyend="66"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Tree-based lattice-method base class. </para>
    </briefdescription>
    <detaileddescription>
<para>This class defines a lattice method that is able to rollback (with discount) a discretized asset object. It will be based on one or more trees.</para>
<para>Derived classes must implement the following interface: <programlisting><codeline><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespace_quant_lib_1a05e8e288a4bdedfe5b4e16d8cec14f1c" kindref="member">DiscountFactor</ref><sp/>discount(<ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>i,<sp/><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>descendant(<ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>i,<sp/><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>index,<sp/><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>branch)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref><sp/>probability(<ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>i,<sp/><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>index,<sp/><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>branch)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
</programlisting> and may implement the following: <programlisting><codeline><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stepback(<ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>i,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Array&amp;<sp/>values,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array&amp;<sp/>newValues)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>QuantLib::CuriouslyRecurringTemplate&lt; Impl &gt;</label>
        <link refid="class_quant_lib_1_1_curiously_recurring_template"/>
      </node>
      <node id="2">
        <label>QuantLib::Lattice</label>
        <link refid="class_quant_lib_1_1_lattice"/>
      </node>
      <node id="4">
        <label>QuantLib::TreeLattice1D&lt; Impl &gt;</label>
        <link refid="class_quant_lib_1_1_tree_lattice1_d"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::TreeLattice2D&lt; Impl, T &gt;</label>
        <link refid="class_quant_lib_1_1_tree_lattice2_d"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::TreeLattice&lt; Impl &gt;</label>
        <link refid="class_quant_lib_1_1_tree_lattice"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>QuantLib::CuriouslyRecurringTemplate&lt; Impl &gt;</label>
        <link refid="class_quant_lib_1_1_curiously_recurring_template"/>
      </node>
      <node id="2">
        <label>QuantLib::Lattice</label>
        <link refid="class_quant_lib_1_1_lattice"/>
        <childnode refid="3" relation="usage">
          <edgelabel>t_</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::TimeGrid</label>
        <link refid="class_quant_lib_1_1_time_grid"/>
      </node>
      <node id="1">
        <label>QuantLib::TreeLattice&lt; Impl &gt;</label>
        <link refid="class_quant_lib_1_1_tree_lattice"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/methods/lattices/lattice.hpp" line="57" column="5" bodyfile="ql/methods/lattices/lattice.hpp" bodystart="58" bodyend="92"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_tree_lattice_1a85438e107417fef54b34ffc0a61a9478" prot="protected" virt="non-virtual"><scope>QuantLib::TreeLattice</scope><name>computeStatePrices</name></member>
      <member refid="class_quant_lib_1_1_curiously_recurring_template_1ac51e69d7c3e616686e8777fcabebf954" prot="protected" virt="non-virtual"><scope>QuantLib::TreeLattice</scope><name>CuriouslyRecurringTemplate</name></member>
      <member refid="class_quant_lib_1_1_lattice_1ae3039e18f2760ade4924ca994ab799dd" prot="public" virt="pure-virtual"><scope>QuantLib::TreeLattice</scope><name>grid</name></member>
      <member refid="class_quant_lib_1_1_curiously_recurring_template_1a72c11590c74c9d0085fd43f17cdfe96e" prot="protected" virt="non-virtual"><scope>QuantLib::TreeLattice</scope><name>impl</name></member>
      <member refid="class_quant_lib_1_1_curiously_recurring_template_1a9efaa4c38bfca1e148ed265a809ed220" prot="protected" virt="non-virtual"><scope>QuantLib::TreeLattice</scope><name>impl</name></member>
      <member refid="class_quant_lib_1_1_tree_lattice_1a33d74ea97e97eb59a0e54e79a51c9a86" prot="public" virt="virtual"><scope>QuantLib::TreeLattice</scope><name>initialize</name></member>
      <member refid="class_quant_lib_1_1_lattice_1aff24a1110ca7dc6869aa7bdde456101f" prot="public" virt="non-virtual"><scope>QuantLib::TreeLattice</scope><name>Lattice</name></member>
      <member refid="class_quant_lib_1_1_tree_lattice_1a9de27844ca23330bf069d5b11d2f2d6e" prot="private" virt="non-virtual"><scope>QuantLib::TreeLattice</scope><name>n_</name></member>
      <member refid="class_quant_lib_1_1_tree_lattice_1a09aedab2e04fc74f4924b7a7eddb37d4" prot="public" virt="virtual"><scope>QuantLib::TreeLattice</scope><name>partialRollback</name></member>
      <member refid="class_quant_lib_1_1_tree_lattice_1a64f73976b6ca374d7db218bb17325265" prot="public" virt="virtual"><scope>QuantLib::TreeLattice</scope><name>presentValue</name></member>
      <member refid="class_quant_lib_1_1_tree_lattice_1ad4df1c2dd46c759fa2553fdb3d95ab0b" prot="public" virt="virtual"><scope>QuantLib::TreeLattice</scope><name>rollback</name></member>
      <member refid="class_quant_lib_1_1_tree_lattice_1aba703e7ad6dbc1d481e8d1b0cfce75fe" prot="public" virt="non-virtual"><scope>QuantLib::TreeLattice</scope><name>statePrices</name></member>
      <member refid="class_quant_lib_1_1_tree_lattice_1abcd8fa93a0c49f6f79a94077cc945e24" prot="protected" virt="non-virtual"><scope>QuantLib::TreeLattice</scope><name>statePrices_</name></member>
      <member refid="class_quant_lib_1_1_tree_lattice_1a571c9e305674c72f171af28552782daf" prot="private" virt="non-virtual"><scope>QuantLib::TreeLattice</scope><name>statePricesLimit_</name></member>
      <member refid="class_quant_lib_1_1_tree_lattice_1a8b35328c08042a7d515d56e596aca076" prot="public" virt="non-virtual"><scope>QuantLib::TreeLattice</scope><name>stepback</name></member>
      <member refid="class_quant_lib_1_1_lattice_1ad4983a465b76964a8f794ba1c6a6843d" prot="protected" virt="non-virtual"><scope>QuantLib::TreeLattice</scope><name>t_</name></member>
      <member refid="class_quant_lib_1_1_lattice_1a4c14b1590e92d0b198934bbce3c7666e" prot="public" virt="non-virtual"><scope>QuantLib::TreeLattice</scope><name>timeGrid</name></member>
      <member refid="class_quant_lib_1_1_tree_lattice_1ac5c0f8d4ca53ffb5e0e47a61c1ba64a5" prot="public" virt="non-virtual"><scope>QuantLib::TreeLattice</scope><name>TreeLattice</name></member>
      <member refid="class_quant_lib_1_1_curiously_recurring_template_1ae22b4353d3c05a5aad5f5b8769392b05" prot="protected" virt="non-virtual"><scope>QuantLib::TreeLattice</scope><name>~CuriouslyRecurringTemplate</name></member>
      <member refid="class_quant_lib_1_1_lattice_1adad7ac14bff456a9cf05967e6df004d1" prot="public" virt="virtual"><scope>QuantLib::TreeLattice</scope><name>~Lattice</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
