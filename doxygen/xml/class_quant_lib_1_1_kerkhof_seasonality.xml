<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_kerkhof_seasonality" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::KerkhofSeasonality</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_multiplicative_price_seasonality" prot="public" virt="non-virtual">QuantLib::MultiplicativePriceSeasonality</basecompoundref>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_kerkhof_seasonality_1a524e72aa0621f3e61031e5f9982b4165" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::KerkhofSeasonality::KerkhofSeasonality</definition>
        <argsstring>(const Date &amp;seasonalityBaseDate, const std::vector&lt; Rate &gt; &amp;seasonalityFactors)</argsstring>
        <name>KerkhofSeasonality</name>
        <qualifiedname>QuantLib::KerkhofSeasonality::KerkhofSeasonality</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>seasonalityBaseDate</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt; &amp;</type>
          <declname>seasonalityFactors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/seasonality.hpp" line="172" column="9" bodyfile="ql/termstructures/inflation/seasonality.hpp" bodystart="172" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_kerkhof_seasonality_1a57ead4c981ba485c6f37b326396cc3c4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::KerkhofSeasonality::seasonalityFactor</definition>
        <argsstring>(const Date &amp;to) const override</argsstring>
        <name>seasonalityFactor</name>
        <qualifiedname>QuantLib::KerkhofSeasonality::seasonalityFactor</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_multiplicative_price_seasonality_1a5b7c4418e61104ccfc0e57b07713716e">seasonalityFactor</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>The factor returned is NOT normalized relative to ANYTHING. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/seasonality.hpp" line="179" column="14" bodyfile="ql/termstructures/inflation/seasonality.cpp" bodystart="220" bodyend="255"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_kerkhof_seasonality_1a037dc6a432e6372e5bc08753fbe9399b" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::KerkhofSeasonality::seasonalityCorrection</definition>
        <argsstring>(Rate rate, const Date &amp;atDate, const DayCounter &amp;dc, const Date &amp;curveBaseDate, bool isZeroRate) const override</argsstring>
        <name>seasonalityCorrection</name>
        <qualifiedname>QuantLib::KerkhofSeasonality::seasonalityCorrection</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_multiplicative_price_seasonality_1a0c334eb6b36de5cfae91727b4d2edfbf">seasonalityCorrection</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>rate</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>atDate</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dc</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>curveBaseDate</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isZeroRate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/seasonality.hpp" line="182" column="14" bodyfile="ql/termstructures/inflation/seasonality.cpp" bodystart="257" bodyend="277"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::KerkhofSeasonality</label>
        <link refid="class_quant_lib_1_1_kerkhof_seasonality"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::MultiplicativePriceSeasonality</label>
        <link refid="class_quant_lib_1_1_multiplicative_price_seasonality"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Seasonality</label>
        <link refid="class_quant_lib_1_1_seasonality"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::KerkhofSeasonality</label>
        <link refid="class_quant_lib_1_1_kerkhof_seasonality"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::MultiplicativePriceSeasonality</label>
        <link refid="class_quant_lib_1_1_multiplicative_price_seasonality"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Seasonality</label>
        <link refid="class_quant_lib_1_1_seasonality"/>
      </node>
    </collaborationgraph>
    <location file="ql/termstructures/inflation/seasonality.hpp" line="170" column="5" bodyfile="ql/termstructures/inflation/seasonality.hpp" bodystart="170" bodyend="187"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1a6a3556aec0a30c6849b8a04bccf81969" prot="public" virt="virtual"><scope>QuantLib::KerkhofSeasonality</scope><name>correctYoYRate</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1ac39d8c0271e38f896ac68470e7af2dd1" prot="public" virt="virtual"><scope>QuantLib::KerkhofSeasonality</scope><name>correctZeroRate</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1a3e62381f30f1f586a85a1c1b2b571c19" prot="public" virt="virtual"><scope>QuantLib::KerkhofSeasonality</scope><name>frequency</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1a58d40d8a781134b3c329c4079638f2c3" prot="public" virt="virtual"><scope>QuantLib::KerkhofSeasonality</scope><name>isConsistent</name></member>
      <member refid="class_quant_lib_1_1_kerkhof_seasonality_1a524e72aa0621f3e61031e5f9982b4165" prot="public" virt="non-virtual"><scope>QuantLib::KerkhofSeasonality</scope><name>KerkhofSeasonality</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1ac2e0ebc6cf7e5a1dcd773be0dd411e77" prot="public" virt="non-virtual"><scope>QuantLib::KerkhofSeasonality</scope><name>MultiplicativePriceSeasonality</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1a64fa8049272a9954c3d6e7a813cf998b" prot="public" virt="non-virtual"><scope>QuantLib::KerkhofSeasonality</scope><name>MultiplicativePriceSeasonality</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1ab834aadfed8d909db0b8343ee5483d14" prot="public" virt="virtual"><scope>QuantLib::KerkhofSeasonality</scope><name>seasonalityBaseDate</name></member>
      <member refid="class_quant_lib_1_1_kerkhof_seasonality_1a037dc6a432e6372e5bc08753fbe9399b" prot="protected" virt="virtual"><scope>QuantLib::KerkhofSeasonality</scope><name>seasonalityCorrection</name></member>
      <member refid="class_quant_lib_1_1_kerkhof_seasonality_1a57ead4c981ba485c6f37b326396cc3c4" prot="public" virt="virtual"><scope>QuantLib::KerkhofSeasonality</scope><name>seasonalityFactor</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1aae530f28ea0340aa84e05ef0b240e7f7" prot="public" virt="virtual"><scope>QuantLib::KerkhofSeasonality</scope><name>seasonalityFactors</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1ab828fbdc78b25f35f05c0c424b979c87" prot="public" virt="virtual"><scope>QuantLib::KerkhofSeasonality</scope><name>set</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1ae684fc6a176fb9ed539730f467621176" prot="protected" virt="virtual"><scope>QuantLib::KerkhofSeasonality</scope><name>validate</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1a97c22337e6693f82e2e978d8a0bb1ac5" prot="public" virt="non-virtual"><scope>QuantLib::KerkhofSeasonality</scope><name>~MultiplicativePriceSeasonality</name></member>
      <member refid="class_quant_lib_1_1_seasonality_1a1db1a611c8548cae789c3184955c6203" prot="public" virt="virtual"><scope>QuantLib::KerkhofSeasonality</scope><name>~Seasonality</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
