<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_gaussian_l_h_p_loss_model" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::GaussianLHPLossModel</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_default_loss_model" prot="public" virt="non-virtual">QuantLib::DefaultLossModel</basecompoundref>
    <basecompoundref refid="class_quant_lib_1_1_latent_model" prot="public" virt="non-virtual">QuantLib::LatentModel&lt; GaussianCopulaPolicy &gt;</basecompoundref>
    <includes refid="gaussianlhplossmodel_8hpp" local="no">gaussianlhplossmodel.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1adc6c2bbf4bd847878da4937e0b07e085" prot="public" static="no">
        <type><ref refid="struct_quant_lib_1_1_gaussian_copula_policy" kindref="compound">GaussianCopulaPolicy</ref></type>
        <definition>typedef GaussianCopulaPolicy QuantLib::GaussianLHPLossModel::copulaType</definition>
        <argsstring></argsstring>
        <name>copulaType</name>
        <qualifiedname>QuantLib::GaussianLHPLossModel::copulaType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/gaussianlhplossmodel.hpp" line="64" column="38" bodyfile="ql/experimental/credit/gaussianlhplossmodel.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1a40dbde08d2cb0947e970b545e65363e4" prot="private" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GaussianLHPLossModel::sqrt1minuscorrel_</definition>
        <argsstring></argsstring>
        <name>sqrt1minuscorrel_</name>
        <qualifiedname>QuantLib::GaussianLHPLossModel::sqrt1minuscorrel_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/gaussianlhplossmodel.hpp" line="193" column="22" bodyfile="ql/experimental/credit/gaussianlhplossmodel.hpp" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1a46f0da652798bb5b29842c4c60417ddf" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
        <definition>Handle&lt;Quote&gt; QuantLib::GaussianLHPLossModel::correl_</definition>
        <argsstring></argsstring>
        <name>correl_</name>
        <qualifiedname>QuantLib::GaussianLHPLossModel::correl_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/gaussianlhplossmodel.hpp" line="195" column="16" bodyfile="ql/experimental/credit/gaussianlhplossmodel.hpp" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1a084e73b45cdad35ba4615ea88dc7bd60" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_recovery_rate_quote" kindref="compound">RecoveryRateQuote</ref> &gt; &gt;</type>
        <definition>std::vector&lt;Handle&lt;RecoveryRateQuote&gt; &gt; QuantLib::GaussianLHPLossModel::rrQuotes_</definition>
        <argsstring></argsstring>
        <name>rrQuotes_</name>
        <qualifiedname>QuantLib::GaussianLHPLossModel::rrQuotes_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/gaussianlhplossmodel.hpp" line="196" column="21" bodyfile="ql/experimental/credit/gaussianlhplossmodel.hpp" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1a6d190afcbfeb4b7fe37844c62d9b71d5" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GaussianLHPLossModel::beta_</definition>
        <argsstring></argsstring>
        <name>beta_</name>
        <qualifiedname>QuantLib::GaussianLHPLossModel::beta_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/gaussianlhplossmodel.hpp" line="208" column="14" bodyfile="ql/experimental/credit/gaussianlhplossmodel.hpp" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1afa15c21a81d1a6958481664ad5d835e3" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a267ca1390f600848cd9bea25f3d468ec" kindref="member">BivariateCumulativeNormalDistribution</ref></type>
        <definition>BivariateCumulativeNormalDistribution QuantLib::GaussianLHPLossModel::biphi_</definition>
        <argsstring></argsstring>
        <name>biphi_</name>
        <qualifiedname>QuantLib::GaussianLHPLossModel::biphi_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/gaussianlhplossmodel.hpp" line="209" column="47" bodyfile="ql/experimental/credit/gaussianlhplossmodel.hpp" bodystart="209" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1ac18432aa687280d0b39e8cab9fa4b097" prot="private" static="yes" mutable="no">
        <type><ref refid="class_quant_lib_1_1_cumulative_normal_distribution" kindref="compound">CumulativeNormalDistribution</ref> const</type>
        <definition>CumulativeNormalDistribution const QuantLib::GaussianLHPLossModel::phi_</definition>
        <argsstring></argsstring>
        <name>phi_</name>
        <qualifiedname>QuantLib::GaussianLHPLossModel::phi_</qualifiedname>
        <initializer>= 
        <ref refid="class_quant_lib_1_1_cumulative_normal_distribution" kindref="compound">CumulativeNormalDistribution</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/gaussianlhplossmodel.hpp" line="210" column="51" bodyfile="ql/experimental/credit/gaussianlhplossmodel.hpp" bodystart="210" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1a82e402b7c318e54f000a8ed5e5dc6f1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::GaussianLHPLossModel::GaussianLHPLossModel</definition>
        <argsstring>(const Handle&lt; Quote &gt; &amp;correlQuote, const std::vector&lt; Handle&lt; RecoveryRateQuote &gt; &gt; &amp;quotes)</argsstring>
        <name>GaussianLHPLossModel</name>
        <qualifiedname>QuantLib::GaussianLHPLossModel::GaussianLHPLossModel</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &amp;</type>
          <declname>correlQuote</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_recovery_rate_quote" kindref="compound">RecoveryRateQuote</ref> &gt; &gt; &amp;</type>
          <declname>quotes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/gaussianlhplossmodel.hpp" line="66" column="9" bodyfile="ql/experimental/credit/gaussianlhplossmodel.cpp" bodystart="33" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1ab9cdc9e6c4c19ff0c2d9698b6845e104" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::GaussianLHPLossModel::GaussianLHPLossModel</definition>
        <argsstring>(Real correlation, const std::vector&lt; Real &gt; &amp;recoveries)</argsstring>
        <name>GaussianLHPLossModel</name>
        <qualifiedname>QuantLib::GaussianLHPLossModel::GaussianLHPLossModel</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>correlation</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>recoveries</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/gaussianlhplossmodel.hpp" line="70" column="9" bodyfile="ql/experimental/credit/gaussianlhplossmodel.cpp" bodystart="51" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1a24db22770f0f97e4235312ab1fd66976" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::GaussianLHPLossModel::GaussianLHPLossModel</definition>
        <argsstring>(const Handle&lt; Quote &gt; &amp;correlQuote, const std::vector&lt; Real &gt; &amp;recoveries)</argsstring>
        <name>GaussianLHPLossModel</name>
        <qualifiedname>QuantLib::GaussianLHPLossModel::GaussianLHPLossModel</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &amp;</type>
          <declname>correlQuote</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>recoveries</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/gaussianlhplossmodel.hpp" line="74" column="9" bodyfile="ql/experimental/credit/gaussianlhplossmodel.cpp" bodystart="67" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1ab0bcd15e41f85db6045faba749987887" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::GaussianLHPLossModel::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <qualifiedname>QuantLib::GaussianLHPLossModel::update</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_observer_1a07905c55dca858470fcf4a1aea0005aa">update</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must be implemented in derived classes. An instance of Observer does not call this method directly: instead, it will be called by the observables the instance registered with when they need to notify any changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/gaussianlhplossmodel.hpp" line="78" column="14" bodyfile="ql/experimental/credit/gaussianlhplossmodel.hpp" bodystart="78" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1a52591a79257a3edf2ec86f1893258503" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GaussianLHPLossModel::expectedTrancheLoss</definition>
        <argsstring>(const Date &amp;d) const override</argsstring>
        <name>expectedTrancheLoss</name>
        <qualifiedname>QuantLib::GaussianLHPLossModel::expectedTrancheLoss</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1a258763493804fe4c84b533716df00991">expectedTrancheLoss</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/gaussianlhplossmodel.hpp" line="98" column="12" bodyfile="ql/experimental/credit/gaussianlhplossmodel.hpp" bodystart="98" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1af7cbfe0087be4a3176cbcf4858abbb35" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GaussianLHPLossModel::probOverLoss</definition>
        <argsstring>(const Date &amp;d, Real remainingLossFraction) const override</argsstring>
        <name>probOverLoss</name>
        <qualifiedname>QuantLib::GaussianLHPLossModel::probOverLoss</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1a922ca5f0ea73b3a33420fbcfb2556e93">probOverLoss</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>remainingLossFraction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The passed remainingLossFraction is in live tranche units, not portfolio as a fraction of the remaining(live) tranche (i.e. a_remaining=0% and det_remaining=100%) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/gaussianlhplossmodel.hpp" line="121" column="12" bodyfile="ql/experimental/credit/gaussianlhplossmodel.cpp" bodystart="118" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1ac9bc74e6442c0793d204abca5f006ede" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GaussianLHPLossModel::expectedShortfall</definition>
        <argsstring>(const Date &amp;d, Probability perctl) const override</argsstring>
        <name>expectedShortfall</name>
        <qualifiedname>QuantLib::GaussianLHPLossModel::expectedShortfall</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1a60bd1a166744f4de455cae1c1c83f6a1">expectedShortfall</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
          <declname>perctl</declname>
        </param>
        <briefdescription>
<para>Returns the ESF as an absolute amount (rather than a fraction) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/gaussianlhplossmodel.hpp" line="129" column="12" bodyfile="ql/experimental/credit/gaussianlhplossmodel.cpp" bodystart="156" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1a4038f595a6bdac5f6820abe2f11a6bcb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GaussianLHPLossModel::percentile</definition>
        <argsstring>(const Date &amp;d, Real perctl) const override</argsstring>
        <name>percentile</name>
        <qualifiedname>QuantLib::GaussianLHPLossModel::percentile</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1ac7142d4e72958aef5a602167a138973e">percentile</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>percentile</declname>
        </param>
        <briefdescription>
<para>Value at Risk given a default loss percentile. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/gaussianlhplossmodel.hpp" line="142" column="12" bodyfile="ql/experimental/credit/gaussianlhplossmodel.hpp" bodystart="142" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1acd708c36a6e2a420d3ba9e9209f15007" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::GaussianLHPLossModel::averageProb</definition>
        <argsstring>(const Date &amp;d) const</argsstring>
        <name>averageProb</name>
        <qualifiedname>QuantLib::GaussianLHPLossModel::averageProb</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/gaussianlhplossmodel.hpp" line="153" column="21" bodyfile="ql/experimental/credit/gaussianlhplossmodel.hpp" bodystart="153" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1a4eb79ba0a4ac1979c4bcc363fb41c209" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GaussianLHPLossModel::averageRecovery</definition>
        <argsstring>(const Date &amp;d) const</argsstring>
        <name>averageRecovery</name>
        <qualifiedname>QuantLib::GaussianLHPLossModel::averageRecovery</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/gaussianlhplossmodel.hpp" line="171" column="14" bodyfile="ql/experimental/credit/gaussianlhplossmodel.hpp" bodystart="171" bodyend="189"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1accfb739b053668c9a916b45dc50dbd78" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::GaussianLHPLossModel::resetModel</definition>
        <argsstring>() override</argsstring>
        <name>resetModel</name>
        <qualifiedname>QuantLib::GaussianLHPLossModel::resetModel</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1ac32cbab626c8ba8ebb0dcace3eed4a38">resetModel</reimplements>
        <briefdescription>
<para>Concrete models do now any updates/inits they need on basket reset. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/gaussianlhplossmodel.hpp" line="88" column="12" bodyfile="ql/experimental/credit/gaussianlhplossmodel.hpp" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1a4f29387b09e6f13051f224554e16a984" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GaussianLHPLossModel::expectedTrancheLossImpl</definition>
        <argsstring>(Real remainingNot, Real prob, Real averageRR, Real attachLimit, Real detachLimit) const</argsstring>
        <name>expectedTrancheLossImpl</name>
        <qualifiedname>QuantLib::GaussianLHPLossModel::expectedTrancheLossImpl</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>remainingNot</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>prob</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>averageRR</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>attachLimit</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>detachLimit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>attachLimit</parametername>
</parameternamelist>
<parameterdescription>
<para>as a fraction of the underlying live portfolio notional </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/gaussianlhplossmodel.hpp" line="92" column="12" bodyfile="ql/experimental/credit/gaussianlhplossmodel.cpp" bodystart="85" bodyend="116"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1ac4e3ad92dc272af63cb752c1725a5583" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GaussianLHPLossModel::percentilePortfolioLossFraction</definition>
        <argsstring>(const Date &amp;d, Real perctl) const</argsstring>
        <name>percentilePortfolioLossFraction</name>
        <qualifiedname>QuantLib::GaussianLHPLossModel::percentilePortfolioLossFraction</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>perctl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/gaussianlhplossmodel.hpp" line="135" column="14" bodyfile="ql/experimental/credit/gaussianlhplossmodel.cpp" bodystart="187" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1a08280f18afc778b2861374ada981a5f6" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GaussianLHPLossModel::expectedRecovery</definition>
        <argsstring>(const Date &amp;d, Size iName, const DefaultProbKey &amp;ik) const override</argsstring>
        <name>expectedRecovery</name>
        <qualifiedname>QuantLib::GaussianLHPLossModel::expectedRecovery</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1afd0d4637df1423173d5efc758a16f354">expectedRecovery</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_default_prob_key" kindref="compound">DefaultProbKey</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Expected RR for name conditinal to default by that date. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/gaussianlhplossmodel.hpp" line="136" column="14" bodyfile="ql/experimental/credit/gaussianlhplossmodel.hpp" bodystart="136" bodyend="138"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Portfolio loss model with analytical expected tranche loss for a large homogeneous pool with Gaussian one-factor copula. See for example &quot;The Normal Inverse Gaussian Distribution for Synthetic CDO pricing.&quot;, Anna Kalemanova, Bernd Schmid, Ralf Werner, Journal of Derivatives, Vol. 14, No. 3, (Spring 2007), pp. 80-93. <ulink url="http://www.defaultrisk.com/pp_crdrv_91.htm">http://www.defaultrisk.com/pp_crdrv_91.htm</ulink></para>
<para>It can be used to price a credit derivative or to provide risk metrics of a portfolio.</para>
<para><xrefsect id="todo_1_todo000013"><xreftitle>Todo</xreftitle><xrefdescription><para>It should be checking that basket exposures are deterministic (fixed or programmed amortizing) otherwise the model is not fit for the basket.</para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000014"><xreftitle>Todo</xreftitle><xrefdescription><para>Bugging on tranched baskets with upper limit over maximum attainable loss? </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QuantLib::DefaultLossModel</label>
        <link refid="class_quant_lib_1_1_default_loss_model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::GaussianLHPLossModel</label>
        <link refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::LatentModel&lt; GaussianCopulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_latent_model"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>QuantLib::DefaultLossModel</label>
        <link refid="class_quant_lib_1_1_default_loss_model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>basket_</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>QuantLib::GaussianCopulaPolicy</label>
        <link refid="struct_quant_lib_1_1_gaussian_copula_policy"/>
      </node>
      <node id="1">
        <label>QuantLib::GaussianLHPLossModel</label>
        <link refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Handle&lt; QuantLib::Basket &gt;</label>
        <link refid="class_quant_lib_1_1_handle"/>
      </node>
      <node id="8">
        <label>QuantLib::Handle&lt; QuantLib::Quote &gt;</label>
        <link refid="class_quant_lib_1_1_handle"/>
      </node>
      <node id="6">
        <label>QuantLib::LatentModel&lt; GaussianCopulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_latent_model"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>cachedMktFactor_</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>copula_</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="7">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="4">
        <label>QuantLib::RelinkableHandle&lt; QuantLib::Basket &gt;</label>
        <link refid="class_quant_lib_1_1_relinkable_handle"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/credit/gaussianlhplossmodel.hpp" line="61" column="5" bodyfile="ql/experimental/credit/gaussianlhplossmodel.hpp" bodystart="62" bodyend="211"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_latent_model_1a77b6963ac7d92d55caade265c40af9e4" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>allFactorCumulInverter</name></member>
      <member refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1acd708c36a6e2a420d3ba9e9209f15007" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>averageProb</name></member>
      <member refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1a4eb79ba0a4ac1979c4bcc363fb41c209" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>averageRecovery</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ad2700ffb7198321f52fdeb42e9a8e043" prot="protected" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>basket_</name></member>
      <member refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1a6d190afcbfeb4b7fe37844c62d9b71d5" prot="private" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>beta_</name></member>
      <member refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1afa15c21a81d1a6958481664ad5d835e3" prot="private" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>biphi_</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a68e201047207fd50ca0725a2cb7a21d4" prot="protected" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>cachedMktFactor_</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1ae56d8a54eabfb0d0216f472c727b65ac" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>copula</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1aa3dbc85525bd7e1dfbf3a41591cabe27" prot="protected" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>copula_</name></member>
      <member refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1adc6c2bbf4bd847878da4937e0b07e085" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>copulaType</name></member>
      <member refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1a46f0da652798bb5b29842c4c60417ddf" prot="private" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>correl_</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1af159333d575c0b252de3c71371919dc2" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>cumulativeY</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1ae64724a9ecdc4cb7dadd555b019da10b" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>cumulativeZ</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1a25ed3ba8a38c4afaca5dca5b8cfd1d7d" prot="protected" virt="virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>defaultCorrelation</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ac51090f561e4372e495bfa9edee0000b" prot="protected" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>DefaultLossModel</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a9711849d61e8bc79608424661ac9dde2" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>density</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ab57e81d3fdd238c0cb19db2808bc5b59" prot="protected" virt="virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>densityTrancheLoss</name></member>
      <member refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1a08280f18afc778b2861374ada981a5f6" prot="protected" virt="virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>expectedRecovery</name></member>
      <member refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1ac9bc74e6442c0793d204abca5f006ede" prot="public" virt="virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>expectedShortfall</name></member>
      <member refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1a52591a79257a3edf2ec86f1893258503" prot="public" virt="virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>expectedTrancheLoss</name></member>
      <member refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1a4f29387b09e6f13051f224554e16a984" prot="private" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>expectedTrancheLossImpl</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a9058f44d45963e20631cf813f500ed50" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>factorWeights</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a416b1acb0a0321ba7eac54c1bc1c494d" prot="protected" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>factorWeights_</name></member>
      <member refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1a82e402b7c318e54f000a8ed5e5dc6f1b" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>GaussianLHPLossModel</name></member>
      <member refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1ab9cdc9e6c4c19ff0c2d9698b6845e104" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>GaussianLHPLossModel</name></member>
      <member refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1a24db22770f0f97e4235312ab1fd66976" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>GaussianLHPLossModel</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1ad630746a257d3e970ecf83cd47878cd3" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>idiosyncFctrs</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a4f058b49788035828bbe2b3e78db9ebe" prot="protected" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>idiosyncFctrs_</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a8f73847f26e632e54de23dc218e44875" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>integratedExpectedValue</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a450b60907aff21aa12ef61c50206ec4b" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>integratedExpectedValueV</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a89eb0c30269ba582f13776a19048c94b" prot="protected" virt="virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>integration</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a10f1e843503876609d1cb14ac9b26c8e" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>inverseCumulativeDensity</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a8f4c7a3b52e2a50a88b3a2e67cc1109b" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>inverseCumulativeY</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a28355f257003546d33fda003452c820e" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>inverseCumulativeZ</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a2423b7437ca2ba9796e153bd9b9df050" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>LatentModel</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a250ac646a6be88e253dc37c2620de9dd" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>LatentModel</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a762ae56003287bdd2995e5a46a8c9f57" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>LatentModel</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a4200b7490c6d6690d2ec1df95d4862ba" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>LatentModel</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a9d3034be325054187dfafbd5f7ef1890" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>latentVariableCorrel</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1aede4740894962881f21e1522349eb287" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>latentVarValue</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1aeff66ecf317c1dc23713424daf563f88" prot="protected" virt="virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>lossDistribution</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1acd1daf4e28ce8ab5233065be60fd2896" prot="protected" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>nFactors_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::GaussianLHPLossModel</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LatentModel&lt; GaussianCopulaPolicy &gt;::"><scope>QuantLib::GaussianLHPLossModel</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1ad410d410b17c524efa114598a0455936" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>numFactors</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a752c04c15550a49537c7eb0557bd6b16" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>numTotalFactors</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a43e8cf454283157cab9a90b5aa261409" prot="protected" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>nVariables_</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::GaussianLHPLossModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::GaussianLHPLossModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::GaussianLHPLossModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LatentModel&lt; GaussianCopulaPolicy &gt;::"><scope>QuantLib::GaussianLHPLossModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LatentModel&lt; GaussianCopulaPolicy &gt;::"><scope>QuantLib::GaussianLHPLossModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LatentModel&lt; GaussianCopulaPolicy &gt;::"><scope>QuantLib::GaussianLHPLossModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LatentModel&lt; GaussianCopulaPolicy &gt;::"><scope>QuantLib::GaussianLHPLossModel</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::GaussianLHPLossModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::GaussianLHPLossModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LatentModel&lt; GaussianCopulaPolicy &gt;::QuantLib::"><scope>QuantLib::GaussianLHPLossModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LatentModel&lt; GaussianCopulaPolicy &gt;::"><scope>QuantLib::GaussianLHPLossModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::GaussianLHPLossModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1a4038f595a6bdac5f6820abe2f11a6bcb" prot="public" virt="virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>percentile</name></member>
      <member refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1ac4e3ad92dc272af63cb752c1725a5583" prot="protected" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>percentilePortfolioLossFraction</name></member>
      <member refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1ac18432aa687280d0b39e8cab9fa4b097" prot="private" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>phi_</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ab46164d907ae7772c0a5f6788ce4568b" prot="protected" virt="virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>probAtLeastNEvents</name></member>
      <member refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1af7cbfe0087be4a3176cbcf4858abbb35" prot="public" virt="virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>probOverLoss</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ab8053b0ecb53c758939cf5c7a33fb328" prot="protected" virt="virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>probsBeingNthEvent</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1accfb739b053668c9a916b45dc50dbd78" prot="private" virt="virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>resetModel</name></member>
      <member refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1a084e73b45cdad35ba4615ea88dc7bd60" prot="private" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>rrQuotes_</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a1dedcee7cecd341a0ed6131577b2f48e" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>size</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1a467843d56b00359a8fa7d0a1017079a5" prot="protected" virt="virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>splitESFLevel</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ab70b30442fcdda802730fd711c5348da" prot="protected" virt="virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>splitVaRLevel</name></member>
      <member refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1a40dbde08d2cb0947e970b545e65363e4" prot="private" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>sqrt1minuscorrel_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model_1ab0bcd15e41f85db6045faba749987887" prot="public" virt="virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::GaussianLHPLossModel</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
