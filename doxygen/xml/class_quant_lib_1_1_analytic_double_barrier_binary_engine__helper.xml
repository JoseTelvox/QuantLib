<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_analytic_double_barrier_binary_engine__helper" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::AnalyticDoubleBarrierBinaryEngine_helper</compoundname>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_double_barrier_binary_engine__helper_1a3bbdd17259944810b3bf9388c5357621" prot="private" static="no" mutable="no">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt; &amp;</type>
        <definition>const ext::shared_ptr&lt;GeneralizedBlackScholesProcess&gt;&amp; QuantLib::AnalyticDoubleBarrierBinaryEngine_helper::process_</definition>
        <argsstring></argsstring>
        <name>process_</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierBinaryEngine_helper::process_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierbinaryengine.cpp" line="57" column="31" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierbinaryengine.cpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_double_barrier_binary_engine__helper_1a8342a3215b5c82ece45b6019a508147d" prot="private" static="no" mutable="no">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_cash_or_nothing_payoff" kindref="compound">CashOrNothingPayoff</ref> &gt; &amp;</type>
        <definition>const ext::shared_ptr&lt;CashOrNothingPayoff&gt;&amp; QuantLib::AnalyticDoubleBarrierBinaryEngine_helper::payoff_</definition>
        <argsstring></argsstring>
        <name>payoff_</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierBinaryEngine_helper::payoff_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierbinaryengine.cpp" line="58" column="31" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierbinaryengine.cpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_double_barrier_binary_engine__helper_1a61f0ea611471ffaf668e23ea8be1df5a" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_quant_lib_1_1_double_barrier_option_1_1arguments" kindref="compound">DoubleBarrierOption::arguments</ref> &amp;</type>
        <definition>const DoubleBarrierOption::arguments&amp; QuantLib::AnalyticDoubleBarrierBinaryEngine_helper::arguments_</definition>
        <argsstring></argsstring>
        <name>arguments_</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierBinaryEngine_helper::arguments_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierbinaryengine.cpp" line="59" column="46" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierbinaryengine.cpp" bodystart="59" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_double_barrier_binary_engine__helper_1a7f9aa1da700a66577f762152dcca5a69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::AnalyticDoubleBarrierBinaryEngine_helper::AnalyticDoubleBarrierBinaryEngine_helper</definition>
        <argsstring>(const ext::shared_ptr&lt; GeneralizedBlackScholesProcess &gt; &amp;process, const ext::shared_ptr&lt; CashOrNothingPayoff &gt; &amp;payoff, const DoubleBarrierOption::arguments &amp;arguments)</argsstring>
        <name>AnalyticDoubleBarrierBinaryEngine_helper</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierBinaryEngine_helper::AnalyticDoubleBarrierBinaryEngine_helper</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt; &amp;</type>
          <declname>process</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_cash_or_nothing_payoff" kindref="compound">CashOrNothingPayoff</ref> &gt; &amp;</type>
          <declname>payoff</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_double_barrier_option_1_1arguments" kindref="compound">DoubleBarrierOption::arguments</ref> &amp;</type>
          <declname>arguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierbinaryengine.cpp" line="36" column="9" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierbinaryengine.cpp" bodystart="36" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_double_barrier_binary_engine__helper_1add5b6e0b396de19ca8eb8fdc2da74d74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticDoubleBarrierBinaryEngine_helper::payoffAtExpiry</definition>
        <argsstring>(Real spot, Real variance, DoubleBarrier::Type barrierType, Size maxIteration=100, Real requiredConvergence=1e-8)</argsstring>
        <name>payoffAtExpiry</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierBinaryEngine_helper::payoffAtExpiry</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>spot</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>variance</declname>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_double_barrier_1ac1221f8400cd673297abbf49b58cdf5b" kindref="member">DoubleBarrier::Type</ref></type>
          <declname>barrierType</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxIteration</declname>
          <defval>100</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>requiredConvergence</declname>
          <defval>1e-8</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierbinaryengine.cpp" line="46" column="14" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierbinaryengine.cpp" bodystart="64" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_double_barrier_binary_engine__helper_1a79a9191cf12933358cd7275bc72e8b1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticDoubleBarrierBinaryEngine_helper::payoffKIKO</definition>
        <argsstring>(Real spot, Real variance, DoubleBarrier::Type barrierType, Size maxIteration=1000, Real requiredConvergence=1e-8)</argsstring>
        <name>payoffKIKO</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierBinaryEngine_helper::payoffKIKO</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>spot</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>variance</declname>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_double_barrier_1ac1221f8400cd673297abbf49b58cdf5b" kindref="member">DoubleBarrier::Type</ref></type>
          <declname>barrierType</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxIteration</declname>
          <defval>1000</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>requiredConvergence</declname>
          <defval>1e-8</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierbinaryengine.cpp" line="50" column="14" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierbinaryengine.cpp" bodystart="124" bodyend="172"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ql/pricingengines/barrier/analyticdoublebarrierbinaryengine.cpp" line="32" column="5" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierbinaryengine.cpp" bodystart="33" bodyend="60"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_binary_engine__helper_1a7f9aa1da700a66577f762152dcca5a69" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierBinaryEngine_helper</scope><name>AnalyticDoubleBarrierBinaryEngine_helper</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_binary_engine__helper_1a61f0ea611471ffaf668e23ea8be1df5a" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierBinaryEngine_helper</scope><name>arguments_</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_binary_engine__helper_1a8342a3215b5c82ece45b6019a508147d" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierBinaryEngine_helper</scope><name>payoff_</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_binary_engine__helper_1add5b6e0b396de19ca8eb8fdc2da74d74" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierBinaryEngine_helper</scope><name>payoffAtExpiry</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_binary_engine__helper_1a79a9191cf12933358cd7275bc72e8b1c" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierBinaryEngine_helper</scope><name>payoffKIKO</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_binary_engine__helper_1a3bbdd17259944810b3bf9388c5357621" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierBinaryEngine_helper</scope><name>process_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
