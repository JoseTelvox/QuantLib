<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_fdm_wiener_op" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::FdmWienerOp</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_fdm_linear_op_composite" prot="public" virt="non-virtual">QuantLib::FdmLinearOpComposite</basecompoundref>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_fdm_wiener_op_1a98d98793306dbb2d1d11a730980c937b" prot="private" static="no" mutable="no">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt;</type>
        <definition>const ext::shared_ptr&lt;YieldTermStructure&gt; QuantLib::FdmWienerOp::rTS_</definition>
        <argsstring></argsstring>
        <name>rTS_</name>
        <qualifiedname>QuantLib::FdmWienerOp::rTS_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/operators/fdmwienerop.hpp" line="55" column="31" bodyfile="ql/methods/finitedifferences/operators/fdmwienerop.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_fdm_wiener_op_1ab53637a4a6f474d949af3a957db05595" prot="private" static="no" mutable="no">
        <type>std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_triple_band_linear_op" kindref="compound">TripleBandLinearOp</ref> &gt; &gt;</type>
        <definition>std::vector&lt;ext::shared_ptr&lt;TripleBandLinearOp&gt; &gt; QuantLib::FdmWienerOp::ops_</definition>
        <argsstring></argsstring>
        <name>ops_</name>
        <qualifiedname>QuantLib::FdmWienerOp::ops_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/operators/fdmwienerop.hpp" line="56" column="21" bodyfile="ql/methods/finitedifferences/operators/fdmwienerop.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_fdm_wiener_op_1ad7cb3d4c983c2c15cd51dc2f1778e386" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::FdmWienerOp::r_</definition>
        <argsstring></argsstring>
        <name>r_</name>
        <qualifiedname>QuantLib::FdmWienerOp::r_</qualifiedname>
        <initializer>= 0.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/operators/fdmwienerop.hpp" line="57" column="14" bodyfile="ql/methods/finitedifferences/operators/fdmwienerop.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_fdm_wiener_op_1a031ba41f29feddf3f5ea1ba1928f7e1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::FdmWienerOp::FdmWienerOp</definition>
        <argsstring>(const ext::shared_ptr&lt; FdmMesher &gt; &amp;mesher, ext::shared_ptr&lt; YieldTermStructure &gt; rTS, const Array &amp;lambdas)</argsstring>
        <name>FdmWienerOp</name>
        <qualifiedname>QuantLib::FdmWienerOp::FdmWienerOp</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_fdm_mesher" kindref="compound">FdmMesher</ref> &gt; &amp;</type>
          <declname>mesher</declname>
        </param>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt;</type>
          <declname>rTS</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>lambdas</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/operators/fdmwienerop.hpp" line="37" column="9" bodyfile="ql/methods/finitedifferences/operators/fdmwienerop.cpp" bodystart="34" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_fdm_wiener_op_1ab3ae14876bb4a0c9942ffaabbb078e8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::FdmWienerOp::size</definition>
        <argsstring>() const override</argsstring>
        <name>size</name>
        <qualifiedname>QuantLib::FdmWienerOp::size</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_fdm_linear_op_composite_1aea89ff84d04c901c37823de66b392018">size</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/operators/fdmwienerop.hpp" line="42" column="14" bodyfile="ql/methods/finitedifferences/operators/fdmwienerop.cpp" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_fdm_wiener_op_1a70960e8928c0ee6fd9632ef9e520fe02" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::FdmWienerOp::setTime</definition>
        <argsstring>(Time t1, Time t2) override</argsstring>
        <name>setTime</name>
        <qualifiedname>QuantLib::FdmWienerOp::setTime</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_fdm_linear_op_composite_1ab635911759d6a1bde11c501d15515872">setTime</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t1</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t2</declname>
        </param>
        <briefdescription>
<para><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> <formula id="385">$t1 &lt;= t2$</formula> is required. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/operators/fdmwienerop.hpp" line="43" column="14" bodyfile="ql/methods/finitedifferences/operators/fdmwienerop.cpp" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_fdm_wiener_op_1a8eda8f65d6276f3fe127fcc89174bd11" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::FdmWienerOp::apply</definition>
        <argsstring>(const Array &amp;x) const override</argsstring>
        <name>apply</name>
        <qualifiedname>QuantLib::FdmWienerOp::apply</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_fdm_linear_op_1a9d59d8bb3597206db60f61c3f448c211">apply</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/operators/fdmwienerop.hpp" line="44" column="15" bodyfile="ql/methods/finitedifferences/operators/fdmwienerop.cpp" bodystart="59" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_fdm_wiener_op_1ab26f7922d9364636b4db136271e9d3c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::FdmWienerOp::apply_mixed</definition>
        <argsstring>(const Array &amp;x) const override</argsstring>
        <name>apply_mixed</name>
        <qualifiedname>QuantLib::FdmWienerOp::apply_mixed</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_fdm_linear_op_composite_1a162fe1437fb3060475f7824d73b72ff7">apply_mixed</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/operators/fdmwienerop.hpp" line="45" column="15" bodyfile="ql/methods/finitedifferences/operators/fdmwienerop.cpp" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_fdm_wiener_op_1ab594a1139b06a6473208950760e6d91f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::FdmWienerOp::apply_direction</definition>
        <argsstring>(Size direction, const Array &amp;x) const override</argsstring>
        <name>apply_direction</name>
        <qualifiedname>QuantLib::FdmWienerOp::apply_direction</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_fdm_linear_op_composite_1aa9f8c9bcd1596637b3eaaa74c64ad83c">apply_direction</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>direction</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/operators/fdmwienerop.hpp" line="47" column="15" bodyfile="ql/methods/finitedifferences/operators/fdmwienerop.cpp" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_fdm_wiener_op_1a2e6ef71d93bec164107cdf1064508438" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::FdmWienerOp::solve_splitting</definition>
        <argsstring>(Size direction, const Array &amp;x, Real s) const override</argsstring>
        <name>solve_splitting</name>
        <qualifiedname>QuantLib::FdmWienerOp::solve_splitting</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_fdm_linear_op_composite_1a1ea6ebafd3a36a95a6acb6e1c189e21f">solve_splitting</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>direction</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/operators/fdmwienerop.hpp" line="49" column="15" bodyfile="ql/methods/finitedifferences/operators/fdmwienerop.cpp" bodystart="75" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_fdm_wiener_op_1a1ea06c563a977a709009b5c830509c32" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::FdmWienerOp::preconditioner</definition>
        <argsstring>(const Array &amp;r, Real s) const override</argsstring>
        <name>preconditioner</name>
        <qualifiedname>QuantLib::FdmWienerOp::preconditioner</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_fdm_linear_op_composite_1a3122983a62d53799ffd1c03922660e6c">preconditioner</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/operators/fdmwienerop.hpp" line="50" column="15" bodyfile="ql/methods/finitedifferences/operators/fdmwienerop.cpp" bodystart="81" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_fdm_wiener_op_1ae5b65b6cf7932a5f5803f3e47fe5be41" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; SparseMatrix &gt;</type>
        <definition>std::vector&lt; SparseMatrix &gt; QuantLib::FdmWienerOp::toMatrixDecomp</definition>
        <argsstring>() const override</argsstring>
        <name>toMatrixDecomp</name>
        <qualifiedname>QuantLib::FdmWienerOp::toMatrixDecomp</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_fdm_linear_op_composite_1aae06b697cc0d041a8cbdd9b259ec34b9">toMatrixDecomp</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/operators/fdmwienerop.hpp" line="52" column="21" bodyfile="ql/methods/finitedifferences/operators/fdmwienerop.cpp" bodystart="85" bodyend="93"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>QuantLib::FdmLinearOp</label>
        <link refid="class_quant_lib_1_1_fdm_linear_op"/>
      </node>
      <node id="2">
        <label>QuantLib::FdmLinearOpComposite</label>
        <link refid="class_quant_lib_1_1_fdm_linear_op_composite"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::FdmWienerOp</label>
        <link refid="class_quant_lib_1_1_fdm_wiener_op"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>QuantLib::FdmLinearOp</label>
        <link refid="class_quant_lib_1_1_fdm_linear_op"/>
      </node>
      <node id="2">
        <label>QuantLib::FdmLinearOpComposite</label>
        <link refid="class_quant_lib_1_1_fdm_linear_op_composite"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::FdmWienerOp</label>
        <link refid="class_quant_lib_1_1_fdm_wiener_op"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/methods/finitedifferences/operators/fdmwienerop.hpp" line="35" column="5" bodyfile="ql/methods/finitedifferences/operators/fdmwienerop.hpp" bodystart="35" bodyend="58"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_fdm_wiener_op_1a8eda8f65d6276f3fe127fcc89174bd11" prot="public" virt="virtual"><scope>QuantLib::FdmWienerOp</scope><name>apply</name></member>
      <member refid="class_quant_lib_1_1_fdm_wiener_op_1ab594a1139b06a6473208950760e6d91f" prot="public" virt="virtual"><scope>QuantLib::FdmWienerOp</scope><name>apply_direction</name></member>
      <member refid="class_quant_lib_1_1_fdm_wiener_op_1ab26f7922d9364636b4db136271e9d3c9" prot="public" virt="virtual"><scope>QuantLib::FdmWienerOp</scope><name>apply_mixed</name></member>
      <member refid="class_quant_lib_1_1_fdm_linear_op_1af55693593c0cf7e885c67fd848f76e49" prot="public" virt="non-virtual"><scope>QuantLib::FdmWienerOp</scope><name>array_type</name></member>
      <member refid="class_quant_lib_1_1_fdm_wiener_op_1a031ba41f29feddf3f5ea1ba1928f7e1d" prot="public" virt="non-virtual"><scope>QuantLib::FdmWienerOp</scope><name>FdmWienerOp</name></member>
      <member refid="class_quant_lib_1_1_fdm_wiener_op_1ab53637a4a6f474d949af3a957db05595" prot="private" virt="non-virtual"><scope>QuantLib::FdmWienerOp</scope><name>ops_</name></member>
      <member refid="class_quant_lib_1_1_fdm_wiener_op_1a1ea06c563a977a709009b5c830509c32" prot="public" virt="virtual"><scope>QuantLib::FdmWienerOp</scope><name>preconditioner</name></member>
      <member refid="class_quant_lib_1_1_fdm_wiener_op_1ad7cb3d4c983c2c15cd51dc2f1778e386" prot="private" virt="non-virtual"><scope>QuantLib::FdmWienerOp</scope><name>r_</name></member>
      <member refid="class_quant_lib_1_1_fdm_wiener_op_1a98d98793306dbb2d1d11a730980c937b" prot="private" virt="non-virtual"><scope>QuantLib::FdmWienerOp</scope><name>rTS_</name></member>
      <member refid="class_quant_lib_1_1_fdm_wiener_op_1a70960e8928c0ee6fd9632ef9e520fe02" prot="public" virt="virtual"><scope>QuantLib::FdmWienerOp</scope><name>setTime</name></member>
      <member refid="class_quant_lib_1_1_fdm_wiener_op_1ab3ae14876bb4a0c9942ffaabbb078e8c" prot="public" virt="virtual"><scope>QuantLib::FdmWienerOp</scope><name>size</name></member>
      <member refid="class_quant_lib_1_1_fdm_wiener_op_1a2e6ef71d93bec164107cdf1064508438" prot="public" virt="virtual"><scope>QuantLib::FdmWienerOp</scope><name>solve_splitting</name></member>
      <member refid="class_quant_lib_1_1_fdm_linear_op_composite_1abca0364ae63b5b0e714fcd3ac9e8a73b" prot="public" virt="virtual"><scope>QuantLib::FdmWienerOp</scope><name>toMatrix</name></member>
      <member refid="class_quant_lib_1_1_fdm_wiener_op_1ae5b65b6cf7932a5f5803f3e47fe5be41" prot="public" virt="virtual"><scope>QuantLib::FdmWienerOp</scope><name>toMatrixDecomp</name></member>
      <member refid="class_quant_lib_1_1_fdm_linear_op_1aa6f29eb6144a1848c73c21e392f023e4" prot="public" virt="virtual"><scope>QuantLib::FdmWienerOp</scope><name>~FdmLinearOp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
