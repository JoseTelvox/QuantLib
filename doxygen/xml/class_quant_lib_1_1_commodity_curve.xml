<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_commodity_curve" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::CommodityCurve</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_term_structure" prot="public" virt="non-virtual">QuantLib::TermStructure</basecompoundref>
    <includes refid="commoditycurve_8hpp" local="no">commoditycurve.hpp</includes>
    <sectiondef kind="user-defined">
      <header>Inspectors</header>
      <memberdef kind="friend" id="class_quant_lib_1_1_commodity_curve_1a384f71c293df0b1656207900652a2b23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const CommodityCurve &amp;curve)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::CommodityCurve::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_curve" kindref="compound">CommodityCurve</ref> &amp;</type>
          <declname>curve</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="87" column="16" bodyfile="ql/experimental/commodities/commoditycurve.cpp" bodystart="99" bodyend="105"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_commodity_curve_1afc32a9aed169fc05465d8e543c51139f" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string QuantLib::CommodityCurve::name_</definition>
        <argsstring></argsstring>
        <name>name_</name>
        <qualifiedname>QuantLib::CommodityCurve::name_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="92" column="21" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_commodity_curve_1ab8ea6ffcfa4eed86bacfdee111061e26" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref></type>
        <definition>CommodityType QuantLib::CommodityCurve::commodityType_</definition>
        <argsstring></argsstring>
        <name>commodityType_</name>
        <qualifiedname>QuantLib::CommodityCurve::commodityType_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="93" column="23" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_commodity_curve_1a7afe3a8f7cb5eada4ca7a94c66c841cc" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref></type>
        <definition>UnitOfMeasure QuantLib::CommodityCurve::unitOfMeasure_</definition>
        <argsstring></argsstring>
        <name>unitOfMeasure_</name>
        <qualifiedname>QuantLib::CommodityCurve::unitOfMeasure_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="94" column="23" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_commodity_curve_1abda113e56bf77e597a6ca19d1a2f2c74" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref></type>
        <definition>Currency QuantLib::CommodityCurve::currency_</definition>
        <argsstring></argsstring>
        <name>currency_</name>
        <qualifiedname>QuantLib::CommodityCurve::currency_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="95" column="18" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_commodity_curve_1adb2a63bc764c345d98addd0f7d2d1724" prot="protected" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt;</type>
        <definition>std::vector&lt;Date&gt; QuantLib::CommodityCurve::dates_</definition>
        <argsstring></argsstring>
        <name>dates_</name>
        <qualifiedname>QuantLib::CommodityCurve::dates_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="96" column="29" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_commodity_curve_1afb688816aa5977b3518c7055af4a5108" prot="protected" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt;</type>
        <definition>std::vector&lt;Time&gt; QuantLib::CommodityCurve::times_</definition>
        <argsstring></argsstring>
        <name>times_</name>
        <qualifiedname>QuantLib::CommodityCurve::times_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="97" column="29" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_commodity_curve_1a39785f5548531e287e3c46252b0dfe23" prot="protected" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::CommodityCurve::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <qualifiedname>QuantLib::CommodityCurve::data_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="98" column="29" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_commodity_curve_1afe8dc103034c7943ebe6c65bd77b86be" prot="protected" static="no" mutable="yes">
        <type><ref refid="class_quant_lib_1_1_interpolation" kindref="compound">Interpolation</ref></type>
        <definition>Interpolation QuantLib::CommodityCurve::interpolation_</definition>
        <argsstring></argsstring>
        <name>interpolation_</name>
        <qualifiedname>QuantLib::CommodityCurve::interpolation_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="99" column="31" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_commodity_curve_1ad92a3ad880f3d4d5c08807b755fdadf1" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_forward_flat" kindref="compound">ForwardFlat</ref></type>
        <definition>ForwardFlat QuantLib::CommodityCurve::interpolator_</definition>
        <argsstring></argsstring>
        <name>interpolator_</name>
        <qualifiedname>QuantLib::CommodityCurve::interpolator_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="100" column="21" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_commodity_curve_1a092ed3be7a22cd98aa6c1c62b8d31752" prot="protected" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_commodity_curve" kindref="compound">CommodityCurve</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;CommodityCurve&gt; QuantLib::CommodityCurve::basisOfCurve_</definition>
        <argsstring></argsstring>
        <name>basisOfCurve_</name>
        <qualifiedname>QuantLib::CommodityCurve::basisOfCurve_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="101" column="25" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_commodity_curve_1a6b69c28379b37adcd6dd63cb2acebedb" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CommodityCurve::basisOfCurveUomConversionFactor_</definition>
        <argsstring></argsstring>
        <name>basisOfCurveUomConversionFactor_</name>
        <qualifiedname>QuantLib::CommodityCurve::basisOfCurveUomConversionFactor_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="102" column="14" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_curve_1a9aec1f9feb0068c2f69b7d154a19d275" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; QuantLib::CommodityCurve::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <qualifiedname>QuantLib::CommodityCurve::name</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="60" column="27" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_curve_1a15ea6e4bdcdf18987bd7447ef05736b9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref> &amp;</type>
        <definition>const CommodityType &amp; QuantLib::CommodityCurve::commodityType</definition>
        <argsstring>() const</argsstring>
        <name>commodityType</name>
        <qualifiedname>QuantLib::CommodityCurve::commodityType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="61" column="29" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_curve_1a8c164de095d0cfd91f9039eb7269b31c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref> &amp;</type>
        <definition>const UnitOfMeasure &amp; QuantLib::CommodityCurve::unitOfMeasure</definition>
        <argsstring>() const</argsstring>
        <name>unitOfMeasure</name>
        <qualifiedname>QuantLib::CommodityCurve::unitOfMeasure</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="62" column="29" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="118" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_curve_1ab4c5af4505d6af614812f955ae6e0427" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref> &amp;</type>
        <definition>const Currency &amp; QuantLib::CommodityCurve::currency</definition>
        <argsstring>() const</argsstring>
        <name>currency</name>
        <qualifiedname>QuantLib::CommodityCurve::currency</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="63" column="24" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_curve_1a81a6c8aff220998e2fe35e690a25872d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::CommodityCurve::maxDate</definition>
        <argsstring>() const override</argsstring>
        <name>maxDate</name>
        <qualifiedname>QuantLib::CommodityCurve::maxDate</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_term_structure_1ae9af756bbddc15962711f77f514f08fa">maxDate</reimplements>
        <briefdescription>
<para>the latest date for which the curve can return values </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="64" column="14" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_curve_1ac1a50fe3fa1a71fdc760e1cbdcaeaaee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Time &gt; &amp; QuantLib::CommodityCurve::times</definition>
        <argsstring>() const</argsstring>
        <name>times</name>
        <qualifiedname>QuantLib::CommodityCurve::times</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="65" column="27" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="134" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_curve_1a6a48291368416cc960d10b810c0c0893" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Date &gt; &amp; QuantLib::CommodityCurve::dates</definition>
        <argsstring>() const</argsstring>
        <name>dates</name>
        <qualifiedname>QuantLib::CommodityCurve::dates</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="66" column="27" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="138" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_curve_1a98f958f4d6935be6a995aa598febf11c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Real &gt; &amp; QuantLib::CommodityCurve::prices</definition>
        <argsstring>() const</argsstring>
        <name>prices</name>
        <qualifiedname>QuantLib::CommodityCurve::prices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="67" column="27" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="142" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_curve_1ab701962f1f3096fc740bb89fbc1a9a3a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; Date, Real &gt; &gt; QuantLib::CommodityCurve::nodes</definition>
        <argsstring>() const</argsstring>
        <name>nodes</name>
        <qualifiedname>QuantLib::CommodityCurve::nodes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="68" column="21" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="155" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_curve_1a6ca14d09c1e0f1225895344722faf5b8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::CommodityCurve::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>QuantLib::CommodityCurve::empty</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="69" column="14" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="146" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_curve_1a78d3f9340345730d44815b68fb8b0d3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::CommodityCurve::setPrices</definition>
        <argsstring>(std::map&lt; Date, Real &gt; &amp;prices)</argsstring>
        <name>setPrices</name>
        <qualifiedname>QuantLib::CommodityCurve::setPrices</qualifiedname>
        <param>
          <type>std::map&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>prices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="71" column="14" bodyfile="ql/experimental/commodities/commoditycurve.cpp" bodystart="68" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_curve_1a5b14cae7629d64278242e40fda5d2cf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::CommodityCurve::setBasisOfCurve</definition>
        <argsstring>(const ext::shared_ptr&lt; CommodityCurve &gt; &amp;basisOfCurve)</argsstring>
        <name>setBasisOfCurve</name>
        <qualifiedname>QuantLib::CommodityCurve::setBasisOfCurve</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_commodity_curve" kindref="compound">CommodityCurve</ref> &gt; &amp;</type>
          <declname>basisOfCurve</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="72" column="14" bodyfile="ql/experimental/commodities/commoditycurve.cpp" bodystart="89" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_curve_1aa7181043ae7caab3302321f41510fc0d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CommodityCurve::price</definition>
        <argsstring>(const Date &amp;d, const ext::shared_ptr&lt; ExchangeContracts &gt; &amp;exchangeContracts, Integer nearbyOffset) const</argsstring>
        <name>price</name>
        <qualifiedname>QuantLib::CommodityCurve::price</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; ExchangeContracts &gt; &amp;</type>
          <declname>exchangeContracts</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
          <declname>nearbyOffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="75" column="14" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="168" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_curve_1a3458deb27ba318278d81820a625c283e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CommodityCurve::basisOfPrice</definition>
        <argsstring>(const Date &amp;d) const</argsstring>
        <name>basisOfPrice</name>
        <qualifiedname>QuantLib::CommodityCurve::basisOfPrice</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="79" column="14" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="162" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_curve_1a137046c50187590517a960ea959ebe34" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::CommodityCurve::underlyingPriceDate</definition>
        <argsstring>(const Date &amp;date, const ext::shared_ptr&lt; ExchangeContracts &gt; &amp;exchangeContracts, Integer nearbyOffset) const</argsstring>
        <name>underlyingPriceDate</name>
        <qualifiedname>QuantLib::CommodityCurve::underlyingPriceDate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; ExchangeContracts &gt; &amp;</type>
          <declname>exchangeContracts</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
          <declname>nearbyOffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="80" column="14" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="187" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_curve_1a3704b939b9bc629ce3e0199d4197f6f3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_commodity_curve" kindref="compound">CommodityCurve</ref> &gt; &amp;</type>
        <definition>const ext::shared_ptr&lt; CommodityCurve &gt; &amp; QuantLib::CommodityCurve::basisOfCurve</definition>
        <argsstring>() const</argsstring>
        <name>basisOfCurve</name>
        <qualifiedname>QuantLib::CommodityCurve::basisOfCurve</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="85" column="31" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="151" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_curve_1aef129a84ac61da81130579b89bd0c01e" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CommodityCurve::basisOfPriceImpl</definition>
        <argsstring>(Time t) const</argsstring>
        <name>basisOfPriceImpl</name>
        <qualifiedname>QuantLib::CommodityCurve::basisOfPriceImpl</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="90" column="14" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="205" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_curve_1a58cf08586874b57657824ff0a1f69e83" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CommodityCurve::priceImpl</definition>
        <argsstring>(Time t) const</argsstring>
        <name>priceImpl</name>
        <qualifiedname>QuantLib::CommodityCurve::priceImpl</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="104" column="14" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="221" bodyend="223"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_quant_lib_1_1_commodity_curve_1a23f24ca187903f6d750d3aeaa33b6706" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class CommodityIndex</definition>
        <argsstring></argsstring>
        <name>CommodityIndex</name>
        <qualifiedname>QuantLib::CommodityCurve::CommodityIndex</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_commodity_index" kindref="compound">CommodityIndex</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="39" column="22" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_curve_1aba199c19ee93c687ad657cad1570a1d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::CommodityCurve::CommodityCurve</definition>
        <argsstring>(std::string name, CommodityType commodityType, Currency currency, UnitOfMeasure unitOfMeasure, const Calendar &amp;calendar, const std::vector&lt; Date &gt; &amp;dates, std::vector&lt; Real &gt; prices, const DayCounter &amp;dayCounter=Actual365Fixed())</argsstring>
        <name>CommodityCurve</name>
        <qualifiedname>QuantLib::CommodityCurve::CommodityCurve</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref></type>
          <declname>commodityType</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref></type>
          <declname>currency</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref></type>
          <declname>unitOfMeasure</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;</type>
          <declname>calendar</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt; &amp;</type>
          <declname>dates</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
          <declname>prices</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
          <defval><ref refid="class_quant_lib_1_1_actual365_fixed" kindref="compound">Actual365Fixed</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="42" column="9" bodyfile="ql/experimental/commodities/commoditycurve.cpp" bodystart="26" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_curve_1a3901b45e9df344ac28ffcecc7cf86ece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::CommodityCurve::CommodityCurve</definition>
        <argsstring>(std::string name, CommodityType commodityType, Currency currency, UnitOfMeasure unitOfMeasure, const Calendar &amp;calendar, const DayCounter &amp;dayCounter=Actual365Fixed())</argsstring>
        <name>CommodityCurve</name>
        <qualifiedname>QuantLib::CommodityCurve::CommodityCurve</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref></type>
          <declname>commodityType</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref></type>
          <declname>currency</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref></type>
          <declname>unitOfMeasure</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;</type>
          <declname>calendar</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
          <defval><ref refid="class_quant_lib_1_1_actual365_fixed" kindref="compound">Actual365Fixed</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditycurve.hpp" line="51" column="9" bodyfile="ql/experimental/commodities/commoditycurve.cpp" bodystart="57" bodyend="66"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para><ref refid="class_quant_lib_1_1_commodity" kindref="compound">Commodity</ref> term structure. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::CommodityCurve</label>
        <link refid="class_quant_lib_1_1_commodity_curve"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Extrapolator</label>
        <link refid="class_quant_lib_1_1_extrapolator"/>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="3">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::TermStructure</label>
        <link refid="class_quant_lib_1_1_term_structure"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>QuantLib::Calendar</label>
        <link refid="class_quant_lib_1_1_calendar"/>
      </node>
      <node id="1">
        <label>QuantLib::CommodityCurve</label>
        <link refid="class_quant_lib_1_1_commodity_curve"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>commodityType_</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>unitOfMeasure_</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>currency_</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>interpolation_</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>interpolator_</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::CommodityType</label>
        <link refid="class_quant_lib_1_1_commodity_type"/>
      </node>
      <node id="9">
        <label>QuantLib::Currency</label>
        <link refid="class_quant_lib_1_1_currency"/>
      </node>
      <node id="5">
        <label>QuantLib::Extrapolator</label>
        <link refid="class_quant_lib_1_1_extrapolator"/>
      </node>
      <node id="11">
        <label>QuantLib::ForwardFlat</label>
        <link refid="class_quant_lib_1_1_forward_flat"/>
      </node>
      <node id="10">
        <label>QuantLib::Interpolation</label>
        <link refid="class_quant_lib_1_1_interpolation"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="3">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::TermStructure</label>
        <link refid="class_quant_lib_1_1_term_structure"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>calendar_</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>QuantLib::UnitOfMeasure</label>
        <link refid="class_quant_lib_1_1_unit_of_measure"/>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/commodities/commoditycurve.hpp" line="38" column="5" bodyfile="ql/experimental/commodities/commoditycurve.hpp" bodystart="38" bodyend="105"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_extrapolator_1ab3936a9b5b5c163d3e511437c16c1d9e" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>allowsExtrapolation</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1a3704b939b9bc629ce3e0199d4197f6f3" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>basisOfCurve</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1a092ed3be7a22cd98aa6c1c62b8d31752" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>basisOfCurve_</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1a6b69c28379b37adcd6dd63cb2acebedb" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>basisOfCurveUomConversionFactor_</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1a3458deb27ba318278d81820a625c283e" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>basisOfPrice</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1aef129a84ac61da81130579b89bd0c01e" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>basisOfPriceImpl</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1ac4ea5cbce495c9a47a44eeaedf7a9d45" prot="public" virt="virtual"><scope>QuantLib::CommodityCurve</scope><name>calendar</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1a0a09e3fa8cdfbc9aa9685da0c35ccb90" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>calendar_</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1aa7297742ffbeeb0c7611f90a0f7d15bf" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>checkRange</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1a4d246bcb13b7518a75088bf7cf01ea75" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>checkRange</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1aba199c19ee93c687ad657cad1570a1d2" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>CommodityCurve</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1a3901b45e9df344ac28ffcecc7cf86ece" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>CommodityCurve</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1a23f24ca187903f6d750d3aeaa33b6706" prot="private" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>CommodityIndex</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1a15ea6e4bdcdf18987bd7447ef05736b9" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>commodityType</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1ab8ea6ffcfa4eed86bacfdee111061e26" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>commodityType_</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1ab4c5af4505d6af614812f955ae6e0427" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>currency</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1abda113e56bf77e597a6ca19d1a2f2c74" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>currency_</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1a39785f5548531e287e3c46252b0dfe23" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>data_</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1a6a48291368416cc960d10b810c0c0893" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>dates</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1adb2a63bc764c345d98addd0f7d2d1724" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>dates_</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1ac03e725e4e0685b209caa626b00924ca" prot="public" virt="virtual"><scope>QuantLib::CommodityCurve</scope><name>dayCounter</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::CommodityCurve</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_extrapolator_1a6af69387d5cae0fe84d6a0c858406218" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>disableExtrapolation</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1a6ca14d09c1e0f1225895344722faf5b8" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>empty</name></member>
      <member refid="class_quant_lib_1_1_extrapolator_1a5f7b5650a44d6c63095bc739470c8bfb" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>enableExtrapolation</name></member>
      <member refid="class_quant_lib_1_1_extrapolator_1af1c3adaccdfaf07d3d07edaa234444f7" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>Extrapolator</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1afe8dc103034c7943ebe6c65bd77b86be" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>interpolation_</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1ad92a3ad880f3d4d5c08807b755fdadf1" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>interpolator_</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1a81a6c8aff220998e2fe35e690a25872d" prot="public" virt="virtual"><scope>QuantLib::CommodityCurve</scope><name>maxDate</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1a2f820c32e198e1046d97ca3dd9a807c5" prot="public" virt="virtual"><scope>QuantLib::CommodityCurve</scope><name>maxTime</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1a8319e5c2c37b09a825d61210c9cb8e2a" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>moving_</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1a9aec1f9feb0068c2f69b7d154a19d275" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>name</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1afc32a9aed169fc05465d8e543c51139f" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>name_</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1ab701962f1f3096fc740bb89fbc1a9a3a" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>nodes</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::TermStructure::"><scope>QuantLib::CommodityCurve</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::TermStructure::"><scope>QuantLib::CommodityCurve</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::TermStructure::"><scope>QuantLib::CommodityCurve</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1a384f71c293df0b1656207900652a2b23" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::CommodityCurve</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::TermStructure::QuantLib::Observable::"><scope>QuantLib::CommodityCurve</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::CommodityCurve</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1aa7181043ae7caab3302321f41510fc0d" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>price</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1a58cf08586874b57657824ff0a1f69e83" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>priceImpl</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1a98f958f4d6935be6a995aa598febf11c" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>prices</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1accbf3d4af41db0333d456eb5616c4e1e" prot="public" virt="virtual"><scope>QuantLib::CommodityCurve</scope><name>referenceDate</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1a5b14cae7629d64278242e40fda5d2cf2" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>setBasisOfCurve</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1a78d3f9340345730d44815b68fb8b0d3d" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>setPrices</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1abeb79eefda70a9414f206ca9e70ced0f" prot="public" virt="virtual"><scope>QuantLib::CommodityCurve</scope><name>settlementDays</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1ac8365997e6d41134b4e0998fe6b4e949" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>TermStructure</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1a95764a49e0368b653eadbe619d9ef334" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>TermStructure</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1aab73d2acafdc8fbdf9336e7084bd88a1" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>TermStructure</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1ac8da61eb0f06ae07a35e8e4bbe7146b0" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>timeFromReference</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1ac1a50fe3fa1a71fdc760e1cbdcaeaaee" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>times</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1afb688816aa5977b3518c7055af4a5108" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>times_</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1a137046c50187590517a960ea959ebe34" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>underlyingPriceDate</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1a8c164de095d0cfd91f9039eb7269b31c" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>unitOfMeasure</name></member>
      <member refid="class_quant_lib_1_1_commodity_curve_1a7afe3a8f7cb5eada4ca7a94c66c841cc" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>unitOfMeasure_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1a016528f1fe9cabca6472d8f4776351e2" prot="public" virt="virtual"><scope>QuantLib::CommodityCurve</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1a2fcf1c78e57786ad5c123f52dbf619e8" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>updated_</name></member>
      <member refid="class_quant_lib_1_1_extrapolator_1af0ca0156436ffbce159183198eb27e2e" prot="public" virt="virtual"><scope>QuantLib::CommodityCurve</scope><name>~Extrapolator</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::CommodityCurve</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::CommodityCurve</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1ad202ddcc14fc4a6c16686d6164d7b36c" prot="public" virt="non-virtual"><scope>QuantLib::CommodityCurve</scope><name>~TermStructure</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
