<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_swap_forward_mappings" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::SwapForwardMappings</compoundname>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_quant_lib_1_1_swap_forward_mappings_1a7b72f15841e78ed8e4d720981107967f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SwapForwardMappings::annuity</definition>
        <argsstring>(const CurveState &amp;cs, Size startIndex, Size endIndex, Size numeraireIndex)</argsstring>
        <name>annuity</name>
        <qualifiedname>QuantLib::SwapForwardMappings::annuity</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_curve_state" kindref="compound">CurveState</ref> &amp;</type>
          <declname>cs</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>startIndex</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>endIndex</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>numeraireIndex</declname>
        </param>
        <briefdescription>
<para>compute annuity of arbitrary swap-rate </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/swapforwardmappings.hpp" line="39" column="21" bodyfile="ql/models/marketmodels/swapforwardmappings.cpp" bodystart="33" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_swap_forward_mappings_1ac56fede6ed3c4c0e3deb858928b07dc1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SwapForwardMappings::swapDerivative</definition>
        <argsstring>(const CurveState &amp;cs, Size startIndex, Size endIndex, Size forwardIndex)</argsstring>
        <name>swapDerivative</name>
        <qualifiedname>QuantLib::SwapForwardMappings::swapDerivative</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_curve_state" kindref="compound">CurveState</ref> &amp;</type>
          <declname>cs</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>startIndex</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>endIndex</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>forwardIndex</declname>
        </param>
        <briefdescription>
<para>compute derivative of swap-rate to underlying forward rate </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/swapforwardmappings.hpp" line="45" column="21" bodyfile="ql/models/marketmodels/swapforwardmappings.cpp" bodystart="45" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_swap_forward_mappings_1a19cce4b32c4c71e6011cdf9e439b8ed0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::SwapForwardMappings::coterminalSwapForwardJacobian</definition>
        <argsstring>(const CurveState &amp;cs)</argsstring>
        <name>coterminalSwapForwardJacobian</name>
        <qualifiedname>QuantLib::SwapForwardMappings::coterminalSwapForwardJacobian</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_curve_state" kindref="compound">CurveState</ref> &amp;</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the dsr[i]/df[j] jacobian between coterminal swap rates and forward rates </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/swapforwardmappings.hpp" line="52" column="23" bodyfile="ql/models/marketmodels/swapforwardmappings.cpp" bodystart="72" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_swap_forward_mappings_1a8ba30db8637b742cf8a598da1fb0412d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::SwapForwardMappings::coterminalSwapZedMatrix</definition>
        <argsstring>(const CurveState &amp;cs, Spread displacement)</argsstring>
        <name>coterminalSwapZedMatrix</name>
        <qualifiedname>QuantLib::SwapForwardMappings::coterminalSwapZedMatrix</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_curve_state" kindref="compound">CurveState</ref> &amp;</type>
          <declname>cs</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref></type>
          <declname>displacement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the Z matrix to switch base from forward to coterminal swap rates </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/swapforwardmappings.hpp" line="56" column="23" bodyfile="ql/models/marketmodels/swapforwardmappings.cpp" bodystart="102" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_swap_forward_mappings_1ad1067714b872ab897a19cd4272d4784d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::SwapForwardMappings::coinitialSwapForwardJacobian</definition>
        <argsstring>(const CurveState &amp;cs)</argsstring>
        <name>coinitialSwapForwardJacobian</name>
        <qualifiedname>QuantLib::SwapForwardMappings::coinitialSwapForwardJacobian</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_curve_state" kindref="compound">CurveState</ref> &amp;</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the dsr[i]/df[j] jacobian between coinitial swap rates and forward rates </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/swapforwardmappings.hpp" line="60" column="23" bodyfile="ql/models/marketmodels/swapforwardmappings.cpp" bodystart="115" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_swap_forward_mappings_1a4a1fd5c572e753bebcd251b66d9f3897" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::SwapForwardMappings::coinitialSwapZedMatrix</definition>
        <argsstring>(const CurveState &amp;cs, Spread displacement)</argsstring>
        <name>coinitialSwapZedMatrix</name>
        <qualifiedname>QuantLib::SwapForwardMappings::coinitialSwapZedMatrix</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_curve_state" kindref="compound">CurveState</ref> &amp;</type>
          <declname>cs</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref></type>
          <declname>displacement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the Z matrix to switch base from forward to coinitial swap rates </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/swapforwardmappings.hpp" line="64" column="23" bodyfile="ql/models/marketmodels/swapforwardmappings.cpp" bodystart="140" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_swap_forward_mappings_1a5c77df67932a422849983cb829ff8597" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::SwapForwardMappings::cmSwapForwardJacobian</definition>
        <argsstring>(const CurveState &amp;cs, Size spanningForwards)</argsstring>
        <name>cmSwapForwardJacobian</name>
        <qualifiedname>QuantLib::SwapForwardMappings::cmSwapForwardJacobian</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_curve_state" kindref="compound">CurveState</ref> &amp;</type>
          <declname>cs</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>spanningForwards</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the dsr[i]/df[j] jacobian between constant maturity swap rates and forward rates </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/swapforwardmappings.hpp" line="69" column="23" bodyfile="ql/models/marketmodels/swapforwardmappings.cpp" bodystart="127" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_swap_forward_mappings_1ac115e07a48a615f33880e23b120680f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::SwapForwardMappings::cmSwapZedMatrix</definition>
        <argsstring>(const CurveState &amp;cs, Size spanningForwards, Spread displacement)</argsstring>
        <name>cmSwapZedMatrix</name>
        <qualifiedname>QuantLib::SwapForwardMappings::cmSwapZedMatrix</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_curve_state" kindref="compound">CurveState</ref> &amp;</type>
          <declname>cs</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>spanningForwards</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref></type>
          <declname>displacement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the Z matrix to switch base from forward to constant maturity swap rates </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/swapforwardmappings.hpp" line="74" column="23" bodyfile="ql/models/marketmodels/swapforwardmappings.cpp" bodystart="157" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_swap_forward_mappings_1a70dafff3fea4da69ef3dab2676ab4625" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SwapForwardMappings::swaptionImpliedVolatility</definition>
        <argsstring>(const MarketModel &amp;volStructure, Size startIndex, Size endIndex)</argsstring>
        <name>swaptionImpliedVolatility</name>
        <qualifiedname>QuantLib::SwapForwardMappings::swaptionImpliedVolatility</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_market_model" kindref="compound">MarketModel</ref> &amp;</type>
          <declname>volStructure</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>startIndex</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>endIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>computes the implied vol of a swaption specified by two indices using the freezing coefficients methdodology. This routine is easy to use but not very efficient and if you want to do a lot of cases, then a different approach should be used.</para>
<para>Tested in SwapForwardMappingsTest::testSwaptionImpliedVolatility() in swapforwardmappings.cpp </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/swapforwardmappings.hpp" line="83" column="9" bodyfile="ql/models/marketmodels/swapforwardmappings.cpp" bodystart="175" bodyend="219"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ql/models/marketmodels/swapforwardmappings.hpp" line="35" column="5" bodyfile="ql/models/marketmodels/swapforwardmappings.hpp" bodystart="35" bodyend="87"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_swap_forward_mappings_1a7b72f15841e78ed8e4d720981107967f" prot="public" virt="non-virtual"><scope>QuantLib::SwapForwardMappings</scope><name>annuity</name></member>
      <member refid="class_quant_lib_1_1_swap_forward_mappings_1a5c77df67932a422849983cb829ff8597" prot="public" virt="non-virtual"><scope>QuantLib::SwapForwardMappings</scope><name>cmSwapForwardJacobian</name></member>
      <member refid="class_quant_lib_1_1_swap_forward_mappings_1ac115e07a48a615f33880e23b120680f6" prot="public" virt="non-virtual"><scope>QuantLib::SwapForwardMappings</scope><name>cmSwapZedMatrix</name></member>
      <member refid="class_quant_lib_1_1_swap_forward_mappings_1ad1067714b872ab897a19cd4272d4784d" prot="public" virt="non-virtual"><scope>QuantLib::SwapForwardMappings</scope><name>coinitialSwapForwardJacobian</name></member>
      <member refid="class_quant_lib_1_1_swap_forward_mappings_1a4a1fd5c572e753bebcd251b66d9f3897" prot="public" virt="non-virtual"><scope>QuantLib::SwapForwardMappings</scope><name>coinitialSwapZedMatrix</name></member>
      <member refid="class_quant_lib_1_1_swap_forward_mappings_1a19cce4b32c4c71e6011cdf9e439b8ed0" prot="public" virt="non-virtual"><scope>QuantLib::SwapForwardMappings</scope><name>coterminalSwapForwardJacobian</name></member>
      <member refid="class_quant_lib_1_1_swap_forward_mappings_1a8ba30db8637b742cf8a598da1fb0412d" prot="public" virt="non-virtual"><scope>QuantLib::SwapForwardMappings</scope><name>coterminalSwapZedMatrix</name></member>
      <member refid="class_quant_lib_1_1_swap_forward_mappings_1ac56fede6ed3c4c0e3deb858928b07dc1" prot="public" virt="non-virtual"><scope>QuantLib::SwapForwardMappings</scope><name>swapDerivative</name></member>
      <member refid="class_quant_lib_1_1_swap_forward_mappings_1a70dafff3fea4da69ef3dab2676ab4625" prot="public" virt="non-virtual"><scope>QuantLib::SwapForwardMappings</scope><name>swaptionImpliedVolatility</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
