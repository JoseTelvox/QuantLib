<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_ranlux64_uniform_rng" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::Ranlux64UniformRng</compoundname>
    <includes refid="ranluxuniformrng_8hpp" local="no">ranluxuniformrng.hpp</includes>
    <templateparamlist>
      <param>
        <type>std::size_t</type>
        <declname>P</declname>
        <defname>P</defname>
      </param>
      <param>
        <type>std::size_t</type>
        <declname>R</declname>
        <defname>R</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_ranlux64_uniform_rng_1a85f7d27a6944a3a3c2c530c901c36bf5" prot="public" static="no">
        <type><ref refid="struct_quant_lib_1_1_sample" kindref="compound">Sample</ref>&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>typedef Sample&lt;Real&gt; QuantLib::Ranlux64UniformRng&lt; P, R &gt;::sample_type</definition>
        <argsstring></argsstring>
        <name>sample_type</name>
        <qualifiedname>QuantLib::Ranlux64UniformRng::sample_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/ranluxuniformrng.hpp" line="49" column="24" bodyfile="ql/math/randomnumbers/ranluxuniformrng.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_ranlux64_uniform_rng_1a051fbe4bf700dfc1018b7e72e0dcf1e8" prot="private" static="no">
        <type>std::subtract_with_carry_engine&lt; std::uint_fast64_t, 48, 10, 24 &gt;</type>
        <definition>typedef std::subtract_with_carry_engine&lt;std::uint_fast64_t, 48, 10, 24&gt; QuantLib::Ranlux64UniformRng&lt; P, R &gt;::ranlux64_base_01</definition>
        <argsstring></argsstring>
        <name>ranlux64_base_01</name>
        <qualifiedname>QuantLib::Ranlux64UniformRng::ranlux64_base_01</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/ranluxuniformrng.hpp" line="59" column="13" bodyfile="ql/math/randomnumbers/ranluxuniformrng.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_ranlux64_uniform_rng_1a8e94122999e81760fd0da28defdfb555" prot="private" static="no" mutable="no">
        <type>const double</type>
        <definition>const double QuantLib::Ranlux64UniformRng&lt; P, R &gt;::nx</definition>
        <argsstring></argsstring>
        <name>nx</name>
        <qualifiedname>QuantLib::Ranlux64UniformRng::nx</qualifiedname>
        <initializer>= 1.0/(std::uint_fast64_t(1) &lt;&lt; 48)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/ranluxuniformrng.hpp" line="57" column="22" bodyfile="ql/math/randomnumbers/ranluxuniformrng.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_ranlux64_uniform_rng_1a0212e94013dcaee7ba3b388c534829e8" prot="private" static="no" mutable="yes">
        <type>std::discard_block_engine&lt; ranlux64_base_01, P, R &gt;</type>
        <definition>std::discard_block_engine&lt;ranlux64_base_01, P, R&gt; QuantLib::Ranlux64UniformRng&lt; P, R &gt;::ranlux_</definition>
        <argsstring></argsstring>
        <name>ranlux_</name>
        <qualifiedname>QuantLib::Ranlux64UniformRng::ranlux_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/ranluxuniformrng.hpp" line="60" column="43" bodyfile="ql/math/randomnumbers/ranluxuniformrng.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_ranlux64_uniform_rng_1ac0961f6cf1dbbd8a2358cf816d32b6b3" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Ranlux64UniformRng&lt; P, R &gt;::Ranlux64UniformRng</definition>
        <argsstring>(std::uint_fast64_t seed=19780503U)</argsstring>
        <name>Ranlux64UniformRng</name>
        <qualifiedname>QuantLib::Ranlux64UniformRng::Ranlux64UniformRng</qualifiedname>
        <param>
          <type>std::uint_fast64_t</type>
          <declname>seed</declname>
          <defval>19780503U</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/ranluxuniformrng.hpp" line="51" column="18" bodyfile="ql/math/randomnumbers/ranluxuniformrng.hpp" bodystart="51" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_ranlux64_uniform_rng_1a4d08ef8ff83c7961093b53018c964bae" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_quant_lib_1_1_sample" kindref="compound">sample_type</ref></type>
        <definition>sample_type QuantLib::Ranlux64UniformRng&lt; P, R &gt;::next</definition>
        <argsstring>() const</argsstring>
        <name>next</name>
        <qualifiedname>QuantLib::Ranlux64UniformRng::next</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/ranluxuniformrng.hpp" line="54" column="21" bodyfile="ql/math/randomnumbers/ranluxuniformrng.hpp" bodystart="54" bodyend="54"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Uniform random number generator. </para>
    </briefdescription>
    <detaileddescription>
<para>M. Luescher&apos;s &quot;luxury&quot; random number generator</para>
<para>Implementation is a proxy for the corresponding boost random number generator. For more detail see the boost documentation and: M.Luescher, A portable high-quality random number generator for lattice field theory simulations, Comp. Phys. Comm. 79 (1994) 100</para>
<para>Available luxury levels: Ranlux3: Any theoretically possible correlations have very small change of being observed. Ranlux4: highest possible luxury. </para>
    </detaileddescription>
    <location file="ql/math/randomnumbers/ranluxuniformrng.hpp" line="47" column="5" bodyfile="ql/math/randomnumbers/ranluxuniformrng.hpp" bodystart="47" bodyend="61"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_ranlux64_uniform_rng_1a4d08ef8ff83c7961093b53018c964bae" prot="public" virt="non-virtual"><scope>QuantLib::Ranlux64UniformRng</scope><name>next</name></member>
      <member refid="class_quant_lib_1_1_ranlux64_uniform_rng_1a8e94122999e81760fd0da28defdfb555" prot="private" virt="non-virtual"><scope>QuantLib::Ranlux64UniformRng</scope><name>nx</name></member>
      <member refid="class_quant_lib_1_1_ranlux64_uniform_rng_1a051fbe4bf700dfc1018b7e72e0dcf1e8" prot="private" virt="non-virtual"><scope>QuantLib::Ranlux64UniformRng</scope><name>ranlux64_base_01</name></member>
      <member refid="class_quant_lib_1_1_ranlux64_uniform_rng_1ac0961f6cf1dbbd8a2358cf816d32b6b3" prot="public" virt="non-virtual"><scope>QuantLib::Ranlux64UniformRng</scope><name>Ranlux64UniformRng</name></member>
      <member refid="class_quant_lib_1_1_ranlux64_uniform_rng_1a0212e94013dcaee7ba3b388c534829e8" prot="private" virt="non-virtual"><scope>QuantLib::Ranlux64UniformRng</scope><name>ranlux_</name></member>
      <member refid="class_quant_lib_1_1_ranlux64_uniform_rng_1a85f7d27a6944a3a3c2c530c901c36bf5" prot="public" virt="non-virtual"><scope>QuantLib::Ranlux64UniformRng</scope><name>sample_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
