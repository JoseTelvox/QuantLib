<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_basket" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::Basket</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_lazy_object" prot="public" virt="non-virtual">QuantLib::LazyObject</basecompoundref>
    <includes refid="basket_8hpp" local="no">basket.hpp</includes>
    <sectiondef kind="user-defined">
      <header>Basket Loss Statistics</header>
      <description><para>Methods providing statistical metrics on the loss or value distribution of the basket. Most calculations rely on the pressence of a model assigned to the basket. </para>
</description>
      <memberdef kind="variable" id="class_quant_lib_1_1_basket_1af3597112d07b81d126f156182c9c7c68" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::Basket::notionals_</definition>
        <argsstring></argsstring>
        <name>notionals_</name>
        <qualifiedname>QuantLib::Basket::notionals_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="275" column="21" bodyfile="ql/experimental/credit/basket.hpp" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_basket_1af546fed6292fa74b990cd13b7a20fb96" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_pool" kindref="compound">Pool</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;Pool&gt; QuantLib::Basket::pool_</definition>
        <argsstring></argsstring>
        <name>pool_</name>
        <qualifiedname>QuantLib::Basket::pool_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="276" column="25" bodyfile="ql/experimental/credit/basket.hpp" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_basket_1a67deb0469d1d2f9fedc12ac373667bf7" prot="private" static="no" mutable="no">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_claim" kindref="compound">Claim</ref> &gt;</type>
        <definition>const ext::shared_ptr&lt;Claim&gt; QuantLib::Basket::claim_</definition>
        <argsstring></argsstring>
        <name>claim_</name>
        <qualifiedname>QuantLib::Basket::claim_</qualifiedname>
        <briefdescription>
<para>The claim is the same for all names. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="278" column="31" bodyfile="ql/experimental/credit/basket.hpp" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_basket_1a4fa39bf21037f2dafcb1a4240c7c5dec" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::attachmentRatio_</definition>
        <argsstring></argsstring>
        <name>attachmentRatio_</name>
        <qualifiedname>QuantLib::Basket::attachmentRatio_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="280" column="14" bodyfile="ql/experimental/credit/basket.hpp" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_basket_1ad38355442ee6274cbab8ca95393d4bbc" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::detachmentRatio_</definition>
        <argsstring></argsstring>
        <name>detachmentRatio_</name>
        <qualifiedname>QuantLib::Basket::detachmentRatio_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="281" column="14" bodyfile="ql/experimental/credit/basket.hpp" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_basket_1ae1e23ff92edb6459d76d3ba24d992345" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::basketNotional_</definition>
        <argsstring></argsstring>
        <name>basketNotional_</name>
        <qualifiedname>QuantLib::Basket::basketNotional_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="282" column="14" bodyfile="ql/experimental/credit/basket.hpp" bodystart="282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_basket_1a21015f620a8ed8c4db3398a33cf20b1c" prot="private" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::attachmentAmount_</definition>
        <argsstring></argsstring>
        <name>attachmentAmount_</name>
        <qualifiedname>QuantLib::Basket::attachmentAmount_</qualifiedname>
        <briefdescription>
<para>basket tranched inception attachment amount: </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="284" column="22" bodyfile="ql/experimental/credit/basket.hpp" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_basket_1a4bd21d769a773190adee245ea088940e" prot="private" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::detachmentAmount_</definition>
        <argsstring></argsstring>
        <name>detachmentAmount_</name>
        <qualifiedname>QuantLib::Basket::detachmentAmount_</qualifiedname>
        <briefdescription>
<para>basket tranched inception detachment amount: </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="286" column="22" bodyfile="ql/experimental/credit/basket.hpp" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_basket_1aaccdff78ad5353ee424e002aa621d896" prot="private" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::trancheNotional_</definition>
        <argsstring></argsstring>
        <name>trancheNotional_</name>
        <qualifiedname>QuantLib::Basket::trancheNotional_</qualifiedname>
        <briefdescription>
<para>basket tranched notional amount: </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="288" column="22" bodyfile="ql/experimental/credit/basket.hpp" bodystart="288" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_basket_1a65d46dc91ef546d0730d6b6a8bd59381" prot="private" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::evalDateSettledLoss_</definition>
        <argsstring></argsstring>
        <name>evalDateSettledLoss_</name>
        <qualifiedname>QuantLib::Basket::evalDateSettledLoss_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="294" column="22" bodyfile="ql/experimental/credit/basket.hpp" bodystart="294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_basket_1a0c054e602d7d91c0f3dc0d6910061548" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::evalDateRemainingNot_</definition>
        <argsstring></argsstring>
        <name>evalDateRemainingNot_</name>
        <qualifiedname>QuantLib::Basket::evalDateRemainingNot_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="295" column="13" bodyfile="ql/experimental/credit/basket.hpp" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_basket_1ab11427301d2006c8bf194b27d6404d10" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::evalDateAttachAmount_</definition>
        <argsstring></argsstring>
        <name>evalDateAttachAmount_</name>
        <qualifiedname>QuantLib::Basket::evalDateAttachAmount_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="296" column="13" bodyfile="ql/experimental/credit/basket.hpp" bodystart="296" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_basket_1a97fde4a97d756b620b78afb41ca2cede" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::evalDateDetachAmmount_</definition>
        <argsstring></argsstring>
        <name>evalDateDetachAmmount_</name>
        <qualifiedname>QuantLib::Basket::evalDateDetachAmmount_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="297" column="13" bodyfile="ql/experimental/credit/basket.hpp" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_basket_1a3c303de7a3f3aca6c0edce753395cb67" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt;</type>
        <definition>std::vector&lt;Size&gt; QuantLib::Basket::evalDateLiveList_</definition>
        <argsstring></argsstring>
        <name>evalDateLiveList_</name>
        <qualifiedname>QuantLib::Basket::evalDateLiveList_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="298" column="29" bodyfile="ql/experimental/credit/basket.hpp" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_basket_1ad313bcabde2a407ad743e10433e6374b" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::Basket::evalDateLiveNotionals_</definition>
        <argsstring></argsstring>
        <name>evalDateLiveNotionals_</name>
        <qualifiedname>QuantLib::Basket::evalDateLiveNotionals_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="299" column="29" bodyfile="ql/experimental/credit/basket.hpp" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_basket_1ae2a673596f991278033051e4bf885e65" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; QuantLib::Basket::evalDateLiveNames_</definition>
        <argsstring></argsstring>
        <name>evalDateLiveNames_</name>
        <qualifiedname>QuantLib::Basket::evalDateLiveNames_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="300" column="29" bodyfile="ql/experimental/credit/basket.hpp" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_basket_1abcec50f803e0e38e52283023507c0bb3" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_default_prob_key" kindref="compound">DefaultProbKey</ref> &gt;</type>
        <definition>std::vector&lt;DefaultProbKey&gt; QuantLib::Basket::evalDateLiveKeys_</definition>
        <argsstring></argsstring>
        <name>evalDateLiveKeys_</name>
        <qualifiedname>QuantLib::Basket::evalDateLiveKeys_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="301" column="29" bodyfile="ql/experimental/credit/basket.hpp" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_basket_1a9b7a96ae462ca8345ea7ae05b0704d13" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>const Date QuantLib::Basket::refDate_</definition>
        <argsstring></argsstring>
        <name>refDate_</name>
        <qualifiedname>QuantLib::Basket::refDate_</qualifiedname>
        <briefdescription>
<para><ref refid="class_quant_lib_1_1_basket" kindref="compound">Basket</ref> inception date. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="303" column="20" bodyfile="ql/experimental/credit/basket.hpp" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_basket_1af3ba89cbdf9fffbb79d4f23ef804ce9f" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_default_loss_model" kindref="compound">DefaultLossModel</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;DefaultLossModel&gt; QuantLib::Basket::lossModel_</definition>
        <argsstring></argsstring>
        <name>lossModel_</name>
        <qualifiedname>QuantLib::Basket::lossModel_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="312" column="25" bodyfile="ql/experimental/credit/basket.hpp" bodystart="312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a2b91a2232fb6a37e6fb631904cb6af2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::expectedTrancheLoss</definition>
        <argsstring>(const Date &amp;d) const</argsstring>
        <name>expectedTrancheLoss</name>
        <qualifiedname>QuantLib::Basket::expectedTrancheLoss</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="230" column="14" bodyfile="ql/experimental/credit/basket.cpp" bodystart="323" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a11916d3dbaeef4851496138069982fc2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::Basket::probOverLoss</definition>
        <argsstring>(const Date &amp;d, Real lossFraction) const</argsstring>
        <name>probOverLoss</name>
        <qualifiedname>QuantLib::Basket::probOverLoss</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>lossFraction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The lossFraction is the fraction of losses expressed in inception (no losses) tranche units (e.g. &apos;attach level&apos;=0%, &apos;detach level&apos;=100%) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="235" column="21" bodyfile="ql/experimental/credit/basket.cpp" bodystart="299" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1acc4e9d053bf09ec971f10965af973334" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::percentile</definition>
        <argsstring>(const Date &amp;d, Probability prob) const</argsstring>
        <name>percentile</name>
        <qualifiedname>QuantLib::Basket::percentile</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
          <declname>prob</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="238" column="14" bodyfile="ql/experimental/credit/basket.cpp" bodystart="318" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a111d9dbb5afe7b9444ad76d5b6e5ce83" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::expectedShortfall</definition>
        <argsstring>(const Date &amp;d, Probability prob) const</argsstring>
        <name>expectedShortfall</name>
        <qualifiedname>QuantLib::Basket::expectedShortfall</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
          <declname>prob</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ESF </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="241" column="14" bodyfile="ql/experimental/credit/basket.cpp" bodystart="333" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a9067ed6562ac6529595b73fd852e3250" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::Basket::splitVaRLevel</definition>
        <argsstring>(const Date &amp;date, Real loss) const</argsstring>
        <name>splitVaRLevel</name>
        <qualifiedname>QuantLib::Basket::splitVaRLevel</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>loss</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="244" column="21" bodyfile="ql/experimental/credit/basket.cpp" bodystart="328" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1aa6a87cf3aa8447031b0d6a6e33fa57fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>, <ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> &gt;</type>
        <definition>std::map&lt; Real, Probability &gt; QuantLib::Basket::lossDistribution</definition>
        <argsstring>(const Date &amp;) const</argsstring>
        <name>lossDistribution</name>
        <qualifiedname>QuantLib::Basket::lossDistribution</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Full loss distribution </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="247" column="18" bodyfile="ql/experimental/credit/basket.cpp" bodystart="338" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1acff51fa78ecfe4b66995762a75aab47c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::densityTrancheLoss</definition>
        <argsstring>(const Date &amp;d, Real lossFraction) const</argsstring>
        <name>densityTrancheLoss</name>
        <qualifiedname>QuantLib::Basket::densityTrancheLoss</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>lossFraction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="248" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a84545638a984480c18cc3ad31bd29d81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::defaultCorrelation</definition>
        <argsstring>(const Date &amp;d, Size iName, Size jName) const</argsstring>
        <name>defaultCorrelation</name>
        <qualifiedname>QuantLib::Basket::defaultCorrelation</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>jName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="249" column="14" bodyfile="ql/experimental/credit/basket.cpp" bodystart="354" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1abf9a880a5fc60ba3fb19e67d48043284" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> &gt;</type>
        <definition>std::vector&lt; Probability &gt; QuantLib::Basket::probsBeingNthEvent</definition>
        <argsstring>(Size n, const Date &amp;d) const</argsstring>
        <name>probsBeingNthEvent</name>
        <qualifiedname>QuantLib::Basket::probsBeingNthEvent</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> vector that each of the remaining live names (at eval date) is the n-th default by date d.</para>
<para>The n parameter is the internal index to the name; it should be alive at the evaluation date.</para>
<para>------<mdash/>TO DO: Implement with a string passed-------------------<mdash/> ------<mdash/>TO DO: Perform check the name is alive------------------<mdash/> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="259" column="21" bodyfile="ql/experimental/credit/basket.cpp" bodystart="344" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a2128dcb300624b2344a0d49086e47cf9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::Basket::probAtLeastNEvents</definition>
        <argsstring>(Size n, const Date &amp;d) const</argsstring>
        <name>probAtLeastNEvents</name>
        <qualifiedname>QuantLib::Basket::probAtLeastNEvents</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the probaility of having a given or larger number of defaults in the basket portfolio at a given time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="264" column="21" bodyfile="ql/experimental/credit/basket.cpp" bodystart="363" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a6d7b3831d9fa63d0efdc2d492ec194fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::recoveryRate</definition>
        <argsstring>(const Date &amp;d, Size iName) const</argsstring>
        <name>recoveryRate</name>
        <qualifiedname>QuantLib::Basket::recoveryRate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Expected recovery rate of the underlying position as a fraction of its exposure value at date d <emphasis>given</emphasis> it has defaulted <emphasis>on</emphasis> that date. NOTICE THE ARG IS THE CTPTY....SHOULDNT IT BE THE POSITION/INSTRUMENT?????&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="269" column="14" bodyfile="ql/experimental/credit/basket.cpp" bodystart="369" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a2e501f74737981c98aa9e7ea593fc360" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::Basket::performCalculations</definition>
        <argsstring>() const override</argsstring>
        <name>performCalculations</name>
        <qualifiedname>QuantLib::Basket::performCalculations</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_lazy_object_1aafa5583a3743d9f93fa40da5b62e1ff8">performCalculations</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must implement any calculations which must be (re)done in order to calculate the desired results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="273" column="14" bodyfile="ql/experimental/credit/basket.cpp" bodystart="88" bodyend="104"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a806066eb1ca6f3bc00c86c69b005a916" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Basket::Basket</definition>
        <argsstring>()=default</argsstring>
        <name>Basket</name>
        <qualifiedname>QuantLib::Basket::Basket</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="54" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1aec429747163959e23d34a15ee535e883" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Basket::Basket</definition>
        <argsstring>(const Date &amp;refDate, const std::vector&lt; std::string &gt; &amp;names, std::vector&lt; Real &gt; notionals, ext::shared_ptr&lt; Pool &gt; pool, Real attachmentRatio=0.0, Real detachmentRatio=1.0, ext::shared_ptr&lt; Claim &gt; claim=ext::shared_ptr&lt; Claim &gt;(new FaceValueClaim()))</argsstring>
        <name>Basket</name>
        <qualifiedname>QuantLib::Basket::Basket</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>refDate</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
          <declname>notionals</declname>
        </param>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_pool" kindref="compound">Pool</ref> &gt;</type>
          <declname>pool</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>attachmentRatio</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>detachmentRatio</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_claim" kindref="compound">Claim</ref> &gt;</type>
          <declname>claim</declname>
          <defval>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_claim" kindref="compound">Claim</ref> &gt;(new <ref refid="class_quant_lib_1_1_face_value_claim" kindref="compound">FaceValueClaim</ref>())</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a basket of simple collection of constant notional positions subject to default risk only.</para>
<para>The refDate parameter is the basket inception date, that is, the date at which defaultable events are relevant. (There are no constraints on forward baskets but models assigned should be consistent.) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="63" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a4c308e29170a0b6c98e5721dd7ec2654" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::Basket::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <qualifiedname>QuantLib::Basket::update</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_observer_1a07905c55dca858470fcf4a1aea0005aa">update</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must be implemented in derived classes. An instance of Observer does not call this method directly: instead, it will be called by the observables the instance registered with when they need to notify any changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="70" column="14" bodyfile="ql/experimental/credit/basket.hpp" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1ae3b4fc4499fa7ba9f07cc3b88be771c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::Basket::computeBasket</definition>
        <argsstring>() const</argsstring>
        <name>computeBasket</name>
        <qualifiedname>QuantLib::Basket::computeBasket</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="74" column="14" bodyfile="ql/experimental/credit/basket.hpp" bodystart="74" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a99d8252eaa111838ae40fa6c827352e3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::Basket::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>QuantLib::Basket::size</qualifiedname>
        <briefdescription>
<para><ref refid="class_quant_lib_1_1_basket" kindref="compound">Basket</ref> inception number of counterparties. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="93" column="14" bodyfile="ql/experimental/credit/basket.hpp" bodystart="317" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a5bfcb66633488ec17a22c923323dabcb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; std::string &gt; &amp;</type>
        <definition>const std::vector&lt; std::string &gt; &amp; QuantLib::Basket::names</definition>
        <argsstring>() const</argsstring>
        <name>names</name>
        <qualifiedname>QuantLib::Basket::names</qualifiedname>
        <briefdescription>
<para><ref refid="class_quant_lib_1_1_basket" kindref="compound">Basket</ref> counterparties names at inception. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="95" column="27" bodyfile="ql/experimental/credit/basket.hpp" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1ae55de9298e595aa2976f292e19cc08ac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Real &gt; &amp; QuantLib::Basket::notionals</definition>
        <argsstring>() const</argsstring>
        <name>notionals</name>
        <qualifiedname>QuantLib::Basket::notionals</qualifiedname>
        <briefdescription>
<para><ref refid="class_quant_lib_1_1_basket" kindref="compound">Basket</ref> counterparties notionals at inception. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="97" column="27" bodyfile="ql/experimental/credit/basket.hpp" bodystart="321" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a6de240b963234e3ccbf5b1b25ce53160" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::notional</definition>
        <argsstring>() const</argsstring>
        <name>notional</name>
        <qualifiedname>QuantLib::Basket::notional</qualifiedname>
        <briefdescription>
<para><ref refid="class_quant_lib_1_1_basket" kindref="compound">Basket</ref> total notional at inception. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="99" column="14" bodyfile="ql/experimental/credit/basket.cpp" bodystart="106" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a02037e878ecc0e8c2c3b0f57f0937c15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::exposure</definition>
        <argsstring>(const std::string &amp;name, const Date &amp;=Date()) const</argsstring>
        <name>exposure</name>
        <qualifiedname>QuantLib::Basket::exposure</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <defname>d</defname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>Returns the total expected exposures for that name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="101" column="14" bodyfile="ql/experimental/credit/basket.cpp" bodystart="224" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1ab343b3d3b245bd161a1e19aedd7e2ae6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_pool" kindref="compound">Pool</ref> &gt; &amp;</type>
        <definition>const ext::shared_ptr&lt; Pool &gt; &amp; QuantLib::Basket::pool</definition>
        <argsstring>() const</argsstring>
        <name>pool</name>
        <qualifiedname>QuantLib::Basket::pool</qualifiedname>
        <briefdescription>
<para>Underlying pool. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="103" column="31" bodyfile="ql/experimental/credit/basket.hpp" bodystart="329" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a8f931ce7664bfa18e5b8dcbfcbeb593a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_default_prob_key" kindref="compound">DefaultProbKey</ref> &gt;</type>
        <definition>std::vector&lt; DefaultProbKey &gt; QuantLib::Basket::defaultKeys</definition>
        <argsstring>() const</argsstring>
        <name>defaultKeys</name>
        <qualifiedname>QuantLib::Basket::defaultKeys</qualifiedname>
        <briefdescription>
<para>The keys each counterparty enters the basket with (sensitive to) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="105" column="21" bodyfile="ql/experimental/credit/basket.hpp" bodystart="325" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a293c2b2fbe89b07504527272375e955d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        <definition>const Date &amp; QuantLib::Basket::refDate</definition>
        <argsstring>() const</argsstring>
        <name>refDate</name>
        <qualifiedname>QuantLib::Basket::refDate</qualifiedname>
        <briefdescription>
<para><ref refid="class_quant_lib_1_1_basket" kindref="compound">Basket</ref> inception date. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="class_quant_lib_1_1_loss" kindref="compound">Loss</ref> Given <ref refid="struct_quant_lib_1_1_default" kindref="compound">Default</ref> for all issuers/notionals based on expected recovery rates for the respective issuers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="110" column="20" bodyfile="ql/experimental/credit/basket.hpp" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a4c74577014cca12a9da988b40c462e04" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::attachmentRatio</definition>
        <argsstring>() const</argsstring>
        <name>attachmentRatio</name>
        <qualifiedname>QuantLib::Basket::attachmentRatio</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Attachment point expressed as a fraction of the total inception notional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="114" column="14" bodyfile="ql/experimental/credit/basket.hpp" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1aec339867af9dbbfb329d108555f58a18" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::detachmentRatio</definition>
        <argsstring>() const</argsstring>
        <name>detachmentRatio</name>
        <qualifiedname>QuantLib::Basket::detachmentRatio</qualifiedname>
        <briefdescription>
<para>Detachment point expressed as a fraction of the total pool notional. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="116" column="14" bodyfile="ql/experimental/credit/basket.hpp" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a99d9a4747847130aec04f919a5de2472" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::basketNotional</definition>
        <argsstring>() const</argsstring>
        <name>basketNotional</name>
        <qualifiedname>QuantLib::Basket::basketNotional</qualifiedname>
        <briefdescription>
<para>Original basket notional ignoring any losses. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="118" column="14" bodyfile="ql/experimental/credit/basket.hpp" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a63d29b55c00d9919a21825ae92da7b0e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::trancheNotional</definition>
        <argsstring>() const</argsstring>
        <name>trancheNotional</name>
        <qualifiedname>QuantLib::Basket::trancheNotional</qualifiedname>
        <briefdescription>
<para>Original tranche notional ignoring any realized losses. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="120" column="14" bodyfile="ql/experimental/credit/basket.hpp" bodystart="120" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1afab4acbd3210693c27dfa22e92923d02" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::attachmentAmount</definition>
        <argsstring>() const</argsstring>
        <name>attachmentAmount</name>
        <qualifiedname>QuantLib::Basket::attachmentAmount</qualifiedname>
        <briefdescription>
<para>Attachment amount = <ref refid="class_quant_lib_1_1_basket_1a4c74577014cca12a9da988b40c462e04" kindref="member">attachmentRatio()</ref> * <ref refid="class_quant_lib_1_1_basket_1a99d9a4747847130aec04f919a5de2472" kindref="member">basketNotional()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="122" column="14" bodyfile="ql/experimental/credit/basket.hpp" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a55d1682836809622635ddf980d37e6ba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::detachmentAmount</definition>
        <argsstring>() const</argsstring>
        <name>detachmentAmount</name>
        <qualifiedname>QuantLib::Basket::detachmentAmount</qualifiedname>
        <briefdescription>
<para>Detachment amount = <ref refid="class_quant_lib_1_1_basket_1aec339867af9dbbfb329d108555f58a18" kindref="member">detachmentRatio()</ref> * <ref refid="class_quant_lib_1_1_basket_1a99d9a4747847130aec04f919a5de2472" kindref="member">basketNotional()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="124" column="14" bodyfile="ql/experimental/credit/basket.hpp" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1af0842fa054f3a073783e8d320be9be10" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_claim" kindref="compound">Claim</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; Claim &gt; QuantLib::Basket::claim</definition>
        <argsstring>() const</argsstring>
        <name>claim</name>
        <qualifiedname>QuantLib::Basket::claim</qualifiedname>
        <briefdescription>
<para>default claim, same for all positions and counterparties </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="126" column="25" bodyfile="ql/experimental/credit/basket.hpp" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1af243121cd9546022688152a6910e65d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> &gt;</type>
        <definition>vector&lt; Real &gt; QuantLib::Basket::probabilities</definition>
        <argsstring>(const Date &amp;d) const</argsstring>
        <name>probabilities</name>
        <qualifiedname>QuantLib::Basket::probabilities</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Vector of cumulative default probability to date d for all issuers in the basket. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="130" column="21" bodyfile="ql/experimental/credit/basket.cpp" bodystart="110" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1af9ca9aa6a01a857ee380618bf504f5c7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::settledLoss</definition>
        <argsstring>() const</argsstring>
        <name>settledLoss</name>
        <qualifiedname>QuantLib::Basket::settledLoss</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Realized basket losses between the reference date and the calculation date, taking the actual recovery rates of loss events into account. Only default events that have settled (have a realized RR) are accounted for. For contingent losses after a default you need to compute the losses through a <ref refid="class_quant_lib_1_1_default_loss_model" kindref="compound">DefaultLossModel</ref></para>
<para>Optionally one can pass a date in the future and that will collect events stored in the issuers list. This shows the effect of &apos;programmed&apos; (after today&apos;s) events on top of past ones. The intention is to be used in risk analysis (jump to default, etc). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="143" column="14" bodyfile="ql/experimental/credit/basket.hpp" bodystart="357" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a5ae93c73541280779fc6b8d3d73deda1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::settledLoss</definition>
        <argsstring>(const Date &amp;) const</argsstring>
        <name>settledLoss</name>
        <qualifiedname>QuantLib::Basket::settledLoss</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <defname>endDate</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="144" column="14" bodyfile="ql/experimental/credit/basket.cpp" bodystart="143" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a746f0df8bf087abb39d3227f9df5330c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::cumulatedLoss</definition>
        <argsstring>() const</argsstring>
        <name>cumulatedLoss</name>
        <qualifiedname>QuantLib::Basket::cumulatedLoss</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Actual basket losses between the reference date and the calculation date, taking the actual recovery rates of loss events into account. If the event has not settled yet a model driven recovery is used.</para>
<para>Returns the realized losses in this portfolio since the portfolio default reference date. This method relies on an implementation of the loss given default since the events have not necessarily settled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="154" column="14" bodyfile="ql/experimental/credit/basket.hpp" bodystart="353" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1ab3f02030adad767c497563d9012fa589" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::cumulatedLoss</definition>
        <argsstring>(const Date &amp;) const</argsstring>
        <name>cumulatedLoss</name>
        <qualifiedname>QuantLib::Basket::cumulatedLoss</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <defname>endDate</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="155" column="14" bodyfile="ql/experimental/credit/basket.cpp" bodystart="119" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a51c593360b72d76f70d59066d4031b6e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::remainingNotional</definition>
        <argsstring>() const</argsstring>
        <name>remainingNotional</name>
        <qualifiedname>QuantLib::Basket::remainingNotional</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remaining full basket (untranched) notional after settled losses between the reference date and the given date. The full notional for defaulted names is subracted, recovery ignored. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="160" column="14" bodyfile="ql/experimental/credit/basket.cpp" bodystart="168" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1ad78d5940301bf8ee20d9d30ea4a0f8e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::remainingNotional</definition>
        <argsstring>(const Date &amp;) const</argsstring>
        <name>remainingNotional</name>
        <qualifiedname>QuantLib::Basket::remainingNotional</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <defname>endDate</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="161" column="14" bodyfile="ql/experimental/credit/basket.cpp" bodystart="184" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1ac46a085c0c178f4f3f2045e28735a27f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Real &gt; &amp; QuantLib::Basket::remainingNotionals</definition>
        <argsstring>() const</argsstring>
        <name>remainingNotionals</name>
        <qualifiedname>QuantLib::Basket::remainingNotionals</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Vector of surviving notionals after settled losses between the reference date and the given date, recovery ignored. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="165" column="27" bodyfile="ql/experimental/credit/basket.hpp" bodystart="349" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1addf1b5b4652bbb5cf863ad45391179c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>vector&lt; Real &gt; QuantLib::Basket::remainingNotionals</definition>
        <argsstring>(const Date &amp;) const</argsstring>
        <name>remainingNotionals</name>
        <qualifiedname>QuantLib::Basket::remainingNotionals</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <defname>endDate</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="166" column="21" bodyfile="ql/experimental/credit/basket.cpp" bodystart="196" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a07ff31fdca3315c595f76c49c294e766" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; std::string &gt; &amp;</type>
        <definition>const std::vector&lt; std::string &gt; &amp; QuantLib::Basket::remainingNames</definition>
        <argsstring>() const</argsstring>
        <name>remainingNames</name>
        <qualifiedname>QuantLib::Basket::remainingNames</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Vector of surviving issuers after defaults between the reference basket date and the given (or evaluation) date. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="170" column="27" bodyfile="ql/experimental/credit/basket.hpp" bodystart="345" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a09643b5cc8a860145d4099d4373a2410" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; QuantLib::Basket::remainingNames</definition>
        <argsstring>(const Date &amp;) const</argsstring>
        <name>remainingNames</name>
        <qualifiedname>QuantLib::Basket::remainingNames</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <defname>endDate</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="171" column="21" bodyfile="ql/experimental/credit/basket.cpp" bodystart="246" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a1d95d60bc5085271ca6c11669e49436a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_default_prob_key" kindref="compound">DefaultProbKey</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; DefaultProbKey &gt; &amp; QuantLib::Basket::remainingDefaultKeys</definition>
        <argsstring>() const</argsstring>
        <name>remainingDefaultKeys</name>
        <qualifiedname>QuantLib::Basket::remainingDefaultKeys</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="struct_quant_lib_1_1_default" kindref="compound">Default</ref> keys of non defaulted counterparties </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="174" column="27" bodyfile="ql/experimental/credit/basket.hpp" bodystart="362" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1acc7f1daf215dc7fc8eafeafda20b6364" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_default_prob_key" kindref="compound">DefaultProbKey</ref> &gt;</type>
        <definition>vector&lt; DefaultProbKey &gt; QuantLib::Basket::remainingDefaultKeys</definition>
        <argsstring>(const Date &amp;) const</argsstring>
        <name>remainingDefaultKeys</name>
        <qualifiedname>QuantLib::Basket::remainingDefaultKeys</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <defname>endDate</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="175" column="21" bodyfile="ql/experimental/credit/basket.cpp" bodystart="260" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1adca2dce05e858f501c94fb968cd20454" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::Basket::remainingSize</definition>
        <argsstring>() const</argsstring>
        <name>remainingSize</name>
        <qualifiedname>QuantLib::Basket::remainingSize</qualifiedname>
        <briefdescription>
<para>Number of counterparties alive on the requested date. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="177" column="14" bodyfile="ql/experimental/credit/basket.cpp" bodystart="273" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1aa41e006030088319d05bbba88acfdecc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::Basket::remainingSize</definition>
        <argsstring>(const Date &amp;) const</argsstring>
        <name>remainingSize</name>
        <qualifiedname>QuantLib::Basket::remainingSize</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="178" column="14" bodyfile="ql/experimental/credit/basket.cpp" bodystart="277" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a52558e992f4d95b635cb57a21f0b6daa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> &gt;</type>
        <definition>std::vector&lt; Probability &gt; QuantLib::Basket::remainingProbabilities</definition>
        <argsstring>(const Date &amp;d) const</argsstring>
        <name>remainingProbabilities</name>
        <qualifiedname>QuantLib::Basket::remainingProbabilities</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Vector of cumulative default probability to date d for all issuers still (at the evaluation date) alive in the basket. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="182" column="21" bodyfile="ql/experimental/credit/basket.cpp" bodystart="210" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a7a53e607dbe1d49585ad4683dac0a8c0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::remainingAttachmentAmount</definition>
        <argsstring>() const</argsstring>
        <name>remainingAttachmentAmount</name>
        <qualifiedname>QuantLib::Basket::remainingAttachmentAmount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Attachment amount of the equivalent (after defaults) remaining basket The remaining attachment amount is RAA = max (0, attachmentAmount - <ref refid="class_quant_lib_1_1_basket_1a746f0df8bf087abb39d3227f9df5330c" kindref="member">cumulatedLoss()</ref>)</para>
<para>The remaining attachment ratio is then RAR = RAA / <ref refid="class_quant_lib_1_1_basket_1a51c593360b72d76f70d59066d4031b6e" kindref="member">remainingNotional()</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="191" column="14" bodyfile="ql/experimental/credit/basket.hpp" bodystart="341" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a8d141c86a5b7958edc9ef025c8a6d2ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::remainingAttachmentAmount</definition>
        <argsstring>(const Date &amp;endDate) const</argsstring>
        <name>remainingAttachmentAmount</name>
        <qualifiedname>QuantLib::Basket::remainingAttachmentAmount</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>endDate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="192" column="14" bodyfile="ql/experimental/credit/basket.cpp" bodystart="290" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a27b01fdfd9ff411c9d2b6272645bee55" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::remainingDetachmentAmount</definition>
        <argsstring>() const</argsstring>
        <name>remainingDetachmentAmount</name>
        <qualifiedname>QuantLib::Basket::remainingDetachmentAmount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Detachment amount of the equivalent remaining basket. The remaining detachment amount is RDA = max (0, detachmentAmount - <ref refid="class_quant_lib_1_1_basket_1a746f0df8bf087abb39d3227f9df5330c" kindref="member">cumulatedLoss()</ref>)</para>
<para>The remaining detachment ratio is then RDR = RDA / <ref refid="class_quant_lib_1_1_basket_1a51c593360b72d76f70d59066d4031b6e" kindref="member">remainingNotional()</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="202" column="14" bodyfile="ql/experimental/credit/basket.hpp" bodystart="337" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1ae68db2b2c3af129834405765aaa9a20d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::remainingDetachmentAmount</definition>
        <argsstring>(const Date &amp;endDate) const</argsstring>
        <name>remainingDetachmentAmount</name>
        <qualifiedname>QuantLib::Basket::remainingDetachmentAmount</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>endDate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="203" column="14" bodyfile="ql/experimental/credit/basket.cpp" bodystart="284" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1ab36d5a4d15df946022f07e4706f53293" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::remainingTrancheNotional</definition>
        <argsstring>() const</argsstring>
        <name>remainingTrancheNotional</name>
        <qualifiedname>QuantLib::Basket::remainingTrancheNotional</qualifiedname>
        <briefdescription>
<para>Remaining basket tranched notional on calculation date. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="206" column="14" bodyfile="ql/experimental/credit/basket.hpp" bodystart="206" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1af2e679fee3f0727528cf7d51e9e7ea4b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Basket::remainingTrancheNotional</definition>
        <argsstring>(const Date &amp;endDate) const</argsstring>
        <name>remainingTrancheNotional</name>
        <qualifiedname>QuantLib::Basket::remainingTrancheNotional</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>endDate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Expected basket tranched notional on the requested date according to the basket model. Model should have been assigned. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="213" column="14" bodyfile="ql/experimental/credit/basket.hpp" bodystart="213" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a10b57599065c108e4578309cca27cf44" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Size &gt; &amp; QuantLib::Basket::liveList</definition>
        <argsstring>() const</argsstring>
        <name>liveList</name>
        <qualifiedname>QuantLib::Basket::liveList</qualifiedname>
        <briefdescription>
<para>Indexes of remaining names. Notice these are names and not positions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="219" column="27" bodyfile="ql/experimental/credit/basket.hpp" bodystart="333" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1a5dc76f3286b96661e032925c75c6f037" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt;</type>
        <definition>std::vector&lt; Size &gt; QuantLib::Basket::liveList</definition>
        <argsstring>(const Date &amp;) const</argsstring>
        <name>liveList</name>
        <qualifiedname>QuantLib::Basket::liveList</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <defname>endDate</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="220" column="21" bodyfile="ql/experimental/credit/basket.cpp" bodystart="172" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_basket_1afe2e2652f2b4184282dee43e53524691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::Basket::setLossModel</definition>
        <argsstring>(const ext::shared_ptr&lt; DefaultLossModel &gt; &amp;lossModel)</argsstring>
        <name>setLossModel</name>
        <qualifiedname>QuantLib::Basket::setLossModel</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_default_loss_model" kindref="compound">DefaultLossModel</ref> &gt; &amp;</type>
          <declname>lossModel</declname>
        </param>
        <briefdescription>
<para>Assigns the default loss model to this basket. Resets calculations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/basket.hpp" line="222" column="14" bodyfile="ql/experimental/credit/basket.cpp" bodystart="74" bodyend="86"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Credit <ref refid="class_quant_lib_1_1_basket" kindref="compound">Basket</ref>.<simplesect kind="par"><title></title><para>A basket is a collection of credit names, represented by a unique identifier (a text string), associated notional amounts, a pool and tranche information. The pool is a map of &quot;names&quot; to issuers. The <ref refid="class_quant_lib_1_1_basket" kindref="compound">Basket</ref> structure is motivated by <ref refid="class_quant_lib_1_1_c_d_o" kindref="compound">CDO</ref> squared instruments containing various underlying inner CDOs which can be represented by respective baskets including their tranche structure. The role of the <ref refid="class_quant_lib_1_1_pool" kindref="compound">Pool</ref> is providing a unique list of relevant issuers while names may appear multiple times across different baskets (overlap). </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::Basket</label>
        <link refid="class_quant_lib_1_1_basket"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::Basket</label>
        <link refid="class_quant_lib_1_1_basket"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/credit/basket.hpp" line="52" column="5" bodyfile="ql/experimental/credit/basket.hpp" bodystart="52" bodyend="313"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_lazy_object_1a02070ea7442d30625992c1711030d4b8" prot="protected" virt="non-virtual"><scope>QuantLib::Basket</scope><name>alwaysForward_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a17c9433135a259e4776baec66204a484" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>alwaysForwardNotifications</name></member>
      <member refid="class_quant_lib_1_1_basket_1afab4acbd3210693c27dfa22e92923d02" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>attachmentAmount</name></member>
      <member refid="class_quant_lib_1_1_basket_1a21015f620a8ed8c4db3398a33cf20b1c" prot="private" virt="non-virtual"><scope>QuantLib::Basket</scope><name>attachmentAmount_</name></member>
      <member refid="class_quant_lib_1_1_basket_1a4c74577014cca12a9da988b40c462e04" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>attachmentRatio</name></member>
      <member refid="class_quant_lib_1_1_basket_1a4fa39bf21037f2dafcb1a4240c7c5dec" prot="private" virt="non-virtual"><scope>QuantLib::Basket</scope><name>attachmentRatio_</name></member>
      <member refid="class_quant_lib_1_1_basket_1a806066eb1ca6f3bc00c86c69b005a916" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>Basket</name></member>
      <member refid="class_quant_lib_1_1_basket_1aec429747163959e23d34a15ee535e883" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>Basket</name></member>
      <member refid="class_quant_lib_1_1_basket_1a99d9a4747847130aec04f919a5de2472" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>basketNotional</name></member>
      <member refid="class_quant_lib_1_1_basket_1ae1e23ff92edb6459d76d3ba24d992345" prot="private" virt="non-virtual"><scope>QuantLib::Basket</scope><name>basketNotional_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a5244c7f83592375a0ea9048296435fd1" prot="protected" virt="virtual"><scope>QuantLib::Basket</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a58b4986a80efa18634483a92c121e26e" prot="protected" virt="non-virtual"><scope>QuantLib::Basket</scope><name>calculated_</name></member>
      <member refid="class_quant_lib_1_1_basket_1af0842fa054f3a073783e8d320be9be10" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>claim</name></member>
      <member refid="class_quant_lib_1_1_basket_1a67deb0469d1d2f9fedc12ac373667bf7" prot="private" virt="non-virtual"><scope>QuantLib::Basket</scope><name>claim_</name></member>
      <member refid="class_quant_lib_1_1_basket_1ae3b4fc4499fa7ba9f07cc3b88be771c5" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>computeBasket</name></member>
      <member refid="class_quant_lib_1_1_basket_1a746f0df8bf087abb39d3227f9df5330c" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>cumulatedLoss</name></member>
      <member refid="class_quant_lib_1_1_basket_1ab3f02030adad767c497563d9012fa589" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>cumulatedLoss</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::Basket</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_basket_1a84545638a984480c18cc3ad31bd29d81" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>defaultCorrelation</name></member>
      <member refid="class_quant_lib_1_1_basket_1a8f931ce7664bfa18e5b8dcbfcbeb593a" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>defaultKeys</name></member>
      <member refid="class_quant_lib_1_1_basket_1acff51fa78ecfe4b66995762a75aab47c" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>densityTrancheLoss</name></member>
      <member refid="class_quant_lib_1_1_basket_1a55d1682836809622635ddf980d37e6ba" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>detachmentAmount</name></member>
      <member refid="class_quant_lib_1_1_basket_1a4bd21d769a773190adee245ea088940e" prot="private" virt="non-virtual"><scope>QuantLib::Basket</scope><name>detachmentAmount_</name></member>
      <member refid="class_quant_lib_1_1_basket_1aec339867af9dbbfb329d108555f58a18" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>detachmentRatio</name></member>
      <member refid="class_quant_lib_1_1_basket_1ad38355442ee6274cbab8ca95393d4bbc" prot="private" virt="non-virtual"><scope>QuantLib::Basket</scope><name>detachmentRatio_</name></member>
      <member refid="class_quant_lib_1_1_basket_1ab11427301d2006c8bf194b27d6404d10" prot="private" virt="non-virtual"><scope>QuantLib::Basket</scope><name>evalDateAttachAmount_</name></member>
      <member refid="class_quant_lib_1_1_basket_1a97fde4a97d756b620b78afb41ca2cede" prot="private" virt="non-virtual"><scope>QuantLib::Basket</scope><name>evalDateDetachAmmount_</name></member>
      <member refid="class_quant_lib_1_1_basket_1abcec50f803e0e38e52283023507c0bb3" prot="private" virt="non-virtual"><scope>QuantLib::Basket</scope><name>evalDateLiveKeys_</name></member>
      <member refid="class_quant_lib_1_1_basket_1a3c303de7a3f3aca6c0edce753395cb67" prot="private" virt="non-virtual"><scope>QuantLib::Basket</scope><name>evalDateLiveList_</name></member>
      <member refid="class_quant_lib_1_1_basket_1ae2a673596f991278033051e4bf885e65" prot="private" virt="non-virtual"><scope>QuantLib::Basket</scope><name>evalDateLiveNames_</name></member>
      <member refid="class_quant_lib_1_1_basket_1ad313bcabde2a407ad743e10433e6374b" prot="private" virt="non-virtual"><scope>QuantLib::Basket</scope><name>evalDateLiveNotionals_</name></member>
      <member refid="class_quant_lib_1_1_basket_1a0c054e602d7d91c0f3dc0d6910061548" prot="private" virt="non-virtual"><scope>QuantLib::Basket</scope><name>evalDateRemainingNot_</name></member>
      <member refid="class_quant_lib_1_1_basket_1a65d46dc91ef546d0730d6b6a8bd59381" prot="private" virt="non-virtual"><scope>QuantLib::Basket</scope><name>evalDateSettledLoss_</name></member>
      <member refid="class_quant_lib_1_1_basket_1a111d9dbb5afe7b9444ad76d5b6e5ce83" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>expectedShortfall</name></member>
      <member refid="class_quant_lib_1_1_basket_1a2b91a2232fb6a37e6fb631904cb6af2d" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>expectedTrancheLoss</name></member>
      <member refid="class_quant_lib_1_1_basket_1a02037e878ecc0e8c2c3b0f57f0937c15" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>exposure</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1afac6ee19c3107c453e1347dd8000e023" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>forwardFirstNotificationOnly</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7157f41e83f2c5d924f5c5bafda04d1d" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>freeze</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7bb721fe00c6854e602758aba629ab77" prot="protected" virt="non-virtual"><scope>QuantLib::Basket</scope><name>frozen_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a0a7c5d42815a4e16ee2158e24dbfc748" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>isCalculated</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a26f18f4ff7faaaebd8eae50e064b493e" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>LazyObject</name></member>
      <member refid="class_quant_lib_1_1_basket_1a10b57599065c108e4578309cca27cf44" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>liveList</name></member>
      <member refid="class_quant_lib_1_1_basket_1a5dc76f3286b96661e032925c75c6f037" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>liveList</name></member>
      <member refid="class_quant_lib_1_1_basket_1aa6a87cf3aa8447031b0d6a6e33fa57fb" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>lossDistribution</name></member>
      <member refid="class_quant_lib_1_1_basket_1af3ba89cbdf9fffbb79d4f23ef804ce9f" prot="private" virt="non-virtual"><scope>QuantLib::Basket</scope><name>lossModel_</name></member>
      <member refid="class_quant_lib_1_1_basket_1a5bfcb66633488ec17a22c923323dabcb" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>names</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_basket_1a6de240b963234e3ccbf5b1b25ce53160" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>notional</name></member>
      <member refid="class_quant_lib_1_1_basket_1ae55de9298e595aa2976f292e19cc08ac" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>notionals</name></member>
      <member refid="class_quant_lib_1_1_basket_1af3597112d07b81d126f156182c9c7c68" prot="private" virt="non-virtual"><scope>QuantLib::Basket</scope><name>notionals_</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::Basket</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::Basket</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::Basket</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::Basket</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::Basket</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::QuantLib::Observer::"><scope>QuantLib::Basket</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_basket_1acc4e9d053bf09ec971f10965af973334" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>percentile</name></member>
      <member refid="class_quant_lib_1_1_basket_1a2e501f74737981c98aa9e7ea593fc360" prot="private" virt="virtual"><scope>QuantLib::Basket</scope><name>performCalculations</name></member>
      <member refid="class_quant_lib_1_1_basket_1ab343b3d3b245bd161a1e19aedd7e2ae6" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>pool</name></member>
      <member refid="class_quant_lib_1_1_basket_1af546fed6292fa74b990cd13b7a20fb96" prot="private" virt="non-virtual"><scope>QuantLib::Basket</scope><name>pool_</name></member>
      <member refid="class_quant_lib_1_1_basket_1af243121cd9546022688152a6910e65d5" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>probabilities</name></member>
      <member refid="class_quant_lib_1_1_basket_1a2128dcb300624b2344a0d49086e47cf9" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>probAtLeastNEvents</name></member>
      <member refid="class_quant_lib_1_1_basket_1a11916d3dbaeef4851496138069982fc2" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>probOverLoss</name></member>
      <member refid="class_quant_lib_1_1_basket_1abf9a880a5fc60ba3fb19e67d48043284" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>probsBeingNthEvent</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a70c9b24e50132408d8d9ce4f6674662a" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>recalculate</name></member>
      <member refid="class_quant_lib_1_1_basket_1a6d7b3831d9fa63d0efdc2d492ec194fc" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>recoveryRate</name></member>
      <member refid="class_quant_lib_1_1_basket_1a293c2b2fbe89b07504527272375e955d" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>refDate</name></member>
      <member refid="class_quant_lib_1_1_basket_1a9b7a96ae462ca8345ea7ae05b0704d13" prot="private" virt="non-virtual"><scope>QuantLib::Basket</scope><name>refDate_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_basket_1a7a53e607dbe1d49585ad4683dac0a8c0" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>remainingAttachmentAmount</name></member>
      <member refid="class_quant_lib_1_1_basket_1a8d141c86a5b7958edc9ef025c8a6d2ab" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>remainingAttachmentAmount</name></member>
      <member refid="class_quant_lib_1_1_basket_1a1d95d60bc5085271ca6c11669e49436a" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>remainingDefaultKeys</name></member>
      <member refid="class_quant_lib_1_1_basket_1acc7f1daf215dc7fc8eafeafda20b6364" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>remainingDefaultKeys</name></member>
      <member refid="class_quant_lib_1_1_basket_1a27b01fdfd9ff411c9d2b6272645bee55" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>remainingDetachmentAmount</name></member>
      <member refid="class_quant_lib_1_1_basket_1ae68db2b2c3af129834405765aaa9a20d" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>remainingDetachmentAmount</name></member>
      <member refid="class_quant_lib_1_1_basket_1a07ff31fdca3315c595f76c49c294e766" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>remainingNames</name></member>
      <member refid="class_quant_lib_1_1_basket_1a09643b5cc8a860145d4099d4373a2410" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>remainingNames</name></member>
      <member refid="class_quant_lib_1_1_basket_1a51c593360b72d76f70d59066d4031b6e" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>remainingNotional</name></member>
      <member refid="class_quant_lib_1_1_basket_1ad78d5940301bf8ee20d9d30ea4a0f8e2" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>remainingNotional</name></member>
      <member refid="class_quant_lib_1_1_basket_1ac46a085c0c178f4f3f2045e28735a27f" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>remainingNotionals</name></member>
      <member refid="class_quant_lib_1_1_basket_1addf1b5b4652bbb5cf863ad45391179c1" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>remainingNotionals</name></member>
      <member refid="class_quant_lib_1_1_basket_1a52558e992f4d95b635cb57a21f0b6daa" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>remainingProbabilities</name></member>
      <member refid="class_quant_lib_1_1_basket_1adca2dce05e858f501c94fb968cd20454" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>remainingSize</name></member>
      <member refid="class_quant_lib_1_1_basket_1aa41e006030088319d05bbba88acfdecc" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>remainingSize</name></member>
      <member refid="class_quant_lib_1_1_basket_1ab36d5a4d15df946022f07e4706f53293" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>remainingTrancheNotional</name></member>
      <member refid="class_quant_lib_1_1_basket_1af2e679fee3f0727528cf7d51e9e7ea4b" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>remainingTrancheNotional</name></member>
      <member refid="class_quant_lib_1_1_basket_1afe2e2652f2b4184282dee43e53524691" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>setLossModel</name></member>
      <member refid="class_quant_lib_1_1_basket_1af9ca9aa6a01a857ee380618bf504f5c7" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>settledLoss</name></member>
      <member refid="class_quant_lib_1_1_basket_1a5ae93c73541280779fc6b8d3d73deda1" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>settledLoss</name></member>
      <member refid="class_quant_lib_1_1_basket_1a99d8252eaa111838ae40fa6c827352e3" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>size</name></member>
      <member refid="class_quant_lib_1_1_basket_1a9067ed6562ac6529595b73fd852e3250" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>splitVaRLevel</name></member>
      <member refid="class_quant_lib_1_1_basket_1a63d29b55c00d9919a21825ae92da7b0e" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>trancheNotional</name></member>
      <member refid="class_quant_lib_1_1_basket_1aaccdff78ad5353ee424e002aa621d896" prot="private" virt="non-virtual"><scope>QuantLib::Basket</scope><name>trancheNotional_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a2e0e4786666453024b9d4e0761f2770b" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>unfreeze</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_basket_1a4c308e29170a0b6c98e5721dd7ec2654" prot="public" virt="virtual"><scope>QuantLib::Basket</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a9d719c43bb627177a90d7d12324a2d6e" prot="public" virt="non-virtual"><scope>QuantLib::Basket</scope><name>~LazyObject</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::Basket</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::Basket</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
