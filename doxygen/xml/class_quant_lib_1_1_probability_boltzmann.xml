<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_probability_boltzmann" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::ProbabilityBoltzmann</compoundname>
    <includes refid="hybridsimulatedannealingfunctors_8hpp" local="no">hybridsimulatedannealingfunctors.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_probability_boltzmann_1a626fd941054addc0954c52b0d6df3e50" prot="private" static="no" mutable="no">
        <type>std::mt19937</type>
        <definition>std::mt19937 QuantLib::ProbabilityBoltzmann::generator_</definition>
        <argsstring></argsstring>
        <name>generator_</name>
        <qualifiedname>QuantLib::ProbabilityBoltzmann::generator_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="232" column="22" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_probability_boltzmann_1a0ab2cea7d2b55b172123b2b68875f7ef" prot="private" static="no" mutable="no">
        <type>std::uniform_real_distribution&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::uniform_real_distribution&lt;Real&gt; QuantLib::ProbabilityBoltzmann::distribution_</definition>
        <argsstring></argsstring>
        <name>distribution_</name>
        <qualifiedname>QuantLib::ProbabilityBoltzmann::distribution_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="233" column="40" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="233" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_probability_boltzmann_1a325b6b3aaaac646af379d8a089cebc6f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::ProbabilityBoltzmann::ProbabilityBoltzmann</definition>
        <argsstring>(unsigned long seed=SeedGenerator::instance().get())</argsstring>
        <name>ProbabilityBoltzmann</name>
        <qualifiedname>QuantLib::ProbabilityBoltzmann::ProbabilityBoltzmann</qualifiedname>
        <param>
          <type>unsigned long</type>
          <declname>seed</declname>
          <defval><ref refid="class_quant_lib_1_1_singleton_1ac412b7766b32f56372a3e966c5f3f386" kindref="member">SeedGenerator::instance</ref>().get()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="225" column="18" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="225" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_probability_boltzmann_1a94a4d712c48b99286698c1f11d6435cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::ProbabilityBoltzmann::operator()</definition>
        <argsstring>(Real currentValue, Real newValue, const Array &amp;temp)</argsstring>
        <name>operator()</name>
        <qualifiedname>QuantLib::ProbabilityBoltzmann::operator()</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>currentValue</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>newValue</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="227" column="14" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="227" bodyend="230"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Boltzmann <ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>The probability of accepting a new point is sampled from a Boltzmann distribution. A point is accepted if <formula id="124">$ \frac{1}{1+exp(-(current-new)/T)} &gt; u $</formula> where <formula id="125">$ u $</formula> is drawn from a uniform distribution. </para>
    </detaileddescription>
    <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="223" column="5" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="223" bodyend="234"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_probability_boltzmann_1a0ab2cea7d2b55b172123b2b68875f7ef" prot="private" virt="non-virtual"><scope>QuantLib::ProbabilityBoltzmann</scope><name>distribution_</name></member>
      <member refid="class_quant_lib_1_1_probability_boltzmann_1a626fd941054addc0954c52b0d6df3e50" prot="private" virt="non-virtual"><scope>QuantLib::ProbabilityBoltzmann</scope><name>generator_</name></member>
      <member refid="class_quant_lib_1_1_probability_boltzmann_1a94a4d712c48b99286698c1f11d6435cf" prot="public" virt="non-virtual"><scope>QuantLib::ProbabilityBoltzmann</scope><name>operator()</name></member>
      <member refid="class_quant_lib_1_1_probability_boltzmann_1a325b6b3aaaac646af379d8a089cebc6f" prot="public" virt="non-virtual"><scope>QuantLib::ProbabilityBoltzmann</scope><name>ProbabilityBoltzmann</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
