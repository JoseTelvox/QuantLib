<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="struct_quant_lib_1_1_probability_always_downhill" kind="struct" language="C++" prot="public">
    <compoundname>QuantLib::ProbabilityAlwaysDownhill</compoundname>
    <includes refid="hybridsimulatedannealingfunctors_8hpp" local="no">hybridsimulatedannealingfunctors.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_quant_lib_1_1_probability_always_downhill_1a6156bd8eabfd3f2206e190558a63055a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::ProbabilityAlwaysDownhill::operator()</definition>
        <argsstring>(Real currentValue, Real newValue, const Array &amp;temp)</argsstring>
        <name>operator()</name>
        <qualifiedname>QuantLib::ProbabilityAlwaysDownhill::operator()</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>currentValue</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>newValue</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="213" column="14" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="213" bodyend="215"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Always Downhill <ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>Only points that improve on the current solution are accepted. Depending on the problem, this makes it very unlikely that the optimizer will be able to escape a local optimum. </para>
    </detaileddescription>
    <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="212" column="5" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="212" bodyend="216"/>
    <listofallmembers>
      <member refid="struct_quant_lib_1_1_probability_always_downhill_1a6156bd8eabfd3f2206e190558a63055a" prot="public" virt="non-virtual"><scope>QuantLib::ProbabilityAlwaysDownhill</scope><name>operator()</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
