<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_s_a_b_r_interpolation" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::SABRInterpolation</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_interpolation" prot="public" virt="non-virtual">QuantLib::Interpolation</basecompoundref>
    <includes refid="sabrinterpolation_8hpp" local="no">sabrinterpolation.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_s_a_b_r_interpolation_1af51abe28f9d0b09ac8d5e38a195c7e45" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I1</type>
          </param>
          <param>
            <type>class I2</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>QuantLib::SABRInterpolation::SABRInterpolation</definition>
        <argsstring>(const I1 &amp;xBegin, const I1 &amp;xEnd, const I2 &amp;yBegin, Time t, const Real &amp;forward, Real alpha, Real beta, Real nu, Real rho, bool alphaIsFixed, bool betaIsFixed, bool nuIsFixed, bool rhoIsFixed, bool vegaWeighted=true, const ext::shared_ptr&lt; EndCriteria &gt; &amp;endCriteria=ext::shared_ptr&lt; EndCriteria &gt;(), const ext::shared_ptr&lt; OptimizationMethod &gt; &amp;optMethod=ext::shared_ptr&lt; OptimizationMethod &gt;(), const Real errorAccept=0.0020, const bool useMaxError=false, const Size maxGuesses=50, const Real shift=0.0, const VolatilityType volatilityType=VolatilityType::ShiftedLognormal)</argsstring>
        <name>SABRInterpolation</name>
        <qualifiedname>QuantLib::SABRInterpolation::SABRInterpolation</qualifiedname>
        <param>
          <type>const I1 &amp;</type>
          <declname>xBegin</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>xEnd</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>yBegin</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nu</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>rho</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>alphaIsFixed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>betaIsFixed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>nuIsFixed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>rhoIsFixed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>vegaWeighted</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref> &gt; &amp;</type>
          <declname>endCriteria</declname>
          <defval>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref> &gt;()</defval>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_optimization_method" kindref="compound">OptimizationMethod</ref> &gt; &amp;</type>
          <declname>optMethod</declname>
          <defval>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_optimization_method" kindref="compound">OptimizationMethod</ref> &gt;()</defval>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>errorAccept</declname>
          <defval>0.0020</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>useMaxError</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxGuesses</declname>
          <defval>50</defval>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>shift</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>const VolatilityType</type>
          <declname>volatilityType</declname>
          <defval>VolatilityType::ShiftedLognormal</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/sabrinterpolation.hpp" line="153" column="5" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="153" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_s_a_b_r_interpolation_1a7cb37e9d9fde0784e95258946cc59f8d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SABRInterpolation::expiry</definition>
        <argsstring>() const</argsstring>
        <name>expiry</name>
        <qualifiedname>QuantLib::SABRInterpolation::expiry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/sabrinterpolation.hpp" line="177" column="10" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="177" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_s_a_b_r_interpolation_1aa38b2366633da4aa75a8d38701a0da43" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SABRInterpolation::forward</definition>
        <argsstring>() const</argsstring>
        <name>forward</name>
        <qualifiedname>QuantLib::SABRInterpolation::forward</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/sabrinterpolation.hpp" line="178" column="10" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="178" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_s_a_b_r_interpolation_1aaefb44206d474505f649ee259750c8d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SABRInterpolation::alpha</definition>
        <argsstring>() const</argsstring>
        <name>alpha</name>
        <qualifiedname>QuantLib::SABRInterpolation::alpha</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/sabrinterpolation.hpp" line="179" column="10" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="179" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_s_a_b_r_interpolation_1a1f776dca62a493126c7fb855edfcbbc0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SABRInterpolation::beta</definition>
        <argsstring>() const</argsstring>
        <name>beta</name>
        <qualifiedname>QuantLib::SABRInterpolation::beta</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/sabrinterpolation.hpp" line="180" column="10" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="180" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_s_a_b_r_interpolation_1a6cc4c185766f6a8ee2d5470f4f3c8c54" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SABRInterpolation::nu</definition>
        <argsstring>() const</argsstring>
        <name>nu</name>
        <qualifiedname>QuantLib::SABRInterpolation::nu</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/sabrinterpolation.hpp" line="181" column="10" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="181" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_s_a_b_r_interpolation_1a7655a178257c7863d6b658b25c041c94" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SABRInterpolation::rho</definition>
        <argsstring>() const</argsstring>
        <name>rho</name>
        <qualifiedname>QuantLib::SABRInterpolation::rho</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/sabrinterpolation.hpp" line="182" column="10" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_s_a_b_r_interpolation_1ae4c6e9c3e3487b26f483ca4f268cc83f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SABRInterpolation::rmsError</definition>
        <argsstring>() const</argsstring>
        <name>rmsError</name>
        <qualifiedname>QuantLib::SABRInterpolation::rmsError</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/sabrinterpolation.hpp" line="183" column="10" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="183" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_s_a_b_r_interpolation_1ada10c61fb4c135c40b9cad96eb6c2385" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SABRInterpolation::maxError</definition>
        <argsstring>() const</argsstring>
        <name>maxError</name>
        <qualifiedname>QuantLib::SABRInterpolation::maxError</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/sabrinterpolation.hpp" line="184" column="10" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="184" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_s_a_b_r_interpolation_1a63978cbb8645b48e0b9076457aafc542" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Real &gt; &amp; QuantLib::SABRInterpolation::interpolationWeights</definition>
        <argsstring>() const</argsstring>
        <name>interpolationWeights</name>
        <qualifiedname>QuantLib::SABRInterpolation::interpolationWeights</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/sabrinterpolation.hpp" line="185" column="23" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="185" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_s_a_b_r_interpolation_1a183ca265c4fa2c3d2ae7a9dfd0265994" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>EndCriteria::Type</type>
        <definition>EndCriteria::Type QuantLib::SABRInterpolation::endCriteria</definition>
        <argsstring>()</argsstring>
        <name>endCriteria</name>
        <qualifiedname>QuantLib::SABRInterpolation::endCriteria</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/sabrinterpolation.hpp" line="188" column="23" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="188" bodyend="188"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_s_a_b_r_interpolation_1ae860c66db3f84425e7b621edb1282266" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1detail_1_1_x_a_b_r_coeff_holder" kindref="compound">detail::XABRCoeffHolder</ref>&lt; <ref refid="struct_quant_lib_1_1detail_1_1_s_a_b_r_specs" kindref="compound">detail::SABRSpecs</ref> &gt; &amp;</type>
        <definition>const detail::XABRCoeffHolder&lt; detail::SABRSpecs &gt; &amp; QuantLib::SABRInterpolation::coeffs</definition>
        <argsstring>() const</argsstring>
        <name>coeffs</name>
        <qualifiedname>QuantLib::SABRInterpolation::coeffs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/sabrinterpolation.hpp" line="191" column="35" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="191" bodyend="193"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>SABR smile interpolation between discrete volatility points. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="warning"><para>See the <ref refid="class_quant_lib_1_1_interpolation" kindref="compound">Interpolation</ref> class for information about the required lifetime of the underlying data. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>QuantLib::Extrapolator</label>
        <link refid="class_quant_lib_1_1_extrapolator"/>
      </node>
      <node id="2">
        <label>QuantLib::Interpolation</label>
        <link refid="class_quant_lib_1_1_interpolation"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::SABRInterpolation</label>
        <link refid="class_quant_lib_1_1_s_a_b_r_interpolation"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>QuantLib::Extrapolator</label>
        <link refid="class_quant_lib_1_1_extrapolator"/>
      </node>
      <node id="2">
        <label>QuantLib::Interpolation</label>
        <link refid="class_quant_lib_1_1_interpolation"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::SABRInterpolation</label>
        <link refid="class_quant_lib_1_1_s_a_b_r_interpolation"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/math/interpolations/sabrinterpolation.hpp" line="150" column="1" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="150" bodyend="194"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_extrapolator_1ab3936a9b5b5c163d3e511437c16c1d9e" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>allowsExtrapolation</name></member>
      <member refid="class_quant_lib_1_1_s_a_b_r_interpolation_1aaefb44206d474505f649ee259750c8d2" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>alpha</name></member>
      <member refid="class_quant_lib_1_1_s_a_b_r_interpolation_1a1f776dca62a493126c7fb855edfcbbc0" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>beta</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1ab682157f4f0585bc28beefc6c22c8ba8" prot="protected" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>checkRange</name></member>
      <member refid="class_quant_lib_1_1_s_a_b_r_interpolation_1ae860c66db3f84425e7b621edb1282266" prot="private" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>coeffs</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1ab52a971431083a0a474266d6cdc9f936" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>derivative</name></member>
      <member refid="class_quant_lib_1_1_extrapolator_1a6af69387d5cae0fe84d6a0c858406218" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>disableExtrapolation</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1aca518c22ea0e7c6a410757877f11756c" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>empty</name></member>
      <member refid="class_quant_lib_1_1_extrapolator_1a5f7b5650a44d6c63095bc739470c8bfb" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>enableExtrapolation</name></member>
      <member refid="class_quant_lib_1_1_s_a_b_r_interpolation_1a183ca265c4fa2c3d2ae7a9dfd0265994" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>endCriteria</name></member>
      <member refid="class_quant_lib_1_1_s_a_b_r_interpolation_1a7cb37e9d9fde0784e95258946cc59f8d" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>expiry</name></member>
      <member refid="class_quant_lib_1_1_extrapolator_1af1c3adaccdfaf07d3d07edaa234444f7" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>Extrapolator</name></member>
      <member refid="class_quant_lib_1_1_s_a_b_r_interpolation_1aa38b2366633da4aa75a8d38701a0da43" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>forward</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1aef7940748a211476a0ed80e3a6ca9b9b" prot="protected" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>impl_</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1a3357fa39f1e41da02be1792133f6d622" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>Interpolation</name></member>
      <member refid="class_quant_lib_1_1_s_a_b_r_interpolation_1a63978cbb8645b48e0b9076457aafc542" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>interpolationWeights</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1af0892ba060b7b7d58943718b074f079a" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>isInRange</name></member>
      <member refid="class_quant_lib_1_1_s_a_b_r_interpolation_1ada10c61fb4c135c40b9cad96eb6c2385" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>maxError</name></member>
      <member refid="class_quant_lib_1_1_s_a_b_r_interpolation_1a6cc4c185766f6a8ee2d5470f4f3c8c54" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>nu</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1a9e0ba688e60feed84158204bf22b678d" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>operator()</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1a5b8ec18bc4927757f4a04967f13b271c" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>primitive</name></member>
      <member refid="class_quant_lib_1_1_s_a_b_r_interpolation_1a7655a178257c7863d6b658b25c041c94" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>rho</name></member>
      <member refid="class_quant_lib_1_1_s_a_b_r_interpolation_1ae4c6e9c3e3487b26f483ca4f268cc83f" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>rmsError</name></member>
      <member refid="class_quant_lib_1_1_s_a_b_r_interpolation_1af51abe28f9d0b09ac8d5e38a195c7e45" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>SABRInterpolation</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1afab97bcd82695d553682b5f6eebb1718" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>secondDerivative</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1a56cfc87cb5966ee36d72e5ffc7b1ff5c" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1a12711f5ec2e165fdb5104f3979855cc4" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>xMax</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1afc10233f6b565f10e291389631e5ea1f" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>xMin</name></member>
      <member refid="class_quant_lib_1_1_extrapolator_1af0ca0156436ffbce159183198eb27e2e" prot="public" virt="virtual"><scope>QuantLib::SABRInterpolation</scope><name>~Extrapolator</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1a2b6d1246d8676354fb8f1efb03c9852f" prot="public" virt="non-virtual"><scope>QuantLib::SABRInterpolation</scope><name>~Interpolation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
