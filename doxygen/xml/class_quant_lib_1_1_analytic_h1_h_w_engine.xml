<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_analytic_h1_h_w_engine" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::AnalyticH1HWEngine</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_analytic_heston_hull_white_engine" prot="public" virt="non-virtual">QuantLib::AnalyticHestonHullWhiteEngine</basecompoundref>
    <includes refid="analytich1hwengine_8hpp" local="no">analytich1hwengine.hpp</includes>
    <innerclass refid="class_quant_lib_1_1_analytic_h1_h_w_engine_1_1_fj___helper" prot="public">QuantLib::AnalyticH1HWEngine::Fj_Helper</innerclass>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_h1_h_w_engine_1a8f47eb4dae0ec5030437cdf2c8ca099d" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::AnalyticH1HWEngine::rhoSr_</definition>
        <argsstring></argsstring>
        <name>rhoSr_</name>
        <qualifiedname>QuantLib::AnalyticH1HWEngine::rhoSr_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/analytich1hwengine.hpp" line="84" column="20" bodyfile="ql/pricingengines/vanilla/analytich1hwengine.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_h1_h_w_engine_1ab28e77f19aca6c61a296a9dc221ed0ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::AnalyticH1HWEngine::AnalyticH1HWEngine</definition>
        <argsstring>(const ext::shared_ptr&lt; HestonModel &gt; &amp;model, const ext::shared_ptr&lt; HullWhite &gt; &amp;hullWhiteModel, Real rhoSr, Size integrationOrder=144)</argsstring>
        <name>AnalyticH1HWEngine</name>
        <qualifiedname>QuantLib::AnalyticH1HWEngine::AnalyticH1HWEngine</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_heston_model" kindref="compound">HestonModel</ref> &gt; &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_hull_white" kindref="compound">HullWhite</ref> &gt; &amp;</type>
          <declname>hullWhiteModel</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>rhoSr</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>integrationOrder</declname>
          <defval>144</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/analytich1hwengine.hpp" line="70" column="9" bodyfile="ql/pricingengines/vanilla/analytich1hwengine.cpp" bodystart="138" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_h1_h_w_engine_1abe127f76c9d782b92138c237c70681a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::AnalyticH1HWEngine::AnalyticH1HWEngine</definition>
        <argsstring>(const ext::shared_ptr&lt; HestonModel &gt; &amp;model, const ext::shared_ptr&lt; HullWhite &gt; &amp;hullWhiteModel, Real rhoSr, Real relTolerance, Size maxEvaluations)</argsstring>
        <name>AnalyticH1HWEngine</name>
        <qualifiedname>QuantLib::AnalyticH1HWEngine::AnalyticH1HWEngine</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_heston_model" kindref="compound">HestonModel</ref> &gt; &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_hull_white" kindref="compound">HullWhite</ref> &gt; &amp;</type>
          <declname>hullWhiteModel</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>rhoSr</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>relTolerance</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxEvaluations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/analytich1hwengine.hpp" line="74" column="9" bodyfile="ql/pricingengines/vanilla/analytich1hwengine.cpp" bodystart="148" bodyend="155"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_h1_h_w_engine_1a22cbdc5272f63ab508415f1ccb518fea" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::complex&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::complex&lt; Real &gt; QuantLib::AnalyticH1HWEngine::addOnTerm</definition>
        <argsstring>(Real phi, Time t, Size j) const override</argsstring>
        <name>addOnTerm</name>
        <qualifiedname>QuantLib::AnalyticH1HWEngine::addOnTerm</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_analytic_heston_engine_1a5ae5103221990f608acda4260108693a">addOnTerm</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/analytich1hwengine.hpp" line="79" column="22" bodyfile="ql/pricingengines/vanilla/analytich1hwengine.cpp" bodystart="157" bodyend="161"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Analytic Heston-Hull-White engine based on the H1-HW approximation. </para>
    </briefdescription>
    <detaileddescription>
<para>This class is pricing a european option under the following process</para>
<para><formula id="432">\[\begin{array}{rcl}
dS(t, S)  &amp;=&amp; (r-d) S dt +\sqrt{v} S dW_1 \\
dv(t, S)  &amp;=&amp; \kappa (\theta - v) dt + \sigma \sqrt{v} dW_2 \\
dr(t)     &amp;=&amp; (\theta(t) - a r) dt + \eta dW_3 \\
dW_1 dW_2 &amp;=&amp; \rho_{S,v} dt, \rho_{S,r} &gt;= 0 \\
dW_1 dW_3 &amp;=&amp; \rho_{S.r} dt \\
dW_2 dW_3 &amp;=&amp; 0 dt \\
\end{array}
\]</formula></para>
<para>References:</para>
<para>Lech A. Grzelak, Cornelis W. Oosterlee, On The Heston Model with Stochastic, <ulink url="http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1382902">http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1382902</ulink></para>
<para>Lech A. Grzelak, Equity and Foreign Exchange Hybrid Models for Pricing Long-Maturity Financial Derivatives, <ulink url="http://repository.tudelft.nl/assets/uuid:a8e1a007-bd89-481a-aee3-0e22f15ade6b/PhDThesis_main.pdf">http://repository.tudelft.nl/assets/uuid:a8e1a007-bd89-481a-aee3-0e22f15ade6b/PhDThesis_main.pdf</ulink></para>
<para><xrefsect id="test_1_test000141"><xreftitle>Test</xreftitle><xrefdescription><para>the correctness of the returned value is tested by reproducing results available in web/literature, testing against <ref refid="namespace_quant_lib" kindref="compound">QuantLib</ref>&apos;s analytic Heston, the Black-Scholes-Merton Hull-White engine and the finite difference Heston-Hull-White engine </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::AnalyticH1HWEngine</label>
        <link refid="class_quant_lib_1_1_analytic_h1_h_w_engine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::AnalyticHestonEngine</label>
        <link refid="class_quant_lib_1_1_analytic_heston_engine"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::AnalyticHestonHullWhiteEngine</label>
        <link refid="class_quant_lib_1_1_analytic_heston_hull_white_engine"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::GenericEngine&lt; VanillaOption::arguments, VanillaOption::results &gt;</label>
        <link refid="class_quant_lib_1_1_generic_engine"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::GenericModelEngine&lt; HestonModel, VanillaOption::arguments, VanillaOption::results &gt;</label>
        <link refid="class_quant_lib_1_1_generic_model_engine"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="8">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="6">
        <label>QuantLib::PricingEngine</label>
        <link refid="class_quant_lib_1_1_pricing_engine"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::AnalyticH1HWEngine</label>
        <link refid="class_quant_lib_1_1_analytic_h1_h_w_engine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::AnalyticHestonEngine</label>
        <link refid="class_quant_lib_1_1_analytic_heston_engine"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::AnalyticHestonHullWhiteEngine</label>
        <link refid="class_quant_lib_1_1_analytic_heston_hull_white_engine"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::GenericEngine&lt; VanillaOption::arguments, VanillaOption::results &gt;</label>
        <link refid="class_quant_lib_1_1_generic_engine"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::GenericModelEngine&lt; HestonModel, VanillaOption::arguments, VanillaOption::results &gt;</label>
        <link refid="class_quant_lib_1_1_generic_model_engine"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>model_</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>QuantLib::Handle&lt; HestonModel &gt;</label>
        <link refid="class_quant_lib_1_1_handle"/>
      </node>
      <node id="7">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="8">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="6">
        <label>QuantLib::PricingEngine</label>
        <link refid="class_quant_lib_1_1_pricing_engine"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/pricingengines/vanilla/analytich1hwengine.hpp" line="68" column="5" bodyfile="ql/pricingengines/vanilla/analytich1hwengine.hpp" bodystart="68" bodyend="85"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_analytic_h1_h_w_engine_1a22cbdc5272f63ab508415f1ccb518fea" prot="protected" virt="virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>addOnTerm</name></member>
      <member refid="class_quant_lib_1_1_analytic_h1_h_w_engine_1ab28e77f19aca6c61a296a9dc221ed0ac" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>AnalyticH1HWEngine</name></member>
      <member refid="class_quant_lib_1_1_analytic_h1_h_w_engine_1abe127f76c9d782b92138c237c70681a5" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>AnalyticH1HWEngine</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a38dd22f9c1334c9af7ab89e046c5f93f" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>AnalyticHestonEngine</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a27867f49dd312a798485aa6e72794af3" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>AnalyticHestonEngine</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a41d72ab5bcbbdde71e415e1367d7f5c8" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>AnalyticHestonEngine</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_hull_white_engine_1ace959b3aaee3e4ae0c7b02561dc11408" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>AnalyticHestonHullWhiteEngine</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_hull_white_engine_1aac18b5dd673ca973b635af6ab80afb3b" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>AnalyticHestonHullWhiteEngine</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9aebaa9c2dfe01cf6ef293c45bc703f04f" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>AndersenPiterbarg</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9a6870bde1aa2714255c0c2c3446aa34a1" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>AndersenPiterbargOptCV</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9ae6559f4eebda2f3aca5c186667abafd5" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>AngledContour</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9a50982e98a3cf9a3eb2a74d7f571233f5" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>AngledContourNoCV</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1ad2371cdbafa1989afb0e4733b1212c0d" prot="protected" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>arguments_</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9ade9ab8c105891c639fb401df91ab0ca8" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>AsymptoticChF</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9a1ee33f1ea49508f9dc81df0617c2ec50" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>BranchCorrection</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_hull_white_engine_1a8d798d81498d0cb6a445603ea060ec4e" prot="public" virt="virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1afd2c50b1835b62f16e96370e90c3d837" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>chF</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>ComplexLogFormula</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a197d2ed18505819fa83a968748faaf67" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>doCalculation</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9afeafbbdface61417ba7352bbe1089350" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>Gatheral</name></member>
      <member refid="class_quant_lib_1_1_generic_model_engine_1ab8c094dbe99234f8aa9dc0a92e0e5fd1" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>GenericModelEngine</name></member>
      <member refid="class_quant_lib_1_1_generic_model_engine_1a8ab246499452beddca7225a2c63f8549" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>GenericModelEngine</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1ad9c6e8dc65ca072d5e6e17640d74db3e" prot="public" virt="virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>getArguments</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1aea8272ef6e5e0ea1cffadfed0454fa88" prot="public" virt="virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>getResults</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_hull_white_engine_1adcec14aca039866c7c9458b04488ebad" prot="protected" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>hullWhiteModel_</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a0c7bd9e9dbcffe9f972603e40d0840cc" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>lnChF</name></member>
      <member refid="class_quant_lib_1_1_generic_model_engine_1a48733a3abfeb33214816709c9c5c6b62" prot="protected" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>model_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a426d2f9905ff55527a26591cd6bf6649" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>numberOfEvaluations</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::AnalyticH1HWEngine</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::AnalyticH1HWEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::AnalyticH1HWEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::AnalyticH1HWEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1aad20f20041025c9558f04f37aff39049" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>optimalControlVariate</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a99a76bd449100675e84d2d8af904bba9af251c06ef4c920b737aed7c71121d8d7" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>OptimalCV</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a8dbe26195890fc9297e79408c089a647" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>priceVanillaPayoff</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_engine_1a7cff1b17a4ebcd6b048143ce1481013c" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>priceVanillaPayoff</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1a81c5390ba1e713e57ca87d5f841d37f2" prot="public" virt="virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>reset</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1a41281f2ea4990dbce90be1f9f2e231f6" prot="protected" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>results_</name></member>
      <member refid="class_quant_lib_1_1_analytic_h1_h_w_engine_1a8f47eb4dae0ec5030437cdf2c8ca099d" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>rhoSr_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_analytic_heston_hull_white_engine_1a4329f685e1c3901509ed27dc45fda540" prot="public" virt="virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_pricing_engine_1a66b279a54578cd7e60d402e5147eb526" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticH1HWEngine</scope><name>~PricingEngine</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
