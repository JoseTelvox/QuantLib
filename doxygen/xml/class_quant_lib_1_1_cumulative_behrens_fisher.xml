<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_cumulative_behrens_fisher" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::CumulativeBehrensFisher</compoundname>
    <includes refid="convolvedstudentt_8hpp" local="no">convolvedstudentt.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_cumulative_behrens_fisher_1a79697faf987e735819ee8ce0f25fcbd6" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref> &gt;</type>
        <definition>std::vector&lt;Integer&gt; QuantLib::CumulativeBehrensFisher::degreesFreedom_</definition>
        <argsstring></argsstring>
        <name>degreesFreedom_</name>
        <qualifiedname>QuantLib::CumulativeBehrensFisher::degreesFreedom_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/convolvedstudentt.hpp" line="138" column="29" bodyfile="ql/experimental/math/convolvedstudentt.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_cumulative_behrens_fisher_1aaf3ae08aaecd6377c4c347daed4f7666" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::CumulativeBehrensFisher::factors_</definition>
        <argsstring></argsstring>
        <name>factors_</name>
        <qualifiedname>QuantLib::CumulativeBehrensFisher::factors_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/convolvedstudentt.hpp" line="139" column="29" bodyfile="ql/experimental/math/convolvedstudentt.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_cumulative_behrens_fisher_1ae05dd14422d5ec6569c4f71df49ad78b" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;Real&gt; &gt; QuantLib::CumulativeBehrensFisher::polynCharFnc_</definition>
        <argsstring></argsstring>
        <name>polynCharFnc_</name>
        <qualifiedname>QuantLib::CumulativeBehrensFisher::polynCharFnc_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/convolvedstudentt.hpp" line="141" column="29" bodyfile="ql/experimental/math/convolvedstudentt.hpp" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_cumulative_behrens_fisher_1a66e036683feddb84d15971f35fde8c92" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::CumulativeBehrensFisher::polyConvolved_</definition>
        <argsstring></argsstring>
        <name>polyConvolved_</name>
        <qualifiedname>QuantLib::CumulativeBehrensFisher::polyConvolved_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/convolvedstudentt.hpp" line="142" column="29" bodyfile="ql/experimental/math/convolvedstudentt.hpp" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_cumulative_behrens_fisher_1a57eb2791a86b5fda6ee3272041b87154" prot="private" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CumulativeBehrensFisher::a_</definition>
        <argsstring></argsstring>
        <name>a_</name>
        <qualifiedname>QuantLib::CumulativeBehrensFisher::a_</qualifiedname>
        <initializer>= 0.</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/convolvedstudentt.hpp" line="145" column="22" bodyfile="ql/experimental/math/convolvedstudentt.hpp" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_cumulative_behrens_fisher_1a447e2bc8b8605ddf4776c3c8304d4a79" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CumulativeBehrensFisher::a2_</definition>
        <argsstring></argsstring>
        <name>a2_</name>
        <qualifiedname>QuantLib::CumulativeBehrensFisher::a2_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/convolvedstudentt.hpp" line="145" column="26" bodyfile="ql/experimental/math/convolvedstudentt.hpp" bodystart="145" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_cumulative_behrens_fisher_1a09a00ed3ddf154206289700afb3b00a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::CumulativeBehrensFisher::CumulativeBehrensFisher</definition>
        <argsstring>(const std::vector&lt; Integer &gt; &amp;degreesFreedom=std::vector&lt; Integer &gt;(), const std::vector&lt; Real &gt; &amp;factors=std::vector&lt; Real &gt;())</argsstring>
        <name>CumulativeBehrensFisher</name>
        <qualifiedname>QuantLib::CumulativeBehrensFisher::CumulativeBehrensFisher</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref> &gt; &amp;</type>
          <declname>degreesFreedom</declname>
          <defval>std::vector&lt; <ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref> &gt;()</defval>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>factors</declname>
          <defval>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>degreesFreedom</parametername>
</parameternamelist>
<parameterdescription>
<para>Degrees of freedom of the Ts convolved. The algorithm is limited to odd orders only. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>factors</parametername>
</parameternamelist>
<parameterdescription>
<para>Factors in the linear combination of the Ts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/convolvedstudentt.hpp" line="67" column="9" bodyfile="ql/experimental/math/convolvedstudentt.cpp" bodystart="30" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cumulative_behrens_fisher_1a487222870551768473900ea74d66861b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Integer &gt; &amp; QuantLib::CumulativeBehrensFisher::degreeFreedom</definition>
        <argsstring>() const</argsstring>
        <name>degreeFreedom</name>
        <qualifiedname>QuantLib::CumulativeBehrensFisher::degreeFreedom</qualifiedname>
        <briefdescription>
<para>Degrees of freedom of the Ts involved in the convolution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/convolvedstudentt.hpp" line="72" column="27" bodyfile="ql/experimental/math/convolvedstudentt.hpp" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cumulative_behrens_fisher_1a55dc6e868289bff9527022771ab92e2b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Real &gt; &amp; QuantLib::CumulativeBehrensFisher::factors</definition>
        <argsstring>() const</argsstring>
        <name>factors</name>
        <qualifiedname>QuantLib::CumulativeBehrensFisher::factors</qualifiedname>
        <briefdescription>
<para>Factors in the linear combination. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/convolvedstudentt.hpp" line="76" column="27" bodyfile="ql/experimental/math/convolvedstudentt.hpp" bodystart="76" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cumulative_behrens_fisher_1a4b2801a19b2c73bb849fa4f9af9494b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::CumulativeBehrensFisher::operator()</definition>
        <argsstring>(Real x) const</argsstring>
        <name>operator()</name>
        <qualifiedname>QuantLib::CumulativeBehrensFisher::operator()</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Returns the cumulative probability of the resulting distribution. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title></title><para>To obtain the cumulative probability the Gil-Pelaez theorem is applied:</para>
</simplesect>
<simplesect kind="par"><title></title><para>First compute the characteristic function of the linear combination variable by multiplying the individual characteristic functions. Then transform back integrating the characteristic function according to the GP theorem; this is done here analytically feeding in the expression of the total characteristic function this:    <formula id="117">\[ \int_0^{\infty}x^n e^{-ax}sin(bx)dx =
        (-1)^n \Gamma(n+1) \frac{sin((n+1)arctg2(-b/a))}
            {(\sqrt{a^2+b^2})^{n+1}}; for\,a&gt;0,\,b&gt;0
\]</formula> and for the first term I use:   <formula id="118">\[    \int_0^{\infty} \frac{e^{-ax}sin(bx)}{x} dx = arctg2(b/a)
\]</formula> The GP complex integration is simplified thanks to the symetry of the distribution. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/convolvedstudentt.hpp" line="126" column="19" bodyfile="ql/experimental/math/convolvedstudentt.cpp" bodystart="115" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cumulative_behrens_fisher_1a202231feee88fff46bdf62b08aadf024" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::CumulativeBehrensFisher::density</definition>
        <argsstring>(Real x) const</argsstring>
        <name>density</name>
        <qualifiedname>QuantLib::CumulativeBehrensFisher::density</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Returns the probability density of the resulting distribution. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title></title><para>Similarly to the cumulative probability, Gil-Pelaez theorem is applied, the integration is similar.</para>
</simplesect>
<xrefsect id="todo_1_todo000028"><xreftitle>Todo</xreftitle><xrefdescription><para>Implement in a separate class? given the name of this class.. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/convolvedstudentt.hpp" line="135" column="19" bodyfile="ql/experimental/math/convolvedstudentt.cpp" bodystart="133" bodyend="144"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_cumulative_behrens_fisher_1ad083bf694886880c04eb70876ab1d75f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::CumulativeBehrensFisher::polynCharactT</definition>
        <argsstring>(Natural n) const</argsstring>
        <name>polynCharactT</name>
        <qualifiedname>QuantLib::CumulativeBehrensFisher::polynCharactT</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Student t characteristic polynomials. </para>
        </briefdescription>
        <detaileddescription>
<para>Generates the polynomial coefficients defining the characteristic function of a T distribution <formula id="113">$T_\nu$</formula> of odd order; <formula id="114">$\nu=2n+1$</formula>. In general the characteristic function is given by:   <formula id="115">\[\phi_{\nu}(t) = \varphi_{n}(t) \exp{-\nu^{1/2}|t|} ;\,where\,\nu = 2n+1
\]</formula> where <formula id="116">$ \varphi $</formula> are polynomials that are computed recursively.</para>
<para>The convolved characteristic function is the product of the two previous characteristic functions and the problem is then the convolution (a product) of two polynomials. <verbatim>@param n Natural number defining the order of the T for which
the characteristic function is to be computed. The order of the
 T is then \f$ \nu=2n+1 \f$
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/convolvedstudentt.hpp" line="99" column="21" bodyfile="ql/experimental/math/convolvedstudentt.cpp" bodystart="72" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_cumulative_behrens_fisher_1a04dbc1035b92a09c337eac8130f8dc1d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::CumulativeBehrensFisher::convolveVectorPolynomials</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;v1, const std::vector&lt; Real &gt; &amp;v2) const</argsstring>
        <name>convolveVectorPolynomials</name>
        <qualifiedname>QuantLib::CumulativeBehrensFisher::convolveVectorPolynomials</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/convolvedstudentt.hpp" line="101" column="21" bodyfile="ql/experimental/math/convolvedstudentt.cpp" bodystart="94" bodyend="113"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Cumulative (generalized) BehrensFisher distribution. </para>
    </briefdescription>
    <detaileddescription>
<para>Exact analitical computation of the cumulative probability distribution of the linear combination of an arbitrary number (not just two) of T random variables of odd integer order. Adapted from the algorithm in:<simplesect kind="par"><title></title><para>V. Witkovsky, Journal of Statistical Planning and Inference 94 (2001) 1-13</para>
</simplesect>
<simplesect kind="par"><title></title><para>see also:</para>
</simplesect>
<simplesect kind="par"><title></title><para>On the distribution of a linear combination of t-distributed variables; Glenn Alan Walker, Ph.D.thesis University of Florida 1977</para>
</simplesect>
<simplesect kind="par"><title></title><para>&apos;Convolutions of the T <ref refid="class_quant_lib_1_1_distribution" kindref="compound">Distribution</ref>&apos;; S. Nadarajah, D. K. Dey in Computers and Mathematics with Applications 49 (2005) 715-721</para>
</simplesect>
<simplesect kind="par"><title></title><para>The last reference provides direct expressions for some of the densities when the linear combination of only two Ts is just an addition. It can be used for testing the results here.</para>
</simplesect>
<simplesect kind="par"><title></title><para>Another available test on this algorithm stems from the realization that a linear convex ( <formula id="112">$ \sum a_i=1$</formula>) combination of Ts of order one is stable in the distribution sense (but this result is often of no practical use because of its non-finite variance).</para>
</simplesect>
<simplesect kind="par"><title></title><para>This implementation is for two or more T variables in the linear combination albeit these must be of odd order. The case of exactly two T of odd order is known to be a finite mixture of Ts but that result is not used here. On this line see &apos;Linearization coefficients of Bessel polynomials&apos; C.Berg, C.Vignat; February 2008; arXiv:math/0506458 <verbatim>\todo Implement the series expansion solution for the addition of
two Ts of even order described in: &apos;On the density of the sum of two
independent Student t-random vectors&apos; C.Berg, C.Vignat; June 2009;
eprint arXiv:0906.3037
</verbatim> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="ql/experimental/math/convolvedstudentt.hpp" line="60" column="5" bodyfile="ql/experimental/math/convolvedstudentt.hpp" bodystart="60" bodyend="146"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_cumulative_behrens_fisher_1a447e2bc8b8605ddf4776c3c8304d4a79" prot="private" virt="non-virtual"><scope>QuantLib::CumulativeBehrensFisher</scope><name>a2_</name></member>
      <member refid="class_quant_lib_1_1_cumulative_behrens_fisher_1a57eb2791a86b5fda6ee3272041b87154" prot="private" virt="non-virtual"><scope>QuantLib::CumulativeBehrensFisher</scope><name>a_</name></member>
      <member refid="class_quant_lib_1_1_cumulative_behrens_fisher_1a04dbc1035b92a09c337eac8130f8dc1d" prot="private" virt="non-virtual"><scope>QuantLib::CumulativeBehrensFisher</scope><name>convolveVectorPolynomials</name></member>
      <member refid="class_quant_lib_1_1_cumulative_behrens_fisher_1a09a00ed3ddf154206289700afb3b00a6" prot="public" virt="non-virtual"><scope>QuantLib::CumulativeBehrensFisher</scope><name>CumulativeBehrensFisher</name></member>
      <member refid="class_quant_lib_1_1_cumulative_behrens_fisher_1a487222870551768473900ea74d66861b" prot="public" virt="non-virtual"><scope>QuantLib::CumulativeBehrensFisher</scope><name>degreeFreedom</name></member>
      <member refid="class_quant_lib_1_1_cumulative_behrens_fisher_1a79697faf987e735819ee8ce0f25fcbd6" prot="private" virt="non-virtual"><scope>QuantLib::CumulativeBehrensFisher</scope><name>degreesFreedom_</name></member>
      <member refid="class_quant_lib_1_1_cumulative_behrens_fisher_1a202231feee88fff46bdf62b08aadf024" prot="public" virt="non-virtual"><scope>QuantLib::CumulativeBehrensFisher</scope><name>density</name></member>
      <member refid="class_quant_lib_1_1_cumulative_behrens_fisher_1a55dc6e868289bff9527022771ab92e2b" prot="public" virt="non-virtual"><scope>QuantLib::CumulativeBehrensFisher</scope><name>factors</name></member>
      <member refid="class_quant_lib_1_1_cumulative_behrens_fisher_1aaf3ae08aaecd6377c4c347daed4f7666" prot="private" virt="non-virtual"><scope>QuantLib::CumulativeBehrensFisher</scope><name>factors_</name></member>
      <member refid="class_quant_lib_1_1_cumulative_behrens_fisher_1a4b2801a19b2c73bb849fa4f9af9494b5" prot="public" virt="non-virtual"><scope>QuantLib::CumulativeBehrensFisher</scope><name>operator()</name></member>
      <member refid="class_quant_lib_1_1_cumulative_behrens_fisher_1a66e036683feddb84d15971f35fde8c92" prot="private" virt="non-virtual"><scope>QuantLib::CumulativeBehrensFisher</scope><name>polyConvolved_</name></member>
      <member refid="class_quant_lib_1_1_cumulative_behrens_fisher_1ad083bf694886880c04eb70876ab1d75f" prot="private" virt="non-virtual"><scope>QuantLib::CumulativeBehrensFisher</scope><name>polynCharactT</name></member>
      <member refid="class_quant_lib_1_1_cumulative_behrens_fisher_1ae05dd14422d5ec6569c4f71df49ad78b" prot="private" virt="non-virtual"><scope>QuantLib::CumulativeBehrensFisher</scope><name>polynCharFnc_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
