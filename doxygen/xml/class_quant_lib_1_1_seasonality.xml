<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_seasonality" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>QuantLib::Seasonality</compoundname>
    <derivedcompoundref refid="class_quant_lib_1_1_multiplicative_price_seasonality" prot="public" virt="non-virtual">QuantLib::MultiplicativePriceSeasonality</derivedcompoundref>
    <includes refid="seasonality_8hpp" local="no">seasonality.hpp</includes>
    <sectiondef kind="user-defined">
      <header>Seasonality interface</header>
      <memberdef kind="function" id="class_quant_lib_1_1_seasonality_1a32cd0d4c26de3e7e73a9b04499222580" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>virtual Rate QuantLib::Seasonality::correctZeroRate</definition>
        <argsstring>(const Date &amp;d, Rate r, const InflationTermStructure &amp;iTS) const =0</argsstring>
        <name>correctZeroRate</name>
        <qualifiedname>QuantLib::Seasonality::correctZeroRate</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_multiplicative_price_seasonality_1ac39d8c0271e38f896ac68470e7af2dd1">correctZeroRate</reimplementedby>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_inflation_term_structure" kindref="compound">InflationTermStructure</ref> &amp;</type>
          <declname>iTS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/seasonality.hpp" line="62" column="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_seasonality_1aa65ec6811c6e319cd4375bc45000db28" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>virtual Rate QuantLib::Seasonality::correctYoYRate</definition>
        <argsstring>(const Date &amp;d, Rate r, const InflationTermStructure &amp;iTS) const =0</argsstring>
        <name>correctYoYRate</name>
        <qualifiedname>QuantLib::Seasonality::correctYoYRate</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_multiplicative_price_seasonality_1a6a3556aec0a30c6849b8a04bccf81969">correctYoYRate</reimplementedby>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_inflation_term_structure" kindref="compound">InflationTermStructure</ref> &amp;</type>
          <declname>iTS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/seasonality.hpp" line="64" column="11"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_seasonality_1a40cceb3bb9e369a96ea3e4daf25251da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool QuantLib::Seasonality::isConsistent</definition>
        <argsstring>(const InflationTermStructure &amp;iTS) const</argsstring>
        <name>isConsistent</name>
        <qualifiedname>QuantLib::Seasonality::isConsistent</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_multiplicative_price_seasonality_1a58d40d8a781134b3c329c4079638f2c3">isConsistent</reimplementedby>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_inflation_term_structure" kindref="compound">InflationTermStructure</ref> &amp;</type>
          <declname>iTS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>It is possible for multi-year seasonalities to be inconsistent with the inflation term structure they are given to. This method enables testing - but programmers are not required to implement it. E.g. for price seasonality the corrections at whole years after the inflation curve base date should be the same or else there can be an inconsistency with quoted instruments. Alternatively, the seasonality can be set <emphasis>before</emphasis> the inflation curve is bootstrapped. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/seasonality.hpp" line="75" column="24" bodyfile="ql/termstructures/inflation/seasonality.cpp" bodystart="29" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_seasonality_1a1db1a611c8548cae789c3184955c6203" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual QuantLib::Seasonality::~Seasonality</definition>
        <argsstring>()=default</argsstring>
        <name>~Seasonality</name>
        <qualifiedname>QuantLib::Seasonality::~Seasonality</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/seasonality.hpp" line="78" column="19"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A transformation of an existing inflation swap rate. </para>
    </briefdescription>
    <detaileddescription>
<para>This is an abstract class and contains the functions correctXXXRate which returns rates with the seasonality correction. Currently only the price multiplicative version is implemented, but this covers stationary (1-year) and non-stationary (multi-year) seasonality depending on how many years of factors are given. <ref refid="class_quant_lib_1_1_seasonality" kindref="compound">Seasonality</ref> is piecewise constant, hence it will work with un-interpolated inflation indices.</para>
<para>A seasonality assumption can be used to fill in inflation swap curves between maturities that are usually given in integer numbers of years, e.g. 8,9,10,15,20, etc. Historical seasonality may be observed in reported <ref refid="struct_quant_lib_1_1_c_p_i" kindref="compound">CPI</ref> values, alternatively it may be affected by known future events, e.g. announced changes in VAT rates. Thus seasonality may be stationary or non-stationary.</para>
<para>If seasonality is additive then both swap rates will show affects. Additive seasonality is not implemented. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>QuantLib::KerkhofSeasonality</label>
        <link refid="class_quant_lib_1_1_kerkhof_seasonality"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::MultiplicativePriceSeasonality</label>
        <link refid="class_quant_lib_1_1_multiplicative_price_seasonality"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::Seasonality</label>
        <link refid="class_quant_lib_1_1_seasonality"/>
      </node>
    </inheritancegraph>
    <location file="ql/termstructures/inflation/seasonality.hpp" line="55" column="5" bodyfile="ql/termstructures/inflation/seasonality.hpp" bodystart="55" bodyend="79"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_seasonality_1aa65ec6811c6e319cd4375bc45000db28" prot="public" virt="pure-virtual"><scope>QuantLib::Seasonality</scope><name>correctYoYRate</name></member>
      <member refid="class_quant_lib_1_1_seasonality_1a32cd0d4c26de3e7e73a9b04499222580" prot="public" virt="pure-virtual"><scope>QuantLib::Seasonality</scope><name>correctZeroRate</name></member>
      <member refid="class_quant_lib_1_1_seasonality_1a40cceb3bb9e369a96ea3e4daf25251da" prot="public" virt="virtual"><scope>QuantLib::Seasonality</scope><name>isConsistent</name></member>
      <member refid="class_quant_lib_1_1_seasonality_1a1db1a611c8548cae789c3184955c6203" prot="public" virt="virtual"><scope>QuantLib::Seasonality</scope><name>~Seasonality</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
