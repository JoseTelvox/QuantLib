<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_make_m_c_double_barrier_engine" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::MakeMCDoubleBarrierEngine</compoundname>
    <includes refid="mcdoublebarrierengine_8hpp" local="no">mcdoublebarrierengine.hpp</includes>
    <templateparamlist>
      <param>
        <type>class RNG</type>
        <defval><ref refid="namespace_quant_lib_1a68b9aaf5f0c17983506b1a1db8575ab0" kindref="member">PseudoRandom</ref></defval>
      </param>
      <param>
        <type>class S</type>
        <defval><ref refid="namespace_quant_lib_1ae2e788da35d2b866040a03b96227ee6e" kindref="member">Statistics</ref></defval>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_double_barrier_engine_1a3ab4dd2e073220700d967c3010866692" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;GeneralizedBlackScholesProcess&gt; QuantLib::MakeMCDoubleBarrierEngine&lt; RNG, S &gt;::process_</definition>
        <argsstring></argsstring>
        <name>process_</name>
        <qualifiedname>QuantLib::MakeMCDoubleBarrierEngine::process_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" line="105" column="25" bodyfile="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_double_barrier_engine_1a7743c47be22d3d75c27232ce565e4b0c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::MakeMCDoubleBarrierEngine&lt; RNG, S &gt;::brownianBridge_</definition>
        <argsstring></argsstring>
        <name>brownianBridge_</name>
        <qualifiedname>QuantLib::MakeMCDoubleBarrierEngine::brownianBridge_</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" line="106" column="14" bodyfile="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_double_barrier_engine_1a5d1fa874bd2a3055c9d3d23c15e9464c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::MakeMCDoubleBarrierEngine&lt; RNG, S &gt;::antithetic_</definition>
        <argsstring></argsstring>
        <name>antithetic_</name>
        <qualifiedname>QuantLib::MakeMCDoubleBarrierEngine::antithetic_</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" line="106" column="31" bodyfile="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_double_barrier_engine_1ae1c54c67d4effe2447a2d93b09ffd178" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MakeMCDoubleBarrierEngine&lt; RNG, S &gt;::steps_</definition>
        <argsstring></argsstring>
        <name>steps_</name>
        <qualifiedname>QuantLib::MakeMCDoubleBarrierEngine::steps_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" line="107" column="14" bodyfile="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_double_barrier_engine_1a9c7a15f48c6ed250e39bc88627ca4319" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MakeMCDoubleBarrierEngine&lt; RNG, S &gt;::stepsPerYear_</definition>
        <argsstring></argsstring>
        <name>stepsPerYear_</name>
        <qualifiedname>QuantLib::MakeMCDoubleBarrierEngine::stepsPerYear_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" line="107" column="21" bodyfile="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_double_barrier_engine_1aaf7e28730142cdbdf324a78f02009054" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MakeMCDoubleBarrierEngine&lt; RNG, S &gt;::samples_</definition>
        <argsstring></argsstring>
        <name>samples_</name>
        <qualifiedname>QuantLib::MakeMCDoubleBarrierEngine::samples_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" line="107" column="35" bodyfile="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_double_barrier_engine_1a0c64c35e68aa0eb5d6c6d19b0f54e46d" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MakeMCDoubleBarrierEngine&lt; RNG, S &gt;::maxSamples_</definition>
        <argsstring></argsstring>
        <name>maxSamples_</name>
        <qualifiedname>QuantLib::MakeMCDoubleBarrierEngine::maxSamples_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" line="107" column="44" bodyfile="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_double_barrier_engine_1a321d166495e1add6dd0c50380e8a2657" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::MakeMCDoubleBarrierEngine&lt; RNG, S &gt;::tolerance_</definition>
        <argsstring></argsstring>
        <name>tolerance_</name>
        <qualifiedname>QuantLib::MakeMCDoubleBarrierEngine::tolerance_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" line="108" column="14" bodyfile="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_double_barrier_engine_1ab148a3341831a3bc641f181c0b265505" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
        <definition>BigNatural QuantLib::MakeMCDoubleBarrierEngine&lt; RNG, S &gt;::seed_</definition>
        <argsstring></argsstring>
        <name>seed_</name>
        <qualifiedname>QuantLib::MakeMCDoubleBarrierEngine::seed_</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" line="109" column="20" bodyfile="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_double_barrier_engine_1ac8d2454786e0ed35121fe40d4b2248e9" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MakeMCDoubleBarrierEngine&lt; RNG, S &gt;::MakeMCDoubleBarrierEngine</definition>
        <argsstring>(ext::shared_ptr&lt; GeneralizedBlackScholesProcess &gt;)</argsstring>
        <name>MakeMCDoubleBarrierEngine</name>
        <qualifiedname>QuantLib::MakeMCDoubleBarrierEngine::MakeMCDoubleBarrierEngine</qualifiedname>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt;</type>
          <defname>process</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" line="92" column="18" bodyfile="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" bodystart="204" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_double_barrier_engine_1ac77a85228c7ed7a182966ac6df96a09d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_double_barrier_engine" kindref="compound">MakeMCDoubleBarrierEngine</ref> &amp;</type>
        <definition>MakeMCDoubleBarrierEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCDoubleBarrierEngine&lt; RNG, S &gt;::withSteps</definition>
        <argsstring>(Size steps)</argsstring>
        <name>withSteps</name>
        <qualifiedname>QuantLib::MakeMCDoubleBarrierEngine::withSteps</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>steps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" line="94" column="35" bodyfile="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" bodystart="211" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_double_barrier_engine_1ae92f61d3d71cc70e07ebd81c612e68fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_double_barrier_engine" kindref="compound">MakeMCDoubleBarrierEngine</ref> &amp;</type>
        <definition>MakeMCDoubleBarrierEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCDoubleBarrierEngine&lt; RNG, S &gt;::withStepsPerYear</definition>
        <argsstring>(Size steps)</argsstring>
        <name>withStepsPerYear</name>
        <qualifiedname>QuantLib::MakeMCDoubleBarrierEngine::withStepsPerYear</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>steps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" line="95" column="35" bodyfile="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_double_barrier_engine_1a3e0e389b741df9ea24cbe5b7946be46e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_double_barrier_engine" kindref="compound">MakeMCDoubleBarrierEngine</ref> &amp;</type>
        <definition>MakeMCDoubleBarrierEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCDoubleBarrierEngine&lt; RNG, S &gt;::withBrownianBridge</definition>
        <argsstring>(bool b=true)</argsstring>
        <name>withBrownianBridge</name>
        <qualifiedname>QuantLib::MakeMCDoubleBarrierEngine::withBrownianBridge</qualifiedname>
        <param>
          <type>bool</type>
          <declname>b</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" line="96" column="35" bodyfile="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" bodystart="225" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_double_barrier_engine_1a6a11a7149f514e9b95fe1a197e936ab5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_double_barrier_engine" kindref="compound">MakeMCDoubleBarrierEngine</ref> &amp;</type>
        <definition>MakeMCDoubleBarrierEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCDoubleBarrierEngine&lt; RNG, S &gt;::withAntitheticVariate</definition>
        <argsstring>(bool b=true)</argsstring>
        <name>withAntitheticVariate</name>
        <qualifiedname>QuantLib::MakeMCDoubleBarrierEngine::withAntitheticVariate</qualifiedname>
        <param>
          <type>bool</type>
          <declname>b</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" line="97" column="35" bodyfile="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" bodystart="232" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_double_barrier_engine_1accb070e66dcbfa580d63f48aa16acafa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_double_barrier_engine" kindref="compound">MakeMCDoubleBarrierEngine</ref> &amp;</type>
        <definition>MakeMCDoubleBarrierEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCDoubleBarrierEngine&lt; RNG, S &gt;::withSamples</definition>
        <argsstring>(Size samples)</argsstring>
        <name>withSamples</name>
        <qualifiedname>QuantLib::MakeMCDoubleBarrierEngine::withSamples</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>samples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" line="98" column="35" bodyfile="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" bodystart="239" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_double_barrier_engine_1ae1761d06c84be107da7ae15d4b1a60d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_double_barrier_engine" kindref="compound">MakeMCDoubleBarrierEngine</ref> &amp;</type>
        <definition>MakeMCDoubleBarrierEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCDoubleBarrierEngine&lt; RNG, S &gt;::withAbsoluteTolerance</definition>
        <argsstring>(Real tolerance)</argsstring>
        <name>withAbsoluteTolerance</name>
        <qualifiedname>QuantLib::MakeMCDoubleBarrierEngine::withAbsoluteTolerance</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" line="99" column="35" bodyfile="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" bodystart="248" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_double_barrier_engine_1a8ba103e943bebdc38df272e7277d0028" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_double_barrier_engine" kindref="compound">MakeMCDoubleBarrierEngine</ref> &amp;</type>
        <definition>MakeMCDoubleBarrierEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCDoubleBarrierEngine&lt; RNG, S &gt;::withMaxSamples</definition>
        <argsstring>(Size samples)</argsstring>
        <name>withMaxSamples</name>
        <qualifiedname>QuantLib::MakeMCDoubleBarrierEngine::withMaxSamples</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>samples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" line="100" column="35" bodyfile="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" bodystart="260" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_double_barrier_engine_1a0f289d4bdcec7e42e948fb3052dea905" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_double_barrier_engine" kindref="compound">MakeMCDoubleBarrierEngine</ref> &amp;</type>
        <definition>MakeMCDoubleBarrierEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCDoubleBarrierEngine&lt; RNG, S &gt;::withSeed</definition>
        <argsstring>(BigNatural seed)</argsstring>
        <name>withSeed</name>
        <qualifiedname>QuantLib::MakeMCDoubleBarrierEngine::withSeed</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" line="101" column="35" bodyfile="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" bodystart="267" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_double_barrier_engine_1aa345f72371d5ae316805e00d80c47694" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MakeMCDoubleBarrierEngine&lt; RNG, S &gt;::operator ext::shared_ptr&lt; PricingEngine &gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator ext::shared_ptr&lt; PricingEngine &gt;</name>
        <qualifiedname>QuantLib::MakeMCDoubleBarrierEngine::shared_ptr&lt; PricingEngine &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" line="103" column="9" bodyfile="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" bodystart="274" bodyend="290"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Monte Carlo double-barrier-option engine factory. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" line="90" column="5" bodyfile="ql/experimental/barrieroption/mcdoublebarrierengine.hpp" bodystart="90" bodyend="110"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_make_m_c_double_barrier_engine_1a5d1fa874bd2a3055c9d3d23c15e9464c" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCDoubleBarrierEngine</scope><name>antithetic_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_double_barrier_engine_1a7743c47be22d3d75c27232ce565e4b0c" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCDoubleBarrierEngine</scope><name>brownianBridge_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_double_barrier_engine_1ac8d2454786e0ed35121fe40d4b2248e9" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCDoubleBarrierEngine</scope><name>MakeMCDoubleBarrierEngine</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_double_barrier_engine_1a0c64c35e68aa0eb5d6c6d19b0f54e46d" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCDoubleBarrierEngine</scope><name>maxSamples_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_double_barrier_engine_1aa345f72371d5ae316805e00d80c47694" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCDoubleBarrierEngine</scope><name>operator ext::shared_ptr&lt; PricingEngine &gt;</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_double_barrier_engine_1a3ab4dd2e073220700d967c3010866692" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCDoubleBarrierEngine</scope><name>process_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_double_barrier_engine_1aaf7e28730142cdbdf324a78f02009054" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCDoubleBarrierEngine</scope><name>samples_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_double_barrier_engine_1ab148a3341831a3bc641f181c0b265505" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCDoubleBarrierEngine</scope><name>seed_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_double_barrier_engine_1ae1c54c67d4effe2447a2d93b09ffd178" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCDoubleBarrierEngine</scope><name>steps_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_double_barrier_engine_1a9c7a15f48c6ed250e39bc88627ca4319" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCDoubleBarrierEngine</scope><name>stepsPerYear_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_double_barrier_engine_1a321d166495e1add6dd0c50380e8a2657" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCDoubleBarrierEngine</scope><name>tolerance_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_double_barrier_engine_1ae1761d06c84be107da7ae15d4b1a60d1" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCDoubleBarrierEngine</scope><name>withAbsoluteTolerance</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_double_barrier_engine_1a6a11a7149f514e9b95fe1a197e936ab5" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCDoubleBarrierEngine</scope><name>withAntitheticVariate</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_double_barrier_engine_1a3e0e389b741df9ea24cbe5b7946be46e" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCDoubleBarrierEngine</scope><name>withBrownianBridge</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_double_barrier_engine_1a8ba103e943bebdc38df272e7277d0028" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCDoubleBarrierEngine</scope><name>withMaxSamples</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_double_barrier_engine_1accb070e66dcbfa580d63f48aa16acafa" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCDoubleBarrierEngine</scope><name>withSamples</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_double_barrier_engine_1a0f289d4bdcec7e42e948fb3052dea905" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCDoubleBarrierEngine</scope><name>withSeed</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_double_barrier_engine_1ac77a85228c7ed7a182966ac6df96a09d" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCDoubleBarrierEngine</scope><name>withSteps</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_double_barrier_engine_1ae92f61d3d71cc70e07ebd81c612e68fd" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCDoubleBarrierEngine</scope><name>withStepsPerYear</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
