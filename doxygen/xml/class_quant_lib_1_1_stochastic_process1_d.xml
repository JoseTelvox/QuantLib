<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_stochastic_process1_d" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>QuantLib::StochasticProcess1D</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_stochastic_process" prot="public" virt="non-virtual">QuantLib::StochasticProcess</basecompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_cox_ingersoll_ross_process" prot="public" virt="non-virtual">QuantLib::CoxIngersollRossProcess</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_extended_ornstein_uhlenbeck_process" prot="public" virt="non-virtual">QuantLib::ExtendedOrnsteinUhlenbeckProcess</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_forward_measure_process1_d" prot="public" virt="non-virtual">QuantLib::ForwardMeasureProcess1D</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_geman_roncoroni_process" prot="public" virt="non-virtual">QuantLib::GemanRoncoroniProcess</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_generalized_black_scholes_process" prot="public" virt="non-virtual">QuantLib::GeneralizedBlackScholesProcess</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process" prot="public" virt="non-virtual">QuantLib::GeneralizedOrnsteinUhlenbeckProcess</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_geometric_brownian_motion_process" prot="public" virt="non-virtual">QuantLib::GeometricBrownianMotionProcess</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_hull_white_process" prot="public" virt="non-virtual">QuantLib::HullWhiteProcess</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_merton76_process" prot="public" virt="non-virtual">QuantLib::Merton76Process</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_mf_state_process" prot="public" virt="non-virtual">QuantLib::MfStateProcess</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_ornstein_uhlenbeck_process" prot="public" virt="non-virtual">QuantLib::OrnsteinUhlenbeckProcess</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_square_root_process" prot="public" virt="non-virtual">QuantLib::SquareRootProcess</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_variance_gamma_process" prot="public" virt="non-virtual">QuantLib::VarianceGammaProcess</derivedcompoundref>
    <includes refid="stochasticprocess_8hpp" local="no">stochasticprocess.hpp</includes>
    <innerclass refid="class_quant_lib_1_1_stochastic_process1_d_1_1discretization" prot="public">QuantLib::StochasticProcess1D::discretization</innerclass>
    <sectiondef kind="user-defined">
      <header>1-D stochastic process interface</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_stochastic_process1_d_1aff0e6c615f076baf4393abe860794583" prot="protected" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_stochastic_process1_d_1_1discretization" kindref="compound">discretization</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;discretization&gt; QuantLib::StochasticProcess1D::discretization_</definition>
        <argsstring></argsstring>
        <name>discretization_</name>
        <qualifiedname>QuantLib::StochasticProcess1D::discretization_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="228" column="25" bodyfile="ql/stochasticprocess.hpp" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process1_d_1a4a0eee3b5c6592950bd6635177f76113" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>virtual Real QuantLib::StochasticProcess1D::x0</definition>
        <argsstring>() const =0</argsstring>
        <name>x0</name>
        <qualifiedname>QuantLib::StochasticProcess1D::x0</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_cox_ingersoll_ross_process_1a7b09b736ac87dc21fd97792fc3cc9670">x0</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_extended_ornstein_uhlenbeck_process_1add35f586c64c98edab8b8594952a684a">x0</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_geman_roncoroni_process_1afa934267e14a857eda9e97eaee846920">x0</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_generalized_black_scholes_process_1ae765ed8c43a8a485adf8baf3dcf608ba">x0</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1afc08de7502e8ff637f366c1bab473431">x0</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_geometric_brownian_motion_process_1a93bb4415907379f1d1635f3d5d2bed68">x0</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_gsr_process_1ac0c81bb61eda8dc15b24aafc740af911">x0</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hull_white_forward_process_1ace9da6fcb6da084f0b8fbb1c99bef611">x0</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hull_white_process_1a50d9f94289137276229f0f6ec52f8d97">x0</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_merton76_process_1ab11494eecaaef79871bb68f9dc7c6ea8">x0</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_mf_state_process_1af38f12d16806d0e50e27103e533cf5d8">x0</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_ornstein_uhlenbeck_process_1a4429dc798b4f1041cd08dce3f79de7e1">x0</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_square_root_process_1a95958660e02dcfe7b36d74ff494693c4">x0</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_variance_gamma_process_1a837c1a4bd9497a0b6fef47b41f6f3b00">x0</reimplementedby>
        <briefdescription>
<para>returns the initial value of the state variable </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="179" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process1_d_1ad27eced4c2abbe7d8da5951969158e2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>virtual Real QuantLib::StochasticProcess1D::drift</definition>
        <argsstring>(Time t, Real x) const =0</argsstring>
        <name>drift</name>
        <qualifiedname>QuantLib::StochasticProcess1D::drift</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_cox_ingersoll_ross_process_1afe7fd45f9d0c1ddcead8f80d5b4fd117">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_extended_black_scholes_merton_process_1a0bf290a22e06b6ebf3f970cb3ac5c595">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_extended_ornstein_uhlenbeck_process_1aec807fecd07ea87956fe5e2975585fcf">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_geman_roncoroni_process_1a64516a5f035bcaaf83575297863d78e5">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_generalized_black_scholes_process_1abf46d8ac312c489f2fcf00fefc734953">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1a539d5ea9f1d849c67fca664a8a2c7cb0">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_geometric_brownian_motion_process_1a54b67d80d0aaa82b4119eeb436c37b8b">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_gsr_process_1a17a6a050de87abfa4a3e63e0243dec4f">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hull_white_forward_process_1a68a054f4557e68c53c9a0d2a36109436">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hull_white_process_1a9510320bc64d1b9b913eb675806739e2">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_merton76_process_1a7278ffed104fdfa0f19a98752d35edc4">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_mf_state_process_1a4b41163d9f494bc2b934010d6ec0e14a">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_ornstein_uhlenbeck_process_1a9833ded32852935c53117abcad346b20">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_square_root_process_1a9dcc5b4c2fb13da2d303929b64b4477c">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_variance_gamma_process_1ad5c4654f45950ba98fa9bb48f0285685">drift</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the drift part of the equation, i.e. <formula id="478">$ \mu(t, x_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="181" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process1_d_1a66bde34ae0158d64169e39655fdfcfc0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>virtual Real QuantLib::StochasticProcess1D::diffusion</definition>
        <argsstring>(Time t, Real x) const =0</argsstring>
        <name>diffusion</name>
        <qualifiedname>QuantLib::StochasticProcess1D::diffusion</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_cox_ingersoll_ross_process_1adadd5a38a5f27ab5907bf367140ae6dc">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_extended_black_scholes_merton_process_1a01278082a7b600270826af2f9e39b90d">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_extended_ornstein_uhlenbeck_process_1a9a8de978c25ee1f2cd0685e3ab936061">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_geman_roncoroni_process_1ac4dd162eae34b40cbcc605e85fb4f19e">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_generalized_black_scholes_process_1a72dbcf1a1c410debf2b0b1d07124a3bf">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1ab43f5f077af60ee5d5a04a6f57362969">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_geometric_brownian_motion_process_1a6a5e7137ced7fb7338207f5f5b56884c">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_gsr_process_1a40200151ce624122fa182ca7a1d7deee">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hull_white_forward_process_1a0987b3bc80e7735e5533e83579a37bdf">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hull_white_process_1a0431106c86ea63ff800c8fc4d2f18f77">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_merton76_process_1af10d5135a8b7250b62e8f1d87fe15160">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_mf_state_process_1a1cfdec39160ed0fedfd3bf8bcaba2c76">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_ornstein_uhlenbeck_process_1a6430a89146c00a2c2b4155cd3ad64759">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_square_root_process_1a209c29e99eca9eabcabbf46e45bbc420">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_variance_gamma_process_1ae6185941e4e9f8bed1eb4b65956c2c23">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_vega_stressed_black_scholes_process_1aec2ca2244591476ce54ed58ab135062f">diffusion</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the diffusion part of the equation, i.e. <formula id="479">$ \sigma(t, x_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="185" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process1_d_1a4543779731a4ce76e9dd85f3c81752e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::StochasticProcess1D::expectation</definition>
        <argsstring>(Time t0, Real x0, Time dt) const</argsstring>
        <name>expectation</name>
        <qualifiedname>QuantLib::StochasticProcess1D::expectation</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_cox_ingersoll_ross_process_1a57e477f55749c97783fecc89daa6b18a">expectation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_extended_ornstein_uhlenbeck_process_1a96d47c743ecc4bdfbaadcf7cc44aac55">expectation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_generalized_black_scholes_process_1a942429a2002692b5ceb0cfc646beb174">expectation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1a85fa81253b41f1d3220d1387afac7fb6">expectation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_gsr_process_1aaba0d793a88010d0173337b864d973ad">expectation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hull_white_forward_process_1a828d17238e20decef4f249fa0f0734f5">expectation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hull_white_process_1a349a69c1f24a7a981a30234856726c38">expectation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_mf_state_process_1ab3ed082854bf752e27c92324f0fc5991">expectation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_ornstein_uhlenbeck_process_1a59f5536ba4d7727985e75b368b9d4428">expectation</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the expectation <formula id="480">$ E(x_{t_0 + \Delta t} | x_{t_0} = x_0) $</formula> of the process after a time interval <formula id="471">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="193" column="22" bodyfile="ql/stochasticprocess.cpp" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process1_d_1a3290404acdbfcbbd6bbf8b035862e803" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::StochasticProcess1D::stdDeviation</definition>
        <argsstring>(Time t0, Real x0, Time dt) const</argsstring>
        <name>stdDeviation</name>
        <qualifiedname>QuantLib::StochasticProcess1D::stdDeviation</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_cox_ingersoll_ross_process_1ae9a7d5c73a531a7d91eebf56c41f02ec">stdDeviation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_extended_ornstein_uhlenbeck_process_1a879019f44cf5adb4d0ba8685d4d3990d">stdDeviation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_geman_roncoroni_process_1ab62865912f1204c08b75e6231b528f27">stdDeviation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_generalized_black_scholes_process_1a7eacd46b71b39baa72872d454acdeeaf">stdDeviation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1af951cf8572fdcfafea9ff296d0b1dfd4">stdDeviation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_gsr_process_1aa1027487e3496d00c21866eb673e5203">stdDeviation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hull_white_forward_process_1a9fbce1a75b1d53a2e989f1d3a195c62e">stdDeviation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hull_white_process_1a7c1bf80d9a80522c13c7c7dddf619d1a">stdDeviation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_mf_state_process_1ae6b9fe2aeff6c1c5a27284171bd5afca">stdDeviation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_ornstein_uhlenbeck_process_1ab4787da2f98f131b781634ada7127691">stdDeviation</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the standard deviation <formula id="481">$ S(x_{t_0 + \Delta t} | x_{t_0} = x_0) $</formula> of the process after a time interval <formula id="471">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="201" column="22" bodyfile="ql/stochasticprocess.cpp" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process1_d_1afec760c46c7f53d98cea9befd7087508" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::StochasticProcess1D::variance</definition>
        <argsstring>(Time t0, Real x0, Time dt) const</argsstring>
        <name>variance</name>
        <qualifiedname>QuantLib::StochasticProcess1D::variance</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_cox_ingersoll_ross_process_1afe19a939803f54a5c35843663cd09500">variance</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_extended_ornstein_uhlenbeck_process_1ac500ceb002d71f0604eb569a14cf36e2">variance</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_generalized_black_scholes_process_1a17b17c60b8a56d8eab8ed63ad7ff64d1">variance</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1a2103a661f362ea8b3655f85853dd01fa">variance</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_gsr_process_1a18cf99a29828d272547eb594f1f25e27">variance</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hull_white_forward_process_1a7a87a34f6339dc9650dafd239117bff7">variance</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hull_white_process_1aafc6b715dcfb4d311e97f5d39d9e432f">variance</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_mf_state_process_1a54ac75e434e6df00768c5c7ea39b26f0">variance</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_ornstein_uhlenbeck_process_1a6d6cad981d1a1832a368d5e918d01a63">variance</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the variance <formula id="482">$ V(x_{t_0 + \Delta t} | x_{t_0} = x_0) $</formula> of the process after a time interval <formula id="471">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="209" column="22" bodyfile="ql/stochasticprocess.cpp" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process1_d_1a39605ea27c7ef3a7feafed4fafcc1f90" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::StochasticProcess1D::evolve</definition>
        <argsstring>(Time t0, Real x0, Time dt, Real dw) const</argsstring>
        <name>evolve</name>
        <qualifiedname>QuantLib::StochasticProcess1D::evolve</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_cox_ingersoll_ross_process_1a499fb22ba79adf3a280b1302ace7391e">evolve</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_extended_black_scholes_merton_process_1aae9f92f2934c5cba48f23c292f1baf95">evolve</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_geman_roncoroni_process_1a98747fd734549b00fec273fd2d5d2d54">evolve</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_generalized_black_scholes_process_1a208d564850f58a2e14f5711bba553e34">evolve</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>dw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the asset value after a time interval  <formula id="474">$ \Delta t
$</formula> according to the given discretization. By default, it returns   <formula id="483">\[E(x_0,t_0,\Delta t) + S(x_0,t_0,\Delta t) \cdot \Delta w
\]</formula> where <formula id="476">$ E $</formula> is the expectation and <formula id="290">$ S $</formula> the standard deviation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="219" column="22" bodyfile="ql/stochasticprocess.cpp" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process1_d_1a303b2e3c9243b674ac1f145c304811b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::StochasticProcess1D::apply</definition>
        <argsstring>(Real x0, Real dx) const</argsstring>
        <name>apply</name>
        <qualifiedname>QuantLib::StochasticProcess1D::apply</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_generalized_black_scholes_process_1af138c8d7679ab9ee3c1196db728a309c">apply</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_merton76_process_1ae6a94b497f64a880bcc7dee947a17752">apply</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>dx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>applies a change to the asset value. By default, it returns <formula id="484">$ x + \Delta x $</formula>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="223" column="22" bodyfile="ql/stochasticprocess.cpp" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process1_d_1a8fd2dc83f956da3dd008242ee5a5c926" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::StochasticProcess1D::StochasticProcess1D</definition>
        <argsstring>()=default</argsstring>
        <name>StochasticProcess1D</name>
        <qualifiedname>QuantLib::StochasticProcess1D::StochasticProcess1D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="226" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process1_d_1a0971f058bea9a93d2ced17c685576686" prot="protected" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::StochasticProcess1D::StochasticProcess1D</definition>
        <argsstring>(ext::shared_ptr&lt; discretization &gt;)</argsstring>
        <name>StochasticProcess1D</name>
        <qualifiedname>QuantLib::StochasticProcess1D::StochasticProcess1D</qualifiedname>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_stochastic_process1_d_1_1discretization" kindref="compound">discretization</ref> &gt;</type>
          <defname>disc</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="227" column="18" bodyfile="ql/stochasticprocess.cpp" bodystart="75" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process1_d_1a427495e858236ca1692eff7c771b6e2a" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::StochasticProcess1D::size</definition>
        <argsstring>() const override</argsstring>
        <name>size</name>
        <qualifiedname>QuantLib::StochasticProcess1D::size</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a92e9b468d781e9ceb566d6e546113540">size</reimplements>
        <briefdescription>
<para>returns the number of dimensions of the stochastic process </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="231" column="14" bodyfile="ql/stochasticprocess.hpp" bodystart="245" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process1_d_1afe261942062a36caf1d2902a0791331d" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::StochasticProcess1D::initialValues</definition>
        <argsstring>() const override</argsstring>
        <name>initialValues</name>
        <qualifiedname>QuantLib::StochasticProcess1D::initialValues</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a4277a74107d071252a2445d23c90b654">initialValues</reimplements>
        <briefdescription>
<para>returns the initial values of the state variables </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="232" column="15" bodyfile="ql/stochasticprocess.hpp" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process1_d_1a905264383316f171c09de1dc365f2d64" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::StochasticProcess1D::drift</definition>
        <argsstring>(Time t, const Array &amp;x) const override</argsstring>
        <name>drift</name>
        <qualifiedname>QuantLib::StochasticProcess1D::drift</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a467056bfaa17a1ea3debd1dc21402bb8">drift</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the drift part of the equation, i.e., <formula id="468">$ \mu(t, \mathrm{x}_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="233" column="15" bodyfile="ql/stochasticprocess.hpp" bodystart="254" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process1_d_1ae17cbed491dafb462e21846cf5f34238" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::StochasticProcess1D::diffusion</definition>
        <argsstring>(Time t, const Array &amp;x) const override</argsstring>
        <name>diffusion</name>
        <qualifiedname>QuantLib::StochasticProcess1D::diffusion</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a45df6a954a177df19d31de5a7f2bef35">diffusion</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the diffusion part of the equation, i.e. <formula id="469">$ \sigma(t, \mathrm{x}_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="234" column="16" bodyfile="ql/stochasticprocess.hpp" bodystart="262" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process1_d_1aec74ba7ca0fcd3494c2c45fd4f6f32ca" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::StochasticProcess1D::expectation</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt) const override</argsstring>
        <name>expectation</name>
        <qualifiedname>QuantLib::StochasticProcess1D::expectation</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1af225d654ba08bc09bf2ecab7d787ca9b">expectation</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the expectation  <formula id="470">$ E(\mathrm{x}_{t_0 + \Delta t}
    | \mathrm{x}_{t_0} = \mathrm{x}_0) $</formula> of the process after a time interval <formula id="471">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="235" column="15" bodyfile="ql/stochasticprocess.hpp" bodystart="270" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process1_d_1a6db30d97a969cf695142b77d4608fa31" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::StochasticProcess1D::stdDeviation</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt) const override</argsstring>
        <name>stdDeviation</name>
        <qualifiedname>QuantLib::StochasticProcess1D::stdDeviation</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a47e9f5540b2ca9c32650dc81d051ca86">stdDeviation</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the standard deviation  <formula id="472">$ S(\mathrm{x}_{t_0 + \Delta t}
    | \mathrm{x}_{t_0} = \mathrm{x}_0) $</formula> of the process after a time interval <formula id="471">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="236" column="16" bodyfile="ql/stochasticprocess.hpp" bodystart="279" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process1_d_1a7a6f6dbd4dcd88d7793c718ec4e2d7a9" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::StochasticProcess1D::covariance</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt) const override</argsstring>
        <name>covariance</name>
        <qualifiedname>QuantLib::StochasticProcess1D::covariance</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a3a92717719d8621148989905a132c5e1">covariance</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the covariance  <formula id="473">$ V(\mathrm{x}_{t_0 + \Delta t}
    | \mathrm{x}_{t_0} = \mathrm{x}_0) $</formula> of the process after a time interval <formula id="471">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="237" column="16" bodyfile="ql/stochasticprocess.hpp" bodystart="288" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process1_d_1a2065cda22cc58067746379613726c3ad" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::StochasticProcess1D::evolve</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt, const Array &amp;dw) const override</argsstring>
        <name>evolve</name>
        <qualifiedname>QuantLib::StochasticProcess1D::evolve</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a8d99a715b297d5b6543b1d303a6002c0">evolve</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>dw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the asset value after a time interval  <formula id="474">$ \Delta t
$</formula> according to the given discretization. By default, it returns    <formula id="475">\[E(\mathrm{x}_0,t_0,\Delta t) +
S(\mathrm{x}_0,t_0,\Delta t) \cdot \Delta \mathrm{w}
\]</formula> where <formula id="476">$ E $</formula> is the expectation and <formula id="290">$ S $</formula> the standard deviation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="238" column="15" bodyfile="ql/stochasticprocess.hpp" bodystart="297" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process1_d_1a8085d27753231bb61130e9850c4a6464" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::StochasticProcess1D::apply</definition>
        <argsstring>(const Array &amp;x0, const Array &amp;dx) const override</argsstring>
        <name>apply</name>
        <qualifiedname>QuantLib::StochasticProcess1D::apply</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1ae2e3d89d3595fcd73be5e6e7e195f3e7">apply</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>dx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>applies a change to the asset value. By default, it returns <formula id="477">$ \mathrm{x} + \Delta \mathrm{x} $</formula>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="239" column="15" bodyfile="ql/stochasticprocess.hpp" bodystart="307" bodyend="315"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>1-dimensional stochastic process </para>
    </briefdescription>
    <detaileddescription>
<para>This class describes a stochastic process governed by   <formula id="467">\[    dx_t = \mu(t, x_t)dt + \sigma(t, x_t)dW_t.
\]</formula> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="12">
        <label>QuantLib::BlackProcess</label>
        <link refid="class_quant_lib_1_1_black_process"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>QuantLib::BlackScholesMertonProcess</label>
        <link refid="class_quant_lib_1_1_black_scholes_merton_process"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>QuantLib::BlackScholesProcess</label>
        <link refid="class_quant_lib_1_1_black_scholes_process"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::CoxIngersollRossProcess</label>
        <link refid="class_quant_lib_1_1_cox_ingersoll_ross_process"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>QuantLib::ExtendedBlackScholesMertonProcess</label>
        <link refid="class_quant_lib_1_1_extended_black_scholes_merton_process"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::ExtendedOrnsteinUhlenbeckProcess</label>
        <link refid="class_quant_lib_1_1_extended_ornstein_uhlenbeck_process"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::ForwardMeasureProcess1D</label>
        <link refid="class_quant_lib_1_1_forward_measure_process1_d"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>QuantLib::GarmanKohlagenProcess</label>
        <link refid="class_quant_lib_1_1_garman_kohlagen_process"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>QuantLib::GemanRoncoroniProcess</label>
        <link refid="class_quant_lib_1_1_geman_roncoroni_process"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>QuantLib::GeneralizedBlackScholesProcess</label>
        <link refid="class_quant_lib_1_1_generalized_black_scholes_process"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</label>
        <link refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>QuantLib::GeometricBrownianMotionProcess</label>
        <link refid="class_quant_lib_1_1_geometric_brownian_motion_process"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QuantLib::GsrProcess</label>
        <link refid="class_quant_lib_1_1_gsr_process"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>QuantLib::HullWhiteForwardProcess</label>
        <link refid="class_quant_lib_1_1_hull_white_forward_process"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>QuantLib::HullWhiteProcess</label>
        <link refid="class_quant_lib_1_1_hull_white_process"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>QuantLib::Merton76Process</label>
        <link refid="class_quant_lib_1_1_merton76_process"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>QuantLib::MfStateProcess</label>
        <link refid="class_quant_lib_1_1_mf_state_process"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="3">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="23">
        <label>QuantLib::OrnsteinUhlenbeckProcess</label>
        <link refid="class_quant_lib_1_1_ornstein_uhlenbeck_process"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>QuantLib::SquareRootProcess</label>
        <link refid="class_quant_lib_1_1_square_root_process"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::StochasticProcess</label>
        <link refid="class_quant_lib_1_1_stochastic_process"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::StochasticProcess1D</label>
        <link refid="class_quant_lib_1_1_stochastic_process1_d"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>QuantLib::VarianceGammaProcess</label>
        <link refid="class_quant_lib_1_1_variance_gamma_process"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>QuantLib::VegaStressedBlackScholesProcess</label>
        <link refid="class_quant_lib_1_1_vega_stressed_black_scholes_process"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="3">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::StochasticProcess</label>
        <link refid="class_quant_lib_1_1_stochastic_process"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::StochasticProcess1D</label>
        <link refid="class_quant_lib_1_1_stochastic_process1_d"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/stochasticprocess.hpp" line="163" column="5" bodyfile="ql/stochasticprocess.hpp" bodystart="163" bodyend="240"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a303b2e3c9243b674ac1f145c304811b7" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess1D</scope><name>apply</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a8085d27753231bb61130e9850c4a6464" prot="private" virt="virtual"><scope>QuantLib::StochasticProcess1D</scope><name>apply</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a7a6f6dbd4dcd88d7793c718ec4e2d7a9" prot="private" virt="virtual"><scope>QuantLib::StochasticProcess1D</scope><name>covariance</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess1D</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a66bde34ae0158d64169e39655fdfcfc0" prot="public" virt="pure-virtual"><scope>QuantLib::StochasticProcess1D</scope><name>diffusion</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1ae17cbed491dafb462e21846cf5f34238" prot="private" virt="virtual"><scope>QuantLib::StochasticProcess1D</scope><name>diffusion</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1aff0e6c615f076baf4393abe860794583" prot="protected" virt="non-virtual"><scope>QuantLib::StochasticProcess1D</scope><name>discretization_</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1ad27eced4c2abbe7d8da5951969158e2d" prot="public" virt="pure-virtual"><scope>QuantLib::StochasticProcess1D</scope><name>drift</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a905264383316f171c09de1dc365f2d64" prot="private" virt="virtual"><scope>QuantLib::StochasticProcess1D</scope><name>drift</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a39605ea27c7ef3a7feafed4fafcc1f90" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess1D</scope><name>evolve</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a2065cda22cc58067746379613726c3ad" prot="private" virt="virtual"><scope>QuantLib::StochasticProcess1D</scope><name>evolve</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a4543779731a4ce76e9dd85f3c81752e7" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess1D</scope><name>expectation</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1aec74ba7ca0fcd3494c2c45fd4f6f32ca" prot="private" virt="virtual"><scope>QuantLib::StochasticProcess1D</scope><name>expectation</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0346d38598fb9a5a1cd58024f05081aa" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess1D</scope><name>factors</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1afe261942062a36caf1d2902a0791331d" prot="private" virt="virtual"><scope>QuantLib::StochasticProcess1D</scope><name>initialValues</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::StochasticProcess1D</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess1D</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess1D</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess1D</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess1D</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::StochasticProcess1D</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::StochasticProcess1D</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::StochasticProcess1D</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::StochasticProcess1D</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::StochasticProcess1D</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess1D</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess1D</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a427495e858236ca1692eff7c771b6e2a" prot="private" virt="virtual"><scope>QuantLib::StochasticProcess1D</scope><name>size</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a3290404acdbfcbbd6bbf8b035862e803" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess1D</scope><name>stdDeviation</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a6db30d97a969cf695142b77d4608fa31" prot="private" virt="virtual"><scope>QuantLib::StochasticProcess1D</scope><name>stdDeviation</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a2dd24b794a6b320bc60ba9e1a87bf48e" prot="protected" virt="non-virtual"><scope>QuantLib::StochasticProcess1D</scope><name>StochasticProcess</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a957ee9776d6048835106ea29ea44927f" prot="protected" virt="non-virtual"><scope>QuantLib::StochasticProcess1D</scope><name>StochasticProcess</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a8fd2dc83f956da3dd008242ee5a5c926" prot="protected" virt="non-virtual"><scope>QuantLib::StochasticProcess1D</scope><name>StochasticProcess1D</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a0971f058bea9a93d2ced17c685576686" prot="protected" virt="non-virtual"><scope>QuantLib::StochasticProcess1D</scope><name>StochasticProcess1D</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a39c5f08a3779665f9185a558d2b8418d" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess1D</scope><name>time</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess1D</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess1D</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0f22628658fd2dc702c13c354ef3244e" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess1D</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1afec760c46c7f53d98cea9befd7087508" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess1D</scope><name>variance</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a4a0eee3b5c6592950bd6635177f76113" prot="public" virt="pure-virtual"><scope>QuantLib::StochasticProcess1D</scope><name>x0</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess1D</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess1D</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0e2b6a14e675db5abd0ab8965ff7b2c3" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess1D</scope><name>~StochasticProcess</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
