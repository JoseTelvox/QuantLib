<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_gaussian_quad_multidim_integrator" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::GaussianQuadMultidimIntegrator</compoundname>
    <derivedcompoundref refid="class_quant_lib_1_1_integration_base_3_01_gaussian_quad_multidim_integrator_01_4" prot="public" virt="non-virtual">QuantLib::IntegrationBase&lt; GaussianQuadMultidimIntegrator &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_integration_base_3_01_gaussian_quad_multidim_integrator_01_4" prot="public" virt="non-virtual">QuantLib::IntegrationBase&lt; GaussianQuadMultidimIntegrator &gt;</derivedcompoundref>
    <includes refid="multidimquadrature_8hpp" local="no">multidimquadrature.hpp</includes>
    <innerclass refid="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1_1_vector_integrator" prot="private">QuantLib::GaussianQuadMultidimIntegrator::VectorIntegrator</innerclass>
    <sectiondef kind="user-defined">
      <header>Integration entry points generation</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1a8d944041d14958f91479be907ba9effb" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_gauss_hermite_integration" kindref="compound">GaussHermiteIntegration</ref></type>
        <definition>GaussHermiteIntegration QuantLib::GaussianQuadMultidimIntegrator::integral_</definition>
        <argsstring></argsstring>
        <name>integral_</name>
        <qualifiedname>QuantLib::GaussianQuadMultidimIntegrator::integral_</qualifiedname>
        <briefdescription>
<para>The actual integrators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimquadrature.hpp" line="165" column="33" bodyfile="ql/experimental/math/multidimquadrature.hpp" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1ac17ba56e9d7ffebe2bc5939b05f95997" prot="private" static="no" mutable="no">
        <type>VectorIntegrator</type>
        <definition>VectorIntegrator QuantLib::GaussianQuadMultidimIntegrator::integralV_</definition>
        <argsstring></argsstring>
        <name>integralV_</name>
        <qualifiedname>QuantLib::GaussianQuadMultidimIntegrator::integralV_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimquadrature.hpp" line="166" column="26" bodyfile="ql/experimental/math/multidimquadrature.hpp" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1a09e8e5c3bdf373c0cbccb2b6f6955ff2" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;varg2)&gt; f1, const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> r3)&gt; &gt;</type>
        <definition>std::vector&lt; std::function&lt;Real (std::function&lt;Real ( const std::vector&lt;Real&gt;&amp; varg2)&gt; f1, const Real r3)&gt; &gt; QuantLib::GaussianQuadMultidimIntegrator::integrationEntries_</definition>
        <argsstring></argsstring>
        <name>integrationEntries_</name>
        <qualifiedname>QuantLib::GaussianQuadMultidimIntegrator::integrationEntries_</qualifiedname>
        <briefdescription>
<para>Buffer to allow acces to integrations. We do not know at which. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimquadrature.hpp" line="174" column="2" bodyfile="ql/experimental/math/multidimquadrature.hpp" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1aa533b8f34b61af7096d301cffce24b6a" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; std::function&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;(const std::function&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;(const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;vvarg2)&gt; &amp;vf1, const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> vr3)&gt; &gt;</type>
        <definition>std::vector&lt; std::function&lt;std::vector&lt;Real&gt;(const std::function&lt;std::vector&lt;Real&gt;( const std::vector&lt;Real&gt;&amp; vvarg2)&gt;&amp; vf1, const Real vr3)&gt; &gt; QuantLib::GaussianQuadMultidimIntegrator::integrationEntriesVR_</definition>
        <argsstring></argsstring>
        <name>integrationEntriesVR_</name>
        <qualifiedname>QuantLib::GaussianQuadMultidimIntegrator::integrationEntriesVR_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimquadrature.hpp" line="178" column="2" bodyfile="ql/experimental/math/multidimquadrature.hpp" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1ab1a0e5aa5456d0a7fc17abb725e4ea1e" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::GaussianQuadMultidimIntegrator::dimension_</definition>
        <argsstring></argsstring>
        <name>dimension_</name>
        <qualifiedname>QuantLib::GaussianQuadMultidimIntegrator::dimension_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimquadrature.hpp" line="180" column="14" bodyfile="ql/experimental/math/multidimquadrature.hpp" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1a59b87a52b498ec4f606ff199da69e48f" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::GaussianQuadMultidimIntegrator::varBuffer_</definition>
        <argsstring></argsstring>
        <name>varBuffer_</name>
        <qualifiedname>QuantLib::GaussianQuadMultidimIntegrator::varBuffer_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimquadrature.hpp" line="182" column="29" bodyfile="ql/experimental/math/multidimquadrature.hpp" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1a56638643efe5d256d6b7f4e0cfa9ec12" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
            <declname>levelSpawn</declname>
            <defname>levelSpawn</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void QuantLib::GaussianQuadMultidimIntegrator::spawnFcts</definition>
        <argsstring>() const</argsstring>
        <name>spawnFcts</name>
        <qualifiedname>QuantLib::GaussianQuadMultidimIntegrator::spawnFcts</qualifiedname>
        <briefdescription>
<para>Recursive template methods to statically generate (at this. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimquadrature.hpp" line="129" column="14" bodyfile="ql/experimental/math/multidimquadrature.hpp" bodystart="129" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1a5ad5cbc37638127bcf25445f4dbfb869" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>intgDepth</declname>
            <defname>intgDepth</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GaussianQuadMultidimIntegrator::scalarIntegrator</definition>
        <argsstring>(const std::function&lt; Real(const std::vector&lt; Real &gt; &amp;arg1)&gt; &amp;f, const Real mFctr) const</argsstring>
        <name>scalarIntegrator</name>
        <qualifiedname>QuantLib::GaussianQuadMultidimIntegrator::scalarIntegrator</qualifiedname>
        <param>
          <type>const std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;arg1)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>mFctr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimquadrature.hpp" line="145" column="14" bodyfile="ql/experimental/math/multidimquadrature.hpp" bodystart="145" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1ab92e7bd98960fea6da0db9c4e96e9697" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>intgDepth</declname>
            <defname>intgDepth</defname>
          </param>
        </templateparamlist>
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GaussianQuadMultidimIntegrator::vectorIntegratorVR</definition>
        <argsstring>(const std::function&lt; std::vector&lt; Real &gt;(const std::vector&lt; Real &gt; &amp;arg1)&gt; &amp;f, const Real mFctr) const</argsstring>
        <name>vectorIntegratorVR</name>
        <qualifiedname>QuantLib::GaussianQuadMultidimIntegrator::vectorIntegratorVR</qualifiedname>
        <param>
          <type>const std::function&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;(const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;arg1)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>mFctr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimquadrature.hpp" line="154" column="21" bodyfile="ql/experimental/math/multidimquadrature.hpp" bodystart="154" bodyend="160"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1a64404404f48bf78383ca8997443f12cf" prot="private" static="yes" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>const Size QuantLib::GaussianQuadMultidimIntegrator::maxDimensions_</definition>
        <argsstring></argsstring>
        <name>maxDimensions_</name>
        <qualifiedname>QuantLib::GaussianQuadMultidimIntegrator::maxDimensions_</qualifiedname>
        <initializer>= 15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimquadrature.hpp" line="122" column="27" bodyfile="ql/experimental/math/multidimquadrature.hpp" bodystart="122" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1ab185f719525e6e43a2d39b199f207538" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::GaussianQuadMultidimIntegrator::GaussianQuadMultidimIntegrator</definition>
        <argsstring>(Size dimension, Size quadOrder, Real mu=0.)</argsstring>
        <name>GaussianQuadMultidimIntegrator</name>
        <qualifiedname>QuantLib::GaussianQuadMultidimIntegrator::GaussianQuadMultidimIntegrator</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>dimension</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>quadOrder</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>mu</declname>
          <defval>0.</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dimension</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of dimensions of the argument of the function we want to integrate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>quadOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>Quadrature order. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mu</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_quant_lib_1_1_parameter" kindref="compound">Parameter</ref> in the Gauss Hermite weight (i.e. points load). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimquadrature.hpp" line="84" column="9" bodyfile="ql/experimental/math/multidimquadrature.cpp" bodystart="26" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1af2a93dbaff88d4e400da890935b3d93f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::GaussianQuadMultidimIntegrator::order</definition>
        <argsstring>() const</argsstring>
        <name>order</name>
        <qualifiedname>QuantLib::GaussianQuadMultidimIntegrator::order</qualifiedname>
        <briefdescription>
<para>Integration quadrature order. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimquadrature.hpp" line="87" column="14" bodyfile="ql/experimental/math/multidimquadrature.hpp" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1a8bc6756915dd4b14e312746259fb8ed8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RetType_T</type>
          </param>
        </templateparamlist>
        <type>RetType_T</type>
        <definition>RetType_T QuantLib::GaussianQuadMultidimIntegrator::operator()</definition>
        <argsstring>(const std::function&lt; RetType_T(const std::vector&lt; Real &gt; &amp;arg)&gt; &amp;f) const</argsstring>
        <name>operator()</name>
        <qualifiedname>QuantLib::GaussianQuadMultidimIntegrator::operator()</qualifiedname>
        <param>
          <type>const std::function&lt; RetType_T(const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;arg)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Integrates function f over <formula id="157">$ R^{dim} $</formula>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimquadrature.hpp" line="99" column="19" bodyfile="ql/experimental/math/multidimquadrature.hpp" bodystart="99" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1a4ae164cd38467608997a15984440c900" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RetType_T</type>
          </param>
        </templateparamlist>
        <type>RetType_T</type>
        <definition>RetType_T QuantLib::GaussianQuadMultidimIntegrator::integrate</definition>
        <argsstring>(const std::function&lt; RetType_T(const std::vector&lt; Real &gt; &amp;v1)&gt; &amp;f) const</argsstring>
        <name>integrate</name>
        <qualifiedname>QuantLib::GaussianQuadMultidimIntegrator::integrate</qualifiedname>
        <param>
          <type>const std::function&lt; RetType_T(const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;v1)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimquadrature.hpp" line="112" column="19"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1a7baf8560b355a27cb76f397f697e5cd4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GaussianQuadMultidimIntegrator::operator()</definition>
        <argsstring>(const std::function&lt; Real(const std::vector&lt; Real &gt; &amp;v1)&gt; &amp;f) const</argsstring>
        <name>operator()</name>
        <qualifiedname>QuantLib::GaussianQuadMultidimIntegrator::operator()</qualifiedname>
        <param>
          <type>const std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;v1)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimquadrature.hpp" line="189" column="17" bodyfile="ql/experimental/math/multidimquadrature.hpp" bodystart="189" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1a778d849d45a210db8f9e6ae9141b19f6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GaussianQuadMultidimIntegrator::integrate</definition>
        <argsstring>(const std::function&lt; Real(const std::vector&lt; Real &gt; &amp;v1)&gt; &amp;f) const</argsstring>
        <name>integrate</name>
        <qualifiedname>QuantLib::GaussianQuadMultidimIntegrator::integrate</qualifiedname>
        <param>
          <type>const std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;v1)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimquadrature.hpp" line="198" column="12" bodyfile="ql/experimental/math/multidimquadrature.hpp" bodystart="198" bodyend="206"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1ae78c02ca2cbe0fc9bf486c62536a438a" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GaussianQuadMultidimIntegrator::scalarIntegrator</definition>
        <argsstring>(const std::function&lt; Real(const std::vector&lt; Real &gt; &amp;arg1)&gt; &amp;f, const Real mFctr) const</argsstring>
        <name>scalarIntegrator</name>
        <qualifiedname>QuantLib::GaussianQuadMultidimIntegrator::scalarIntegrator</qualifiedname>
        <param>
          <type>const std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;arg1)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>mFctr</declname>
        </param>
        <briefdescription>
<para>Terminal integrand; scalar function version. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimquadrature.hpp" line="218" column="12" bodyfile="ql/experimental/math/multidimquadrature.hpp" bodystart="218" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1a3dfeff4147a7c836c5b5f55580a1aabb" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GaussianQuadMultidimIntegrator::vectorIntegratorVR</definition>
        <argsstring>(const std::function&lt; std::vector&lt; Real &gt;(const std::vector&lt; Real &gt; &amp;arg1)&gt; &amp;f, const Real mFctr) const</argsstring>
        <name>vectorIntegratorVR</name>
        <qualifiedname>QuantLib::GaussianQuadMultidimIntegrator::vectorIntegratorVR</qualifiedname>
        <param>
          <type>const std::function&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;(const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;arg1)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>mFctr</declname>
        </param>
        <briefdescription>
<para>Terminal integrand; vector function version. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimquadrature.hpp" line="218" column="12" bodyfile="ql/experimental/math/multidimquadrature.hpp" bodystart="229" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1a68e1d7c73ceccc6b9681bc2c43a9da26" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void QuantLib::GaussianQuadMultidimIntegrator::spawnFcts</definition>
        <argsstring>() const</argsstring>
        <name>spawnFcts</name>
        <qualifiedname>QuantLib::GaussianQuadMultidimIntegrator::spawnFcts</qualifiedname>
        <briefdescription>
<para>Terminal level: </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/multidimquadrature.hpp" line="239" column="12" bodyfile="ql/experimental/math/multidimquadrature.hpp" bodystart="239" bodyend="246"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Integrates a vector or scalar function of vector domain. </para>
    </briefdescription>
    <detaileddescription>
<para>A template recursion along dimensions avoids calling depth test or virtual functions.</para>
<para><xrefsect id="todo_1_todo000029"><xreftitle>Todo</xreftitle><xrefdescription><para>Add coherence test between the integrand function dimensions (the vector size) and the declared dimension in the constructor.</para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000030"><xreftitle>Todo</xreftitle><xrefdescription><para>Split into integrator classes for functions returning scalar and vector? </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::GaussianQuadMultidimIntegrator</label>
        <link refid="class_quant_lib_1_1_gaussian_quad_multidim_integrator"/>
      </node>
      <node id="2">
        <label>QuantLib::IntegrationBase&lt; GaussianQuadMultidimIntegrator &gt;</label>
        <link refid="class_quant_lib_1_1_integration_base_3_01_gaussian_quad_multidim_integrator_01_4"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="ql/experimental/math/multidimquadrature.hpp" line="48" column="5" bodyfile="ql/experimental/math/multidimquadrature.hpp" bodystart="48" bodyend="183"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1ab1a0e5aa5456d0a7fc17abb725e4ea1e" prot="private" virt="non-virtual"><scope>QuantLib::GaussianQuadMultidimIntegrator</scope><name>dimension_</name></member>
      <member refid="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1ab185f719525e6e43a2d39b199f207538" prot="public" virt="non-virtual"><scope>QuantLib::GaussianQuadMultidimIntegrator</scope><name>GaussianQuadMultidimIntegrator</name></member>
      <member refid="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1a8d944041d14958f91479be907ba9effb" prot="private" virt="non-virtual"><scope>QuantLib::GaussianQuadMultidimIntegrator</scope><name>integral_</name></member>
      <member refid="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1ac17ba56e9d7ffebe2bc5939b05f95997" prot="private" virt="non-virtual"><scope>QuantLib::GaussianQuadMultidimIntegrator</scope><name>integralV_</name></member>
      <member refid="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1a4ae164cd38467608997a15984440c900" prot="public" virt="non-virtual"><scope>QuantLib::GaussianQuadMultidimIntegrator</scope><name>integrate</name></member>
      <member refid="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1a778d849d45a210db8f9e6ae9141b19f6" prot="public" virt="non-virtual"><scope>QuantLib::GaussianQuadMultidimIntegrator</scope><name>integrate</name></member>
      <member refid="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1a09e8e5c3bdf373c0cbccb2b6f6955ff2" prot="private" virt="non-virtual"><scope>QuantLib::GaussianQuadMultidimIntegrator</scope><name>integrationEntries_</name></member>
      <member refid="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1aa533b8f34b61af7096d301cffce24b6a" prot="private" virt="non-virtual"><scope>QuantLib::GaussianQuadMultidimIntegrator</scope><name>integrationEntriesVR_</name></member>
      <member refid="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1a64404404f48bf78383ca8997443f12cf" prot="private" virt="non-virtual"><scope>QuantLib::GaussianQuadMultidimIntegrator</scope><name>maxDimensions_</name></member>
      <member refid="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1a8bc6756915dd4b14e312746259fb8ed8" prot="public" virt="non-virtual"><scope>QuantLib::GaussianQuadMultidimIntegrator</scope><name>operator()</name></member>
      <member refid="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1a7baf8560b355a27cb76f397f697e5cd4" prot="public" virt="non-virtual"><scope>QuantLib::GaussianQuadMultidimIntegrator</scope><name>operator()</name></member>
      <member refid="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1af2a93dbaff88d4e400da890935b3d93f" prot="public" virt="non-virtual"><scope>QuantLib::GaussianQuadMultidimIntegrator</scope><name>order</name></member>
      <member refid="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1a5ad5cbc37638127bcf25445f4dbfb869" prot="private" virt="non-virtual"><scope>QuantLib::GaussianQuadMultidimIntegrator</scope><name>scalarIntegrator</name></member>
      <member refid="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1ae78c02ca2cbe0fc9bf486c62536a438a" prot="private" virt="non-virtual"><scope>QuantLib::GaussianQuadMultidimIntegrator</scope><name>scalarIntegrator</name></member>
      <member refid="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1a56638643efe5d256d6b7f4e0cfa9ec12" prot="private" virt="non-virtual"><scope>QuantLib::GaussianQuadMultidimIntegrator</scope><name>spawnFcts</name></member>
      <member refid="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1a68e1d7c73ceccc6b9681bc2c43a9da26" prot="private" virt="non-virtual"><scope>QuantLib::GaussianQuadMultidimIntegrator</scope><name>spawnFcts</name></member>
      <member refid="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1a59b87a52b498ec4f606ff199da69e48f" prot="private" virt="non-virtual"><scope>QuantLib::GaussianQuadMultidimIntegrator</scope><name>varBuffer_</name></member>
      <member refid="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1ab92e7bd98960fea6da0db9c4e96e9697" prot="private" virt="non-virtual"><scope>QuantLib::GaussianQuadMultidimIntegrator</scope><name>vectorIntegratorVR</name></member>
      <member refid="class_quant_lib_1_1_gaussian_quad_multidim_integrator_1a3dfeff4147a7c836c5b5f55580a1aabb" prot="private" virt="non-virtual"><scope>QuantLib::GaussianQuadMultidimIntegrator</scope><name>vectorIntegratorVR</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
