<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_amortizing_payment" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::AmortizingPayment</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_simple_cash_flow" prot="public" virt="non-virtual">QuantLib::SimpleCashFlow</basecompoundref>
    <includes refid="simplecashflow_8hpp" local="no">simplecashflow.hpp</includes>
    <sectiondef kind="user-defined">
      <header>Visitability</header>
      <memberdef kind="function" id="class_quant_lib_1_1_amortizing_payment_1a7830ac319e0c19aac5b199f14c8c9adb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::AmortizingPayment::accept</definition>
        <argsstring>(AcyclicVisitor &amp;) override</argsstring>
        <name>accept</name>
        <qualifiedname>QuantLib::AmortizingPayment::accept</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_event_1a572b6e63554be33515e60185aa8d1499">accept</reimplements>
        <param>
          <type><ref refid="class_quant_lib_1_1_acyclic_visitor" kindref="compound">AcyclicVisitor</ref> &amp;</type>
          <defname>v</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/simplecashflow.hpp" line="83" column="14" bodyfile="ql/cashflows/simplecashflow.hpp" bodystart="106" bodyend="112"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_amortizing_payment_1af048e5eb40c7653b24f762eab9dbe358" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::AmortizingPayment::AmortizingPayment</definition>
        <argsstring>(Real amount, const Date &amp;date)</argsstring>
        <name>AmortizingPayment</name>
        <qualifiedname>QuantLib::AmortizingPayment::AmortizingPayment</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>amount</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/cashflows/simplecashflow.hpp" line="78" column="9" bodyfile="ql/cashflows/simplecashflow.hpp" bodystart="78" bodyend="80"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Amortizing payment. </para>
    </briefdescription>
    <detaileddescription>
<para>This class specializes <ref refid="class_quant_lib_1_1_simple_cash_flow" kindref="compound">SimpleCashFlow</ref> so that visitors can perform more detailed cash-flow analysis. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::AmortizingPayment</label>
        <link refid="class_quant_lib_1_1_amortizing_payment"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::CashFlow</label>
        <link refid="class_quant_lib_1_1_cash_flow"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Event</label>
        <link refid="class_quant_lib_1_1_event"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="7">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::SimpleCashFlow</label>
        <link refid="class_quant_lib_1_1_simple_cash_flow"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::AmortizingPayment</label>
        <link refid="class_quant_lib_1_1_amortizing_payment"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::CashFlow</label>
        <link refid="class_quant_lib_1_1_cash_flow"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Event</label>
        <link refid="class_quant_lib_1_1_event"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="7">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::SimpleCashFlow</label>
        <link refid="class_quant_lib_1_1_simple_cash_flow"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/cashflows/simplecashflow.hpp" line="76" column="5" bodyfile="ql/cashflows/simplecashflow.hpp" bodystart="76" bodyend="85"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_amortizing_payment_1a7830ac319e0c19aac5b199f14c8c9adb" prot="public" virt="virtual"><scope>QuantLib::AmortizingPayment</scope><name>accept</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a02070ea7442d30625992c1711030d4b8" prot="protected" virt="non-virtual"><scope>QuantLib::AmortizingPayment</scope><name>alwaysForward_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a17c9433135a259e4776baec66204a484" prot="public" virt="non-virtual"><scope>QuantLib::AmortizingPayment</scope><name>alwaysForwardNotifications</name></member>
      <member refid="class_quant_lib_1_1_amortizing_payment_1af048e5eb40c7653b24f762eab9dbe358" prot="public" virt="non-virtual"><scope>QuantLib::AmortizingPayment</scope><name>AmortizingPayment</name></member>
      <member refid="class_quant_lib_1_1_simple_cash_flow_1ac7fc3a26ac2cb6ff1005bde142645a79" prot="public" virt="virtual"><scope>QuantLib::AmortizingPayment</scope><name>amount</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a5244c7f83592375a0ea9048296435fd1" prot="protected" virt="virtual"><scope>QuantLib::AmortizingPayment</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a58b4986a80efa18634483a92c121e26e" prot="protected" virt="non-virtual"><scope>QuantLib::AmortizingPayment</scope><name>calculated_</name></member>
      <member refid="class_quant_lib_1_1_simple_cash_flow_1a2a641464b7cea550cbdd3d69a3b2cd3f" prot="public" virt="virtual"><scope>QuantLib::AmortizingPayment</scope><name>date</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::AmortizingPayment</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_cash_flow_1a235e2205946f507de2d3b2cbfaf8cd89" prot="public" virt="virtual"><scope>QuantLib::AmortizingPayment</scope><name>exCouponDate</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1afac6ee19c3107c453e1347dd8000e023" prot="public" virt="non-virtual"><scope>QuantLib::AmortizingPayment</scope><name>forwardFirstNotificationOnly</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7157f41e83f2c5d924f5c5bafda04d1d" prot="public" virt="non-virtual"><scope>QuantLib::AmortizingPayment</scope><name>freeze</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7bb721fe00c6854e602758aba629ab77" prot="protected" virt="non-virtual"><scope>QuantLib::AmortizingPayment</scope><name>frozen_</name></member>
      <member refid="class_quant_lib_1_1_cash_flow_1a42691c396f43dde0b5ed37f4a014b0e8" prot="public" virt="virtual"><scope>QuantLib::AmortizingPayment</scope><name>hasOccurred</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a0a7c5d42815a4e16ee2158e24dbfc748" prot="public" virt="non-virtual"><scope>QuantLib::AmortizingPayment</scope><name>isCalculated</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::AmortizingPayment</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a26f18f4ff7faaaebd8eae50e064b493e" prot="public" virt="non-virtual"><scope>QuantLib::AmortizingPayment</scope><name>LazyObject</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::AmortizingPayment</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::AmortizingPayment</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Event::"><scope>QuantLib::AmortizingPayment</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Event::"><scope>QuantLib::AmortizingPayment</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::AmortizingPayment</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::AmortizingPayment</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::AmortizingPayment</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Event::"><scope>QuantLib::AmortizingPayment</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::QuantLib::Observer::"><scope>QuantLib::AmortizingPayment</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_cash_flow_1af9cd641e3841cdcf5aba9c8d5121ce91" prot="public" virt="virtual"><scope>QuantLib::AmortizingPayment</scope><name>performCalculations</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a70c9b24e50132408d8d9ce4f6674662a" prot="public" virt="non-virtual"><scope>QuantLib::AmortizingPayment</scope><name>recalculate</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::AmortizingPayment</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::AmortizingPayment</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_simple_cash_flow_1ac12bd66c699a10f98b5bbbf70d19164b" prot="public" virt="non-virtual"><scope>QuantLib::AmortizingPayment</scope><name>SimpleCashFlow</name></member>
      <member refid="class_quant_lib_1_1_cash_flow_1a103a14e1657bd2d7cb6574bf6dcf96d0" prot="public" virt="non-virtual"><scope>QuantLib::AmortizingPayment</scope><name>tradingExCoupon</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a2e0e4786666453024b9d4e0761f2770b" prot="public" virt="non-virtual"><scope>QuantLib::AmortizingPayment</scope><name>unfreeze</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::AmortizingPayment</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::AmortizingPayment</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1adee2bf49be5c4c78736be293321a856d" prot="public" virt="virtual"><scope>QuantLib::AmortizingPayment</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_cash_flow_1a4ac3d8fa6eeb8c307345ada96b25cecf" prot="public" virt="non-virtual"><scope>QuantLib::AmortizingPayment</scope><name>~CashFlow</name></member>
      <member refid="class_quant_lib_1_1_event_1a26cef5942731bfb52ed77e74abdcfe9f" prot="public" virt="non-virtual"><scope>QuantLib::AmortizingPayment</scope><name>~Event</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a9d719c43bb627177a90d7d12324a2d6e" prot="public" virt="non-virtual"><scope>QuantLib::AmortizingPayment</scope><name>~LazyObject</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::AmortizingPayment</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::AmortizingPayment</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
