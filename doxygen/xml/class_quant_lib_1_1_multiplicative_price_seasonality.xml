<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_multiplicative_price_seasonality" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::MultiplicativePriceSeasonality</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_seasonality" prot="public" virt="non-virtual">QuantLib::Seasonality</basecompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_kerkhof_seasonality" prot="public" virt="non-virtual">QuantLib::KerkhofSeasonality</derivedcompoundref>
    <includes refid="seasonality_8hpp" local="no">seasonality.hpp</includes>
    <sectiondef kind="user-defined">
      <header>Seasonality interface</header>
      <memberdef kind="function" id="class_quant_lib_1_1_multiplicative_price_seasonality_1ac39d8c0271e38f896ac68470e7af2dd1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::MultiplicativePriceSeasonality::correctZeroRate</definition>
        <argsstring>(const Date &amp;d, Rate r, const InflationTermStructure &amp;iTS) const override</argsstring>
        <name>correctZeroRate</name>
        <qualifiedname>QuantLib::MultiplicativePriceSeasonality::correctZeroRate</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_seasonality_1a32cd0d4c26de3e7e73a9b04499222580">correctZeroRate</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_inflation_term_structure" kindref="compound">InflationTermStructure</ref> &amp;</type>
          <declname>iTS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/seasonality.hpp" line="151" column="18" bodyfile="ql/termstructures/inflation/seasonality.cpp" bodystart="123" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multiplicative_price_seasonality_1a6a3556aec0a30c6849b8a04bccf81969" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::MultiplicativePriceSeasonality::correctYoYRate</definition>
        <argsstring>(const Date &amp;d, Rate r, const InflationTermStructure &amp;iTS) const override</argsstring>
        <name>correctYoYRate</name>
        <qualifiedname>QuantLib::MultiplicativePriceSeasonality::correctYoYRate</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_seasonality_1aa65ec6811c6e319cd4375bc45000db28">correctYoYRate</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_inflation_term_structure" kindref="compound">InflationTermStructure</ref> &amp;</type>
          <declname>iTS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/seasonality.hpp" line="155" column="13" bodyfile="ql/termstructures/inflation/seasonality.cpp" bodystart="136" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multiplicative_price_seasonality_1a58d40d8a781134b3c329c4079638f2c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool QuantLib::MultiplicativePriceSeasonality::isConsistent</definition>
        <argsstring>(const InflationTermStructure &amp;iTS) const override</argsstring>
        <name>isConsistent</name>
        <qualifiedname>QuantLib::MultiplicativePriceSeasonality::isConsistent</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_seasonality_1a40cceb3bb9e369a96ea3e4daf25251da">isConsistent</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_inflation_term_structure" kindref="compound">InflationTermStructure</ref> &amp;</type>
          <declname>iTS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>It is possible for multi-year seasonalities to be inconsistent with the inflation term structure they are given to. This method enables testing - but programmers are not required to implement it. E.g. for price seasonality the corrections at whole years after the inflation curve base date should be the same or else there can be an inconsistency with quoted instruments. Alternatively, the seasonality can be set <emphasis>before</emphasis> the inflation curve is bootstrapped. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/seasonality.hpp" line="156" column="18" bodyfile="ql/termstructures/inflation/seasonality.cpp" bodystart="64" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multiplicative_price_seasonality_1a97c22337e6693f82e2e978d8a0bb1ac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MultiplicativePriceSeasonality::~MultiplicativePriceSeasonality</definition>
        <argsstring>() override=default</argsstring>
        <name>~MultiplicativePriceSeasonality</name>
        <qualifiedname>QuantLib::MultiplicativePriceSeasonality::~MultiplicativePriceSeasonality</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/seasonality.hpp" line="160" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multiplicative_price_seasonality_1ae684fc6a176fb9ed539730f467621176" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::MultiplicativePriceSeasonality::validate</definition>
        <argsstring>() const</argsstring>
        <name>validate</name>
        <qualifiedname>QuantLib::MultiplicativePriceSeasonality::validate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/seasonality.hpp" line="164" column="26" bodyfile="ql/termstructures/inflation/seasonality.cpp" bodystart="36" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multiplicative_price_seasonality_1a0c334eb6b36de5cfae91727b4d2edfbf" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::MultiplicativePriceSeasonality::seasonalityCorrection</definition>
        <argsstring>(Rate r, const Date &amp;d, const DayCounter &amp;dc, const Date &amp;curveBaseDate, bool isZeroRate) const</argsstring>
        <name>seasonalityCorrection</name>
        <qualifiedname>QuantLib::MultiplicativePriceSeasonality::seasonalityCorrection</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_kerkhof_seasonality_1a037dc6a432e6372e5bc08753fbe9399b">seasonalityCorrection</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dc</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>curveBaseDate</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isZeroRate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/seasonality.hpp" line="165" column="26" bodyfile="ql/termstructures/inflation/seasonality.cpp" bodystart="191" bodyend="217"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_multiplicative_price_seasonality_1ab54fac3e2f9899b2766594fb85cba0b5" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::MultiplicativePriceSeasonality::seasonalityBaseDate_</definition>
        <argsstring></argsstring>
        <name>seasonalityBaseDate_</name>
        <qualifiedname>QuantLib::MultiplicativePriceSeasonality::seasonalityBaseDate_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/seasonality.hpp" line="122" column="18" bodyfile="ql/termstructures/inflation/seasonality.hpp" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_multiplicative_price_seasonality_1a36710139b054d28b6fa9aaedc15416ac" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
        <definition>Frequency QuantLib::MultiplicativePriceSeasonality::frequency_</definition>
        <argsstring></argsstring>
        <name>frequency_</name>
        <qualifiedname>QuantLib::MultiplicativePriceSeasonality::frequency_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/seasonality.hpp" line="123" column="23" bodyfile="ql/termstructures/inflation/seasonality.hpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_multiplicative_price_seasonality_1a048227cf43569f3da9a14ca74dcb2847" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt;</type>
        <definition>std::vector&lt;Rate&gt; QuantLib::MultiplicativePriceSeasonality::seasonalityFactors_</definition>
        <argsstring></argsstring>
        <name>seasonalityFactors_</name>
        <qualifiedname>QuantLib::MultiplicativePriceSeasonality::seasonalityFactors_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/seasonality.hpp" line="124" column="25" bodyfile="ql/termstructures/inflation/seasonality.hpp" bodystart="124" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_multiplicative_price_seasonality_1ac2e0ebc6cf7e5a1dcd773be0dd411e77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MultiplicativePriceSeasonality::MultiplicativePriceSeasonality</definition>
        <argsstring>()=default</argsstring>
        <name>MultiplicativePriceSeasonality</name>
        <qualifiedname>QuantLib::MultiplicativePriceSeasonality::MultiplicativePriceSeasonality</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/seasonality.hpp" line="130" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multiplicative_price_seasonality_1a64fa8049272a9954c3d6e7a813cf998b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MultiplicativePriceSeasonality::MultiplicativePriceSeasonality</definition>
        <argsstring>(const Date &amp;seasonalityBaseDate, Frequency frequency, const std::vector&lt; Rate &gt; &amp;seasonalityFactors)</argsstring>
        <name>MultiplicativePriceSeasonality</name>
        <qualifiedname>QuantLib::MultiplicativePriceSeasonality::MultiplicativePriceSeasonality</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>seasonalityBaseDate</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt; &amp;</type>
          <declname>seasonalityFactors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/seasonality.hpp" line="132" column="13" bodyfile="ql/termstructures/inflation/seasonality.cpp" bodystart="91" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multiplicative_price_seasonality_1ab828fbdc78b25f35f05c0c424b979c87" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::MultiplicativePriceSeasonality::set</definition>
        <argsstring>(const Date &amp;seasonalityBaseDate, Frequency frequency, const std::vector&lt; Rate &gt; &amp;seasonalityFactors)</argsstring>
        <name>set</name>
        <qualifiedname>QuantLib::MultiplicativePriceSeasonality::set</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>seasonalityBaseDate</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt; &amp;</type>
          <declname>seasonalityFactors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/seasonality.hpp" line="136" column="26" bodyfile="ql/termstructures/inflation/seasonality.cpp" bodystart="97" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multiplicative_price_seasonality_1ab834aadfed8d909db0b8343ee5483d14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::MultiplicativePriceSeasonality::seasonalityBaseDate</definition>
        <argsstring>() const</argsstring>
        <name>seasonalityBaseDate</name>
        <qualifiedname>QuantLib::MultiplicativePriceSeasonality::seasonalityBaseDate</qualifiedname>
        <briefdescription>
<para>inspectors </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/seasonality.hpp" line="142" column="26" bodyfile="ql/termstructures/inflation/seasonality.cpp" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multiplicative_price_seasonality_1a3e62381f30f1f586a85a1c1b2b571c19" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
        <definition>Frequency QuantLib::MultiplicativePriceSeasonality::frequency</definition>
        <argsstring>() const</argsstring>
        <name>frequency</name>
        <qualifiedname>QuantLib::MultiplicativePriceSeasonality::frequency</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/seasonality.hpp" line="143" column="31" bodyfile="ql/termstructures/inflation/seasonality.cpp" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multiplicative_price_seasonality_1aae530f28ea0340aa84e05ef0b240e7f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt;</type>
        <definition>std::vector&lt; Rate &gt; QuantLib::MultiplicativePriceSeasonality::seasonalityFactors</definition>
        <argsstring>() const</argsstring>
        <name>seasonalityFactors</name>
        <qualifiedname>QuantLib::MultiplicativePriceSeasonality::seasonalityFactors</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/seasonality.hpp" line="144" column="33" bodyfile="ql/termstructures/inflation/seasonality.cpp" bodystart="118" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_multiplicative_price_seasonality_1a5b7c4418e61104ccfc0e57b07713716e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Real QuantLib::MultiplicativePriceSeasonality::seasonalityFactor</definition>
        <argsstring>(const Date &amp;d) const</argsstring>
        <name>seasonalityFactor</name>
        <qualifiedname>QuantLib::MultiplicativePriceSeasonality::seasonalityFactor</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_kerkhof_seasonality_1a57ead4c981ba485c6f37b326396cc3c4">seasonalityFactor</reimplementedby>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>The factor returned is NOT normalized relative to ANYTHING. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/inflation/seasonality.hpp" line="146" column="26" bodyfile="ql/termstructures/inflation/seasonality.cpp" bodystart="145" bodyend="188"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Multiplicative seasonality in the price index (CPI/RPI/HICP/etc). </para>
    </briefdescription>
    <detaileddescription>
<para>Stationary multiplicative seasonality in CPI/RPI/HICP (i.e. in price) implies that zero inflation swap rates are affected, but that year-on-year inflation swap rates show no effect. Of course, if the seasonality in CPI/RPI/HICP is non-stationary then both swap rates will be affected.</para>
<para>Factors must be in multiples of the minimum required for one year, e.g. 12 for monthly, and these factors are reused for as long as is required, i.e. they wrap around. So, for example, if 24 factors are given this repeats every two years. True stationary seasonality can be obtained by giving the same number of factors as the frequency dictates e.g. 12 for monthly seasonality.</para>
<para><simplesect kind="warning"><para>Multi-year seasonality (i.e. non-stationary) is fragile: the user <bold>must</bold> ensure that corrections at whole years before and after the inflation term structure base date are the same. Otherwise there can be an inconsistency with quoted rates. This is enforced if the frequency is lower than daily. This is not enforced for daily seasonality because this will always be inconsistent due to weekends, holidays, leap years, etc. If you use multi-year daily seasonality it is up to you to check.</para>
</simplesect>
<simplesect kind="note"><para>Factors are normalized relative to their appropriate reference dates. For zero inflation this is the inflation curve true base date: since you have a fixing for that date the seasonality factor must be one. For YoY inflation the reference is always one year earlier.</para>
</simplesect>
<ref refid="class_quant_lib_1_1_seasonality" kindref="compound">Seasonality</ref> is treated as piecewise constant, hence it works correctly with uninterpolated indices if the seasonality correction factor frequency is the same as the index frequency (or less). </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>QuantLib::KerkhofSeasonality</label>
        <link refid="class_quant_lib_1_1_kerkhof_seasonality"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::MultiplicativePriceSeasonality</label>
        <link refid="class_quant_lib_1_1_multiplicative_price_seasonality"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::Seasonality</label>
        <link refid="class_quant_lib_1_1_seasonality"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::MultiplicativePriceSeasonality</label>
        <link refid="class_quant_lib_1_1_multiplicative_price_seasonality"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::Seasonality</label>
        <link refid="class_quant_lib_1_1_seasonality"/>
      </node>
    </collaborationgraph>
    <location file="ql/termstructures/inflation/seasonality.hpp" line="119" column="5" bodyfile="ql/termstructures/inflation/seasonality.hpp" bodystart="119" bodyend="167"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1a6a3556aec0a30c6849b8a04bccf81969" prot="public" virt="virtual"><scope>QuantLib::MultiplicativePriceSeasonality</scope><name>correctYoYRate</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1ac39d8c0271e38f896ac68470e7af2dd1" prot="public" virt="virtual"><scope>QuantLib::MultiplicativePriceSeasonality</scope><name>correctZeroRate</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1a3e62381f30f1f586a85a1c1b2b571c19" prot="public" virt="virtual"><scope>QuantLib::MultiplicativePriceSeasonality</scope><name>frequency</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1a36710139b054d28b6fa9aaedc15416ac" prot="private" virt="non-virtual"><scope>QuantLib::MultiplicativePriceSeasonality</scope><name>frequency_</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1a58d40d8a781134b3c329c4079638f2c3" prot="public" virt="virtual"><scope>QuantLib::MultiplicativePriceSeasonality</scope><name>isConsistent</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1ac2e0ebc6cf7e5a1dcd773be0dd411e77" prot="public" virt="non-virtual"><scope>QuantLib::MultiplicativePriceSeasonality</scope><name>MultiplicativePriceSeasonality</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1a64fa8049272a9954c3d6e7a813cf998b" prot="public" virt="non-virtual"><scope>QuantLib::MultiplicativePriceSeasonality</scope><name>MultiplicativePriceSeasonality</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1ab834aadfed8d909db0b8343ee5483d14" prot="public" virt="virtual"><scope>QuantLib::MultiplicativePriceSeasonality</scope><name>seasonalityBaseDate</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1ab54fac3e2f9899b2766594fb85cba0b5" prot="private" virt="non-virtual"><scope>QuantLib::MultiplicativePriceSeasonality</scope><name>seasonalityBaseDate_</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1a0c334eb6b36de5cfae91727b4d2edfbf" prot="protected" virt="virtual"><scope>QuantLib::MultiplicativePriceSeasonality</scope><name>seasonalityCorrection</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1a5b7c4418e61104ccfc0e57b07713716e" prot="public" virt="virtual"><scope>QuantLib::MultiplicativePriceSeasonality</scope><name>seasonalityFactor</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1aae530f28ea0340aa84e05ef0b240e7f7" prot="public" virt="virtual"><scope>QuantLib::MultiplicativePriceSeasonality</scope><name>seasonalityFactors</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1a048227cf43569f3da9a14ca74dcb2847" prot="private" virt="non-virtual"><scope>QuantLib::MultiplicativePriceSeasonality</scope><name>seasonalityFactors_</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1ab828fbdc78b25f35f05c0c424b979c87" prot="public" virt="virtual"><scope>QuantLib::MultiplicativePriceSeasonality</scope><name>set</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1ae684fc6a176fb9ed539730f467621176" prot="protected" virt="virtual"><scope>QuantLib::MultiplicativePriceSeasonality</scope><name>validate</name></member>
      <member refid="class_quant_lib_1_1_multiplicative_price_seasonality_1a97c22337e6693f82e2e978d8a0bb1ac5" prot="public" virt="non-virtual"><scope>QuantLib::MultiplicativePriceSeasonality</scope><name>~MultiplicativePriceSeasonality</name></member>
      <member refid="class_quant_lib_1_1_seasonality_1a1db1a611c8548cae789c3184955c6203" prot="public" virt="virtual"><scope>QuantLib::MultiplicativePriceSeasonality</scope><name>~Seasonality</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
