<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>QuantLib::ParticleSwarmOptimization::Inertia</compoundname>
    <derivedcompoundref refid="class_quant_lib_1_1_adaptive_inertia" prot="public" virt="non-virtual">QuantLib::AdaptiveInertia</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_decreasing_inertia" prot="public" virt="non-virtual">QuantLib::DecreasingInertia</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_levy_flight_inertia" prot="public" virt="non-virtual">QuantLib::LevyFlightInertia</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_simple_random_inertia" prot="public" virt="non-virtual">QuantLib::SimpleRandomInertia</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_trivial_inertia" prot="public" virt="non-virtual">QuantLib::TrivialInertia</derivedcompoundref>
    <includes refid="particleswarmoptimization_8hpp" local="no">particleswarmoptimization.hpp</includes>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1ad7b9e8900dbe33e84bcc20af310a69ca" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class ParticleSwarmOptimization</definition>
        <argsstring></argsstring>
        <name>ParticleSwarmOptimization</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::Inertia::ParticleSwarmOptimization</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_particle_swarm_optimization" kindref="compound">ParticleSwarmOptimization</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="128" column="22" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1a9ae0311ca3aa900bb4971a75eea41237" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_particle_swarm_optimization" kindref="compound">ParticleSwarmOptimization</ref> *</type>
        <definition>ParticleSwarmOptimization* QuantLib::ParticleSwarmOptimization::Inertia::pso_</definition>
        <argsstring></argsstring>
        <name>pso_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::Inertia::pso_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="136" column="35" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1a9bce9b1f500affbdfc23ad355c21cdb0" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &gt; *</type>
        <definition>std::vector&lt;Array&gt;* QuantLib::ParticleSwarmOptimization::Inertia::X_</definition>
        <argsstring></argsstring>
        <name>X_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::Inertia::X_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="137" column="21" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1ad9ce032e7bbf1eea88b4c1b70efe1bb8" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &gt; *</type>
        <definition>std::vector&lt;Array&gt; * QuantLib::ParticleSwarmOptimization::Inertia::V_</definition>
        <argsstring></argsstring>
        <name>V_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::Inertia::V_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="137" column="24" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1a0d4b3ad2b9c61d18c27cb403c9349bc7" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &gt; *</type>
        <definition>std::vector&lt;Array&gt; * QuantLib::ParticleSwarmOptimization::Inertia::pBX_</definition>
        <argsstring></argsstring>
        <name>pBX_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::Inertia::pBX_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="137" column="27" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1ae492c9198edf7137a45464c7ca64a835" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &gt; *</type>
        <definition>std::vector&lt;Array&gt; * QuantLib::ParticleSwarmOptimization::Inertia::gBX_</definition>
        <argsstring></argsstring>
        <name>gBX_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::Inertia::gBX_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="137" column="32" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1a9d6c8609aef7044acab333eb4da5e0cf" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> *</type>
        <definition>Array* QuantLib::ParticleSwarmOptimization::Inertia::pBF_</definition>
        <argsstring></argsstring>
        <name>pBF_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::Inertia::pBF_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="138" column="15" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1a3a87e990a4a92802579a514b1d938de8" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> *</type>
        <definition>Array * QuantLib::ParticleSwarmOptimization::Inertia::gBF_</definition>
        <argsstring></argsstring>
        <name>gBF_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::Inertia::gBF_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="138" column="20" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1afdc28535a7e533d4208568b16453598b" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> *</type>
        <definition>Array* QuantLib::ParticleSwarmOptimization::Inertia::lX_</definition>
        <argsstring></argsstring>
        <name>lX_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::Inertia::lX_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="139" column="15" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1af923e470fcc36de4a91fdf46f4b91997" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> *</type>
        <definition>Array * QuantLib::ParticleSwarmOptimization::Inertia::uX_</definition>
        <argsstring></argsstring>
        <name>uX_</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::Inertia::uX_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="139" column="19" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1a0a02c4b175d125c89f8145c139d3eea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual QuantLib::ParticleSwarmOptimization::Inertia::~Inertia</definition>
        <argsstring>()=default</argsstring>
        <name>~Inertia</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::Inertia::~Inertia</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="130" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1acce7660fa598fb7b27e261ad1a661c97" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void QuantLib::ParticleSwarmOptimization::Inertia::setSize</definition>
        <argsstring>(Size M, Size N, Real c0, const EndCriteria &amp;endCriteria)=0</argsstring>
        <name>setSize</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::Inertia::setSize</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_adaptive_inertia_1ac56d3de6618c726b842b2a61ee854f31">setSize</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_decreasing_inertia_1a8f36c6e21a349383dfa0d98a273ca765">setSize</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_levy_flight_inertia_1a9a48b67fc942a64cb3cf1015c3e178ac">setSize</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_simple_random_inertia_1ab4ac36b5495b250ce35e6c461557c91b">setSize</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_trivial_inertia_1a05c28c5856bc61a645663e8fd88c79cd">setSize</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>M</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>N</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>c0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref> &amp;</type>
          <declname>endCriteria</declname>
        </param>
        <briefdescription>
<para>initialize state for current problem </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="132" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1a0bb27e39d6dba1adad3489831f690fd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void QuantLib::ParticleSwarmOptimization::Inertia::setValues</definition>
        <argsstring>()=0</argsstring>
        <name>setValues</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::Inertia::setValues</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_adaptive_inertia_1adab9db1f2290e7e576381e0b4f29da24">setValues</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_decreasing_inertia_1ab842907e34bc23a58e2f39e726b9a425">setValues</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_levy_flight_inertia_1ad87ac6f5a583391002b3696373c3a55e">setValues</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_simple_random_inertia_1a0956ca06229c1caf34e79779a2d9c84a">setValues</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_trivial_inertia_1a4081d7261f20a92e772303edd2bc3bf4">setValues</reimplementedby>
        <briefdescription>
<para>produce changes to PSO state for current iteration </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="134" column="22"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1aafb1970cc7c0d2897dbac6ed5b39fa8b" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void QuantLib::ParticleSwarmOptimization::Inertia::init</definition>
        <argsstring>(ParticleSwarmOptimization *pso)</argsstring>
        <name>init</name>
        <qualifiedname>QuantLib::ParticleSwarmOptimization::Inertia::init</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_levy_flight_inertia_1ac88d6aeb9a1583e5348aef42a4b7de1d">init</reimplementedby>
        <param>
          <type><ref refid="class_quant_lib_1_1_particle_swarm_optimization" kindref="compound">ParticleSwarmOptimization</ref> *</type>
          <declname>pso</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/particleswarmoptimization.hpp" line="141" column="22" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="141" bodyend="151"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Base inertia class used to alter the PSO state. </para>
    </briefdescription>
    <detaileddescription>
<para>This pure virtual base class provides the access to the PSO state which the particular inertia algorithm will change upon each iteration. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QuantLib::AdaptiveInertia</label>
        <link refid="class_quant_lib_1_1_adaptive_inertia"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::DecreasingInertia</label>
        <link refid="class_quant_lib_1_1_decreasing_inertia"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::LevyFlightInertia</label>
        <link refid="class_quant_lib_1_1_levy_flight_inertia"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::ParticleSwarmOptimization::Inertia</label>
        <link refid="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia"/>
      </node>
      <node id="5">
        <label>QuantLib::SimpleRandomInertia</label>
        <link refid="class_quant_lib_1_1_simple_random_inertia"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::TrivialInertia</label>
        <link refid="class_quant_lib_1_1_trivial_inertia"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>QuantLib::Array</label>
        <link refid="class_quant_lib_1_1_array"/>
      </node>
      <node id="5">
        <label>QuantLib::MersenneTwisterUniformRng</label>
        <link refid="class_quant_lib_1_1_mersenne_twister_uniform_rng"/>
      </node>
      <node id="3">
        <label>QuantLib::OptimizationMethod</label>
        <link refid="class_quant_lib_1_1_optimization_method"/>
      </node>
      <node id="2">
        <label>QuantLib::ParticleSwarmOptimization</label>
        <link refid="class_quant_lib_1_1_particle_swarm_optimization"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>gBF_</edgelabel>
          <edgelabel>lX_</edgelabel>
          <edgelabel>pBF_</edgelabel>
          <edgelabel>uX_</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>rng_</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::ParticleSwarmOptimization::Inertia</label>
        <link refid="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia"/>
        <childnode refid="2" relation="usage">
          <edgelabel>pso_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>gBF_</edgelabel>
          <edgelabel>lX_</edgelabel>
          <edgelabel>pBF_</edgelabel>
          <edgelabel>uX_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/math/particleswarmoptimization.hpp" line="127" column="5" bodyfile="ql/experimental/math/particleswarmoptimization.hpp" bodystart="127" bodyend="152"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1a3a87e990a4a92802579a514b1d938de8" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization::Inertia</scope><name>gBF_</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1ae492c9198edf7137a45464c7ca64a835" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization::Inertia</scope><name>gBX_</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1aafb1970cc7c0d2897dbac6ed5b39fa8b" prot="protected" virt="virtual"><scope>QuantLib::ParticleSwarmOptimization::Inertia</scope><name>init</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1afdc28535a7e533d4208568b16453598b" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization::Inertia</scope><name>lX_</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1ad7b9e8900dbe33e84bcc20af310a69ca" prot="private" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization::Inertia</scope><name>ParticleSwarmOptimization</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1a9d6c8609aef7044acab333eb4da5e0cf" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization::Inertia</scope><name>pBF_</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1a0d4b3ad2b9c61d18c27cb403c9349bc7" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization::Inertia</scope><name>pBX_</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1a9ae0311ca3aa900bb4971a75eea41237" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization::Inertia</scope><name>pso_</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1acce7660fa598fb7b27e261ad1a661c97" prot="public" virt="pure-virtual"><scope>QuantLib::ParticleSwarmOptimization::Inertia</scope><name>setSize</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1a0bb27e39d6dba1adad3489831f690fd7" prot="public" virt="pure-virtual"><scope>QuantLib::ParticleSwarmOptimization::Inertia</scope><name>setValues</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1af923e470fcc36de4a91fdf46f4b91997" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization::Inertia</scope><name>uX_</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1ad9ce032e7bbf1eea88b4c1b70efe1bb8" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization::Inertia</scope><name>V_</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1a9bce9b1f500affbdfc23ad355c21cdb0" prot="protected" virt="non-virtual"><scope>QuantLib::ParticleSwarmOptimization::Inertia</scope><name>X_</name></member>
      <member refid="class_quant_lib_1_1_particle_swarm_optimization_1_1_inertia_1a0a02c4b175d125c89f8145c139d3eea6" prot="public" virt="virtual"><scope>QuantLib::ParticleSwarmOptimization::Inertia</scope><name>~Inertia</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
