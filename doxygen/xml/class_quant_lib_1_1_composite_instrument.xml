<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_composite_instrument" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::CompositeInstrument</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_instrument" prot="public" virt="non-virtual">QuantLib::Instrument</basecompoundref>
    <includes refid="compositeinstrument_8hpp" local="no">compositeinstrument.hpp</includes>
    <sectiondef kind="user-defined">
      <header>Instrument interface</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_composite_instrument_1a5c5a6ddee121563b3ff796306d1d2ff5" prot="private" static="no" mutable="no">
        <type>std::list&lt; component &gt;</type>
        <definition>std::list&lt;component&gt; QuantLib::CompositeInstrument::components_</definition>
        <argsstring></argsstring>
        <name>components_</name>
        <qualifiedname>QuantLib::CompositeInstrument::components_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/compositeinstrument.hpp" line="67" column="19" bodyfile="ql/instruments/compositeinstrument.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_composite_instrument_1a4c316ba483686eff869c18b40e7760fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool QuantLib::CompositeInstrument::isExpired</definition>
        <argsstring>() const override</argsstring>
        <name>isExpired</name>
        <qualifiedname>QuantLib::CompositeInstrument::isExpired</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_instrument_1a121a2a929b179900744a58272d46aefe">isExpired</reimplements>
        <briefdescription>
<para>returns whether the instrument might have value greater than zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/compositeinstrument.hpp" line="61" column="14" bodyfile="ql/instruments/compositeinstrument.cpp" bodystart="45" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_composite_instrument_1adc651eac85145037dd8c041fef6b8fc9" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::CompositeInstrument::performCalculations</definition>
        <argsstring>() const override</argsstring>
        <name>performCalculations</name>
        <qualifiedname>QuantLib::CompositeInstrument::performCalculations</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_lazy_object_1aafa5583a3743d9f93fa40da5b62e1ff8">performCalculations</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must implement any calculations which must be (re)done in order to calculate the desired results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/compositeinstrument.hpp" line="64" column="14" bodyfile="ql/instruments/compositeinstrument.cpp" bodystart="53" bodyend="58"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Observer interface</header>
      <memberdef kind="function" id="class_quant_lib_1_1_composite_instrument_1a4abb466fd6190d3aa6f9a59005af175d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::CompositeInstrument::deepUpdate</definition>
        <argsstring>() override</argsstring>
        <name>deepUpdate</name>
        <qualifiedname>QuantLib::CompositeInstrument::deepUpdate</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183">deepUpdate</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method allows to explicitly update the instance itself and nested observers. If notifications are disabled a call to this method ensures an update of such nested observers. It should be implemented in derived classes whenever applicable </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/compositeinstrument.hpp" line="57" column="14" bodyfile="ql/instruments/compositeinstrument.cpp" bodystart="60" bodyend="65"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_composite_instrument_1a7bf0c73803e5f95eb36a4347d080e235" prot="private" static="no">
        <type>std::pair&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_instrument" kindref="compound">Instrument</ref> &gt;, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>typedef std::pair&lt;ext::shared_ptr&lt;Instrument&gt;, Real&gt; QuantLib::CompositeInstrument::component</definition>
        <argsstring></argsstring>
        <name>component</name>
        <qualifiedname>QuantLib::CompositeInstrument::component</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/compositeinstrument.hpp" line="45" column="27" bodyfile="ql/instruments/compositeinstrument.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_composite_instrument_1ab1700dfe4f5239e85072636e99c99782" prot="private" static="no">
        <type>std::list&lt; component &gt;::iterator</type>
        <definition>typedef std::list&lt;component&gt;::iterator QuantLib::CompositeInstrument::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <qualifiedname>QuantLib::CompositeInstrument::iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/compositeinstrument.hpp" line="46" column="38" bodyfile="ql/instruments/compositeinstrument.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_composite_instrument_1a9632bef3016cd03a5830a326c2e4a274" prot="private" static="no">
        <type>std::list&lt; component &gt;::const_iterator</type>
        <definition>typedef std::list&lt;component&gt;::const_iterator QuantLib::CompositeInstrument::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <qualifiedname>QuantLib::CompositeInstrument::const_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/compositeinstrument.hpp" line="47" column="44" bodyfile="ql/instruments/compositeinstrument.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_composite_instrument_1a98ca071e5246027a48689f7464b840c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::CompositeInstrument::add</definition>
        <argsstring>(const ext::shared_ptr&lt; Instrument &gt; &amp;instrument, Real multiplier=1.0)</argsstring>
        <name>add</name>
        <qualifiedname>QuantLib::CompositeInstrument::add</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_instrument" kindref="compound">Instrument</ref> &gt; &amp;</type>
          <declname>instrument</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>multiplier</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>adds an instrument to the composite </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/compositeinstrument.hpp" line="50" column="14" bodyfile="ql/instruments/compositeinstrument.cpp" bodystart="24" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_composite_instrument_1a067382960f1bab3d924bceb6feb95e73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::CompositeInstrument::subtract</definition>
        <argsstring>(const ext::shared_ptr&lt; Instrument &gt; &amp;instrument, Real multiplier=1.0)</argsstring>
        <name>subtract</name>
        <qualifiedname>QuantLib::CompositeInstrument::subtract</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_instrument" kindref="compound">Instrument</ref> &gt; &amp;</type>
          <declname>instrument</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>multiplier</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>shorts an instrument from the composite </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/compositeinstrument.hpp" line="53" column="14" bodyfile="ql/instruments/compositeinstrument.cpp" bodystart="40" bodyend="43"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Composite instrument </para>
    </briefdescription>
    <detaileddescription>
<para>This instrument is an aggregate of other instruments. Its NPV is the sum of the NPVs of its components, each possibly multiplied by a given factor.</para>
<para><simplesect kind="warning"><para>Methods that drive the calculation directly (such as <ref refid="class_quant_lib_1_1_lazy_object_1a70c9b24e50132408d8d9ce4f6674662a" kindref="member">recalculate()</ref>, <ref refid="class_quant_lib_1_1_lazy_object_1a7157f41e83f2c5d924f5c5bafda04d1d" kindref="member">freeze()</ref> and others) might not work correctly. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::CompositeInstrument</label>
        <link refid="class_quant_lib_1_1_composite_instrument"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::Instrument</label>
        <link refid="class_quant_lib_1_1_instrument"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::CompositeInstrument</label>
        <link refid="class_quant_lib_1_1_composite_instrument"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::Date</label>
        <link refid="class_quant_lib_1_1_date"/>
      </node>
      <node id="2">
        <label>QuantLib::Instrument</label>
        <link refid="class_quant_lib_1_1_instrument"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>valuationDate_</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
    </collaborationgraph>
    <location file="ql/instruments/compositeinstrument.hpp" line="44" column="5" bodyfile="ql/instruments/compositeinstrument.hpp" bodystart="44" bodyend="68"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_composite_instrument_1a98ca071e5246027a48689f7464b840c6" prot="public" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>add</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a468edb294da268b097c91bf821084c07" prot="public" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>additionalResults</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a57d2b34e8625ab3d9ffa50c0c7931099" prot="protected" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>additionalResults_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a02070ea7442d30625992c1711030d4b8" prot="protected" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>alwaysForward_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a17c9433135a259e4776baec66204a484" prot="public" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>alwaysForwardNotifications</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a4c573c48f7eaead5042864ac0eb5b025" prot="protected" virt="virtual"><scope>QuantLib::CompositeInstrument</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a58b4986a80efa18634483a92c121e26e" prot="protected" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>calculated_</name></member>
      <member refid="class_quant_lib_1_1_composite_instrument_1a7bf0c73803e5f95eb36a4347d080e235" prot="private" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>component</name></member>
      <member refid="class_quant_lib_1_1_composite_instrument_1a5c5a6ddee121563b3ff796306d1d2ff5" prot="private" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>components_</name></member>
      <member refid="class_quant_lib_1_1_composite_instrument_1a9632bef3016cd03a5830a326c2e4a274" prot="private" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>const_iterator</name></member>
      <member refid="class_quant_lib_1_1_composite_instrument_1a4abb466fd6190d3aa6f9a59005af175d" prot="public" virt="virtual"><scope>QuantLib::CompositeInstrument</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_instrument_1ac548cb61c864779db09bd0fac6ae7c81" prot="protected" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>engine_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a03502fb6c606b262c25acd94ff4c1e52" prot="public" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>errorEstimate</name></member>
      <member refid="class_quant_lib_1_1_instrument_1abb8f4cfa7346fab7a2f3a8c8b4da30f3" prot="protected" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>errorEstimate_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1aebe809131db2941325d037c031bbf41b" prot="public" virt="virtual"><scope>QuantLib::CompositeInstrument</scope><name>fetchResults</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1afac6ee19c3107c453e1347dd8000e023" prot="public" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>forwardFirstNotificationOnly</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7157f41e83f2c5d924f5c5bafda04d1d" prot="public" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>freeze</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7bb721fe00c6854e602758aba629ab77" prot="protected" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>frozen_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a5e4c746cbf7999c83dc57f87e241f1cc" prot="public" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>Instrument</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a0a7c5d42815a4e16ee2158e24dbfc748" prot="public" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>isCalculated</name></member>
      <member refid="class_quant_lib_1_1_composite_instrument_1a4c316ba483686eff869c18b40e7760fc" prot="public" virt="virtual"><scope>QuantLib::CompositeInstrument</scope><name>isExpired</name></member>
      <member refid="class_quant_lib_1_1_composite_instrument_1ab1700dfe4f5239e85072636e99c99782" prot="private" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a26f18f4ff7faaaebd8eae50e064b493e" prot="public" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>LazyObject</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a5afdd9698267cd30ddd10cf01f3487b0" prot="public" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>NPV</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a997663780100d30ae59b14ac0285322d" prot="protected" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>NPV_</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::CompositeInstrument</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::CompositeInstrument</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::CompositeInstrument</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::CompositeInstrument</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::CompositeInstrument</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::QuantLib::Observer::"><scope>QuantLib::CompositeInstrument</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_composite_instrument_1adc651eac85145037dd8c041fef6b8fc9" prot="protected" virt="virtual"><scope>QuantLib::CompositeInstrument</scope><name>performCalculations</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a70c9b24e50132408d8d9ce4f6674662a" prot="public" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>recalculate</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a266c15a12160a89f4f9707db85f9fa27" prot="public" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>result</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a3444386491f179f64f4f0aac24997071" prot="public" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>setPricingEngine</name></member>
      <member refid="class_quant_lib_1_1_instrument_1af7344eebc48a1a361386e5c5a90a8fcc" prot="public" virt="virtual"><scope>QuantLib::CompositeInstrument</scope><name>setupArguments</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a73d90597fcd3ff52a8aed674393ab574" prot="protected" virt="virtual"><scope>QuantLib::CompositeInstrument</scope><name>setupExpired</name></member>
      <member refid="class_quant_lib_1_1_composite_instrument_1a067382960f1bab3d924bceb6feb95e73" prot="public" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>subtract</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a2e0e4786666453024b9d4e0761f2770b" prot="public" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>unfreeze</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1adee2bf49be5c4c78736be293321a856d" prot="public" virt="virtual"><scope>QuantLib::CompositeInstrument</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a53a0fc1adc70b73387ad53009725835d" prot="public" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>valuationDate</name></member>
      <member refid="class_quant_lib_1_1_instrument_1aa60b558fc82f022e13535360ac4a6fed" prot="protected" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>valuationDate_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a9d719c43bb627177a90d7d12324a2d6e" prot="public" virt="non-virtual"><scope>QuantLib::CompositeInstrument</scope><name>~LazyObject</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::CompositeInstrument</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::CompositeInstrument</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
