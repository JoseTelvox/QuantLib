<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_one_factor_copula" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>QuantLib::OneFactorCopula</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_lazy_object" prot="public" virt="non-virtual">QuantLib::LazyObject</basecompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_one_factor_gaussian_copula" prot="public" virt="non-virtual">QuantLib::OneFactorGaussianCopula</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_one_factor_gaussian_student_copula" prot="public" virt="non-virtual">QuantLib::OneFactorGaussianStudentCopula</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_one_factor_student_copula" prot="public" virt="non-virtual">QuantLib::OneFactorStudentCopula</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_one_factor_student_gaussian_copula" prot="public" virt="non-virtual">QuantLib::OneFactorStudentGaussianCopula</derivedcompoundref>
    <includes refid="onefactorcopula_8hpp" local="no">onefactorcopula.hpp</includes>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_one_factor_copula_1a18d42174650383ffc5fc3d9750ed2f1a" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
        <definition>Handle&lt;Quote&gt; QuantLib::OneFactorCopula::correlation_</definition>
        <argsstring></argsstring>
        <name>correlation_</name>
        <qualifiedname>QuantLib::OneFactorCopula::correlation_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/onefactorcopula.hpp" line="242" column="16" bodyfile="ql/experimental/credit/onefactorcopula.hpp" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_one_factor_copula_1a45d8cdfbd65e7f01a5cf54bd35570671" prot="protected" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::OneFactorCopula::max_</definition>
        <argsstring></argsstring>
        <name>max_</name>
        <qualifiedname>QuantLib::OneFactorCopula::max_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/onefactorcopula.hpp" line="243" column="22" bodyfile="ql/experimental/credit/onefactorcopula.hpp" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_one_factor_copula_1a7933ff8bd857233ec5052673c2c2e8fe" prot="protected" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::OneFactorCopula::steps_</definition>
        <argsstring></argsstring>
        <name>steps_</name>
        <qualifiedname>QuantLib::OneFactorCopula::steps_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/onefactorcopula.hpp" line="244" column="22" bodyfile="ql/experimental/credit/onefactorcopula.hpp" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_one_factor_copula_1ace40265dfc5d21e58fa56e50554ae449" prot="protected" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::OneFactorCopula::min_</definition>
        <argsstring></argsstring>
        <name>min_</name>
        <qualifiedname>QuantLib::OneFactorCopula::min_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/onefactorcopula.hpp" line="245" column="22" bodyfile="ql/experimental/credit/onefactorcopula.hpp" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_one_factor_copula_1a2747fbaaf34af9e4b4f34ea2a85d00e0" prot="protected" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::OneFactorCopula::y_</definition>
        <argsstring></argsstring>
        <name>y_</name>
        <qualifiedname>QuantLib::OneFactorCopula::y_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/onefactorcopula.hpp" line="248" column="29" bodyfile="ql/experimental/credit/onefactorcopula.hpp" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_one_factor_copula_1a2f83e654c64ef9b61ac9c288fb00b2d9" prot="protected" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::OneFactorCopula::cumulativeY_</definition>
        <argsstring></argsstring>
        <name>cumulativeY_</name>
        <qualifiedname>QuantLib::OneFactorCopula::cumulativeY_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/onefactorcopula.hpp" line="249" column="29" bodyfile="ql/experimental/credit/onefactorcopula.hpp" bodystart="249" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_one_factor_copula_1a097679ac888315c7bffb9fece9819333" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::OneFactorCopula::OneFactorCopula</definition>
        <argsstring>(Handle&lt; Quote &gt; correlation, Real maximum=5.0, Size integrationSteps=50, Real minimum=-5.0)</argsstring>
        <name>OneFactorCopula</name>
        <qualifiedname>QuantLib::OneFactorCopula::OneFactorCopula</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
          <declname>correlation</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>maximum</declname>
          <defval>5.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>integrationSteps</declname>
          <defval>50</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>minimum</declname>
          <defval>-5.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/onefactorcopula.hpp" line="104" column="9" bodyfile="ql/experimental/credit/onefactorcopula.hpp" bodystart="104" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_one_factor_copula_1a474a5f6157375532d09d92b0e8f1b593" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>virtual Real QuantLib::OneFactorCopula::density</definition>
        <argsstring>(Real m) const =0</argsstring>
        <name>density</name>
        <qualifiedname>QuantLib::OneFactorCopula::density</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_one_factor_gaussian_copula_1ad7ff34d5501309b51c28d097fbd48d67">density</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_one_factor_gaussian_student_copula_1a7f000484e4190f354b11794fa6321ee9">density</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_one_factor_student_copula_1a2880f4a7940afc208fdb2f57565c1c9b">density</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_one_factor_student_gaussian_copula_1a37ee83e624b800e8e8b4173999cf8c25">density</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Density function of M. </para>
        </briefdescription>
        <detaileddescription>
<para>Derived classes must override this method and ensure zero mean and unit variance. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/onefactorcopula.hpp" line="120" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_one_factor_copula_1a0b3c619ab0979cb073ed3013abcfe8b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>virtual Real QuantLib::OneFactorCopula::cumulativeZ</definition>
        <argsstring>(Real z) const =0</argsstring>
        <name>cumulativeZ</name>
        <qualifiedname>QuantLib::OneFactorCopula::cumulativeZ</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_one_factor_gaussian_copula_1af2cf0e9ef4f8d3500a4735e98f8d0b38">cumulativeZ</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_one_factor_gaussian_student_copula_1a1d2c07a65a20743fe60527c92d650464">cumulativeZ</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_one_factor_student_copula_1a7131a55618fe22c7119b00bc64c26580">cumulativeZ</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_one_factor_student_gaussian_copula_1a92da6877e677e43d90fab623595d2331">cumulativeZ</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Cumulative distribution of Z. </para>
        </briefdescription>
        <detaileddescription>
<para>Derived classes must override this method and ensure zero mean and unit variance. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/onefactorcopula.hpp" line="125" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_one_factor_copula_1aa8f26b08b68d15a7a913ce40d4ff7966" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::OneFactorCopula::cumulativeY</definition>
        <argsstring>(Real y) const</argsstring>
        <name>cumulativeY</name>
        <qualifiedname>QuantLib::OneFactorCopula::cumulativeY</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_one_factor_gaussian_copula_1a9b2dde17f596b56f6a9b9860ad679eaa">cumulativeY</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Cumulative distribution of Y. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the default implementation based on tabulated data. The table needs to be filled by derived classes. If analytic calculation is feasible, this method can also be overridden. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/onefactorcopula.hpp" line="132" column="22" bodyfile="ql/experimental/credit/onefactorcopula.cpp" bodystart="57" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_one_factor_copula_1a879f82a318fd4f0ec81c9577bcefbba6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::OneFactorCopula::inverseCumulativeY</definition>
        <argsstring>(Real p) const</argsstring>
        <name>inverseCumulativeY</name>
        <qualifiedname>QuantLib::OneFactorCopula::inverseCumulativeY</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_one_factor_gaussian_copula_1ad43e089703440d99560fb6a9a9286f91">inverseCumulativeY</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Inverse cumulative distribution of Y. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the default implementation based on tabulated data. The table needs to be filled by derived classes. If analytic calculation is feasible, this method can also be overridden. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/onefactorcopula.hpp" line="139" column="22" bodyfile="ql/experimental/credit/onefactorcopula.cpp" bodystart="78" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_one_factor_copula_1ac301719aca4fdb8a93289d0e7f72352c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::OneFactorCopula::correlation</definition>
        <argsstring>() const</argsstring>
        <name>correlation</name>
        <qualifiedname>QuantLib::OneFactorCopula::correlation</qualifiedname>
        <briefdescription>
<para>Single correlation parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/onefactorcopula.hpp" line="142" column="14" bodyfile="ql/experimental/credit/onefactorcopula.hpp" bodystart="263" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_one_factor_copula_1a5cc67b81212f5af145a571784b3e61d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::OneFactorCopula::conditionalProbability</definition>
        <argsstring>(Real prob, Real m) const</argsstring>
        <name>conditionalProbability</name>
        <qualifiedname>QuantLib::OneFactorCopula::conditionalProbability</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>prob</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Conditional probability. </para>
        </briefdescription>
        <detaileddescription>
<para><formula id="78">\[\hat p(m) = F_Z \left( \frac{F_Y^{-1}(p)-a\,m}{\sqrt{1-a^2}}\right)
\]</formula> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/onefactorcopula.hpp" line="149" column="14" bodyfile="ql/experimental/credit/onefactorcopula.cpp" bodystart="27" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_one_factor_copula_1a5c4aa1a82789813fcd245b7b38f6c344" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::OneFactorCopula::conditionalProbability</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;prob, Real m) const</argsstring>
        <name>conditionalProbability</name>
        <qualifiedname>QuantLib::OneFactorCopula::conditionalProbability</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>prob</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Vector of conditional probabilities. </para>
        </briefdescription>
        <detaileddescription>
<para><formula id="79">\[\hat p_i(m) = F_Z \left( \frac{F_Y^{-1}(p_i)-a\,m}{\sqrt{1-a^2}}
\right)
\]</formula> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/onefactorcopula.hpp" line="158" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_one_factor_copula_1a477e0493a6093f497064855008c80dab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::OneFactorCopula::integral</definition>
        <argsstring>(Real p) const</argsstring>
        <name>integral</name>
        <qualifiedname>QuantLib::OneFactorCopula::integral</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Integral over the density <formula id="80">$ \rho(m) $</formula> of M and the conditional probability related to p:</para>
<para><formula id="81">\[\int_{-\infty}^\infty\,dm\,\rho(m)\,
F_Z \left( \frac{F_Y^{-1}(p)-a\,m}{\sqrt{1-a^2}}\right)
\]</formula> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/onefactorcopula.hpp" line="169" column="14" bodyfile="ql/experimental/credit/onefactorcopula.hpp" bodystart="169" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_one_factor_copula_1adc149153ced991bba4cb716c2bb42327" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::OneFactorCopula::integral</definition>
        <argsstring>(const F &amp;f, std::vector&lt; Real &gt; &amp;probabilities) const</argsstring>
        <name>integral</name>
        <qualifiedname>QuantLib::OneFactorCopula::integral</qualifiedname>
        <param>
          <type>const F &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>probabilities</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Integral over the density <formula id="80">$ \rho(m) $</formula> of M and a one-dimensional function <formula id="82">$ f $</formula> of conditional probabilities related to the input vector of probabilities p:</para>
<para><formula id="83">\[\int_{-\infty}^\infty\,dm\,\rho(m)\, f (\hat p_1, \hat p_2, \dots,
\hat p_N), \qquad
\hat p_i (m) = F_Z \left( \frac{F_Y^{-1}(p_i)-a\,m}{\sqrt{1-a^2}}
\right)
\]</formula> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/onefactorcopula.hpp" line="194" column="14" bodyfile="ql/experimental/credit/onefactorcopula.hpp" bodystart="194" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_one_factor_copula_1a1e25b1a30d63904c85de847228e51614" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_quant_lib_1_1_distribution" kindref="compound">Distribution</ref></type>
        <definition>Distribution QuantLib::OneFactorCopula::integral</definition>
        <argsstring>(const F &amp;f, const std::vector&lt; Real &gt; &amp;nominals, const std::vector&lt; Real &gt; &amp;probabilities) const</argsstring>
        <name>integral</name>
        <qualifiedname>QuantLib::OneFactorCopula::integral</qualifiedname>
        <param>
          <type>const F &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>nominals</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>probabilities</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Integral over the density <formula id="80">$ \rho(m) $</formula> of M and a multi-dimensional function <formula id="82">$ f $</formula> of conditional probabilities related to the input vector of probabilities p:</para>
<para><formula id="84">\[\int_{-\infty}^\infty\,dm\,\rho(m)\, f (\hat p_1, \hat p_2, \dots,
\hat p_N), \qquad
\hat p_i = F_Z \left( \frac{F_Y^{-1}(p_i)-a\,m}{\sqrt{1-a^2}}\right)
\]</formula> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/onefactorcopula.hpp" line="218" column="22" bodyfile="ql/experimental/credit/onefactorcopula.hpp" bodystart="218" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_one_factor_copula_1a39040bcfa07eb134ab4a051a6e6a614b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int QuantLib::OneFactorCopula::checkMoments</definition>
        <argsstring>(Real tolerance) const</argsstring>
        <name>checkMoments</name>
        <qualifiedname>QuantLib::OneFactorCopula::checkMoments</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check moments (unit norm, zero mean and unit variance) of the distributions of M, Z, and Y by numerically integrating the respective density. <ref refid="class_quant_lib_1_1_parameter" kindref="compound">Parameter</ref> tolerance is the maximum tolerable absolute error. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/onefactorcopula.hpp" line="239" column="13" bodyfile="ql/experimental/credit/onefactorcopula.cpp" bodystart="99" bodyend="157"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_one_factor_copula_1a8dd3a2685f5376c82f5766ae86e4550f" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::OneFactorCopula::steps</definition>
        <argsstring>() const</argsstring>
        <name>steps</name>
        <qualifiedname>QuantLib::OneFactorCopula::steps</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/onefactorcopula.hpp" line="253" column="14" bodyfile="ql/experimental/credit/onefactorcopula.hpp" bodystart="268" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_one_factor_copula_1adf63c91c75b67642f308c5dfe1cad711" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::OneFactorCopula::dm</definition>
        <argsstring>(Size i) const</argsstring>
        <name>dm</name>
        <qualifiedname>QuantLib::OneFactorCopula::dm</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/onefactorcopula.hpp" line="257" column="14" bodyfile="ql/experimental/credit/onefactorcopula.hpp" bodystart="272" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_one_factor_copula_1a726fccd0904e76ba737588d2e9d631f3" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::OneFactorCopula::m</definition>
        <argsstring>(Size i) const</argsstring>
        <name>m</name>
        <qualifiedname>QuantLib::OneFactorCopula::m</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/onefactorcopula.hpp" line="259" column="14" bodyfile="ql/experimental/credit/onefactorcopula.hpp" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_one_factor_copula_1a4823fe1581fba1288762776ba2a3c757" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::OneFactorCopula::densitydm</definition>
        <argsstring>(Size i) const</argsstring>
        <name>densitydm</name>
        <qualifiedname>QuantLib::OneFactorCopula::densitydm</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/onefactorcopula.hpp" line="260" column="14" bodyfile="ql/experimental/credit/onefactorcopula.hpp" bodystart="281" bodyend="284"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Abstract base class for one-factor copula models. </para>
    </briefdescription>
    <detaileddescription>
<para>Reference: John Hull and Alan White, The Perfect Copula, June 2006</para>
<para>Let <formula id="53">$Q_i(t)$</formula> be the cumulative probability of default of counterparty i before time t.</para>
<para>In a one-factor model, consider random variables <formula id="54">\[ Y_i = a_i\,M+\sqrt{1-a_i^2}\:Z_i \]</formula> where <formula id="55">$M$</formula> and <formula id="56">$Z_i$</formula> have independent zero-mean unit-variance distributions and <formula id="57">$-1\leq a_i \leq 1$</formula>. The correlation between <formula id="58">$Y_i$</formula> and <formula id="59">$Y_j$</formula> is then <formula id="60">$a_i a_j$</formula>.</para>
<para>Let <formula id="61">$F_Y(y)$</formula> be the cumulative distribution function of <formula id="58">$Y_i$</formula>. <formula id="62">$y$</formula> is mapped to <formula id="63">$t$</formula> such that percentiles match, i.e. <formula id="64">$F_Y(y)=Q_i(t)$</formula> or <formula id="65">$y=F_Y^{-1}(Q_i(t))$</formula>.</para>
<para>Now let <formula id="66">$F_Z(z)$</formula> be the cumulated distribution function of <formula id="56">$Z_i$</formula>. For given realization of <formula id="55">$M$</formula>, this determines the distribution of <formula id="62">$y$</formula>:         <formula id="67">\[Prob \,(Y_i &lt; y|M) = F_Z \left( \frac{y-a_i\,M}{\sqrt{1-a_i^2}}\right)
\qquad
\mbox{or}
\qquad
Prob \,(t_i &lt; t|M) = F_Z \left( \frac{F_Y^{-1}(Q_i(t))-a_i\,M}
{\sqrt{1-a_i^2}}
\right)
\]</formula></para>
<para>The distribution functions of <formula id="68">$ M, Z_i $</formula> are specified in derived classes. The distribution function of <formula id="69">$ Y $</formula> is then given by the convolution           <formula id="70">\[F_Y(y) = Prob\,(Y&lt;y) = \int_{-\infty}^\infty\,\int_{-\infty}^{\infty}\:
D_Z(z)\,D_M(m) \quad
\Theta \left(y - a\,m - \sqrt{1-a^2}\,z\right)\,dm\,dz,
\qquad
\Theta (x) = \left\{
\begin{array}{ll}
1 &amp; x \geq 0 \\
0 &amp; x &lt; 0
\end{array}\right.
\]</formula> where <formula id="71">$ D_Z(z) $</formula> and <formula id="72">$ D_M(m) $</formula> are the probability densities of <formula id="73">$ Z$</formula> and <formula id="74">$ M, $</formula> respectively.</para>
<para>This convolution can also be written      <formula id="75">\[F(y) = Prob \,(Y &lt; y) =
\int_{-\infty}^\infty D_M(m)\,dm\:
\int_{-\infty}^{g(y,a,m)} D_Z(z)\,dz, \qquad
g(y,a,m) = \frac{y - a\cdot m}{\sqrt{1-a^2}}, \qquad a &lt; 1
\]</formula></para>
<para>or</para>
<para><formula id="76">\[F(y) = Prob \,(Y &lt; y) =
\int_{-\infty}^\infty D_Z(z)\,dz\:
\int_{-\infty}^{h(y,a,z)} D_M(m)\,dm, \qquad
h(y,a,z) = \frac{y - \sqrt{1 - a^2}\cdot z}{a}, \qquad a &gt; 0.
\]</formula></para>
<para>In general, <formula id="77">$ F_Y(y) $</formula> needs to be computed numerically.</para>
<para><xrefsect id="todo_1_todo000016"><xreftitle>Todo</xreftitle><xrefdescription><para>Improve on simple Euler integration </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="1">
        <label>QuantLib::OneFactorCopula</label>
        <link refid="class_quant_lib_1_1_one_factor_copula"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::OneFactorGaussianCopula</label>
        <link refid="class_quant_lib_1_1_one_factor_gaussian_copula"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::OneFactorGaussianStudentCopula</label>
        <link refid="class_quant_lib_1_1_one_factor_gaussian_student_copula"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::OneFactorStudentCopula</label>
        <link refid="class_quant_lib_1_1_one_factor_student_copula"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QuantLib::OneFactorStudentGaussianCopula</label>
        <link refid="class_quant_lib_1_1_one_factor_student_gaussian_copula"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>QuantLib::Handle&lt; QuantLib::Quote &gt;</label>
        <link refid="class_quant_lib_1_1_handle"/>
      </node>
      <node id="2">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="1">
        <label>QuantLib::OneFactorCopula</label>
        <link refid="class_quant_lib_1_1_one_factor_copula"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>correlation_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/credit/onefactorcopula.hpp" line="102" column="5" bodyfile="ql/experimental/credit/onefactorcopula.hpp" bodystart="102" bodyend="261"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_lazy_object_1a02070ea7442d30625992c1711030d4b8" prot="protected" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>alwaysForward_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a17c9433135a259e4776baec66204a484" prot="public" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>alwaysForwardNotifications</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a5244c7f83592375a0ea9048296435fd1" prot="protected" virt="virtual"><scope>QuantLib::OneFactorCopula</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a58b4986a80efa18634483a92c121e26e" prot="protected" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>calculated_</name></member>
      <member refid="class_quant_lib_1_1_one_factor_copula_1a39040bcfa07eb134ab4a051a6e6a614b" prot="public" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>checkMoments</name></member>
      <member refid="class_quant_lib_1_1_one_factor_copula_1a5cc67b81212f5af145a571784b3e61d6" prot="public" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>conditionalProbability</name></member>
      <member refid="class_quant_lib_1_1_one_factor_copula_1a5c4aa1a82789813fcd245b7b38f6c344" prot="public" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>conditionalProbability</name></member>
      <member refid="class_quant_lib_1_1_one_factor_copula_1ac301719aca4fdb8a93289d0e7f72352c" prot="public" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>correlation</name></member>
      <member refid="class_quant_lib_1_1_one_factor_copula_1a18d42174650383ffc5fc3d9750ed2f1a" prot="protected" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>correlation_</name></member>
      <member refid="class_quant_lib_1_1_one_factor_copula_1aa8f26b08b68d15a7a913ce40d4ff7966" prot="public" virt="virtual"><scope>QuantLib::OneFactorCopula</scope><name>cumulativeY</name></member>
      <member refid="class_quant_lib_1_1_one_factor_copula_1a2f83e654c64ef9b61ac9c288fb00b2d9" prot="protected" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>cumulativeY_</name></member>
      <member refid="class_quant_lib_1_1_one_factor_copula_1a0b3c619ab0979cb073ed3013abcfe8b4" prot="public" virt="pure-virtual"><scope>QuantLib::OneFactorCopula</scope><name>cumulativeZ</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::OneFactorCopula</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_one_factor_copula_1a474a5f6157375532d09d92b0e8f1b593" prot="public" virt="pure-virtual"><scope>QuantLib::OneFactorCopula</scope><name>density</name></member>
      <member refid="class_quant_lib_1_1_one_factor_copula_1a4823fe1581fba1288762776ba2a3c757" prot="protected" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>densitydm</name></member>
      <member refid="class_quant_lib_1_1_one_factor_copula_1adf63c91c75b67642f308c5dfe1cad711" prot="protected" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>dm</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1afac6ee19c3107c453e1347dd8000e023" prot="public" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>forwardFirstNotificationOnly</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7157f41e83f2c5d924f5c5bafda04d1d" prot="public" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>freeze</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7bb721fe00c6854e602758aba629ab77" prot="protected" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>frozen_</name></member>
      <member refid="class_quant_lib_1_1_one_factor_copula_1a477e0493a6093f497064855008c80dab" prot="public" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>integral</name></member>
      <member refid="class_quant_lib_1_1_one_factor_copula_1adc149153ced991bba4cb716c2bb42327" prot="public" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>integral</name></member>
      <member refid="class_quant_lib_1_1_one_factor_copula_1a1e25b1a30d63904c85de847228e51614" prot="public" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>integral</name></member>
      <member refid="class_quant_lib_1_1_one_factor_copula_1a879f82a318fd4f0ec81c9577bcefbba6" prot="public" virt="virtual"><scope>QuantLib::OneFactorCopula</scope><name>inverseCumulativeY</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a0a7c5d42815a4e16ee2158e24dbfc748" prot="public" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>isCalculated</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a26f18f4ff7faaaebd8eae50e064b493e" prot="public" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>LazyObject</name></member>
      <member refid="class_quant_lib_1_1_one_factor_copula_1a726fccd0904e76ba737588d2e9d631f3" prot="protected" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>m</name></member>
      <member refid="class_quant_lib_1_1_one_factor_copula_1a45d8cdfbd65e7f01a5cf54bd35570671" prot="protected" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>max_</name></member>
      <member refid="class_quant_lib_1_1_one_factor_copula_1ace40265dfc5d21e58fa56e50554ae449" prot="protected" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>min_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::OneFactorCopula</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::OneFactorCopula</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::OneFactorCopula</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_one_factor_copula_1a097679ac888315c7bffb9fece9819333" prot="public" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>OneFactorCopula</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::OneFactorCopula</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::OneFactorCopula</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::QuantLib::Observer::"><scope>QuantLib::OneFactorCopula</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1aafa5583a3743d9f93fa40da5b62e1ff8" prot="protected" virt="pure-virtual"><scope>QuantLib::OneFactorCopula</scope><name>performCalculations</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a70c9b24e50132408d8d9ce4f6674662a" prot="public" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>recalculate</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_one_factor_copula_1a8dd3a2685f5376c82f5766ae86e4550f" prot="protected" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>steps</name></member>
      <member refid="class_quant_lib_1_1_one_factor_copula_1a7933ff8bd857233ec5052673c2c2e8fe" prot="protected" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>steps_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a2e0e4786666453024b9d4e0761f2770b" prot="public" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>unfreeze</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1adee2bf49be5c4c78736be293321a856d" prot="public" virt="virtual"><scope>QuantLib::OneFactorCopula</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_one_factor_copula_1a2747fbaaf34af9e4b4f34ea2a85d00e0" prot="protected" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>y_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a9d719c43bb627177a90d7d12324a2d6e" prot="public" virt="non-virtual"><scope>QuantLib::OneFactorCopula</scope><name>~LazyObject</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::OneFactorCopula</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::OneFactorCopula</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
