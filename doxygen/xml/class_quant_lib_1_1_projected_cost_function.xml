<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_projected_cost_function" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::ProjectedCostFunction</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_cost_function" prot="public" virt="non-virtual">QuantLib::CostFunction</basecompoundref>
    <basecompoundref refid="class_quant_lib_1_1_projection" prot="public" virt="non-virtual">QuantLib::Projection</basecompoundref>
    <includes refid="projectedcostfunction_8hpp" local="no">projectedcostfunction.hpp</includes>
    <sectiondef kind="user-defined">
      <header>CostFunction interface</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_projected_cost_function_1af479076568e3a73a5d0eb42117778f02" prot="private" static="no" mutable="no">
        <type>const <ref refid="class_quant_lib_1_1_cost_function" kindref="compound">CostFunction</ref> &amp;</type>
        <definition>const CostFunction&amp; QuantLib::ProjectedCostFunction::costFunction_</definition>
        <argsstring></argsstring>
        <name>costFunction_</name>
        <qualifiedname>QuantLib::ProjectedCostFunction::costFunction_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/projectedcostfunction.hpp" line="55" column="32" bodyfile="ql/math/optimization/projectedcostfunction.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_projected_cost_function_1ac1f4603a8a5afc64af1300e4f716aa16" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ProjectedCostFunction::value</definition>
        <argsstring>(const Array &amp;freeParameters) const override</argsstring>
        <name>value</name>
        <qualifiedname>QuantLib::ProjectedCostFunction::value</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_cost_function_1a2255742e3e05477d773cdf3705411661">value</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>method to overload to compute the cost function value in x </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/projectedcostfunction.hpp" line="50" column="18" bodyfile="ql/math/optimization/projectedcostfunction.cpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_projected_cost_function_1a2a78484efcaf9917ba2aba9a5d67fa0f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::ProjectedCostFunction::values</definition>
        <argsstring>(const Array &amp;freeParameters) const override</argsstring>
        <name>values</name>
        <qualifiedname>QuantLib::ProjectedCostFunction::values</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_cost_function_1ab43da17891b724c8352c01c2478d04db">values</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>method to overload to compute the cost function values in x </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/projectedcostfunction.hpp" line="51" column="19" bodyfile="ql/math/optimization/projectedcostfunction.cpp" bodystart="42" bodyend="45"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_projected_cost_function_1adfa702f5054efd92fb5fb8eebda6ec47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::ProjectedCostFunction::ProjectedCostFunction</definition>
        <argsstring>(const CostFunction &amp;costFunction, const Array &amp;parameterValues, const std::vector&lt; bool &gt; &amp;fixParameters)</argsstring>
        <name>ProjectedCostFunction</name>
        <qualifiedname>QuantLib::ProjectedCostFunction::ProjectedCostFunction</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_cost_function" kindref="compound">CostFunction</ref> &amp;</type>
          <declname>costFunction</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>parameterValues</declname>
        </param>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
          <declname>fixParameters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/projectedcostfunction.hpp" line="41" column="13" bodyfile="ql/math/optimization/projectedcostfunction.cpp" bodystart="26" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_projected_cost_function_1a3a9e167aff62403d9988fc6aa96f2713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::ProjectedCostFunction::ProjectedCostFunction</definition>
        <argsstring>(const CostFunction &amp;costFunction, const Projection &amp;projection)</argsstring>
        <name>ProjectedCostFunction</name>
        <qualifiedname>QuantLib::ProjectedCostFunction::ProjectedCostFunction</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_cost_function" kindref="compound">CostFunction</ref> &amp;</type>
          <declname>costFunction</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_projection" kindref="compound">Projection</ref> &amp;</type>
          <declname>projection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/projectedcostfunction.hpp" line="45" column="13" bodyfile="ql/math/optimization/projectedcostfunction.cpp" bodystart="32" bodyend="35"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Parameterized cost function. </para>
    </briefdescription>
    <detaileddescription>
<para>This class creates a proxy cost function which can depend on any arbitrary subset of parameters (the other being fixed) </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QuantLib::CostFunction</label>
        <link refid="class_quant_lib_1_1_cost_function"/>
      </node>
      <node id="1">
        <label>QuantLib::ProjectedCostFunction</label>
        <link refid="class_quant_lib_1_1_projected_cost_function"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Projection</label>
        <link refid="class_quant_lib_1_1_projection"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>QuantLib::Array</label>
        <link refid="class_quant_lib_1_1_array"/>
      </node>
      <node id="2">
        <label>QuantLib::CostFunction</label>
        <link refid="class_quant_lib_1_1_cost_function"/>
      </node>
      <node id="1">
        <label>QuantLib::ProjectedCostFunction</label>
        <link refid="class_quant_lib_1_1_projected_cost_function"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Projection</label>
        <link refid="class_quant_lib_1_1_projection"/>
        <childnode refid="4" relation="usage">
          <edgelabel>actualParameters_</edgelabel>
          <edgelabel>fixedParameters_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/math/optimization/projectedcostfunction.hpp" line="39" column="5" bodyfile="ql/math/optimization/projectedcostfunction.hpp" bodystart="39" bodyend="56"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_projection_1a4cd8b09b3e1d23d25477eaa6dba04e84" prot="protected" virt="non-virtual"><scope>QuantLib::ProjectedCostFunction</scope><name>actualParameters_</name></member>
      <member refid="class_quant_lib_1_1_projected_cost_function_1af479076568e3a73a5d0eb42117778f02" prot="private" virt="non-virtual"><scope>QuantLib::ProjectedCostFunction</scope><name>costFunction_</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a0dc9070b6d79cf91aef8ba48e2808263" prot="public" virt="virtual"><scope>QuantLib::ProjectedCostFunction</scope><name>finiteDifferenceEpsilon</name></member>
      <member refid="class_quant_lib_1_1_projection_1a1e957452efd8ff7a65e51909a0bcb584" prot="protected" virt="non-virtual"><scope>QuantLib::ProjectedCostFunction</scope><name>fixedParameters_</name></member>
      <member refid="class_quant_lib_1_1_projection_1af1c0d7e2a8a06f456451f7747f23c480" prot="protected" virt="non-virtual"><scope>QuantLib::ProjectedCostFunction</scope><name>fixParameters_</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1aad44fa61459514a8e55208d50716698b" prot="public" virt="virtual"><scope>QuantLib::ProjectedCostFunction</scope><name>gradient</name></member>
      <member refid="class_quant_lib_1_1_projection_1acf2fff03971f0704c856aedac032747c" prot="public" virt="virtual"><scope>QuantLib::ProjectedCostFunction</scope><name>include</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a5bf2d8163ed5dea7ec811377e2835eca" prot="public" virt="virtual"><scope>QuantLib::ProjectedCostFunction</scope><name>jacobian</name></member>
      <member refid="class_quant_lib_1_1_projection_1aaccb4b6bdba000a3f7ecb7505ac351ef" prot="protected" virt="non-virtual"><scope>QuantLib::ProjectedCostFunction</scope><name>mapFreeParameters</name></member>
      <member refid="class_quant_lib_1_1_projection_1a029121abce200b4f3281ab7f66f5d0d7" prot="protected" virt="non-virtual"><scope>QuantLib::ProjectedCostFunction</scope><name>numberOfFreeParameters_</name></member>
      <member refid="class_quant_lib_1_1_projection_1af30a26dd58c5a706bc8974856792ef40" prot="public" virt="virtual"><scope>QuantLib::ProjectedCostFunction</scope><name>project</name></member>
      <member refid="class_quant_lib_1_1_projected_cost_function_1adfa702f5054efd92fb5fb8eebda6ec47" prot="public" virt="non-virtual"><scope>QuantLib::ProjectedCostFunction</scope><name>ProjectedCostFunction</name></member>
      <member refid="class_quant_lib_1_1_projected_cost_function_1a3a9e167aff62403d9988fc6aa96f2713" prot="public" virt="non-virtual"><scope>QuantLib::ProjectedCostFunction</scope><name>ProjectedCostFunction</name></member>
      <member refid="class_quant_lib_1_1_projection_1a7d889fbae994ca705eda9b5c1a3a520d" prot="public" virt="non-virtual"><scope>QuantLib::ProjectedCostFunction</scope><name>Projection</name></member>
      <member refid="class_quant_lib_1_1_projected_cost_function_1ac1f4603a8a5afc64af1300e4f716aa16" prot="public" virt="virtual"><scope>QuantLib::ProjectedCostFunction</scope><name>value</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1ae0c8902d6ce2e535237ae4370956d161" prot="public" virt="virtual"><scope>QuantLib::ProjectedCostFunction</scope><name>valueAndGradient</name></member>
      <member refid="class_quant_lib_1_1_projected_cost_function_1a2a78484efcaf9917ba2aba9a5d67fa0f" prot="public" virt="virtual"><scope>QuantLib::ProjectedCostFunction</scope><name>values</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a1aa00768b27a3446404b3029660c2e68" prot="public" virt="virtual"><scope>QuantLib::ProjectedCostFunction</scope><name>valuesAndJacobian</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a04929e863b85bc26f50ad9052ba7ee73" prot="public" virt="virtual"><scope>QuantLib::ProjectedCostFunction</scope><name>~CostFunction</name></member>
      <member refid="class_quant_lib_1_1_projection_1a2c546565be24111cf3cd6adbcad88761" prot="public" virt="virtual"><scope>QuantLib::ProjectedCostFunction</scope><name>~Projection</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
