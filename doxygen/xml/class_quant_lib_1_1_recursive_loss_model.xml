<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_recursive_loss_model" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::RecursiveLossModel</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_default_loss_model" prot="public" virt="non-virtual">QuantLib::DefaultLossModel</basecompoundref>
    <includes refid="recursivelossmodel_8hpp" local="no">recursivelossmodel.hpp</includes>
    <templateparamlist>
      <param>
        <type>class copulaPolicy</type>
      </param>
    </templateparamlist>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_recursive_loss_model_1ac6833895fef2c3ad22821c8856aaa7c2" prot="protected" static="no" mutable="no">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_constant_loss_latentmodel" kindref="compound">ConstantLossLatentmodel</ref>&lt; copulaPolicy &gt; &gt;</type>
        <definition>const ext::shared_ptr&lt;ConstantLossLatentmodel&lt;copulaPolicy&gt; &gt; QuantLib::RecursiveLossModel&lt; copulaPolicy &gt;::copula_</definition>
        <argsstring></argsstring>
        <name>copula_</name>
        <qualifiedname>QuantLib::RecursiveLossModel::copula_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recursivelossmodel.hpp" line="106" column="31" bodyfile="ql/experimental/credit/recursivelossmodel.hpp" bodystart="106" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_recursive_loss_model_1a05c60cf94360fb1570f1ca34953fc7e3" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>const Size QuantLib::RecursiveLossModel&lt; copulaPolicy &gt;::nBuckets_</definition>
        <argsstring></argsstring>
        <name>nBuckets_</name>
        <qualifiedname>QuantLib::RecursiveLossModel::nBuckets_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recursivelossmodel.hpp" line="109" column="20" bodyfile="ql/experimental/credit/recursivelossmodel.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_recursive_loss_model_1aa3486fdbbc49b1caf085cdfed6cc9b99" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::RecursiveLossModel&lt; copulaPolicy &gt;::wk_</definition>
        <argsstring></argsstring>
        <name>wk_</name>
        <qualifiedname>QuantLib::RecursiveLossModel::wk_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recursivelossmodel.hpp" line="110" column="29" bodyfile="ql/experimental/credit/recursivelossmodel.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_recursive_loss_model_1ab8c871296548dcfe56cfa48c364412cf" prot="private" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::RecursiveLossModel&lt; copulaPolicy &gt;::lossUnit_</definition>
        <argsstring></argsstring>
        <name>lossUnit_</name>
        <qualifiedname>QuantLib::RecursiveLossModel::lossUnit_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recursivelossmodel.hpp" line="111" column="22" bodyfile="ql/experimental/credit/recursivelossmodel.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_recursive_loss_model_1adf85b0148c23eff78c574eca093940e7" prot="private" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::RecursiveLossModel&lt; copulaPolicy &gt;::attachAmount_</definition>
        <argsstring></argsstring>
        <name>attachAmount_</name>
        <qualifiedname>QuantLib::RecursiveLossModel::attachAmount_</qualifiedname>
        <briefdescription>
<para>name to name factor. In the single factor copula: </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recursivelossmodel.hpp" line="118" column="22" bodyfile="ql/experimental/credit/recursivelossmodel.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_recursive_loss_model_1ae32b09ca99c490056c3f57e81c1ea0db" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::RecursiveLossModel&lt; copulaPolicy &gt;::detachAmount_</definition>
        <argsstring></argsstring>
        <name>detachAmount_</name>
        <qualifiedname>QuantLib::RecursiveLossModel::detachAmount_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recursivelossmodel.hpp" line="119" column="13" bodyfile="ql/experimental/credit/recursivelossmodel.hpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_recursive_loss_model_1a701aee316bea769b421fccc7c95a1f6c" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::RecursiveLossModel&lt; copulaPolicy &gt;::notional_</definition>
        <argsstring></argsstring>
        <name>notional_</name>
        <qualifiedname>QuantLib::RecursiveLossModel::notional_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recursivelossmodel.hpp" line="120" column="13" bodyfile="ql/experimental/credit/recursivelossmodel.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_recursive_loss_model_1ae92a5afec34070481fe8bc3566e7526d" prot="private" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::RecursiveLossModel&lt; copulaPolicy &gt;::remainingBsktSize_</definition>
        <argsstring></argsstring>
        <name>remainingBsktSize_</name>
        <qualifiedname>QuantLib::RecursiveLossModel::remainingBsktSize_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recursivelossmodel.hpp" line="121" column="22" bodyfile="ql/experimental/credit/recursivelossmodel.hpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_recursive_loss_model_1a7fb10b5b7b417471fd4bf848e31d2ae4" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::RecursiveLossModel&lt; copulaPolicy &gt;::notionals_</definition>
        <argsstring></argsstring>
        <name>notionals_</name>
        <qualifiedname>QuantLib::RecursiveLossModel::notionals_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recursivelossmodel.hpp" line="122" column="29" bodyfile="ql/experimental/credit/recursivelossmodel.hpp" bodystart="122" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_recursive_loss_model_1adea2b12f9fffc6dbca61c643f4bd9cf6" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::RecursiveLossModel&lt; copulaPolicy &gt;::RecursiveLossModel</definition>
        <argsstring>(const ext::shared_ptr&lt; ConstantLossLatentmodel&lt; copulaPolicy &gt; &gt; &amp;m, Size nbuckets=1)</argsstring>
        <name>RecursiveLossModel</name>
        <qualifiedname>QuantLib::RecursiveLossModel::RecursiveLossModel</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_constant_loss_latentmodel" kindref="compound">ConstantLossLatentmodel</ref>&lt; copulaPolicy &gt; &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>nbuckets</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recursivelossmodel.hpp" line="49" column="16" bodyfile="ql/experimental/credit/recursivelossmodel.hpp" bodystart="49" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_recursive_loss_model_1a8f7410ee19bc4b7f1967c5d2e905feee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::RecursiveLossModel&lt; CP &gt;::expectedTrancheLoss</definition>
        <argsstring>(const Date &amp;date) const override</argsstring>
        <name>expectedTrancheLoss</name>
        <qualifiedname>QuantLib::RecursiveLossModel::expectedTrancheLoss</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1a258763493804fe4c84b533716df00991">expectedTrancheLoss</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>invProb.push_back(CP::inverseCumulativeY(uncDefProb[i], i));//&lt;-static call</para>
        </inbodydescription>
        <location file="ql/experimental/credit/recursivelossmodel.hpp" line="95" column="12" bodyfile="ql/experimental/credit/recursivelossmodel.hpp" bodystart="131" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_recursive_loss_model_1a0ce1964627336bfb2a861d835fa40e7d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::RecursiveLossModel&lt; CP &gt;::lossProbability</definition>
        <argsstring>(const Date &amp;date) const</argsstring>
        <name>lossProbability</name>
        <qualifiedname>QuantLib::RecursiveLossModel::lossProbability</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recursivelossmodel.hpp" line="96" column="19" bodyfile="ql/experimental/credit/recursivelossmodel.hpp" bodystart="178" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_recursive_loss_model_1a35437b7b452cc383d8e763480a171106" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::map&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>, <ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> &gt;</type>
        <definition>std::map&lt; Real, Probability &gt; QuantLib::RecursiveLossModel&lt; CP &gt;::lossDistribution</definition>
        <argsstring>(const Date &amp;d) const override</argsstring>
        <name>lossDistribution</name>
        <qualifiedname>QuantLib::RecursiveLossModel::lossDistribution</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1aeff66ecf317c1dc23713424daf563f88">lossDistribution</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Full loss distribution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recursivelossmodel.hpp" line="98" column="16" bodyfile="ql/experimental/credit/recursivelossmodel.hpp" bodystart="216" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_recursive_loss_model_1ae1eeb7e0d13a942f9ca0bc2740427941" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::RecursiveLossModel&lt; CP &gt;::percentile</definition>
        <argsstring>(const Date &amp;d, Real percentile) const override</argsstring>
        <name>percentile</name>
        <qualifiedname>QuantLib::RecursiveLossModel::percentile</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1ac7142d4e72958aef5a602167a138973e">percentile</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>percentile</declname>
        </param>
        <briefdescription>
<para>Value at Risk given a default loss percentile. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recursivelossmodel.hpp" line="102" column="12" bodyfile="ql/experimental/credit/recursivelossmodel.hpp" bodystart="233" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_recursive_loss_model_1a7fa9a5e7e3d183775eaf9d4da8a92447" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::RecursiveLossModel&lt; CP &gt;::expectedShortfall</definition>
        <argsstring>(const Date &amp;d, Real perctl) const override</argsstring>
        <name>expectedShortfall</name>
        <qualifiedname>QuantLib::RecursiveLossModel::expectedShortfall</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1a60bd1a166744f4de455cae1c1c83f6a1">expectedShortfall</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>percentile</declname>
        </param>
        <briefdescription>
<para>Expected shortfall given a default loss percentile. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recursivelossmodel.hpp" line="103" column="12" bodyfile="ql/experimental/credit/recursivelossmodel.hpp" bodystart="262" bodyend="299"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_recursive_loss_model_1abb6ab7bfacd928c568ff2bfea754316f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>, <ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> &gt;</type>
        <definition>std::map&lt; Real, Probability &gt; QuantLib::RecursiveLossModel&lt; CP &gt;::conditionalLossDistrib</definition>
        <argsstring>(const std::vector&lt; Probability &gt; &amp;pDefDate, const std::vector&lt; Real &gt; &amp;mktFactor) const</argsstring>
        <name>conditionalLossDistrib</name>
        <qualifiedname>QuantLib::RecursiveLossModel::conditionalLossDistrib</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> &gt; &amp;</type>
          <declname>pDefDate</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pDefDate</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of unconditional default probabilities for each live name (at the current evaluation date). This is passed instead of the date for performance reasons (if in the future other magnitudes -e.g. lgd- are contingent on the date they shouldd be passed too). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>update prob if this name does not default</para>
        </inbodydescription>
        <location file="ql/experimental/credit/recursivelossmodel.hpp" line="62" column="16" bodyfile="ql/experimental/credit/recursivelossmodel.hpp" bodystart="302" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_recursive_loss_model_1ab954850c0eae74549e2374ec94c75ab2" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::RecursiveLossModel&lt; CP &gt;::expectedConditionalLoss</definition>
        <argsstring>(const std::vector&lt; Probability &gt; &amp;pDefDate, const std::vector&lt; Real &gt; &amp;mktFactor) const</argsstring>
        <name>expectedConditionalLoss</name>
        <qualifiedname>QuantLib::RecursiveLossModel::expectedConditionalLoss</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> &gt; &amp;</type>
          <declname>pDefDate</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactor</declname>
        </param>
        <briefdescription>
<para>Portfolio loss conditional to the market factor value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recursivelossmodel.hpp" line="64" column="12" bodyfile="ql/experimental/credit/recursivelossmodel.hpp" bodystart="406" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_recursive_loss_model_1acb1e292fac74119356a4cafa06f37436" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::RecursiveLossModel&lt; CP &gt;::conditionalLossProb</definition>
        <argsstring>(const std::vector&lt; Probability &gt; &amp;pDefDate, const std::vector&lt; Real &gt; &amp;mktFactor) const</argsstring>
        <name>conditionalLossProb</name>
        <qualifiedname>QuantLib::RecursiveLossModel::conditionalLossProb</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> &gt; &amp;</type>
          <declname>pDefDate</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recursivelossmodel.hpp" line="66" column="19" bodyfile="ql/experimental/credit/recursivelossmodel.hpp" bodystart="469" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_recursive_loss_model_1aa6011ff37f6947262a16399a7831d0ef" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>, <ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> &gt;</type>
        <definition>std::map&lt; Real, Probability &gt; QuantLib::RecursiveLossModel&lt; CP &gt;::conditionalLossDistribInvP</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;pDefDate, const std::vector&lt; Real &gt; &amp;mktFactor) const</argsstring>
        <name>conditionalLossDistribInvP</name>
        <qualifiedname>QuantLib::RecursiveLossModel::conditionalLossDistribInvP</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>pDefDate</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recursivelossmodel.hpp" line="70" column="16" bodyfile="ql/experimental/credit/recursivelossmodel.hpp" bodystart="350" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_recursive_loss_model_1a0263ffbd448e0f863e70b454dbf85fad" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::RecursiveLossModel&lt; CP &gt;::expectedConditionalLossInvP</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;pDefDate, const std::vector&lt; Real &gt; &amp;mktFactor) const</argsstring>
        <name>expectedConditionalLossInvP</name>
        <qualifiedname>QuantLib::RecursiveLossModel::expectedConditionalLossInvP</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>pDefDate</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recursivelossmodel.hpp" line="73" column="12" bodyfile="ql/experimental/credit/recursivelossmodel.hpp" bodystart="438" bodyend="466"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_recursive_loss_model_1aa46f9ae4cb4dcab2caa11d5bff41b55b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::RecursiveLossModel&lt; CP &gt;::resetModel</definition>
        <argsstring>() override</argsstring>
        <name>resetModel</name>
        <qualifiedname>QuantLib::RecursiveLossModel::resetModel</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1ac32cbab626c8ba8ebb0dcace3eed4a38">resetModel</reimplements>
        <briefdescription>
<para>Concrete models do now any updates/inits they need on basket reset. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/recursivelossmodel.hpp" line="77" column="12" bodyfile="ql/experimental/credit/recursivelossmodel.hpp" bodystart="191" bodyend="212"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Recursive STCDO default loss model for a heterogeneous pool of names. The pool names are heterogeneous in their default probabilities, notionals and recovery rates. Correlations are given by the latent model. The recursive pricing algorithm used here is described in Andersen, Sidenius and Basu; &quot;All your hedges in one basket&quot;, Risk, November 2003, pages 67-72 <verbatim>Notice that using copulas other than Gaussian it is only an
approximation (see remark on p.68).

\todo Make the loss unit equal to some small fraction depending on the
portfolio loss weights (notionals and recoveries). As it is now this
is ok for pricing but not for risk metrics. See the discussion in O&apos;Kane
18.3.2
\todo Intengrands should all use the inverted probabilities for 
performance instead of calling the copula inversion with the same vals.
</verbatim> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QuantLib::DefaultLossModel</label>
        <link refid="class_quant_lib_1_1_default_loss_model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="1">
        <label>QuantLib::RecursiveLossModel&lt; copulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_recursive_loss_model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>QuantLib::DefaultLossModel</label>
        <link refid="class_quant_lib_1_1_default_loss_model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>basket_</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Handle&lt; QuantLib::Basket &gt;</label>
        <link refid="class_quant_lib_1_1_handle"/>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="1">
        <label>QuantLib::RecursiveLossModel&lt; copulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_recursive_loss_model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::RelinkableHandle&lt; QuantLib::Basket &gt;</label>
        <link refid="class_quant_lib_1_1_relinkable_handle"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/credit/recursivelossmodel.hpp" line="47" column="5" bodyfile="ql/experimental/credit/recursivelossmodel.hpp" bodystart="47" bodyend="123"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_recursive_loss_model_1adf85b0148c23eff78c574eca093940e7" prot="private" virt="non-virtual"><scope>QuantLib::RecursiveLossModel</scope><name>attachAmount_</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ad2700ffb7198321f52fdeb42e9a8e043" prot="protected" virt="non-virtual"><scope>QuantLib::RecursiveLossModel</scope><name>basket_</name></member>
      <member refid="class_quant_lib_1_1_recursive_loss_model_1abb6ab7bfacd928c568ff2bfea754316f" prot="private" virt="non-virtual"><scope>QuantLib::RecursiveLossModel</scope><name>conditionalLossDistrib</name></member>
      <member refid="class_quant_lib_1_1_recursive_loss_model_1aa6011ff37f6947262a16399a7831d0ef" prot="private" virt="non-virtual"><scope>QuantLib::RecursiveLossModel</scope><name>conditionalLossDistribInvP</name></member>
      <member refid="class_quant_lib_1_1_recursive_loss_model_1acb1e292fac74119356a4cafa06f37436" prot="private" virt="non-virtual"><scope>QuantLib::RecursiveLossModel</scope><name>conditionalLossProb</name></member>
      <member refid="class_quant_lib_1_1_recursive_loss_model_1ac6833895fef2c3ad22821c8856aaa7c2" prot="protected" virt="non-virtual"><scope>QuantLib::RecursiveLossModel</scope><name>copula_</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1a25ed3ba8a38c4afaca5dca5b8cfd1d7d" prot="protected" virt="virtual"><scope>QuantLib::RecursiveLossModel</scope><name>defaultCorrelation</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ac51090f561e4372e495bfa9edee0000b" prot="protected" virt="non-virtual"><scope>QuantLib::RecursiveLossModel</scope><name>DefaultLossModel</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ab57e81d3fdd238c0cb19db2808bc5b59" prot="protected" virt="virtual"><scope>QuantLib::RecursiveLossModel</scope><name>densityTrancheLoss</name></member>
      <member refid="class_quant_lib_1_1_recursive_loss_model_1ae32b09ca99c490056c3f57e81c1ea0db" prot="private" virt="non-virtual"><scope>QuantLib::RecursiveLossModel</scope><name>detachAmount_</name></member>
      <member refid="class_quant_lib_1_1_recursive_loss_model_1ab954850c0eae74549e2374ec94c75ab2" prot="private" virt="non-virtual"><scope>QuantLib::RecursiveLossModel</scope><name>expectedConditionalLoss</name></member>
      <member refid="class_quant_lib_1_1_recursive_loss_model_1a0263ffbd448e0f863e70b454dbf85fad" prot="private" virt="non-virtual"><scope>QuantLib::RecursiveLossModel</scope><name>expectedConditionalLossInvP</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1afd0d4637df1423173d5efc758a16f354" prot="protected" virt="virtual"><scope>QuantLib::RecursiveLossModel</scope><name>expectedRecovery</name></member>
      <member refid="class_quant_lib_1_1_recursive_loss_model_1a7fa9a5e7e3d183775eaf9d4da8a92447" prot="public" virt="virtual"><scope>QuantLib::RecursiveLossModel</scope><name>expectedShortfall</name></member>
      <member refid="class_quant_lib_1_1_recursive_loss_model_1a8f7410ee19bc4b7f1967c5d2e905feee" prot="public" virt="virtual"><scope>QuantLib::RecursiveLossModel</scope><name>expectedTrancheLoss</name></member>
      <member refid="class_quant_lib_1_1_recursive_loss_model_1a35437b7b452cc383d8e763480a171106" prot="public" virt="virtual"><scope>QuantLib::RecursiveLossModel</scope><name>lossDistribution</name></member>
      <member refid="class_quant_lib_1_1_recursive_loss_model_1a0ce1964627336bfb2a861d835fa40e7d" prot="public" virt="non-virtual"><scope>QuantLib::RecursiveLossModel</scope><name>lossProbability</name></member>
      <member refid="class_quant_lib_1_1_recursive_loss_model_1ab8c871296548dcfe56cfa48c364412cf" prot="private" virt="non-virtual"><scope>QuantLib::RecursiveLossModel</scope><name>lossUnit_</name></member>
      <member refid="class_quant_lib_1_1_recursive_loss_model_1a05c60cf94360fb1570f1ca34953fc7e3" prot="private" virt="non-virtual"><scope>QuantLib::RecursiveLossModel</scope><name>nBuckets_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::RecursiveLossModel</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_recursive_loss_model_1a701aee316bea769b421fccc7c95a1f6c" prot="private" virt="non-virtual"><scope>QuantLib::RecursiveLossModel</scope><name>notional_</name></member>
      <member refid="class_quant_lib_1_1_recursive_loss_model_1a7fb10b5b7b417471fd4bf848e31d2ae4" prot="private" virt="non-virtual"><scope>QuantLib::RecursiveLossModel</scope><name>notionals_</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::RecursiveLossModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::RecursiveLossModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::RecursiveLossModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual"><scope>QuantLib::RecursiveLossModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual"><scope>QuantLib::RecursiveLossModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_recursive_loss_model_1ae1eeb7e0d13a942f9ca0bc2740427941" prot="public" virt="virtual"><scope>QuantLib::RecursiveLossModel</scope><name>percentile</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ab46164d907ae7772c0a5f6788ce4568b" prot="protected" virt="virtual"><scope>QuantLib::RecursiveLossModel</scope><name>probAtLeastNEvents</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1a922ca5f0ea73b3a33420fbcfb2556e93" prot="protected" virt="virtual"><scope>QuantLib::RecursiveLossModel</scope><name>probOverLoss</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ab8053b0ecb53c758939cf5c7a33fb328" prot="protected" virt="virtual"><scope>QuantLib::RecursiveLossModel</scope><name>probsBeingNthEvent</name></member>
      <member refid="class_quant_lib_1_1_recursive_loss_model_1adea2b12f9fffc6dbca61c643f4bd9cf6" prot="public" virt="non-virtual"><scope>QuantLib::RecursiveLossModel</scope><name>RecursiveLossModel</name></member>
      <member refid="class_quant_lib_1_1_recursive_loss_model_1ae92a5afec34070481fe8bc3566e7526d" prot="private" virt="non-virtual"><scope>QuantLib::RecursiveLossModel</scope><name>remainingBsktSize_</name></member>
      <member refid="class_quant_lib_1_1_recursive_loss_model_1aa46f9ae4cb4dcab2caa11d5bff41b55b" prot="protected" virt="virtual"><scope>QuantLib::RecursiveLossModel</scope><name>resetModel</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1a467843d56b00359a8fa7d0a1017079a5" prot="protected" virt="virtual"><scope>QuantLib::RecursiveLossModel</scope><name>splitESFLevel</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ab70b30442fcdda802730fd711c5348da" prot="protected" virt="virtual"><scope>QuantLib::RecursiveLossModel</scope><name>splitVaRLevel</name></member>
      <member refid="class_quant_lib_1_1_recursive_loss_model_1aa3486fdbbc49b1caf085cdfed6cc9b99" prot="private" virt="non-virtual"><scope>QuantLib::RecursiveLossModel</scope><name>wk_</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::RecursiveLossModel</scope><name>~Observable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
