<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_sampler_ring_gaussian" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::SamplerRingGaussian</compoundname>
    <includes refid="hybridsimulatedannealingfunctors_8hpp" local="no">hybridsimulatedannealingfunctors.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_sampler_ring_gaussian_1af8ef1ff27bfe578d992fa044a5468a89" prot="private" static="no" mutable="no">
        <type>std::mt19937</type>
        <definition>std::mt19937 QuantLib::SamplerRingGaussian::generator_</definition>
        <argsstring></argsstring>
        <name>generator_</name>
        <qualifiedname>QuantLib::SamplerRingGaussian::generator_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="110" column="22" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_sampler_ring_gaussian_1ac0da4754bd015b721b2f1f245ade3cdc" prot="private" static="no" mutable="no">
        <type>std::normal_distribution&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::normal_distribution&lt;Real&gt; QuantLib::SamplerRingGaussian::distribution_</definition>
        <argsstring></argsstring>
        <name>distribution_</name>
        <qualifiedname>QuantLib::SamplerRingGaussian::distribution_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="111" column="34" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_sampler_ring_gaussian_1ad7ad0cdb7c868925e8d5e31debbb87df" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::SamplerRingGaussian::lower_</definition>
        <argsstring></argsstring>
        <name>lower_</name>
        <qualifiedname>QuantLib::SamplerRingGaussian::lower_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="112" column="15" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_sampler_ring_gaussian_1a952c36789c6f6f7f14a877001f97ce42" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::SamplerRingGaussian::upper_</definition>
        <argsstring></argsstring>
        <name>upper_</name>
        <qualifiedname>QuantLib::SamplerRingGaussian::upper_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="112" column="22" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_sampler_ring_gaussian_1a942f272519455a93de64c26cce13c860" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::SamplerRingGaussian::SamplerRingGaussian</definition>
        <argsstring>(Array lower, Array upper, unsigned long seed=SeedGenerator::instance().get())</argsstring>
        <name>SamplerRingGaussian</name>
        <qualifiedname>QuantLib::SamplerRingGaussian::SamplerRingGaussian</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
          <declname>lower</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
          <declname>upper</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>seed</declname>
          <defval><ref refid="class_quant_lib_1_1_singleton_1ac412b7766b32f56372a3e966c5f3f386" kindref="member">SeedGenerator::instance</ref>().get()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="89" column="7" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="89" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_sampler_ring_gaussian_1afac9cf1d85f857f5f86c15127c63dc1c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::SamplerRingGaussian::operator()</definition>
        <argsstring>(Array &amp;newPoint, const Array &amp;currentPoint, const Array &amp;temp)</argsstring>
        <name>operator()</name>
        <qualifiedname>QuantLib::SamplerRingGaussian::operator()</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>newPoint</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>currentPoint</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="95" column="14" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="95" bodyend="108"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Gaussian Ring Sampler. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="struct_quant_lib_1_1_sample" kindref="compound">Sample</ref> from normal distribution, but constrained to lie within .boundaries. If the value ends up beyond the boundary, the value is circled back from the other side. </para>
    </detaileddescription>
    <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="86" column="5" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="87" bodyend="113"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_sampler_ring_gaussian_1ac0da4754bd015b721b2f1f245ade3cdc" prot="private" virt="non-virtual"><scope>QuantLib::SamplerRingGaussian</scope><name>distribution_</name></member>
      <member refid="class_quant_lib_1_1_sampler_ring_gaussian_1af8ef1ff27bfe578d992fa044a5468a89" prot="private" virt="non-virtual"><scope>QuantLib::SamplerRingGaussian</scope><name>generator_</name></member>
      <member refid="class_quant_lib_1_1_sampler_ring_gaussian_1ad7ad0cdb7c868925e8d5e31debbb87df" prot="private" virt="non-virtual"><scope>QuantLib::SamplerRingGaussian</scope><name>lower_</name></member>
      <member refid="class_quant_lib_1_1_sampler_ring_gaussian_1afac9cf1d85f857f5f86c15127c63dc1c" prot="public" virt="non-virtual"><scope>QuantLib::SamplerRingGaussian</scope><name>operator()</name></member>
      <member refid="class_quant_lib_1_1_sampler_ring_gaussian_1a942f272519455a93de64c26cce13c860" prot="public" virt="non-virtual"><scope>QuantLib::SamplerRingGaussian</scope><name>SamplerRingGaussian</name></member>
      <member refid="class_quant_lib_1_1_sampler_ring_gaussian_1a952c36789c6f6f7f14a877001f97ce42" prot="private" virt="non-virtual"><scope>QuantLib::SamplerRingGaussian</scope><name>upper_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
