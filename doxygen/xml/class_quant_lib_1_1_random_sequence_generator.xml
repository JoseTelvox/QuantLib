<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_random_sequence_generator" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::RandomSequenceGenerator</compoundname>
    <includes refid="randomsequencegenerator_8hpp" local="no">randomsequencegenerator.hpp</includes>
    <templateparamlist>
      <param>
        <type>class RNG</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_random_sequence_generator_1ad601339b09d69fbcc7a5c188b6653c10" prot="public" static="no">
        <type><ref refid="struct_quant_lib_1_1_sample" kindref="compound">Sample</ref>&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt;</type>
        <definition>typedef Sample&lt;std::vector&lt;Real&gt; &gt; QuantLib::RandomSequenceGenerator&lt; RNG &gt;::sample_type</definition>
        <argsstring></argsstring>
        <name>sample_type</name>
        <qualifiedname>QuantLib::RandomSequenceGenerator::sample_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/randomsequencegenerator.hpp" line="52" column="24" bodyfile="ql/math/randomnumbers/randomsequencegenerator.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_random_sequence_generator_1af010b1553be4f97ef00bc4a86cfbb433" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::RandomSequenceGenerator&lt; RNG &gt;::dimensionality_</definition>
        <argsstring></argsstring>
        <name>dimensionality_</name>
        <qualifiedname>QuantLib::RandomSequenceGenerator::dimensionality_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/randomsequencegenerator.hpp" line="88" column="14" bodyfile="ql/math/randomnumbers/randomsequencegenerator.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_random_sequence_generator_1a1791b125dbbd3decf0c563dd8dfb4691" prot="private" static="no" mutable="no">
        <type>RNG</type>
        <definition>RNG QuantLib::RandomSequenceGenerator&lt; RNG &gt;::rng_</definition>
        <argsstring></argsstring>
        <name>rng_</name>
        <qualifiedname>QuantLib::RandomSequenceGenerator::rng_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/randomsequencegenerator.hpp" line="89" column="13" bodyfile="ql/math/randomnumbers/randomsequencegenerator.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_random_sequence_generator_1ab63a90a1e322033a898619e5e4a2b12c" prot="private" static="no" mutable="yes">
        <type><ref refid="struct_quant_lib_1_1_sample" kindref="compound">sample_type</ref></type>
        <definition>sample_type QuantLib::RandomSequenceGenerator&lt; RNG &gt;::sequence_</definition>
        <argsstring></argsstring>
        <name>sequence_</name>
        <qualifiedname>QuantLib::RandomSequenceGenerator::sequence_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/randomsequencegenerator.hpp" line="90" column="29" bodyfile="ql/math/randomnumbers/randomsequencegenerator.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_random_sequence_generator_1a5019517296dae0817ce8e3c3ff0729ad" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref> &gt;</type>
        <definition>std::vector&lt;BigNatural&gt; QuantLib::RandomSequenceGenerator&lt; RNG &gt;::int32Sequence_</definition>
        <argsstring></argsstring>
        <name>int32Sequence_</name>
        <qualifiedname>QuantLib::RandomSequenceGenerator::int32Sequence_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/randomsequencegenerator.hpp" line="91" column="29" bodyfile="ql/math/randomnumbers/randomsequencegenerator.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_random_sequence_generator_1ae17f37286cdfcc9bbc3071d56d16b92e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::RandomSequenceGenerator&lt; RNG &gt;::RandomSequenceGenerator</definition>
        <argsstring>(Size dimensionality, const RNG &amp;rng)</argsstring>
        <name>RandomSequenceGenerator</name>
        <qualifiedname>QuantLib::RandomSequenceGenerator::RandomSequenceGenerator</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>dimensionality</declname>
        </param>
        <param>
          <type>const RNG &amp;</type>
          <declname>rng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/randomsequencegenerator.hpp" line="53" column="9" bodyfile="ql/math/randomnumbers/randomsequencegenerator.hpp" bodystart="53" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_sequence_generator_1a89318a09436f03f1943ebeb02b26ace1" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::RandomSequenceGenerator&lt; RNG &gt;::RandomSequenceGenerator</definition>
        <argsstring>(Size dimensionality, BigNatural seed=0)</argsstring>
        <name>RandomSequenceGenerator</name>
        <qualifiedname>QuantLib::RandomSequenceGenerator::RandomSequenceGenerator</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>dimensionality</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
          <declname>seed</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/randomsequencegenerator.hpp" line="62" column="18" bodyfile="ql/math/randomnumbers/randomsequencegenerator.hpp" bodystart="62" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_sequence_generator_1aa91abd5aa8a42dd0f81310ee896441dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="struct_quant_lib_1_1_sample" kindref="compound">sample_type</ref> &amp;</type>
        <definition>const sample_type &amp; QuantLib::RandomSequenceGenerator&lt; RNG &gt;::nextSequence</definition>
        <argsstring>() const</argsstring>
        <name>nextSequence</name>
        <qualifiedname>QuantLib::RandomSequenceGenerator::nextSequence</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/randomsequencegenerator.hpp" line="68" column="27" bodyfile="ql/math/randomnumbers/randomsequencegenerator.hpp" bodystart="68" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_sequence_generator_1a7e56cf816984245700fa171eb044675b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref> &gt;</type>
        <definition>std::vector&lt; BigNatural &gt; QuantLib::RandomSequenceGenerator&lt; RNG &gt;::nextInt32Sequence</definition>
        <argsstring>() const</argsstring>
        <name>nextInt32Sequence</name>
        <qualifiedname>QuantLib::RandomSequenceGenerator::nextInt32Sequence</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/randomsequencegenerator.hpp" line="77" column="21" bodyfile="ql/math/randomnumbers/randomsequencegenerator.hpp" bodystart="77" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_sequence_generator_1a5e578fd35f6851341fcfd2f52c72f087" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="struct_quant_lib_1_1_sample" kindref="compound">sample_type</ref> &amp;</type>
        <definition>const sample_type &amp; QuantLib::RandomSequenceGenerator&lt; RNG &gt;::lastSequence</definition>
        <argsstring>() const</argsstring>
        <name>lastSequence</name>
        <qualifiedname>QuantLib::RandomSequenceGenerator::lastSequence</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/randomsequencegenerator.hpp" line="83" column="27" bodyfile="ql/math/randomnumbers/randomsequencegenerator.hpp" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_sequence_generator_1a6d5279c4c47cb1bae0e15ee9e49e5652" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::RandomSequenceGenerator&lt; RNG &gt;::dimension</definition>
        <argsstring>() const</argsstring>
        <name>dimension</name>
        <qualifiedname>QuantLib::RandomSequenceGenerator::dimension</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/randomsequencegenerator.hpp" line="86" column="14" bodyfile="ql/math/randomnumbers/randomsequencegenerator.hpp" bodystart="86" bodyend="86"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Random sequence generator based on a pseudo-random number generator. </para>
    </briefdescription>
    <detaileddescription>
<para>Random sequence generator based on a pseudo-random number generator RNG.</para>
<para>Class RNG must implement the following interface: <programlisting><codeline><highlight class="normal">RNG::sample_type<sp/>RNG::next()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
</programlisting> If a client of this class wants to use the nextInt32Sequence method, class RNG must also implement <programlisting><codeline><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>RNG::nextInt32()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
</programlisting></para>
<para><simplesect kind="warning"><para>do not use with low-discrepancy sequence generator. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="ql/math/randomnumbers/randomsequencegenerator.hpp" line="50" column="5" bodyfile="ql/math/randomnumbers/randomsequencegenerator.hpp" bodystart="50" bodyend="92"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_random_sequence_generator_1a6d5279c4c47cb1bae0e15ee9e49e5652" prot="public" virt="non-virtual"><scope>QuantLib::RandomSequenceGenerator</scope><name>dimension</name></member>
      <member refid="class_quant_lib_1_1_random_sequence_generator_1af010b1553be4f97ef00bc4a86cfbb433" prot="private" virt="non-virtual"><scope>QuantLib::RandomSequenceGenerator</scope><name>dimensionality_</name></member>
      <member refid="class_quant_lib_1_1_random_sequence_generator_1a5019517296dae0817ce8e3c3ff0729ad" prot="private" virt="non-virtual"><scope>QuantLib::RandomSequenceGenerator</scope><name>int32Sequence_</name></member>
      <member refid="class_quant_lib_1_1_random_sequence_generator_1a5e578fd35f6851341fcfd2f52c72f087" prot="public" virt="non-virtual"><scope>QuantLib::RandomSequenceGenerator</scope><name>lastSequence</name></member>
      <member refid="class_quant_lib_1_1_random_sequence_generator_1a7e56cf816984245700fa171eb044675b" prot="public" virt="non-virtual"><scope>QuantLib::RandomSequenceGenerator</scope><name>nextInt32Sequence</name></member>
      <member refid="class_quant_lib_1_1_random_sequence_generator_1aa91abd5aa8a42dd0f81310ee896441dd" prot="public" virt="non-virtual"><scope>QuantLib::RandomSequenceGenerator</scope><name>nextSequence</name></member>
      <member refid="class_quant_lib_1_1_random_sequence_generator_1ae17f37286cdfcc9bbc3071d56d16b92e" prot="public" virt="non-virtual"><scope>QuantLib::RandomSequenceGenerator</scope><name>RandomSequenceGenerator</name></member>
      <member refid="class_quant_lib_1_1_random_sequence_generator_1a89318a09436f03f1943ebeb02b26ace1" prot="public" virt="non-virtual"><scope>QuantLib::RandomSequenceGenerator</scope><name>RandomSequenceGenerator</name></member>
      <member refid="class_quant_lib_1_1_random_sequence_generator_1a1791b125dbbd3decf0c563dd8dfb4691" prot="private" virt="non-virtual"><scope>QuantLib::RandomSequenceGenerator</scope><name>rng_</name></member>
      <member refid="class_quant_lib_1_1_random_sequence_generator_1ad601339b09d69fbcc7a5c188b6653c10" prot="public" virt="non-virtual"><scope>QuantLib::RandomSequenceGenerator</scope><name>sample_type</name></member>
      <member refid="class_quant_lib_1_1_random_sequence_generator_1ab63a90a1e322033a898619e5e4a2b12c" prot="private" virt="non-virtual"><scope>QuantLib::RandomSequenceGenerator</scope><name>sequence_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
