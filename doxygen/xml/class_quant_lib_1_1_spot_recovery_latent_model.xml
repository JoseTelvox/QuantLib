<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_spot_recovery_latent_model" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::SpotRecoveryLatentModel</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_latent_model" prot="public" virt="non-virtual">QuantLib::LatentModel&lt; copulaPolicy &gt;</basecompoundref>
    <includes refid="spotlosslatentmodel_8hpp" local="no">spotlosslatentmodel.hpp</includes>
    <templateparamlist>
      <param>
        <type>class copulaPolicy</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_spot_recovery_latent_model_1a415fb230e52b4c3d8e9e86dcacdaf298" prot="private" static="no">
        <type>copulaPolicy::initTraits</type>
        <definition>typedef copulaPolicy::initTraits QuantLib::SpotRecoveryLatentModel&lt; copulaPolicy &gt;::initTraits</definition>
        <argsstring></argsstring>
        <name>initTraits</name>
        <qualifiedname>QuantLib::SpotRecoveryLatentModel::initTraits</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/spotlosslatentmodel.hpp" line="63" column="51" bodyfile="ql/experimental/credit/spotlosslatentmodel.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_spot_recovery_latent_model_1a08b1ad8e0abaf07ef2366863ebf813d8" prot="private" static="no" mutable="no">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>const std::vector&lt;Real&gt; QuantLib::SpotRecoveryLatentModel&lt; copulaPolicy &gt;::recoveries_</definition>
        <argsstring></argsstring>
        <name>recoveries_</name>
        <qualifiedname>QuantLib::SpotRecoveryLatentModel::recoveries_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/spotlosslatentmodel.hpp" line="51" column="27" bodyfile="ql/experimental/credit/spotlosslatentmodel.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_spot_recovery_latent_model_1aaf0007d916bc1e6e13ab0caf92c48628" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::SpotRecoveryLatentModel&lt; copulaPolicy &gt;::modelA_</definition>
        <argsstring></argsstring>
        <name>modelA_</name>
        <qualifiedname>QuantLib::SpotRecoveryLatentModel::modelA_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/spotlosslatentmodel.hpp" line="52" column="20" bodyfile="ql/experimental/credit/spotlosslatentmodel.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_spot_recovery_latent_model_1a329e6440e7e5a264abe71b33ba75555e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::SpotRecoveryLatentModel&lt; copulaPolicy &gt;::crossIdiosyncFctrs_</definition>
        <argsstring></argsstring>
        <name>crossIdiosyncFctrs_</name>
        <qualifiedname>QuantLib::SpotRecoveryLatentModel::crossIdiosyncFctrs_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/spotlosslatentmodel.hpp" line="54" column="21" bodyfile="ql/experimental/credit/spotlosslatentmodel.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_spot_recovery_latent_model_1a68173677f107b6021d1978ad497c9188" prot="private" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::SpotRecoveryLatentModel&lt; copulaPolicy &gt;::numNames_</definition>
        <argsstring></argsstring>
        <name>numNames_</name>
        <qualifiedname>QuantLib::SpotRecoveryLatentModel::numNames_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/spotlosslatentmodel.hpp" line="55" column="22" bodyfile="ql/experimental/credit/spotlosslatentmodel.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_spot_recovery_latent_model_1a6413b59b27d6d007c2470f59fb813f26" prot="private" static="no" mutable="yes">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_basket" kindref="compound">Basket</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;Basket&gt; QuantLib::SpotRecoveryLatentModel&lt; copulaPolicy &gt;::basket_</definition>
        <argsstring></argsstring>
        <name>basket_</name>
        <qualifiedname>QuantLib::SpotRecoveryLatentModel::basket_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/spotlosslatentmodel.hpp" line="56" column="33" bodyfile="ql/experimental/credit/spotlosslatentmodel.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_spot_recovery_latent_model_1a7d984b8fe174c06cc5c74063dba0ed96" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_l_m_integration" kindref="compound">LMIntegration</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;LMIntegration&gt; QuantLib::SpotRecoveryLatentModel&lt; copulaPolicy &gt;::integration_</definition>
        <argsstring></argsstring>
        <name>integration_</name>
        <qualifiedname>QuantLib::SpotRecoveryLatentModel::integration_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/spotlosslatentmodel.hpp" line="57" column="25" bodyfile="ql/experimental/credit/spotlosslatentmodel.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_spot_recovery_latent_model_1aa425c196023713f9809c02b9f896aaf5" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_l_m_integration" kindref="compound">LMIntegration</ref> &gt; &amp;</type>
        <definition>const ext::shared_ptr&lt; LMIntegration &gt; &amp; QuantLib::SpotRecoveryLatentModel&lt; copulaPolicy &gt;::integration</definition>
        <argsstring>() const override</argsstring>
        <name>integration</name>
        <qualifiedname>QuantLib::SpotRecoveryLatentModel::integration</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_latent_model_1a89eb0c30269ba582f13776a19048c94b">integration</reimplements>
        <briefdescription>
<para>access to integration: </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/spotlosslatentmodel.hpp" line="60" column="29" bodyfile="ql/experimental/credit/spotlosslatentmodel.hpp" bodystart="60" bodyend="60"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_spot_recovery_latent_model_1aadbba4dea8b91ba2987f37bb0a7e29ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::SpotRecoveryLatentModel&lt; CP &gt;::SpotRecoveryLatentModel</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; Real &gt; &gt; &amp;factorWeights, const std::vector&lt; Real &gt; &amp;recoveries, Real modelA, LatentModelIntegrationType::LatentModelIntegrationType integralType, const initTraits &amp;ini=initTraits())</argsstring>
        <name>SpotRecoveryLatentModel</name>
        <qualifiedname>QuantLib::SpotRecoveryLatentModel::SpotRecoveryLatentModel</qualifiedname>
        <param>
          <type>const std::vector&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt; &amp;</type>
          <declname>factorWeights</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>recoveries</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>modelA</declname>
        </param>
        <param>
          <type>LatentModelIntegrationType::LatentModelIntegrationType</type>
          <declname>integralType</declname>
        </param>
        <param>
          <type>const initTraits &amp;</type>
          <declname>ini</declname>
          <defval>initTraits()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>USE STL</para>
        </inbodydescription>
        <location file="ql/experimental/credit/spotlosslatentmodel.hpp" line="65" column="9" bodyfile="ql/experimental/credit/spotlosslatentmodel.hpp" bodystart="338" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_spot_recovery_latent_model_1a1b2622850df88b488cd84137c5685d43" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::SpotRecoveryLatentModel&lt; CP &gt;::resetBasket</definition>
        <argsstring>(const ext::shared_ptr&lt; Basket &gt; &amp;basket) const</argsstring>
        <name>resetBasket</name>
        <qualifiedname>QuantLib::SpotRecoveryLatentModel::resetBasket</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_basket" kindref="compound">Basket</ref> &gt; &amp;</type>
          <declname>basket</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/spotlosslatentmodel.hpp" line="73" column="14" bodyfile="ql/experimental/credit/spotlosslatentmodel.hpp" bodystart="138" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_spot_recovery_latent_model_1a7b7d8848b482a35614b0c6ce20c2fa9a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::SpotRecoveryLatentModel&lt; CP &gt;::conditionalDefaultProbability</definition>
        <argsstring>(const Date &amp;date, Size iName, const std::vector&lt; Real &gt; &amp;mktFactors) const</argsstring>
        <name>conditionalDefaultProbability</name>
        <qualifiedname>QuantLib::SpotRecoveryLatentModel::conditionalDefaultProbability</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/spotlosslatentmodel.hpp" line="74" column="21" bodyfile="ql/experimental/credit/spotlosslatentmodel.hpp" bodystart="147" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_spot_recovery_latent_model_1a75385cd29415ddefaff55fbb8f6e109b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::SpotRecoveryLatentModel&lt; CP &gt;::conditionalDefaultProbability</definition>
        <argsstring>(Probability prob, Size iName, const std::vector&lt; Real &gt; &amp;mktFactors) const</argsstring>
        <name>conditionalDefaultProbability</name>
        <qualifiedname>QuantLib::SpotRecoveryLatentModel::conditionalDefaultProbability</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
          <declname>prob</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/spotlosslatentmodel.hpp" line="76" column="21" bodyfile="ql/experimental/credit/spotlosslatentmodel.hpp" bodystart="161" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_spot_recovery_latent_model_1ad6e848dc6d41d253bb44703e33158283" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::SpotRecoveryLatentModel&lt; CP &gt;::conditionalDefaultProbabilityInvP</definition>
        <argsstring>(Real invCumYProb, Size iName, const std::vector&lt; Real &gt; &amp;m) const</argsstring>
        <name>conditionalDefaultProbabilityInvP</name>
        <qualifiedname>QuantLib::SpotRecoveryLatentModel::conditionalDefaultProbabilityInvP</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>invCumYProb</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/spotlosslatentmodel.hpp" line="78" column="21" bodyfile="ql/experimental/credit/spotlosslatentmodel.hpp" bodystart="181" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_spot_recovery_latent_model_1a29fe3902f367bfbd9f4f145f2c9caf12" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SpotRecoveryLatentModel&lt; CP &gt;::expCondRecovery</definition>
        <argsstring>(const Date &amp;d, Size iName, const std::vector&lt; Real &gt; &amp;mktFactors) const</argsstring>
        <name>expCondRecovery</name>
        <qualifiedname>QuantLib::SpotRecoveryLatentModel::expCondRecovery</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Expected conditional spot recovery rate. Conditional on a set of systemic factors and default returns the integrated attainable recovery values. <simplesect kind="par"><title></title><para>Corresponds to a multifactor generalization of the model in eq. 44 on p.15 of <bold>Extension of Spot Recovery Model for Gaussian Copula</bold> Hui Li. 2009 Only remember that <formula id="103">$\rho_l Z $</formula> there is here (multiple betas): <formula id="104">$ \sum_k \beta_{ik}^l Z_k $</formula> and that <formula id="105">$ \rho_d \rho_l $</formula> there is here: <formula id="106">$ \sum_k \beta_{ik}^d \beta_{ik}^l $</formula> </para>
</simplesect>
<simplesect kind="par"><title></title><para>(d,l corresponds to first and last set of betas) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/spotlosslatentmodel.hpp" line="93" column="14" bodyfile="ql/experimental/credit/spotlosslatentmodel.hpp" bodystart="201" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_spot_recovery_latent_model_1ac2f5512e890c802ec9dc4afebc38d02c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SpotRecoveryLatentModel&lt; CP &gt;::expCondRecoveryP</definition>
        <argsstring>(Real uncondDefP, Size iName, const std::vector&lt; Real &gt; &amp;mktFactors) const</argsstring>
        <name>expCondRecoveryP</name>
        <qualifiedname>QuantLib::SpotRecoveryLatentModel::expCondRecoveryP</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>uncondDefP</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/spotlosslatentmodel.hpp" line="95" column="14" bodyfile="ql/experimental/credit/spotlosslatentmodel.hpp" bodystart="219" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_spot_recovery_latent_model_1afb089221e0fef4119e9aa950db16605c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SpotRecoveryLatentModel&lt; CP &gt;::expCondRecoveryInvPinvRR</definition>
        <argsstring>(Real invUncondDefP, Real invUncondRR, Size iName, const std::vector&lt; Real &gt; &amp;mktFactors) const</argsstring>
        <name>expCondRecoveryInvPinvRR</name>
        <qualifiedname>QuantLib::SpotRecoveryLatentModel::expCondRecoveryInvPinvRR</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>invUncondDefP</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>invUncondRR</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/spotlosslatentmodel.hpp" line="97" column="14" bodyfile="ql/experimental/credit/spotlosslatentmodel.hpp" bodystart="229" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_spot_recovery_latent_model_1a142667e298380df891ce027eff427b79" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SpotRecoveryLatentModel&lt; CP &gt;::conditionalRecovery</definition>
        <argsstring>(Real latentVarSample, Size iName, const Date &amp;d) const</argsstring>
        <name>conditionalRecovery</name>
        <qualifiedname>QuantLib::SpotRecoveryLatentModel::conditionalRecovery</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>latentVarSample</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Implements equation 42 on p.14 (second). Remember that for this call to make sense the sample used must be one leading to a default. Theres no check on this. This member typically to be used within a simulation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/spotlosslatentmodel.hpp" line="104" column="14" bodyfile="ql/experimental/credit/spotlosslatentmodel.hpp" bodystart="256" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_spot_recovery_latent_model_1acd31d1e5570a5b9a1bf5af75616bcc84" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SpotRecoveryLatentModel&lt; CP &gt;::latentRRVarValue</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;allFactors, Size iName) const</argsstring>
        <name>latentRRVarValue</name>
        <qualifiedname>QuantLib::SpotRecoveryLatentModel::latentRRVarValue</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>allFactors</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Due to the way the latent model is splitted in two parts, we call the base class for the default sample and the LM owned here for the RR model sample. This sample only makes sense if it led to a default. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allFactors</parametername>
</parameternamelist>
<parameterdescription>
<para>All sampled factors, default and RR valiables. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iName</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the name for which we want the RR sample</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="todo_1_todo000024"><xreftitle>Todo</xreftitle><xrefdescription><para>Write vector version for all names&apos; RRs </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/spotlosslatentmodel.hpp" line="114" column="14" bodyfile="ql/experimental/credit/spotlosslatentmodel.hpp" bodystart="282" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_spot_recovery_latent_model_1af299285b96c1ee2757e93758987b8c0c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SpotRecoveryLatentModel&lt; CP &gt;::conditionalExpLossRR</definition>
        <argsstring>(const Date &amp;d, Size iName, const std::vector&lt; Real &gt; &amp;mktFactors) const</argsstring>
        <name>conditionalExpLossRR</name>
        <qualifiedname>QuantLib::SpotRecoveryLatentModel::conditionalExpLossRR</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/spotlosslatentmodel.hpp" line="116" column="14" bodyfile="ql/experimental/credit/spotlosslatentmodel.hpp" bodystart="291" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_spot_recovery_latent_model_1adb1bf14c1594876bb9c5175902d2b878" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SpotRecoveryLatentModel&lt; CP &gt;::conditionalExpLossRRInv</definition>
        <argsstring>(Real invP, Real invRR, Size iName, const std::vector&lt; Real &gt; &amp;mktFactors) const</argsstring>
        <name>conditionalExpLossRRInv</name>
        <qualifiedname>QuantLib::SpotRecoveryLatentModel::conditionalExpLossRRInv</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>invP</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>invRR</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/spotlosslatentmodel.hpp" line="118" column="14" bodyfile="ql/experimental/credit/spotlosslatentmodel.hpp" bodystart="308" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_spot_recovery_latent_model_1a8c19d179b30d77e39189b1d35a7296e3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SpotRecoveryLatentModel&lt; CP &gt;::expectedLoss</definition>
        <argsstring>(const Date &amp;d, Size iName) const</argsstring>
        <name>expectedLoss</name>
        <qualifiedname>QuantLib::SpotRecoveryLatentModel::expectedLoss</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Single name expected loss.<simplesect kind="par"><title></title><para>The main reason of this method is for the testing of this model. The model is coherent in that it preserves the single name expected loss and thus is coherent with the single name CDS market when used in the pricing context. i.e. it should match: <formula id="107">$pdef_i(d) \times RR_i $</formula> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/spotlosslatentmodel.hpp" line="126" column="14" bodyfile="ql/experimental/credit/spotlosslatentmodel.hpp" bodystart="319" bodyend="335"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Random spot recovery rate latent variable portfolio model. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="par"><title></title><para>See: </para>
</simplesect>
<simplesect kind="par"><title></title><para><bold>A Spot Stochastic Recovery Extension of the Gaussian Copula</bold> N.Bennani and J.Maetz, MPRA July 2009 </para>
</simplesect>
<simplesect kind="par"><title></title><para><bold>Extension of Spot Recovery model for Gaussian Copula</bold> H.Li, October 2009, MPRA </para>
</simplesect>
<simplesect kind="par"><title></title><para>The model is adpated here for a multifactor set up and a generic copula so it can be used for pricing in single factor mode or for risk metrics in its multifactor version.</para>
</simplesect>
<simplesect kind="par"><title></title><para></para>
</simplesect>
<xrefsect id="todo_1_todo000023"><xreftitle>Todo</xreftitle><xrefdescription><para>Rewrite this model: the distribution of the spot recovery given default could be given as a functional of rr_i with the market factors and the rest of methods depend on this. That would offer a family of models. </para>
<para>Implement eq. 45 to have the EL(t) and be able to integrate the model </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QuantLib::LatentModel&lt; copulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_latent_model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="3">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="1">
        <label>QuantLib::SpotRecoveryLatentModel&lt; copulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_spot_recovery_latent_model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>QuantLib::Handle&lt; QuantLib::Quote &gt;</label>
        <link refid="class_quant_lib_1_1_handle"/>
      </node>
      <node id="2">
        <label>QuantLib::LatentModel&lt; copulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_latent_model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>cachedMktFactor_</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="3">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="1">
        <label>QuantLib::SpotRecoveryLatentModel&lt; copulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_spot_recovery_latent_model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/credit/spotlosslatentmodel.hpp" line="42" column="5" bodyfile="ql/experimental/credit/spotlosslatentmodel.hpp" bodystart="42" bodyend="127"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_latent_model_1a77b6963ac7d92d55caade265c40af9e4" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>allFactorCumulInverter</name></member>
      <member refid="class_quant_lib_1_1_spot_recovery_latent_model_1a6413b59b27d6d007c2470f59fb813f26" prot="private" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>basket_</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a68e201047207fd50ca0725a2cb7a21d4" prot="protected" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>cachedMktFactor_</name></member>
      <member refid="class_quant_lib_1_1_spot_recovery_latent_model_1a7b7d8848b482a35614b0c6ce20c2fa9a" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>conditionalDefaultProbability</name></member>
      <member refid="class_quant_lib_1_1_spot_recovery_latent_model_1a75385cd29415ddefaff55fbb8f6e109b" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>conditionalDefaultProbability</name></member>
      <member refid="class_quant_lib_1_1_spot_recovery_latent_model_1ad6e848dc6d41d253bb44703e33158283" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>conditionalDefaultProbabilityInvP</name></member>
      <member refid="class_quant_lib_1_1_spot_recovery_latent_model_1af299285b96c1ee2757e93758987b8c0c" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>conditionalExpLossRR</name></member>
      <member refid="class_quant_lib_1_1_spot_recovery_latent_model_1adb1bf14c1594876bb9c5175902d2b878" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>conditionalExpLossRRInv</name></member>
      <member refid="class_quant_lib_1_1_spot_recovery_latent_model_1a142667e298380df891ce027eff427b79" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>conditionalRecovery</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1ae56d8a54eabfb0d0216f472c727b65ac" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>copula</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1aa3dbc85525bd7e1dfbf3a41591cabe27" prot="protected" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>copula_</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1aad1fd370b3f36c3cf24b661d189fed01" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>copulaType</name></member>
      <member refid="class_quant_lib_1_1_spot_recovery_latent_model_1a329e6440e7e5a264abe71b33ba75555e" prot="private" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>crossIdiosyncFctrs_</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1af159333d575c0b252de3c71371919dc2" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>cumulativeY</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1ae64724a9ecdc4cb7dadd555b019da10b" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>cumulativeZ</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a9711849d61e8bc79608424661ac9dde2" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>density</name></member>
      <member refid="class_quant_lib_1_1_spot_recovery_latent_model_1a29fe3902f367bfbd9f4f145f2c9caf12" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>expCondRecovery</name></member>
      <member refid="class_quant_lib_1_1_spot_recovery_latent_model_1afb089221e0fef4119e9aa950db16605c" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>expCondRecoveryInvPinvRR</name></member>
      <member refid="class_quant_lib_1_1_spot_recovery_latent_model_1ac2f5512e890c802ec9dc4afebc38d02c" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>expCondRecoveryP</name></member>
      <member refid="class_quant_lib_1_1_spot_recovery_latent_model_1a8c19d179b30d77e39189b1d35a7296e3" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>expectedLoss</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a9058f44d45963e20631cf813f500ed50" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>factorWeights</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a416b1acb0a0321ba7eac54c1bc1c494d" prot="protected" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>factorWeights_</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1ad630746a257d3e970ecf83cd47878cd3" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>idiosyncFctrs</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a4f058b49788035828bbe2b3e78db9ebe" prot="protected" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>idiosyncFctrs_</name></member>
      <member refid="class_quant_lib_1_1_spot_recovery_latent_model_1a415fb230e52b4c3d8e9e86dcacdaf298" prot="private" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>initTraits</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a8f73847f26e632e54de23dc218e44875" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>integratedExpectedValue</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a450b60907aff21aa12ef61c50206ec4b" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>integratedExpectedValueV</name></member>
      <member refid="class_quant_lib_1_1_spot_recovery_latent_model_1aa425c196023713f9809c02b9f896aaf5" prot="protected" virt="virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>integration</name></member>
      <member refid="class_quant_lib_1_1_spot_recovery_latent_model_1a7d984b8fe174c06cc5c74063dba0ed96" prot="private" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>integration_</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a10f1e843503876609d1cb14ac9b26c8e" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>inverseCumulativeDensity</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a8f4c7a3b52e2a50a88b3a2e67cc1109b" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>inverseCumulativeY</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a28355f257003546d33fda003452c820e" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>inverseCumulativeZ</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a2423b7437ca2ba9796e153bd9b9df050" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>LatentModel</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a250ac646a6be88e253dc37c2620de9dd" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>LatentModel</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a762ae56003287bdd2995e5a46a8c9f57" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>LatentModel</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a4200b7490c6d6690d2ec1df95d4862ba" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>LatentModel</name></member>
      <member refid="class_quant_lib_1_1_spot_recovery_latent_model_1acd31d1e5570a5b9a1bf5af75616bcc84" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>latentRRVarValue</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a9d3034be325054187dfafbd5f7ef1890" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>latentVariableCorrel</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1aede4740894962881f21e1522349eb287" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>latentVarValue</name></member>
      <member refid="class_quant_lib_1_1_spot_recovery_latent_model_1aaf0007d916bc1e6e13ab0caf92c48628" prot="private" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>modelA_</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1acd1daf4e28ce8ab5233065be60fd2896" prot="protected" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>nFactors_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1ad410d410b17c524efa114598a0455936" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>numFactors</name></member>
      <member refid="class_quant_lib_1_1_spot_recovery_latent_model_1a68173677f107b6021d1978ad497c9188" prot="private" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>numNames_</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a752c04c15550a49537c7eb0557bd6b16" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>numTotalFactors</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a43e8cf454283157cab9a90b5aa261409" prot="protected" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>nVariables_</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LatentModel&lt; copulaPolicy &gt;::"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LatentModel&lt; copulaPolicy &gt;::"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LatentModel&lt; copulaPolicy &gt;::"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LatentModel&lt; copulaPolicy &gt;::QuantLib::Observable::"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_spot_recovery_latent_model_1a08b1ad8e0abaf07ef2366863ebf813d8" prot="private" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>recoveries_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_spot_recovery_latent_model_1a1b2622850df88b488cd84137c5685d43" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>resetBasket</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a1dedcee7cecd341a0ed6131577b2f48e" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>size</name></member>
      <member refid="class_quant_lib_1_1_spot_recovery_latent_model_1aadbba4dea8b91ba2987f37bb0a7e29ee" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>SpotRecoveryLatentModel</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a25404a7f39fe1422f6e4dd1fb9b67115" prot="public" virt="virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::SpotRecoveryLatentModel</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
