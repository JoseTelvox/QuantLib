<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_analytic_double_barrier_engine" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::AnalyticDoubleBarrierEngine</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_double_barrier_option_1_1engine" prot="public" virt="non-virtual">QuantLib::DoubleBarrierOption::engine</basecompoundref>
    <includes refid="analyticdoublebarrierengine_8hpp" local="no">analyticdoublebarrierengine.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_double_barrier_engine_1a32d56cc01c00733ff78cb54f09ea1f32" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;GeneralizedBlackScholesProcess&gt; QuantLib::AnalyticDoubleBarrierEngine::process_</definition>
        <argsstring></argsstring>
        <name>process_</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierEngine::process_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" line="56" column="25" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_double_barrier_engine_1a0f7a0849ceb5cb6b800ae69b87b10659" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_cumulative_normal_distribution" kindref="compound">CumulativeNormalDistribution</ref></type>
        <definition>CumulativeNormalDistribution QuantLib::AnalyticDoubleBarrierEngine::f_</definition>
        <argsstring></argsstring>
        <name>f_</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierEngine::f_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" line="57" column="38" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_double_barrier_engine_1a2cc47bd487c096f74c09561fc639572f" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int QuantLib::AnalyticDoubleBarrierEngine::series_</definition>
        <argsstring></argsstring>
        <name>series_</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierEngine::series_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" line="58" column="13" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_double_barrier_engine_1a1e364f252beac1558156c8668849b34e" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::AnalyticDoubleBarrierEngine::AnalyticDoubleBarrierEngine</definition>
        <argsstring>(ext::shared_ptr&lt; GeneralizedBlackScholesProcess &gt; process, int series=5)</argsstring>
        <name>AnalyticDoubleBarrierEngine</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierEngine::AnalyticDoubleBarrierEngine</qualifiedname>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt;</type>
          <declname>process</declname>
        </param>
        <param>
          <type>int</type>
          <declname>series</declname>
          <defval>5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" line="51" column="18" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierengine.cpp" bodystart="27" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_double_barrier_engine_1a86ed94426a402db21504d47545fa1d2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::AnalyticDoubleBarrierEngine::calculate</definition>
        <argsstring>() const override</argsstring>
        <name>calculate</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierEngine::calculate</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_pricing_engine_1ad2be11cff80d9792f0cc8231711fcb06">calculate</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" line="53" column="14" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierengine.cpp" bodystart="33" bodyend="97"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_double_barrier_engine_1adec7191e9e730990fdae3fe77a263696" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticDoubleBarrierEngine::underlying</definition>
        <argsstring>() const</argsstring>
        <name>underlying</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierEngine::underlying</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" line="60" column="14" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierengine.cpp" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_double_barrier_engine_1aa5259fa9eb86b6136e4b49655806aa6f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticDoubleBarrierEngine::strike</definition>
        <argsstring>() const</argsstring>
        <name>strike</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierEngine::strike</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" line="61" column="14" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierengine.cpp" bodystart="104" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_double_barrier_engine_1a6c0aec047fceb71ffeb58ceb90db0e69" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        <definition>Time QuantLib::AnalyticDoubleBarrierEngine::residualTime</definition>
        <argsstring>() const</argsstring>
        <name>residualTime</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierEngine::residualTime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" line="62" column="14" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierengine.cpp" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_double_barrier_engine_1a5ccec213f990850a76aa7170e7e10b49" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref></type>
        <definition>Volatility QuantLib::AnalyticDoubleBarrierEngine::volatility</definition>
        <argsstring>() const</argsstring>
        <name>volatility</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierEngine::volatility</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" line="63" column="20" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierengine.cpp" bodystart="115" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_double_barrier_engine_1a174c03ce32fc18aac29b5ef59f26e6aa" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticDoubleBarrierEngine::volatilitySquared</definition>
        <argsstring>() const</argsstring>
        <name>volatilitySquared</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierEngine::volatilitySquared</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" line="64" column="14" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierengine.cpp" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_double_barrier_engine_1ae8e0f96d6e8e5294eedff10baa8d160a" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticDoubleBarrierEngine::barrierLo</definition>
        <argsstring>() const</argsstring>
        <name>barrierLo</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierEngine::barrierLo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" line="65" column="14" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierengine.cpp" bodystart="127" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_double_barrier_engine_1af17553252f816de686f7d58c3f2090f9" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticDoubleBarrierEngine::barrierHi</definition>
        <argsstring>() const</argsstring>
        <name>barrierHi</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierEngine::barrierHi</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" line="66" column="14" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierengine.cpp" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_double_barrier_engine_1a514560524a9089ac85ebf5da9e4fdcf7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticDoubleBarrierEngine::stdDeviation</definition>
        <argsstring>() const</argsstring>
        <name>stdDeviation</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierEngine::stdDeviation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" line="67" column="14" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierengine.cpp" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_double_barrier_engine_1a3af6a30a3a76bbeb517747ef163fa503" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::AnalyticDoubleBarrierEngine::riskFreeRate</definition>
        <argsstring>() const</argsstring>
        <name>riskFreeRate</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierEngine::riskFreeRate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" line="68" column="14" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierengine.cpp" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_double_barrier_engine_1a7fdd1f60bb5c1779e1ccde272ce2434e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a05e8e288a4bdedfe5b4e16d8cec14f1c" kindref="member">DiscountFactor</ref></type>
        <definition>DiscountFactor QuantLib::AnalyticDoubleBarrierEngine::riskFreeDiscount</definition>
        <argsstring>() const</argsstring>
        <name>riskFreeDiscount</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierEngine::riskFreeDiscount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" line="69" column="24" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierengine.cpp" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_double_barrier_engine_1a46075cb68e12c145112ab7e93a03c4e2" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::AnalyticDoubleBarrierEngine::dividendYield</definition>
        <argsstring>() const</argsstring>
        <name>dividendYield</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierEngine::dividendYield</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" line="70" column="14" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierengine.cpp" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_double_barrier_engine_1a30a9952e2e1d791206c93e937e56bb4a" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::AnalyticDoubleBarrierEngine::costOfCarry</definition>
        <argsstring>() const</argsstring>
        <name>costOfCarry</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierEngine::costOfCarry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" line="71" column="14" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierengine.cpp" bodystart="153" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_double_barrier_engine_1a80812915f169ab478bff5b392f784cc2" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a05e8e288a4bdedfe5b4e16d8cec14f1c" kindref="member">DiscountFactor</ref></type>
        <definition>DiscountFactor QuantLib::AnalyticDoubleBarrierEngine::dividendDiscount</definition>
        <argsstring>() const</argsstring>
        <name>dividendDiscount</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierEngine::dividendDiscount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" line="72" column="24" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierengine.cpp" bodystart="149" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_double_barrier_engine_1a642c71b296da757dfd4ac76a387f75f0" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticDoubleBarrierEngine::vanillaEquivalent</definition>
        <argsstring>() const</argsstring>
        <name>vanillaEquivalent</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierEngine::vanillaEquivalent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" line="73" column="14" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierengine.cpp" bodystart="157" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_double_barrier_engine_1a69d14210b1905746cc820a41506025fe" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticDoubleBarrierEngine::callKO</definition>
        <argsstring>() const</argsstring>
        <name>callKO</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierEngine::callKO</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" line="74" column="14" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierengine.cpp" bodystart="169" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_double_barrier_engine_1adf8b872574aff51d1878fc4dba3355ac" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticDoubleBarrierEngine::putKO</definition>
        <argsstring>() const</argsstring>
        <name>putKO</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierEngine::putKO</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" line="75" column="14" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierengine.cpp" bodystart="205" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_double_barrier_engine_1a7b63d60b15e2f2b5422cd9a5b4859d44" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticDoubleBarrierEngine::callKI</definition>
        <argsstring>() const</argsstring>
        <name>callKI</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierEngine::callKI</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" line="76" column="14" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierengine.cpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_double_barrier_engine_1adead385b2f7faedf6bb9d70dbda434ae" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticDoubleBarrierEngine::putKI</definition>
        <argsstring>() const</argsstring>
        <name>putKI</name>
        <qualifiedname>QuantLib::AnalyticDoubleBarrierEngine::putKI</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" line="77" column="14" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierengine.cpp" bodystart="236" bodyend="239"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Pricing engine for double barrier european options using analytical formulae. </para>
    </briefdescription>
    <detaileddescription>
<para>The formulas are taken from &quot;The complete guide to option pricing formulas 2nd Ed&quot;, E.G. Haug, McGraw-Hill, p.156 and following. Implements the Ikeda and Kunitomo series (see &quot;Pricing Options with 
 Curved Boundaries&quot; Mathematical Finance 2/1992"). This code handles only flat barriers</para>
<para><simplesect kind="note"><para>the formula holds only when strike is in the barrier range</para>
</simplesect>
<xrefsect id="test_1_test000104"><xreftitle>Test</xreftitle><xrefdescription><para>the correctness of the returned value is tested by reproducing results available in literature. </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::AnalyticDoubleBarrierEngine</label>
        <link refid="class_quant_lib_1_1_analytic_double_barrier_engine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::DoubleBarrierOption::engine</label>
        <link refid="class_quant_lib_1_1_double_barrier_option_1_1engine"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::GenericEngine&lt; DoubleBarrierOption::arguments, DoubleBarrierOption::results &gt;</label>
        <link refid="class_quant_lib_1_1_generic_engine"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="6">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="4">
        <label>QuantLib::PricingEngine</label>
        <link refid="class_quant_lib_1_1_pricing_engine"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8">
        <label>OneAssetOption::arguments</label>
      </node>
      <node id="1">
        <label>QuantLib::AnalyticDoubleBarrierEngine</label>
        <link refid="class_quant_lib_1_1_analytic_double_barrier_engine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::DoubleBarrierOption::arguments</label>
        <link refid="class_quant_lib_1_1_double_barrier_option_1_1arguments"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::DoubleBarrierOption::engine</label>
        <link refid="class_quant_lib_1_1_double_barrier_option_1_1engine"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::GenericEngine&lt; DoubleBarrierOption::arguments, DoubleBarrierOption::results &gt;</label>
        <link refid="class_quant_lib_1_1_generic_engine"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>arguments_</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="6">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="4">
        <label>QuantLib::PricingEngine</label>
        <link refid="class_quant_lib_1_1_pricing_engine"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" line="49" column="5" bodyfile="ql/pricingengines/barrier/analyticdoublebarrierengine.hpp" bodystart="49" bodyend="78"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_engine_1a1e364f252beac1558156c8668849b34e" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>AnalyticDoubleBarrierEngine</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1ad2371cdbafa1989afb0e4733b1212c0d" prot="protected" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>arguments_</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_engine_1af17553252f816de686f7d58c3f2090f9" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>barrierHi</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_engine_1ae8e0f96d6e8e5294eedff10baa8d160a" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>barrierLo</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_engine_1a86ed94426a402db21504d47545fa1d2d" prot="public" virt="virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_engine_1a7b63d60b15e2f2b5422cd9a5b4859d44" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>callKI</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_engine_1a69d14210b1905746cc820a41506025fe" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>callKO</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_engine_1a30a9952e2e1d791206c93e937e56bb4a" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>costOfCarry</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_engine_1a80812915f169ab478bff5b392f784cc2" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>dividendDiscount</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_engine_1a46075cb68e12c145112ab7e93a03c4e2" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>dividendYield</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_engine_1a0f7a0849ceb5cb6b800ae69b87b10659" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>f_</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1ad9c6e8dc65ca072d5e6e17640d74db3e" prot="public" virt="virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>getArguments</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1aea8272ef6e5e0ea1cffadfed0454fa88" prot="public" virt="virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>getResults</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_engine_1a32d56cc01c00733ff78cb54f09ea1f32" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>process_</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_engine_1adead385b2f7faedf6bb9d70dbda434ae" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>putKI</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_engine_1adf8b872574aff51d1878fc4dba3355ac" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>putKO</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1a81c5390ba1e713e57ca87d5f841d37f2" prot="public" virt="virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>reset</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_engine_1a6c0aec047fceb71ffeb58ceb90db0e69" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>residualTime</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1a41281f2ea4990dbce90be1f9f2e231f6" prot="protected" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>results_</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_engine_1a7fdd1f60bb5c1779e1ccde272ce2434e" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>riskFreeDiscount</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_engine_1a3af6a30a3a76bbeb517747ef163fa503" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>riskFreeRate</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_engine_1a2cc47bd487c096f74c09561fc639572f" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>series_</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_engine_1a514560524a9089ac85ebf5da9e4fdcf7" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>stdDeviation</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_engine_1aa5259fa9eb86b6136e4b49655806aa6f" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>strike</name></member>
      <member refid="class_quant_lib_1_1_double_barrier_option_1_1engine_1ab45a3ebb342bcbd3fa0075f498e46717" prot="protected" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>triggered</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_engine_1adec7191e9e730990fdae3fe77a263696" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>underlying</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1aaf5ef54d9e1abf8b1b50b48804edf3dc" prot="public" virt="virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_engine_1a642c71b296da757dfd4ac76a387f75f0" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>vanillaEquivalent</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_engine_1a5ccec213f990850a76aa7170e7e10b49" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>volatility</name></member>
      <member refid="class_quant_lib_1_1_analytic_double_barrier_engine_1a174c03ce32fc18aac29b5ef59f26e6aa" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>volatilitySquared</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_pricing_engine_1a66b279a54578cd7e60d402e5147eb526" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticDoubleBarrierEngine</scope><name>~PricingEngine</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
