<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_make_m_c_barrier_engine" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::MakeMCBarrierEngine</compoundname>
    <includes refid="mcbarrierengine_8hpp" local="no">mcbarrierengine.hpp</includes>
    <templateparamlist>
      <param>
        <type>class RNG</type>
        <defval><ref refid="namespace_quant_lib_1a68b9aaf5f0c17983506b1a1db8575ab0" kindref="member">PseudoRandom</ref></defval>
      </param>
      <param>
        <type>class S</type>
        <defval><ref refid="namespace_quant_lib_1ae2e788da35d2b866040a03b96227ee6e" kindref="member">Statistics</ref></defval>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_barrier_engine_1adb82ec20e155873f0e75b8e8d86014cb" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;GeneralizedBlackScholesProcess&gt; QuantLib::MakeMCBarrierEngine&lt; RNG, S &gt;::process_</definition>
        <argsstring></argsstring>
        <name>process_</name>
        <qualifiedname>QuantLib::MakeMCBarrierEngine::process_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/mcbarrierengine.hpp" line="132" column="25" bodyfile="ql/pricingengines/barrier/mcbarrierengine.hpp" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_barrier_engine_1a1b65b2d29fd6f3310f820b1c7b628c11" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::MakeMCBarrierEngine&lt; RNG, S &gt;::brownianBridge_</definition>
        <argsstring></argsstring>
        <name>brownianBridge_</name>
        <qualifiedname>QuantLib::MakeMCBarrierEngine::brownianBridge_</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/mcbarrierengine.hpp" line="133" column="14" bodyfile="ql/pricingengines/barrier/mcbarrierengine.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_barrier_engine_1a497f2f33fd9779b9d3e321e24fea5aff" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::MakeMCBarrierEngine&lt; RNG, S &gt;::antithetic_</definition>
        <argsstring></argsstring>
        <name>antithetic_</name>
        <qualifiedname>QuantLib::MakeMCBarrierEngine::antithetic_</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/mcbarrierengine.hpp" line="133" column="31" bodyfile="ql/pricingengines/barrier/mcbarrierengine.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_barrier_engine_1a6d895664b13bf3249f571d7133b22fff" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::MakeMCBarrierEngine&lt; RNG, S &gt;::biased_</definition>
        <argsstring></argsstring>
        <name>biased_</name>
        <qualifiedname>QuantLib::MakeMCBarrierEngine::biased_</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/mcbarrierengine.hpp" line="133" column="44" bodyfile="ql/pricingengines/barrier/mcbarrierengine.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_barrier_engine_1af4b0ef87332e2ae2058d42f54cecd333" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MakeMCBarrierEngine&lt; RNG, S &gt;::steps_</definition>
        <argsstring></argsstring>
        <name>steps_</name>
        <qualifiedname>QuantLib::MakeMCBarrierEngine::steps_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/mcbarrierengine.hpp" line="134" column="14" bodyfile="ql/pricingengines/barrier/mcbarrierengine.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_barrier_engine_1a1d02b56a896a997a29f07ebc3ebfd1b9" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MakeMCBarrierEngine&lt; RNG, S &gt;::stepsPerYear_</definition>
        <argsstring></argsstring>
        <name>stepsPerYear_</name>
        <qualifiedname>QuantLib::MakeMCBarrierEngine::stepsPerYear_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/mcbarrierengine.hpp" line="134" column="21" bodyfile="ql/pricingengines/barrier/mcbarrierengine.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_barrier_engine_1aa66f182411269fa90f35e29dd3f9d0d8" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MakeMCBarrierEngine&lt; RNG, S &gt;::samples_</definition>
        <argsstring></argsstring>
        <name>samples_</name>
        <qualifiedname>QuantLib::MakeMCBarrierEngine::samples_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/mcbarrierengine.hpp" line="134" column="35" bodyfile="ql/pricingengines/barrier/mcbarrierengine.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_barrier_engine_1a24aee260ba383a94e06bd1a2add54072" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MakeMCBarrierEngine&lt; RNG, S &gt;::maxSamples_</definition>
        <argsstring></argsstring>
        <name>maxSamples_</name>
        <qualifiedname>QuantLib::MakeMCBarrierEngine::maxSamples_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/mcbarrierengine.hpp" line="134" column="44" bodyfile="ql/pricingengines/barrier/mcbarrierengine.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_barrier_engine_1aabc736b2d968aad5cb97066ed31fcb02" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::MakeMCBarrierEngine&lt; RNG, S &gt;::tolerance_</definition>
        <argsstring></argsstring>
        <name>tolerance_</name>
        <qualifiedname>QuantLib::MakeMCBarrierEngine::tolerance_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/mcbarrierengine.hpp" line="135" column="14" bodyfile="ql/pricingengines/barrier/mcbarrierengine.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_barrier_engine_1a9a96ca133f8aba1306ff3d649758babe" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
        <definition>BigNatural QuantLib::MakeMCBarrierEngine&lt; RNG, S &gt;::seed_</definition>
        <argsstring></argsstring>
        <name>seed_</name>
        <qualifiedname>QuantLib::MakeMCBarrierEngine::seed_</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/mcbarrierengine.hpp" line="136" column="20" bodyfile="ql/pricingengines/barrier/mcbarrierengine.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_barrier_engine_1a6f5f5c753f3292b96d60060742c0a436" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MakeMCBarrierEngine&lt; RNG, S &gt;::MakeMCBarrierEngine</definition>
        <argsstring>(ext::shared_ptr&lt; GeneralizedBlackScholesProcess &gt;)</argsstring>
        <name>MakeMCBarrierEngine</name>
        <qualifiedname>QuantLib::MakeMCBarrierEngine::MakeMCBarrierEngine</qualifiedname>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt;</type>
          <defname>process</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/mcbarrierengine.hpp" line="118" column="9" bodyfile="ql/pricingengines/barrier/mcbarrierengine.hpp" bodystart="274" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_barrier_engine_1a5eb6d40d2823e97e3f15a58cf6ad6ea4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_barrier_engine" kindref="compound">MakeMCBarrierEngine</ref> &amp;</type>
        <definition>MakeMCBarrierEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCBarrierEngine&lt; RNG, S &gt;::withSteps</definition>
        <argsstring>(Size steps)</argsstring>
        <name>withSteps</name>
        <qualifiedname>QuantLib::MakeMCBarrierEngine::withSteps</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>steps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/mcbarrierengine.hpp" line="120" column="29" bodyfile="ql/pricingengines/barrier/mcbarrierengine.hpp" bodystart="281" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_barrier_engine_1a537a5b5209bc372a46a09faaa8cd719f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_barrier_engine" kindref="compound">MakeMCBarrierEngine</ref> &amp;</type>
        <definition>MakeMCBarrierEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCBarrierEngine&lt; RNG, S &gt;::withStepsPerYear</definition>
        <argsstring>(Size steps)</argsstring>
        <name>withStepsPerYear</name>
        <qualifiedname>QuantLib::MakeMCBarrierEngine::withStepsPerYear</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>steps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/mcbarrierengine.hpp" line="121" column="29" bodyfile="ql/pricingengines/barrier/mcbarrierengine.hpp" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_barrier_engine_1af3991ca5ed1a77a8758feba621fc1e48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_barrier_engine" kindref="compound">MakeMCBarrierEngine</ref> &amp;</type>
        <definition>MakeMCBarrierEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCBarrierEngine&lt; RNG, S &gt;::withBrownianBridge</definition>
        <argsstring>(bool b=true)</argsstring>
        <name>withBrownianBridge</name>
        <qualifiedname>QuantLib::MakeMCBarrierEngine::withBrownianBridge</qualifiedname>
        <param>
          <type>bool</type>
          <declname>b</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/mcbarrierengine.hpp" line="122" column="29" bodyfile="ql/pricingengines/barrier/mcbarrierengine.hpp" bodystart="295" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_barrier_engine_1aba133f054ea7fecbbc1005c5e157324c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_barrier_engine" kindref="compound">MakeMCBarrierEngine</ref> &amp;</type>
        <definition>MakeMCBarrierEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCBarrierEngine&lt; RNG, S &gt;::withAntitheticVariate</definition>
        <argsstring>(bool b=true)</argsstring>
        <name>withAntitheticVariate</name>
        <qualifiedname>QuantLib::MakeMCBarrierEngine::withAntitheticVariate</qualifiedname>
        <param>
          <type>bool</type>
          <declname>b</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/mcbarrierengine.hpp" line="123" column="29" bodyfile="ql/pricingengines/barrier/mcbarrierengine.hpp" bodystart="302" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_barrier_engine_1a8bac556b1a9df061f8dd459a66d06b6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_barrier_engine" kindref="compound">MakeMCBarrierEngine</ref> &amp;</type>
        <definition>MakeMCBarrierEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCBarrierEngine&lt; RNG, S &gt;::withSamples</definition>
        <argsstring>(Size samples)</argsstring>
        <name>withSamples</name>
        <qualifiedname>QuantLib::MakeMCBarrierEngine::withSamples</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>samples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/mcbarrierengine.hpp" line="124" column="29" bodyfile="ql/pricingengines/barrier/mcbarrierengine.hpp" bodystart="309" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_barrier_engine_1ade1114f509ab0579b46aacca9d0df364" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_barrier_engine" kindref="compound">MakeMCBarrierEngine</ref> &amp;</type>
        <definition>MakeMCBarrierEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCBarrierEngine&lt; RNG, S &gt;::withAbsoluteTolerance</definition>
        <argsstring>(Real tolerance)</argsstring>
        <name>withAbsoluteTolerance</name>
        <qualifiedname>QuantLib::MakeMCBarrierEngine::withAbsoluteTolerance</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/mcbarrierengine.hpp" line="125" column="29" bodyfile="ql/pricingengines/barrier/mcbarrierengine.hpp" bodystart="318" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_barrier_engine_1aa699bfed7e288151ae94cb6bacad1508" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_barrier_engine" kindref="compound">MakeMCBarrierEngine</ref> &amp;</type>
        <definition>MakeMCBarrierEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCBarrierEngine&lt; RNG, S &gt;::withMaxSamples</definition>
        <argsstring>(Size samples)</argsstring>
        <name>withMaxSamples</name>
        <qualifiedname>QuantLib::MakeMCBarrierEngine::withMaxSamples</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>samples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/mcbarrierengine.hpp" line="126" column="29" bodyfile="ql/pricingengines/barrier/mcbarrierengine.hpp" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_barrier_engine_1a5fbd2dfcdf3c34d66a49ba529b24ae13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_barrier_engine" kindref="compound">MakeMCBarrierEngine</ref> &amp;</type>
        <definition>MakeMCBarrierEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCBarrierEngine&lt; RNG, S &gt;::withBias</definition>
        <argsstring>(bool b=true)</argsstring>
        <name>withBias</name>
        <qualifiedname>QuantLib::MakeMCBarrierEngine::withBias</qualifiedname>
        <param>
          <type>bool</type>
          <declname>b</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/mcbarrierengine.hpp" line="127" column="29" bodyfile="ql/pricingengines/barrier/mcbarrierengine.hpp" bodystart="337" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_barrier_engine_1a9a8118b5a8877af72e41336a9a1727ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_barrier_engine" kindref="compound">MakeMCBarrierEngine</ref> &amp;</type>
        <definition>MakeMCBarrierEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCBarrierEngine&lt; RNG, S &gt;::withSeed</definition>
        <argsstring>(BigNatural seed)</argsstring>
        <name>withSeed</name>
        <qualifiedname>QuantLib::MakeMCBarrierEngine::withSeed</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/mcbarrierengine.hpp" line="128" column="29" bodyfile="ql/pricingengines/barrier/mcbarrierengine.hpp" bodystart="344" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_barrier_engine_1af112a5357bd786b5f44dc327fa27d1dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MakeMCBarrierEngine&lt; RNG, S &gt;::operator ext::shared_ptr&lt; PricingEngine &gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator ext::shared_ptr&lt; PricingEngine &gt;</name>
        <qualifiedname>QuantLib::MakeMCBarrierEngine::shared_ptr&lt; PricingEngine &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/mcbarrierengine.hpp" line="130" column="9" bodyfile="ql/pricingengines/barrier/mcbarrierengine.hpp" bodystart="351" bodyend="367"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Monte Carlo barrier-option engine factory. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ql/pricingengines/barrier/mcbarrierengine.hpp" line="116" column="5" bodyfile="ql/pricingengines/barrier/mcbarrierengine.hpp" bodystart="116" bodyend="137"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_make_m_c_barrier_engine_1a497f2f33fd9779b9d3e321e24fea5aff" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCBarrierEngine</scope><name>antithetic_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_barrier_engine_1a6d895664b13bf3249f571d7133b22fff" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCBarrierEngine</scope><name>biased_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_barrier_engine_1a1b65b2d29fd6f3310f820b1c7b628c11" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCBarrierEngine</scope><name>brownianBridge_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_barrier_engine_1a6f5f5c753f3292b96d60060742c0a436" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCBarrierEngine</scope><name>MakeMCBarrierEngine</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_barrier_engine_1a24aee260ba383a94e06bd1a2add54072" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCBarrierEngine</scope><name>maxSamples_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_barrier_engine_1af112a5357bd786b5f44dc327fa27d1dd" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCBarrierEngine</scope><name>operator ext::shared_ptr&lt; PricingEngine &gt;</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_barrier_engine_1adb82ec20e155873f0e75b8e8d86014cb" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCBarrierEngine</scope><name>process_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_barrier_engine_1aa66f182411269fa90f35e29dd3f9d0d8" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCBarrierEngine</scope><name>samples_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_barrier_engine_1a9a96ca133f8aba1306ff3d649758babe" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCBarrierEngine</scope><name>seed_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_barrier_engine_1af4b0ef87332e2ae2058d42f54cecd333" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCBarrierEngine</scope><name>steps_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_barrier_engine_1a1d02b56a896a997a29f07ebc3ebfd1b9" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCBarrierEngine</scope><name>stepsPerYear_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_barrier_engine_1aabc736b2d968aad5cb97066ed31fcb02" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCBarrierEngine</scope><name>tolerance_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_barrier_engine_1ade1114f509ab0579b46aacca9d0df364" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCBarrierEngine</scope><name>withAbsoluteTolerance</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_barrier_engine_1aba133f054ea7fecbbc1005c5e157324c" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCBarrierEngine</scope><name>withAntitheticVariate</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_barrier_engine_1a5fbd2dfcdf3c34d66a49ba529b24ae13" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCBarrierEngine</scope><name>withBias</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_barrier_engine_1af3991ca5ed1a77a8758feba621fc1e48" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCBarrierEngine</scope><name>withBrownianBridge</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_barrier_engine_1aa699bfed7e288151ae94cb6bacad1508" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCBarrierEngine</scope><name>withMaxSamples</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_barrier_engine_1a8bac556b1a9df061f8dd459a66d06b6e" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCBarrierEngine</scope><name>withSamples</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_barrier_engine_1a9a8118b5a8877af72e41336a9a1727ad" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCBarrierEngine</scope><name>withSeed</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_barrier_engine_1a5eb6d40d2823e97e3f15a58cf6ad6ea4" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCBarrierEngine</scope><name>withSteps</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_barrier_engine_1a537a5b5209bc372a46a09faaa8cd719f" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCBarrierEngine</scope><name>withStepsPerYear</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
