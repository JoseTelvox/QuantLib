<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_zabr_interpolation" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::ZabrInterpolation</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_interpolation" prot="public" virt="non-virtual">QuantLib::Interpolation</basecompoundref>
    <includes refid="zabrinterpolation_8hpp" local="no">zabrinterpolation.hpp</includes>
    <templateparamlist>
      <param>
        <type>class Evaluation</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolation_1ac3941d1b40d025d3af7571b79f20cfc0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class I1</type>
          </param>
          <param>
            <type>class I2</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>QuantLib::ZabrInterpolation&lt; Evaluation &gt;::ZabrInterpolation</definition>
        <argsstring>(const I1 &amp;xBegin, const I1 &amp;xEnd, const I2 &amp;yBegin, Time t, const Real &amp;forward, Real alpha, Real beta, Real nu, Real rho, Real gamma, bool alphaIsFixed, bool betaIsFixed, bool nuIsFixed, bool rhoIsFixed, bool gammaIsFixed, bool vegaWeighted=true, const ext::shared_ptr&lt; EndCriteria &gt; &amp;endCriteria=ext::shared_ptr&lt; EndCriteria &gt;(), const ext::shared_ptr&lt; OptimizationMethod &gt; &amp;optMethod=ext::shared_ptr&lt; OptimizationMethod &gt;(), const Real errorAccept=0.0020, const bool useMaxError=false, const Size maxGuesses=50)</argsstring>
        <name>ZabrInterpolation</name>
        <qualifiedname>QuantLib::ZabrInterpolation::ZabrInterpolation</qualifiedname>
        <param>
          <type>const I1 &amp;</type>
          <declname>xBegin</declname>
        </param>
        <param>
          <type>const I1 &amp;</type>
          <declname>xEnd</declname>
        </param>
        <param>
          <type>const I2 &amp;</type>
          <declname>yBegin</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>forward</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nu</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>rho</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>alphaIsFixed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>betaIsFixed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>nuIsFixed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>rhoIsFixed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>gammaIsFixed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>vegaWeighted</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref> &gt; &amp;</type>
          <declname>endCriteria</declname>
          <defval>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref> &gt;()</defval>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_optimization_method" kindref="compound">OptimizationMethod</ref> &gt; &amp;</type>
          <declname>optMethod</declname>
          <defval>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_optimization_method" kindref="compound">OptimizationMethod</ref> &gt;()</defval>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>errorAccept</declname>
          <defval>0.0020</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>useMaxError</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxGuesses</declname>
          <defval>50</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="123" column="5" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="123" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolation_1aefa1ae698c84572650758d36659f7b10" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolation&lt; Evaluation &gt;::expiry</definition>
        <argsstring>() const</argsstring>
        <name>expiry</name>
        <qualifiedname>QuantLib::ZabrInterpolation::expiry</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="147" column="10" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="147" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolation_1acc735b657ba007b9e17e2d2fd506bb1a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolation&lt; Evaluation &gt;::forward</definition>
        <argsstring>() const</argsstring>
        <name>forward</name>
        <qualifiedname>QuantLib::ZabrInterpolation::forward</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="148" column="10" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolation_1a206e5c8599c4de0377e52c8f8e2c955f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolation&lt; Evaluation &gt;::alpha</definition>
        <argsstring>() const</argsstring>
        <name>alpha</name>
        <qualifiedname>QuantLib::ZabrInterpolation::alpha</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="149" column="10" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolation_1a66513e83e064818fbd34a1310c6b45b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolation&lt; Evaluation &gt;::beta</definition>
        <argsstring>() const</argsstring>
        <name>beta</name>
        <qualifiedname>QuantLib::ZabrInterpolation::beta</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="150" column="10" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolation_1a0ebf38427c2b3961994722bb973bcf0a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolation&lt; Evaluation &gt;::nu</definition>
        <argsstring>() const</argsstring>
        <name>nu</name>
        <qualifiedname>QuantLib::ZabrInterpolation::nu</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="151" column="10" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolation_1af533a76b9ed4d4b3622b11716f0f07cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolation&lt; Evaluation &gt;::rho</definition>
        <argsstring>() const</argsstring>
        <name>rho</name>
        <qualifiedname>QuantLib::ZabrInterpolation::rho</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="152" column="10" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolation_1a9f546956855b89fcb99531d00f9c3833" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolation&lt; Evaluation &gt;::gamma</definition>
        <argsstring>() const</argsstring>
        <name>gamma</name>
        <qualifiedname>QuantLib::ZabrInterpolation::gamma</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="153" column="10" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolation_1a8d6b2d92563dc51f35e9235402ba688f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolation&lt; Evaluation &gt;::rmsError</definition>
        <argsstring>() const</argsstring>
        <name>rmsError</name>
        <qualifiedname>QuantLib::ZabrInterpolation::rmsError</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="154" column="10" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="154" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolation_1ad38b662b5bb3d375c8f7c51e7918ef6e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolation&lt; Evaluation &gt;::maxError</definition>
        <argsstring>() const</argsstring>
        <name>maxError</name>
        <qualifiedname>QuantLib::ZabrInterpolation::maxError</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="155" column="10" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="155" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolation_1a5371aa5c00461c2e09b598e545947e1f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Real &gt; &amp; QuantLib::ZabrInterpolation&lt; Evaluation &gt;::interpolationWeights</definition>
        <argsstring>() const</argsstring>
        <name>interpolationWeights</name>
        <qualifiedname>QuantLib::ZabrInterpolation::interpolationWeights</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="156" column="23" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="156" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolation_1abc7064b36936ac8bbf64fb0ed6e35ab2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>EndCriteria::Type</type>
        <definition>EndCriteria::Type QuantLib::ZabrInterpolation&lt; Evaluation &gt;::endCriteria</definition>
        <argsstring>()</argsstring>
        <name>endCriteria</name>
        <qualifiedname>QuantLib::ZabrInterpolation::endCriteria</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="159" column="23" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="159" bodyend="159"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolation_1ab7c53b07fb1671925b3d472a5a671a3e" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1detail_1_1_x_a_b_r_coeff_holder" kindref="compound">detail::XABRCoeffHolder</ref>&lt; <ref refid="struct_quant_lib_1_1detail_1_1_zabr_specs" kindref="compound">detail::ZabrSpecs</ref>&lt; Evaluation &gt; &gt; &amp;</type>
        <definition>const detail::XABRCoeffHolder&lt; detail::ZabrSpecs&lt; Evaluation &gt; &gt; &amp; QuantLib::ZabrInterpolation&lt; Evaluation &gt;::coeffs</definition>
        <argsstring>() const</argsstring>
        <name>coeffs</name>
        <qualifiedname>QuantLib::ZabrInterpolation::coeffs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="162" column="35" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="162" bodyend="164"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>zabr smile interpolation between discrete volatility points. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>QuantLib::Extrapolator</label>
        <link refid="class_quant_lib_1_1_extrapolator"/>
      </node>
      <node id="2">
        <label>QuantLib::Interpolation</label>
        <link refid="class_quant_lib_1_1_interpolation"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::ZabrInterpolation&lt; Evaluation &gt;</label>
        <link refid="class_quant_lib_1_1_zabr_interpolation"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>QuantLib::Extrapolator</label>
        <link refid="class_quant_lib_1_1_extrapolator"/>
      </node>
      <node id="2">
        <label>QuantLib::Interpolation</label>
        <link refid="class_quant_lib_1_1_interpolation"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::ZabrInterpolation&lt; Evaluation &gt;</label>
        <link refid="class_quant_lib_1_1_zabr_interpolation"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/volatility/zabrinterpolation.hpp" line="120" column="12" bodyfile="ql/experimental/volatility/zabrinterpolation.hpp" bodystart="120" bodyend="165"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_extrapolator_1ab3936a9b5b5c163d3e511437c16c1d9e" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>allowsExtrapolation</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolation_1a206e5c8599c4de0377e52c8f8e2c955f" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>alpha</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolation_1a66513e83e064818fbd34a1310c6b45b5" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>beta</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1ab682157f4f0585bc28beefc6c22c8ba8" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>checkRange</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolation_1ab7c53b07fb1671925b3d472a5a671a3e" prot="private" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>coeffs</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1ab52a971431083a0a474266d6cdc9f936" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>derivative</name></member>
      <member refid="class_quant_lib_1_1_extrapolator_1a6af69387d5cae0fe84d6a0c858406218" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>disableExtrapolation</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1aca518c22ea0e7c6a410757877f11756c" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>empty</name></member>
      <member refid="class_quant_lib_1_1_extrapolator_1a5f7b5650a44d6c63095bc739470c8bfb" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>enableExtrapolation</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolation_1abc7064b36936ac8bbf64fb0ed6e35ab2" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>endCriteria</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolation_1aefa1ae698c84572650758d36659f7b10" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>expiry</name></member>
      <member refid="class_quant_lib_1_1_extrapolator_1af1c3adaccdfaf07d3d07edaa234444f7" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>Extrapolator</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolation_1acc735b657ba007b9e17e2d2fd506bb1a" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>forward</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolation_1a9f546956855b89fcb99531d00f9c3833" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>gamma</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1aef7940748a211476a0ed80e3a6ca9b9b" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>impl_</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1a3357fa39f1e41da02be1792133f6d622" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>Interpolation</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolation_1a5371aa5c00461c2e09b598e545947e1f" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>interpolationWeights</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1af0892ba060b7b7d58943718b074f079a" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>isInRange</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolation_1ad38b662b5bb3d375c8f7c51e7918ef6e" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>maxError</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolation_1a0ebf38427c2b3961994722bb973bcf0a" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>nu</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1a9e0ba688e60feed84158204bf22b678d" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>operator()</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1a5b8ec18bc4927757f4a04967f13b271c" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>primitive</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolation_1af533a76b9ed4d4b3622b11716f0f07cb" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>rho</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolation_1a8d6b2d92563dc51f35e9235402ba688f" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>rmsError</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1afab97bcd82695d553682b5f6eebb1718" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>secondDerivative</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1a56cfc87cb5966ee36d72e5ffc7b1ff5c" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1a12711f5ec2e165fdb5104f3979855cc4" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>xMax</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1afc10233f6b565f10e291389631e5ea1f" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>xMin</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolation_1ac3941d1b40d025d3af7571b79f20cfc0" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>ZabrInterpolation</name></member>
      <member refid="class_quant_lib_1_1_extrapolator_1af0ca0156436ffbce159183198eb27e2e" prot="public" virt="virtual"><scope>QuantLib::ZabrInterpolation</scope><name>~Extrapolator</name></member>
      <member refid="class_quant_lib_1_1_interpolation_1a2b6d1246d8676354fb8f1efb03c9852f" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolation</scope><name>~Interpolation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
