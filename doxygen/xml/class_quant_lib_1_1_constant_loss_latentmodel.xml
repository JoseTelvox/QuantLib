<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_constant_loss_latentmodel" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::ConstantLossLatentmodel</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_default_latent_model" prot="public" virt="non-virtual">QuantLib::DefaultLatentModel&lt; copulaPolicy &gt;</basecompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_constant_loss_model" prot="public" virt="virtual">QuantLib::ConstantLossModel&lt; copulaPolicy &gt;</derivedcompoundref>
    <includes refid="constantlosslatentmodel_8hpp" local="no">constantlosslatentmodel.hpp</includes>
    <templateparamlist>
      <param>
        <type>class copulaPolicy</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_constant_loss_latentmodel_1a876cfa98822f95141b39acae53e8587f" prot="private" static="no">
        <type>copulaPolicy::initTraits</type>
        <definition>typedef copulaPolicy::initTraits QuantLib::ConstantLossLatentmodel&lt; copulaPolicy &gt;::initTraits</definition>
        <argsstring></argsstring>
        <name>initTraits</name>
        <qualifiedname>QuantLib::ConstantLossLatentmodel::initTraits</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/constantlosslatentmodel.hpp" line="41" column="51" bodyfile="ql/experimental/credit/constantlosslatentmodel.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_constant_loss_latentmodel_1a4be660d98a3184eb245dee4c25dc1e61" prot="private" static="no" mutable="no">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>const std::vector&lt;Real&gt; QuantLib::ConstantLossLatentmodel&lt; copulaPolicy &gt;::recoveries_</definition>
        <argsstring></argsstring>
        <name>recoveries_</name>
        <qualifiedname>QuantLib::ConstantLossLatentmodel::recoveries_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/constantlosslatentmodel.hpp" line="40" column="27" bodyfile="ql/experimental/credit/constantlosslatentmodel.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_constant_loss_latentmodel_1a066162586442d23561b28328d50bd574" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::ConstantLossLatentmodel&lt; copulaPolicy &gt;::ConstantLossLatentmodel</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; Real &gt; &gt; &amp;factorWeights, const std::vector&lt; Real &gt; &amp;recoveries, LatentModelIntegrationType::LatentModelIntegrationType integralType, const initTraits &amp;ini=initTraits())</argsstring>
        <name>ConstantLossLatentmodel</name>
        <qualifiedname>QuantLib::ConstantLossLatentmodel::ConstantLossLatentmodel</qualifiedname>
        <param>
          <type>const std::vector&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt; &amp;</type>
          <declname>factorWeights</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>recoveries</declname>
        </param>
        <param>
          <type>LatentModelIntegrationType::LatentModelIntegrationType</type>
          <declname>integralType</declname>
        </param>
        <param>
          <type>const initTraits &amp;</type>
          <declname>ini</declname>
          <defval>initTraits()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/constantlosslatentmodel.hpp" line="43" column="9" bodyfile="ql/experimental/credit/constantlosslatentmodel.hpp" bodystart="43" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_constant_loss_latentmodel_1af0963fe00c12185f12b1aac88d8e1cc7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::ConstantLossLatentmodel&lt; copulaPolicy &gt;::ConstantLossLatentmodel</definition>
        <argsstring>(const Handle&lt; Quote &gt; &amp;mktCorrel, const std::vector&lt; Real &gt; &amp;recoveries, LatentModelIntegrationType::LatentModelIntegrationType integralType, Size nVariables, const initTraits &amp;ini=initTraits())</argsstring>
        <name>ConstantLossLatentmodel</name>
        <qualifiedname>QuantLib::ConstantLossLatentmodel::ConstantLossLatentmodel</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &amp;</type>
          <declname>mktCorrel</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>recoveries</declname>
        </param>
        <param>
          <type>LatentModelIntegrationType::LatentModelIntegrationType</type>
          <declname>integralType</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>nVariables</declname>
        </param>
        <param>
          <type>const initTraits &amp;</type>
          <declname>ini</declname>
          <defval>initTraits()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/constantlosslatentmodel.hpp" line="56" column="9" bodyfile="ql/experimental/credit/constantlosslatentmodel.hpp" bodystart="56" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_constant_loss_latentmodel_1a875c7fd61ed648a34cbe7a2b15a4cdff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ConstantLossLatentmodel&lt; copulaPolicy &gt;::conditionalRecovery</definition>
        <argsstring>(const Date &amp;d, Size iName, const std::vector&lt; Real &gt; &amp;mktFactors) const</argsstring>
        <name>conditionalRecovery</name>
        <qualifiedname>QuantLib::ConstantLossLatentmodel::conditionalRecovery</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/constantlosslatentmodel.hpp" line="72" column="14" bodyfile="ql/experimental/credit/constantlosslatentmodel.hpp" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_constant_loss_latentmodel_1abf60a728ee9d814d2ae86925fbddd464" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ConstantLossLatentmodel&lt; copulaPolicy &gt;::conditionalRecovery</definition>
        <argsstring>(Probability uncondDefP, Size iName, const std::vector&lt; Real &gt; &amp;mktFactors) const</argsstring>
        <name>conditionalRecovery</name>
        <qualifiedname>QuantLib::ConstantLossLatentmodel::conditionalRecovery</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
          <declname>uncondDefP</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/constantlosslatentmodel.hpp" line="77" column="14" bodyfile="ql/experimental/credit/constantlosslatentmodel.hpp" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_constant_loss_latentmodel_1a52c95124c0acc106c125174f7a042b5b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ConstantLossLatentmodel&lt; copulaPolicy &gt;::conditionalRecoveryInvP</definition>
        <argsstring>(Real invUncondDefP, Size iName, const std::vector&lt; Real &gt; &amp;mktFactors) const</argsstring>
        <name>conditionalRecoveryInvP</name>
        <qualifiedname>QuantLib::ConstantLossLatentmodel::conditionalRecoveryInvP</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>invUncondDefP</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/constantlosslatentmodel.hpp" line="82" column="14" bodyfile="ql/experimental/credit/constantlosslatentmodel.hpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_constant_loss_latentmodel_1afc22e16cff9ee19e0f2e176c49d244f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ConstantLossLatentmodel&lt; copulaPolicy &gt;::conditionalRecovery</definition>
        <argsstring>(Real latentVarSample, Size iName, const Date &amp;d) const</argsstring>
        <name>conditionalRecovery</name>
        <qualifiedname>QuantLib::ConstantLossLatentmodel::conditionalRecovery</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>latentVarSample</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/constantlosslatentmodel.hpp" line="87" column="14" bodyfile="ql/experimental/credit/constantlosslatentmodel.hpp" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_constant_loss_latentmodel_1acf47f8896ec77e3ca4ea6f06ca431d08" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Real &gt; &amp; QuantLib::ConstantLossLatentmodel&lt; copulaPolicy &gt;::recoveries</definition>
        <argsstring>() const</argsstring>
        <name>recoveries</name>
        <qualifiedname>QuantLib::ConstantLossLatentmodel::recoveries</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/constantlosslatentmodel.hpp" line="92" column="27" bodyfile="ql/experimental/credit/constantlosslatentmodel.hpp" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_constant_loss_latentmodel_1a5374893247df2de2b292ae74c4a0056d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ConstantLossLatentmodel&lt; copulaPolicy &gt;::expectedRecovery</definition>
        <argsstring>(const Date &amp;d, Size iName, const DefaultProbKey &amp;defKeys) const</argsstring>
        <name>expectedRecovery</name>
        <qualifiedname>QuantLib::ConstantLossLatentmodel::expectedRecovery</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_default_prob_key" kindref="compound">DefaultProbKey</ref> &amp;</type>
          <declname>defKeys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/constantlosslatentmodel.hpp" line="99" column="14" bodyfile="ql/experimental/credit/constantlosslatentmodel.hpp" bodystart="99" bodyend="102"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Constant deterministic loss amount default latent model. Integrable implementation. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::ConstantLossLatentmodel&lt; copulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_constant_loss_latentmodel"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::ConstantLossModel&lt; copulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_constant_loss_model"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::DefaultLatentModel&lt; copulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_default_latent_model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::LatentModel&lt; copulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_latent_model"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::ConstantLossLatentmodel&lt; copulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_constant_loss_latentmodel"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::DefaultLatentModel&lt; copulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_default_latent_model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::Handle&lt; QuantLib::Quote &gt;</label>
        <link refid="class_quant_lib_1_1_handle"/>
      </node>
      <node id="3">
        <label>QuantLib::LatentModel&lt; copulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_latent_model"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>cachedMktFactor_</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/credit/constantlosslatentmodel.hpp" line="38" column="5" bodyfile="ql/experimental/credit/constantlosslatentmodel.hpp" bodystart="38" bodyend="103"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_latent_model_1a77b6963ac7d92d55caade265c40af9e4" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>allFactorCumulInverter</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1a02009926334b7e8e3f8ca0717540e1e1" prot="protected" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>basket_</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a68e201047207fd50ca0725a2cb7a21d4" prot="protected" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>cachedMktFactor_</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1adeafa90c0190ca6df804755b7fbc762f" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>conditionalDefaultProbability</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1a24a7009dfa3918fe8e577a120a3d4a52" prot="protected" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>conditionalDefaultProbability</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1ae42643670e071e369b0859af9d948990" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>conditionalDefaultProbabilityInvP</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1a21d3a5426480ed63c72f8b4492f514cf" prot="protected" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>conditionalProbAtLeastNEvents</name></member>
      <member refid="class_quant_lib_1_1_constant_loss_latentmodel_1a875c7fd61ed648a34cbe7a2b15a4cdff" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>conditionalRecovery</name></member>
      <member refid="class_quant_lib_1_1_constant_loss_latentmodel_1abf60a728ee9d814d2ae86925fbddd464" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>conditionalRecovery</name></member>
      <member refid="class_quant_lib_1_1_constant_loss_latentmodel_1afc22e16cff9ee19e0f2e176c49d244f5" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>conditionalRecovery</name></member>
      <member refid="class_quant_lib_1_1_constant_loss_latentmodel_1a52c95124c0acc106c125174f7a042b5b" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>conditionalRecoveryInvP</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1a6db2041303cd4a079a6e6d8e96b3b70a" prot="protected" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>condProbProduct</name></member>
      <member refid="class_quant_lib_1_1_constant_loss_latentmodel_1a066162586442d23561b28328d50bd574" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>ConstantLossLatentmodel</name></member>
      <member refid="class_quant_lib_1_1_constant_loss_latentmodel_1af0963fe00c12185f12b1aac88d8e1cc7" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>ConstantLossLatentmodel</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1ae56d8a54eabfb0d0216f472c727b65ac" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>copula</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1aa3dbc85525bd7e1dfbf3a41591cabe27" prot="protected" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>copula_</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1aad1fd370b3f36c3cf24b661d189fed01" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>copulaType</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1af159333d575c0b252de3c71371919dc2" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>cumulativeY</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1ae64724a9ecdc4cb7dadd555b019da10b" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>cumulativeZ</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1a21018a103e011428082f5697486c2e5d" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>defaultCorrelation</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1a1c8277cedada4e4a6bb66863948a15a2" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>DefaultLatentModel</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1a880b4a42bb1666531ea16ceb39d2defd" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>DefaultLatentModel</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a9711849d61e8bc79608424661ac9dde2" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>density</name></member>
      <member refid="class_quant_lib_1_1_constant_loss_latentmodel_1a5374893247df2de2b292ae74c4a0056d" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>expectedRecovery</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a9058f44d45963e20631cf813f500ed50" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>factorWeights</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a416b1acb0a0321ba7eac54c1bc1c494d" prot="protected" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>factorWeights_</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1ad630746a257d3e970ecf83cd47878cd3" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>idiosyncFctrs</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a4f058b49788035828bbe2b3e78db9ebe" prot="protected" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>idiosyncFctrs_</name></member>
      <member refid="class_quant_lib_1_1_constant_loss_latentmodel_1a876cfa98822f95141b39acae53e8587f" prot="private" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>initTraits</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a8f73847f26e632e54de23dc218e44875" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>integratedExpectedValue</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a450b60907aff21aa12ef61c50206ec4b" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>integratedExpectedValueV</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1a25bb529ee409a22cc0384aed147d0528" prot="protected" virt="virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>integration</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1a7ae22566362d3a033b9772a6bcdb25d1" prot="protected" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>integration_</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a10f1e843503876609d1cb14ac9b26c8e" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>inverseCumulativeDensity</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a8f4c7a3b52e2a50a88b3a2e67cc1109b" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>inverseCumulativeY</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a28355f257003546d33fda003452c820e" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>inverseCumulativeZ</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a2423b7437ca2ba9796e153bd9b9df050" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>LatentModel</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a250ac646a6be88e253dc37c2620de9dd" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>LatentModel</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a762ae56003287bdd2995e5a46a8c9f57" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>LatentModel</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a4200b7490c6d6690d2ec1df95d4862ba" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>LatentModel</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a9d3034be325054187dfafbd5f7ef1890" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>latentVariableCorrel</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1aede4740894962881f21e1522349eb287" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>latentVarValue</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1acd1daf4e28ce8ab5233065be60fd2896" prot="protected" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>nFactors_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1ad410d410b17c524efa114598a0455936" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>numFactors</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a752c04c15550a49537c7eb0557bd6b16" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>numTotalFactors</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a43e8cf454283157cab9a90b5aa261409" prot="protected" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>nVariables_</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LatentModel&lt; copulaPolicy &gt;::"><scope>QuantLib::ConstantLossLatentmodel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LatentModel&lt; copulaPolicy &gt;::"><scope>QuantLib::ConstantLossLatentmodel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LatentModel&lt; copulaPolicy &gt;::"><scope>QuantLib::ConstantLossLatentmodel</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::ConstantLossLatentmodel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LatentModel&lt; copulaPolicy &gt;::QuantLib::Observable::"><scope>QuantLib::ConstantLossLatentmodel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::ConstantLossLatentmodel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1af683416c9c109efaaa58f51e72224fa0" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>probAtLeastNEvents</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1ae282023c13b0e2404d29163b8e5a6b5c" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>probOfDefault</name></member>
      <member refid="class_quant_lib_1_1_constant_loss_latentmodel_1acf47f8896ec77e3ca4ea6f06ca431d08" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>recoveries</name></member>
      <member refid="class_quant_lib_1_1_constant_loss_latentmodel_1a4be660d98a3184eb245dee4c25dc1e61" prot="private" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>recoveries_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1a9b98bab8ee02b28ee95b7eb100c7b5ea" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>resetBasket</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a1dedcee7cecd341a0ed6131577b2f48e" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>size</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1a68cb23471d12e47dae26213b6fa3f73b" prot="protected" virt="virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::ConstantLossLatentmodel</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
