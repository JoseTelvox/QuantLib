<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_random_l_m" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::RandomLM</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_lazy_object" prot="public" virt="virtual">QuantLib::LazyObject</basecompoundref>
    <basecompoundref refid="class_quant_lib_1_1_default_loss_model" prot="public" virt="virtual">QuantLib::DefaultLossModel</basecompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_random_default_l_m" prot="public" virt="non-virtual">QuantLib::RandomDefaultLM&lt; GaussianCopulaPolicy &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_random_default_l_m" prot="public" virt="non-virtual">QuantLib::RandomDefaultLM&lt; TCopulaPolicy &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_random_loss_l_m" prot="public" virt="non-virtual">QuantLib::RandomLossLM&lt; GaussianCopulaPolicy &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_random_loss_l_m" prot="public" virt="non-virtual">QuantLib::RandomLossLM&lt; TCopulaPolicy &gt;</derivedcompoundref>
    <includes refid="randomdefaultlatentmodel_8hpp" local="no">randomdefaultlatentmodel.hpp</includes>
    <templateparamlist>
      <param>
        <type>template&lt; class, class &gt; class</type>
        <declname>derivedRandomLM</declname>
        <defname>derivedRandomLM</defname>
      </param>
      <param>
        <type>class copulaPolicy</type>
      </param>
      <param>
        <type>class USNG</type>
        <defval><ref refid="class_quant_lib_1_1_sobol_rsg" kindref="compound">SobolRsg</ref></defval>
      </param>
    </templateparamlist>
    <sectiondef kind="user-defined">
      <header>Statistics, DefaultLossModel interface.</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_random_l_m_1aa6adabc786a8b94e680ad8be3d458741" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
        <definition>BigNatural QuantLib::RandomLM&lt; derivedRandomLM, copulaPolicy, USNG &gt;::seed_</definition>
        <argsstring></argsstring>
        <name>seed_</name>
        <qualifiedname>QuantLib::RandomLM::seed_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="205" column="20" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_random_l_m_1a205ba9e89de18296f359864c37aa1450" prot="protected" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>const Size QuantLib::RandomLM&lt; derivedRandomLM, copulaPolicy, USNG &gt;::numFactors_</definition>
        <argsstring></argsstring>
        <name>numFactors_</name>
        <qualifiedname>QuantLib::RandomLM::numFactors_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="207" column="20" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_random_l_m_1a02e7e50c573a4f470b302cdf7ecc3aff" prot="protected" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>const Size QuantLib::RandomLM&lt; derivedRandomLM, copulaPolicy, USNG &gt;::numLMVars_</definition>
        <argsstring></argsstring>
        <name>numLMVars_</name>
        <qualifiedname>QuantLib::RandomLM::numLMVars_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="208" column="20" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_random_l_m_1aba4a30f98317ef5d2d71d2173c2c5869" prot="protected" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>const Size QuantLib::RandomLM&lt; derivedRandomLM, copulaPolicy, USNG &gt;::nSims_</definition>
        <argsstring></argsstring>
        <name>nSims_</name>
        <qualifiedname>QuantLib::RandomLM::nSims_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="210" column="20" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_random_l_m_1adef2809f92d6028e82303b25c43c28e6" prot="protected" static="no" mutable="yes">
        <type>std::vector&lt; std::vector&lt; <ref refid="struct_quant_lib_1_1sim_event" kindref="compound">simEvent</ref>&lt; derivedRandomLM&lt; copulaPolicy, USNG &gt; &gt; &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;simEvent&lt;derivedRandomLM&lt;copulaPolicy, USNG &gt; &gt; &gt; &gt; QuantLib::RandomLM&lt; derivedRandomLM, copulaPolicy, USNG &gt;::simsBuffer_</definition>
        <argsstring></argsstring>
        <name>simsBuffer_</name>
        <qualifiedname>QuantLib::RandomLM::simsBuffer_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="213" column="2" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_random_l_m_1a875e4919a85024b5fb1d23d3836530a9" prot="protected" static="no" mutable="yes">
        <type>copulaPolicy</type>
        <definition>copulaPolicy QuantLib::RandomLM&lt; derivedRandomLM, copulaPolicy, USNG &gt;::copula_</definition>
        <argsstring></argsstring>
        <name>copula_</name>
        <qualifiedname>QuantLib::RandomLM::copula_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="215" column="30" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_random_l_m_1a24308965e6ede94b4f8b0ad3bc4d0f37" prot="protected" static="no" mutable="yes">
        <type>ext::shared_ptr&lt; copulaRNG_type &gt;</type>
        <definition>ext::shared_ptr&lt;copulaRNG_type&gt; QuantLib::RandomLM&lt; derivedRandomLM, copulaPolicy, USNG &gt;::copulasRng_</definition>
        <argsstring></argsstring>
        <name>copulasRng_</name>
        <qualifiedname>QuantLib::RandomLM::copulasRng_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="216" column="33" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_random_l_m_1a199660d1507c7764679e92eef833b841" prot="protected" static="yes" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>const Size QuantLib::RandomLM&lt; derivedRandomLM, copulaPolicy, USNG &gt;::maxHorizon_</definition>
        <argsstring></argsstring>
        <name>maxHorizon_</name>
        <qualifiedname>QuantLib::RandomLM::maxHorizon_</qualifiedname>
        <initializer>= 4050</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="219" column="27" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_l_m_1a4573522256974f56442feed91246249c" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::RandomLM&lt; D, C, URNG &gt;::probAtLeastNEvents</definition>
        <argsstring>(Size n, const Date &amp;d) const override</argsstring>
        <name>probAtLeastNEvents</name>
        <qualifiedname>QuantLib::RandomLM::probAtLeastNEvents</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1ab46164d907ae7772c0a5f6788ce4568b">probAtLeastNEvents</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the probaility of having a given or larger number of defaults in the basket portfolio at a given time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="160" column="21" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="227" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_l_m_1a61f890c966b50d23efc6b7c231b7c1e2" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> &gt;</type>
        <definition>std::vector&lt; Probability &gt; QuantLib::RandomLM&lt; D, C, URNG &gt;::probsBeingNthEvent</definition>
        <argsstring>(Size n, const Date &amp;d) const override</argsstring>
        <name>probsBeingNthEvent</name>
        <qualifiedname>QuantLib::RandomLM::probsBeingNthEvent</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1ab8053b0ecb53c758939cf5c7a33fb328">probsBeingNthEvent</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Order of results refers to the simulated (super)pool not the basket&apos;s pool. Notice that this statistic suffers from heavy dispersion. To see techniques to improve it (not implemented here) see: Joshi, M., D. Kainth. 2004. Rapid and accurate development of prices and <ref refid="class_quant_lib_1_1_greeks" kindref="compound">Greeks</ref> for nth to default credit swaps in the Li model. Quantitative Finance, Vol. 4. Institute of Physics Publishing, London, UK, 266-275 and: Chen, Z., Glasserman, P. &apos;Fast pricing of basket default swaps&apos; in Operations Research Vol. 56, No. 2, March/April 2008, pp. 286-303 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="172" column="21" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="254" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_l_m_1a65e1bf84cbd60eae162d99126abb1834" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::RandomLM&lt; D, C, URNG &gt;::defaultCorrelation</definition>
        <argsstring>(const Date &amp;d, Size iName, Size jName) const override</argsstring>
        <name>defaultCorrelation</name>
        <qualifiedname>QuantLib::RandomLM::defaultCorrelation</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1a25ed3ba8a38c4afaca5dca5b8cfd1d7d">defaultCorrelation</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>jName</declname>
        </param>
        <briefdescription>
<para>Pearsons&apos; default probability correlation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="174" column="14" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="297" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_l_m_1a517374354871d97b20e9c67b27d88e2a" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::RandomLM&lt; D, C, URNG &gt;::expectedTrancheLoss</definition>
        <argsstring>(const Date &amp;d) const override</argsstring>
        <name>expectedTrancheLoss</name>
        <qualifiedname>QuantLib::RandomLM::expectedTrancheLoss</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1a258763493804fe4c84b533716df00991">expectedTrancheLoss</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="175" column="14" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="338" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_l_m_1af984a2a4cca81e40921b84f4b873c551" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::pair&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::pair&lt; Real, Real &gt; QuantLib::RandomLM&lt; D, C, URNG &gt;::expectedTrancheLossInterval</definition>
        <argsstring>(const Date &amp;d, Probability confidencePerc) const</argsstring>
        <name>expectedTrancheLossInterval</name>
        <qualifiedname>QuantLib::RandomLM::expectedTrancheLossInterval</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
          <declname>confidencePerc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="176" column="27" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="345" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_l_m_1a07ceb3783bff4c2b911f853d39d66074" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::map&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>, <ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> &gt;</type>
        <definition>std::map&lt; Real, Probability &gt; QuantLib::RandomLM&lt; D, C, URNG &gt;::lossDistribution</definition>
        <argsstring>(const Date &amp;d) const override</argsstring>
        <name>lossDistribution</name>
        <qualifiedname>QuantLib::RandomLM::lossDistribution</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1aeff66ecf317c1dc23713424daf563f88">lossDistribution</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Full loss distribution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="178" column="18" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="384" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_l_m_1a938ad1437441136c3d756fda1d626a05" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_histogram" kindref="compound">Histogram</ref></type>
        <definition>Histogram QuantLib::RandomLM&lt; D, C, URNG &gt;::computeHistogram</definition>
        <argsstring>(const Date &amp;d) const</argsstring>
        <name>computeHistogram</name>
        <qualifiedname>QuantLib::RandomLM::computeHistogram</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="179" column="27" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="401" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_l_m_1a4d3026de4233c47b892cabda67feacea" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::RandomLM&lt; D, C, URNG &gt;::expectedShortfall</definition>
        <argsstring>(const Date &amp;d, Real percent) const override</argsstring>
        <name>expectedShortfall</name>
        <qualifiedname>QuantLib::RandomLM::expectedShortfall</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1a60bd1a166744f4de455cae1c1c83f6a1">expectedShortfall</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>percentile</declname>
        </param>
        <briefdescription>
<para>Expected shortfall given a default loss percentile. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="180" column="14" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="443" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_l_m_1ad81926f2a22d5555c4e9c6a1c4df4928" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::RandomLM&lt; D, C, URNG &gt;::percentile</definition>
        <argsstring>(const Date &amp;d, Real percentile) const override</argsstring>
        <name>percentile</name>
        <qualifiedname>QuantLib::RandomLM::percentile</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1ac7142d4e72958aef5a602167a138973e">percentile</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>percentile</declname>
        </param>
        <briefdescription>
<para>Value at Risk given a default loss percentile. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="181" column="14" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="525" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_l_m_1aa3b6a096daf1a894f4b06c5d6ae68934" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::tuple&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::tuple&lt; Real, Real, Real &gt; QuantLib::RandomLM&lt; D, C, URNG &gt;::percentileAndInterval</definition>
        <argsstring>(const Date &amp;d, Real percentile) const</argsstring>
        <name>percentileAndInterval</name>
        <qualifiedname>QuantLib::RandomLM::percentileAndInterval</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>percentile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the VaR value for a given percentile and the 95 confidence interval of that value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="184" column="28" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="538" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_l_m_1a46f349953322fb99f243d90734cf2bbd" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::RandomLM&lt; D, C, URNG &gt;::splitVaRLevel</definition>
        <argsstring>(const Date &amp;date, Real loss) const override</argsstring>
        <name>splitVaRLevel</name>
        <qualifiedname>QuantLib::RandomLM::splitVaRLevel</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1ab70b30442fcdda802730fd711c5348da">splitVaRLevel</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>loss</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Distributes the total VaR amount along the portfolio counterparties. The passed loss amount is in loss units. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="189" column="21" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="621" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_l_m_1a682e69146ccd628df74a73ed296e32be" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; Real &gt; &gt; QuantLib::RandomLM&lt; D, C, URNG &gt;::splitVaRAndError</definition>
        <argsstring>(const Date &amp;date, Real loss, Probability confInterval) const</argsstring>
        <name>splitVaRAndError</name>
        <qualifiedname>QuantLib::RandomLM::splitVaRAndError</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>loss</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
          <declname>confInterval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Distributes the total VaR amount along the portfolio counterparties.</para>
<para>Provides confidence interval for split so that portfolio optimization can be performed outside those limits.</para>
<para>The passed loss amount is in loss units. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="198" column="29" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="636" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_l_m_1a66930dbc082605c3eaaa132198c85585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::RandomLM&lt; derivedRandomLM, copulaPolicy, USNG &gt;::~RandomLM</definition>
        <argsstring>() override=default</argsstring>
        <name>~RandomLM</name>
        <qualifiedname>QuantLib::RandomLM::~RandomLM</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="202" column="7"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_random_l_m_1a392a89fbdee12becbe1127939a4db05b" prot="private" static="no">
        <type><ref refid="class_quant_lib_1_1_latent_model" kindref="compound">LatentModel</ref>&lt; copulaPolicy &gt;::template FactorSampler&lt; USNG &gt;</type>
        <definition>typedef LatentModel&lt;copulaPolicy&gt;::template FactorSampler&lt;USNG&gt; QuantLib::RandomLM&lt; derivedRandomLM, copulaPolicy, USNG &gt;::copulaRNG_type</definition>
        <argsstring></argsstring>
        <name>copulaRNG_type</name>
        <qualifiedname>QuantLib::RandomLM::copulaRNG_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="102" column="13" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_random_l_m_1ad8368a31961fef105ee83e0aae8aca77" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::RandomLM&lt; derivedRandomLM, copulaPolicy, USNG &gt;::RandomLM</definition>
        <argsstring>(Size numFactors, Size numLMVars, copulaPolicy copula, Size nSims, BigNatural seed)</argsstring>
        <name>RandomLM</name>
        <qualifiedname>QuantLib::RandomLM::RandomLM</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>numFactors</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>numLMVars</declname>
        </param>
        <param>
          <type>copulaPolicy</type>
          <declname>copula</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>nSims</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="104" column="7" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="104" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_l_m_1afdaffcaed2e17a3e4732f681731adf63" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::RandomLM&lt; derivedRandomLM, copulaPolicy, USNG &gt;::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <qualifiedname>QuantLib::RandomLM::update</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_lazy_object_1adee2bf49be5c4c78736be293321a856d">update</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must be implemented in derived classes. An instance of Observer does not call this method directly: instead, it will be called by the observables the instance registered with when they need to notify any changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="108" column="12" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="108" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_l_m_1a0ac9a7bf809a54db301b8f66f9fb3768" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::RandomLM&lt; derivedRandomLM, copulaPolicy, USNG &gt;::performCalculations</definition>
        <argsstring>() const override</argsstring>
        <name>performCalculations</name>
        <qualifiedname>QuantLib::RandomLM::performCalculations</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_lazy_object_1aafa5583a3743d9f93fa40da5b62e1ff8">performCalculations</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must implement any calculations which must be (re)done in order to calculate the desired results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="116" column="14" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="116" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_l_m_1a50df3747c1189bb14a9e7a938a43c1ae" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::RandomLM&lt; derivedRandomLM, copulaPolicy, USNG &gt;::performSimulations</definition>
        <argsstring>() const</argsstring>
        <name>performSimulations</name>
        <qualifiedname>QuantLib::RandomLM::performSimulations</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="123" column="14" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="123" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_l_m_1a091504a34840eac2b14ffe005c0b6843" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="struct_quant_lib_1_1sim_event" kindref="compound">simEvent</ref>&lt; derivedRandomLM&lt; copulaPolicy, USNG &gt; &gt; &gt; &amp;</type>
        <definition>const std::vector&lt; simEvent&lt; derivedRandomLM&lt; copulaPolicy, USNG &gt; &gt; &gt; &amp; QuantLib::RandomLM&lt; derivedRandomLM, copulaPolicy, USNG &gt;::getSim</definition>
        <argsstring>(const Size iSim) const</argsstring>
        <name>getSim</name>
        <qualifiedname>QuantLib::RandomLM::getSim</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iSim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="141" column="13" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_random_l_m_1a65756d27445e4261e8bbf377849ca2c9" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::RandomLM&lt; derivedRandomLM, copulaPolicy, USNG &gt;::getEventRecovery</definition>
        <argsstring>(const simEvent&lt; derivedRandomLM&lt; copulaPolicy, USNG &gt; &gt; &amp;evt) const</argsstring>
        <name>getEventRecovery</name>
        <qualifiedname>QuantLib::RandomLM::getEventRecovery</qualifiedname>
        <param>
          <type>const <ref refid="struct_quant_lib_1_1sim_event" kindref="compound">simEvent</ref>&lt; derivedRandomLM&lt; copulaPolicy, USNG &gt; &gt; &amp;</type>
          <declname>evt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="145" column="14" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="145" bodyend="150"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Base class for latent model monte carlo simulation. Independent of the copula type and the generator. Generates the factors and variable samples and determines event threshold but it is not responsible for actual event specification; thats the derived classes responsibility according to what they model. Derived classes need mainly to implement nextSample (Worker::nextSample in the multithreaded version) to compute the simulation event generated, if any, from the latent variables sample. They also have the accompanying event trait to specify. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>QuantLib::DefaultLossModel</label>
        <link refid="class_quant_lib_1_1_default_loss_model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="6">
        <label>QuantLib::RandomDefaultLM&lt; GaussianCopulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_random_default_l_m"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::RandomDefaultLM&lt; TCopulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_random_default_l_m"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::RandomLM&lt; derivedRandomLM, copulaPolicy, USNG &gt;</label>
        <link refid="class_quant_lib_1_1_random_l_m"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QuantLib::RandomLossLM&lt; GaussianCopulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_random_loss_l_m"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>QuantLib::RandomLossLM&lt; TCopulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_random_loss_l_m"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>QuantLib::DefaultLossModel</label>
        <link refid="class_quant_lib_1_1_default_loss_model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>basket_</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::Handle&lt; QuantLib::Basket &gt;</label>
        <link refid="class_quant_lib_1_1_handle"/>
      </node>
      <node id="2">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="1">
        <label>QuantLib::RandomLM&lt; derivedRandomLM, copulaPolicy, USNG &gt;</label>
        <link refid="class_quant_lib_1_1_random_l_m"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::RelinkableHandle&lt; QuantLib::Basket &gt;</label>
        <link refid="class_quant_lib_1_1_relinkable_handle"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/credit/randomdefaultlatentmodel.hpp" line="96" column="5" bodyfile="ql/experimental/credit/randomdefaultlatentmodel.hpp" bodystart="97" bodyend="221"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_lazy_object_1a02070ea7442d30625992c1711030d4b8" prot="protected" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>alwaysForward_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a17c9433135a259e4776baec66204a484" prot="public" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>alwaysForwardNotifications</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ad2700ffb7198321f52fdeb42e9a8e043" prot="protected" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>basket_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a5244c7f83592375a0ea9048296435fd1" prot="protected" virt="virtual"><scope>QuantLib::RandomLM</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a58b4986a80efa18634483a92c121e26e" prot="protected" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>calculated_</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a938ad1437441136c3d756fda1d626a05" prot="protected" virt="virtual"><scope>QuantLib::RandomLM</scope><name>computeHistogram</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a875e4919a85024b5fb1d23d3836530a9" prot="protected" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>copula_</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a392a89fbdee12becbe1127939a4db05b" prot="private" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>copulaRNG_type</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a24308965e6ede94b4f8b0ad3bc4d0f37" prot="protected" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>copulasRng_</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::RandomLM</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a65e1bf84cbd60eae162d99126abb1834" prot="protected" virt="virtual"><scope>QuantLib::RandomLM</scope><name>defaultCorrelation</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ac51090f561e4372e495bfa9edee0000b" prot="protected" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>DefaultLossModel</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ab57e81d3fdd238c0cb19db2808bc5b59" prot="protected" virt="virtual"><scope>QuantLib::RandomLM</scope><name>densityTrancheLoss</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1afd0d4637df1423173d5efc758a16f354" prot="protected" virt="virtual"><scope>QuantLib::RandomLM</scope><name>expectedRecovery</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a4d3026de4233c47b892cabda67feacea" prot="protected" virt="virtual"><scope>QuantLib::RandomLM</scope><name>expectedShortfall</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a517374354871d97b20e9c67b27d88e2a" prot="protected" virt="virtual"><scope>QuantLib::RandomLM</scope><name>expectedTrancheLoss</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1af984a2a4cca81e40921b84f4b873c551" prot="protected" virt="virtual"><scope>QuantLib::RandomLM</scope><name>expectedTrancheLossInterval</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1afac6ee19c3107c453e1347dd8000e023" prot="public" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>forwardFirstNotificationOnly</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7157f41e83f2c5d924f5c5bafda04d1d" prot="public" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>freeze</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7bb721fe00c6854e602758aba629ab77" prot="protected" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>frozen_</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a65756d27445e4261e8bbf377849ca2c9" prot="protected" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>getEventRecovery</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a091504a34840eac2b14ffe005c0b6843" prot="protected" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>getSim</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a0a7c5d42815a4e16ee2158e24dbfc748" prot="public" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>isCalculated</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a26f18f4ff7faaaebd8eae50e064b493e" prot="public" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>LazyObject</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a07ceb3783bff4c2b911f853d39d66074" prot="protected" virt="virtual"><scope>QuantLib::RandomLM</scope><name>lossDistribution</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a199660d1507c7764679e92eef833b841" prot="protected" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>maxHorizon_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1aba4a30f98317ef5d2d71d2173c2c5869" prot="protected" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>nSims_</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a205ba9e89de18296f359864c37aa1450" prot="protected" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>numFactors_</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a02e7e50c573a4f470b302cdf7ecc3aff" prot="protected" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>numLMVars_</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::DefaultLossModel::"><scope>QuantLib::RandomLM</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::DefaultLossModel::"><scope>QuantLib::RandomLM</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::RandomLM</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::RandomLM</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::DefaultLossModel::"><scope>QuantLib::RandomLM</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::QuantLib::Observer::"><scope>QuantLib::RandomLM</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1ad81926f2a22d5555c4e9c6a1c4df4928" prot="protected" virt="virtual"><scope>QuantLib::RandomLM</scope><name>percentile</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1aa3b6a096daf1a894f4b06c5d6ae68934" prot="protected" virt="virtual"><scope>QuantLib::RandomLM</scope><name>percentileAndInterval</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a0ac9a7bf809a54db301b8f66f9fb3768" prot="protected" virt="virtual"><scope>QuantLib::RandomLM</scope><name>performCalculations</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a50df3747c1189bb14a9e7a938a43c1ae" prot="protected" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>performSimulations</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a4573522256974f56442feed91246249c" prot="protected" virt="virtual"><scope>QuantLib::RandomLM</scope><name>probAtLeastNEvents</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1a922ca5f0ea73b3a33420fbcfb2556e93" prot="protected" virt="virtual"><scope>QuantLib::RandomLM</scope><name>probOverLoss</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a61f890c966b50d23efc6b7c231b7c1e2" prot="protected" virt="virtual"><scope>QuantLib::RandomLM</scope><name>probsBeingNthEvent</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1ad8368a31961fef105ee83e0aae8aca77" prot="protected" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>RandomLM</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a70c9b24e50132408d8d9ce4f6674662a" prot="public" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>recalculate</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1aa6adabc786a8b94e680ad8be3d458741" prot="private" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>seed_</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1adef2809f92d6028e82303b25c43c28e6" prot="protected" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>simsBuffer_</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1a467843d56b00359a8fa7d0a1017079a5" prot="protected" virt="virtual"><scope>QuantLib::RandomLM</scope><name>splitESFLevel</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a682e69146ccd628df74a73ed296e32be" prot="protected" virt="virtual"><scope>QuantLib::RandomLM</scope><name>splitVaRAndError</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a46f349953322fb99f243d90734cf2bbd" prot="protected" virt="virtual"><scope>QuantLib::RandomLM</scope><name>splitVaRLevel</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a2e0e4786666453024b9d4e0761f2770b" prot="public" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>unfreeze</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1afdaffcaed2e17a3e4732f681731adf63" prot="protected" virt="virtual"><scope>QuantLib::RandomLM</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a9d719c43bb627177a90d7d12324a2d6e" prot="public" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>~LazyObject</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::RandomLM</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::RandomLM</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_random_l_m_1a66930dbc082605c3eaaa132198c85585" prot="public" virt="non-virtual"><scope>QuantLib::RandomLM</scope><name>~RandomLM</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
