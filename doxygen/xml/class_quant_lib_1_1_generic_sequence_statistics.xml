<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_generic_sequence_statistics" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::GenericSequenceStatistics</compoundname>
    <includes refid="sequencestatistics_8hpp" local="no">sequencestatistics.hpp</includes>
    <templateparamlist>
      <param>
        <type>class StatisticsType</type>
      </param>
    </templateparamlist>
    <sectiondef kind="user-defined">
      <header>Modifiers</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_generic_sequence_statistics_1a2ec57804a091ee7e5ba762b3cd5b78b1" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::dimension_</definition>
        <argsstring></argsstring>
        <name>dimension_</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::dimension_</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="144" column="14" bodyfile="ql/math/statistics/sequencestatistics.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_generic_sequence_statistics_1a004ada7f5fb43c073be2ca51d37fa5bc" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; statistics_type &gt;</type>
        <definition>std::vector&lt;statistics_type&gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::stats_</definition>
        <argsstring></argsstring>
        <name>stats_</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::stats_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="145" column="21" bodyfile="ql/math/statistics/sequencestatistics.hpp" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_generic_sequence_statistics_1a56f855cfc73dc7c18e00466efa6e6a35" prot="protected" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::results_</definition>
        <argsstring></argsstring>
        <name>results_</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::results_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="146" column="29" bodyfile="ql/math/statistics/sequencestatistics.hpp" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_generic_sequence_statistics_1a345a682b08493ffd28f47d56ca97bb91" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::quadraticSum_</definition>
        <argsstring></argsstring>
        <name>quadraticSum_</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::quadraticSum_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="147" column="16" bodyfile="ql/math/statistics/sequencestatistics.hpp" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1ac9daf5b9ea32cb8208709d9b6312c518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::GenericSequenceStatistics&lt; Stat &gt;::reset</definition>
        <argsstring>(Size dimension=0)</argsstring>
        <name>reset</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::reset</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>dimension</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="113" column="14" bodyfile="ql/math/statistics/sequencestatistics.hpp" bodystart="229" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1afed1414399fd3f4ac37f1dbc96f15001" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Sequence</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::add</definition>
        <argsstring>(const Sequence &amp;sample, Real weight=1.0)</argsstring>
        <name>add</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::add</qualifiedname>
        <param>
          <type>const Sequence &amp;</type>
          <declname>sample</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>weight</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="115" column="14" bodyfile="ql/math/statistics/sequencestatistics.hpp" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1aa55a8f041184fafde97a5a40849be95f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::add</definition>
        <argsstring>(Iterator begin, Iterator end, Real weight=1.0)</argsstring>
        <name>add</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::add</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>Iterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>weight</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="120" column="14" bodyfile="ql/math/statistics/sequencestatistics.hpp" bodystart="120" bodyend="141"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>inspectors</header>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1a0c11b74192c1c056eaf37c4014db5241" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="59" column="14" bodyfile="ql/math/statistics/sequencestatistics.hpp" bodystart="59" bodyend="59"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>covariance and correlation</header>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1a39acef74265e8b227f78806d5b6ba56c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::GenericSequenceStatistics&lt; Stat &gt;::covariance</definition>
        <argsstring>() const</argsstring>
        <name>covariance</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::covariance</qualifiedname>
        <briefdescription>
<para>returns the covariance <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="64" column="16" bodyfile="ql/math/statistics/sequencestatistics.hpp" bodystart="247" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1a30395257aa92806266bb8ca0152dd768" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::GenericSequenceStatistics&lt; Stat &gt;::correlation</definition>
        <argsstring>() const</argsstring>
        <name>correlation</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::correlation</qualifiedname>
        <briefdescription>
<para>returns the correlation <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="66" column="16" bodyfile="ql/math/statistics/sequencestatistics.hpp" bodystart="269" bodyend="295"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>1-D inspectors lifted from underlying statistics class</header>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1ab1329ef61038ee92f26e1e0e39295f71" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::GenericSequenceStatistics&lt; Stat &gt;::samples</definition>
        <argsstring>() const</argsstring>
        <name>samples</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::samples</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="70" column="14" bodyfile="ql/math/statistics/sequencestatistics.hpp" bodystart="165" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1a194b1dc1fb39c52c36aad47a6781360e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GenericSequenceStatistics&lt; Stat &gt;::weightSum</definition>
        <argsstring>() const</argsstring>
        <name>weightSum</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::weightSum</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="71" column="14" bodyfile="ql/math/statistics/sequencestatistics.hpp" bodystart="170" bodyend="172"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>N-D inspectors lifted from underlying statistics class</header>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1a3a130cba48da517fecb49295d65a1899" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::mean</definition>
        <argsstring>() const</argsstring>
        <name>mean</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::mean</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="76" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1a9561d171ad02fc60a38057e2f8b5f61e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::variance</definition>
        <argsstring>() const</argsstring>
        <name>variance</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::variance</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="77" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1a3c1f943fb8e2e083045aef97b6bf0e4c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::standardDeviation</definition>
        <argsstring>() const</argsstring>
        <name>standardDeviation</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::standardDeviation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="78" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1a00102403efc0487e98f2f3fdfb68ffac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::downsideVariance</definition>
        <argsstring>() const</argsstring>
        <name>downsideVariance</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::downsideVariance</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="79" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1a54fa7490a3c212d298bdf0efe3062edc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::downsideDeviation</definition>
        <argsstring>() const</argsstring>
        <name>downsideDeviation</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::downsideDeviation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="80" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1aed3db86c0c5bff13783d9105d95d3e1b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::semiVariance</definition>
        <argsstring>() const</argsstring>
        <name>semiVariance</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::semiVariance</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="81" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1ae5e3da261a1d71aa8dcd6a074c57da05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::semiDeviation</definition>
        <argsstring>() const</argsstring>
        <name>semiDeviation</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::semiDeviation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="82" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1a5319ec6303ca07a4fc8f2fb76ce639d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::errorEstimate</definition>
        <argsstring>() const</argsstring>
        <name>errorEstimate</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::errorEstimate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="83" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1acda0a686d451e184daad6134f005b5b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::skewness</definition>
        <argsstring>() const</argsstring>
        <name>skewness</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::skewness</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="84" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1a6478984007995afa0defc21af0d55f2b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::kurtosis</definition>
        <argsstring>() const</argsstring>
        <name>kurtosis</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::kurtosis</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="85" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1a62ac0f2e287ad67e6719f18bd8430fe1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::min</definition>
        <argsstring>() const</argsstring>
        <name>min</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::min</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="86" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1ac35877bbe3673a2808cc84e18096ef44" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::max</definition>
        <argsstring>() const</argsstring>
        <name>max</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::max</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="87" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1a5a63129310cbcf48aea913bb457e6f23" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::gaussianPercentile</definition>
        <argsstring>(Real y) const</argsstring>
        <name>gaussianPercentile</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::gaussianPercentile</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="90" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1a6cbd32cbfab3d6973d209cfb7af46d41" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::percentile</definition>
        <argsstring>(Real y) const</argsstring>
        <name>percentile</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::percentile</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="91" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1a46256e35a75805af205ce05a34745be8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::gaussianPotentialUpside</definition>
        <argsstring>(Real percentile) const</argsstring>
        <name>gaussianPotentialUpside</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::gaussianPotentialUpside</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>percentile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="93" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1a81d804601ec9171d836104ee62a3fba4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::potentialUpside</definition>
        <argsstring>(Real percentile) const</argsstring>
        <name>potentialUpside</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::potentialUpside</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>percentile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="94" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1a0d469d6b7aa8e1d5e8290bc8c8b0785b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::gaussianValueAtRisk</definition>
        <argsstring>(Real percentile) const</argsstring>
        <name>gaussianValueAtRisk</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::gaussianValueAtRisk</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>percentile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="96" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1ad0782061efe0ebd69ceedf5ab7aeb75d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::valueAtRisk</definition>
        <argsstring>(Real percentile) const</argsstring>
        <name>valueAtRisk</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::valueAtRisk</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>percentile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="97" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1a7e1e474b68b5386f16f6f6a18bb1e565" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::gaussianExpectedShortfall</definition>
        <argsstring>(Real percentile) const</argsstring>
        <name>gaussianExpectedShortfall</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::gaussianExpectedShortfall</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>percentile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="99" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1afc8f6b4a1b3e1ea1c1831b181e1fc37b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::expectedShortfall</definition>
        <argsstring>(Real percentile) const</argsstring>
        <name>expectedShortfall</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::expectedShortfall</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>percentile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="100" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1a3d7663bbbe6962b2f2f052ca047b009d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::regret</definition>
        <argsstring>(Real target) const</argsstring>
        <name>regret</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::regret</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="102" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1a81fb28612b31decf996f7eb8a6a559b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::gaussianShortfall</definition>
        <argsstring>(Real target) const</argsstring>
        <name>gaussianShortfall</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::gaussianShortfall</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="104" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1aabc40b15785d21702e4743d6c7bc45a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::shortfall</definition>
        <argsstring>(Real target) const</argsstring>
        <name>shortfall</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::shortfall</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="105" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1a19555399e2eaaec7c7157b3aed61b6ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::gaussianAverageShortfall</definition>
        <argsstring>(Real target) const</argsstring>
        <name>gaussianAverageShortfall</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::gaussianAverageShortfall</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="107" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1a93705d2f7dec612ec6ddebaa021d0515" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::averageShortfall</definition>
        <argsstring>(Real target) const</argsstring>
        <name>averageShortfall</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::averageShortfall</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="108" column="21"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_generic_sequence_statistics_1add77c16f245c813110a55f573f0931e5" prot="public" static="no">
        <type>StatisticsType</type>
        <definition>typedef StatisticsType QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::statistics_type</definition>
        <argsstring></argsstring>
        <name>statistics_type</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::statistics_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="53" column="32" bodyfile="ql/math/statistics/sequencestatistics.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_generic_sequence_statistics_1a1662e89189ac88a9bdbe1effcca4725e" prot="public" static="no">
        <type>std::vector&lt; typename StatisticsType::value_type &gt;</type>
        <definition>typedef std::vector&lt;typename StatisticsType::value_type&gt; QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="54" column="29" bodyfile="ql/math/statistics/sequencestatistics.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_generic_sequence_statistics_1a5f71e18c2ad301f3001b0ed3b39df92e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::GenericSequenceStatistics&lt; Stat &gt;::GenericSequenceStatistics</definition>
        <argsstring>(Size dimension=0)</argsstring>
        <name>GenericSequenceStatistics</name>
        <qualifiedname>QuantLib::GenericSequenceStatistics::GenericSequenceStatistics</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>dimension</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/sequencestatistics.hpp" line="56" column="9" bodyfile="ql/math/statistics/sequencestatistics.hpp" bodystart="160" bodyend="162"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para><ref refid="namespace_quant_lib_1ae2e788da35d2b866040a03b96227ee6e" kindref="member">Statistics</ref> analysis of N-dimensional (sequence) data. </para>
    </briefdescription>
    <detaileddescription>
<para>It provides 1-dimensional statistics as discrepancy plus N-dimensional (sequence) statistics (e.g. mean, variance, skewness, kurtosis, etc.) with one component for each dimension of the sample space.</para>
<para>For most of the statistics this class relies on the StatisticsType underlying class to provide 1-D methods that will be iterated for all the components of the N-D data. These lifted methods are the union of all the methods that might be requested to the 1-D underlying StatisticsType class, with the usual compile-time checks provided by the template approach.</para>
<para><xrefsect id="test_1_test000078"><xreftitle>Test</xreftitle><xrefdescription><para>the correctness of the returned values is tested by checking them against numerical calculations. </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::GenericSequenceStatistics&lt; StatisticsType &gt;</label>
        <link refid="class_quant_lib_1_1_generic_sequence_statistics"/>
        <childnode refid="2" relation="usage">
          <edgelabel>quadraticSum_</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::Matrix</label>
        <link refid="class_quant_lib_1_1_matrix"/>
      </node>
    </collaborationgraph>
    <location file="ql/math/statistics/sequencestatistics.hpp" line="50" column="5" bodyfile="ql/math/statistics/sequencestatistics.hpp" bodystart="50" bodyend="148"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1afed1414399fd3f4ac37f1dbc96f15001" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>add</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1aa55a8f041184fafde97a5a40849be95f" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>add</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a93705d2f7dec612ec6ddebaa021d0515" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>averageShortfall</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a30395257aa92806266bb8ca0152dd768" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>correlation</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a39acef74265e8b227f78806d5b6ba56c" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>covariance</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a2ec57804a091ee7e5ba762b3cd5b78b1" prot="protected" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>dimension_</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a54fa7490a3c212d298bdf0efe3062edc" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>downsideDeviation</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a00102403efc0487e98f2f3fdfb68ffac" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>downsideVariance</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a5319ec6303ca07a4fc8f2fb76ce639d4" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>errorEstimate</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1afc8f6b4a1b3e1ea1c1831b181e1fc37b" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>expectedShortfall</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a19555399e2eaaec7c7157b3aed61b6ed" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>gaussianAverageShortfall</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a7e1e474b68b5386f16f6f6a18bb1e565" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>gaussianExpectedShortfall</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a5a63129310cbcf48aea913bb457e6f23" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>gaussianPercentile</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a46256e35a75805af205ce05a34745be8" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>gaussianPotentialUpside</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a81fb28612b31decf996f7eb8a6a559b3" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>gaussianShortfall</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a0d469d6b7aa8e1d5e8290bc8c8b0785b" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>gaussianValueAtRisk</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a5f71e18c2ad301f3001b0ed3b39df92e" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>GenericSequenceStatistics</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a6478984007995afa0defc21af0d55f2b" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>kurtosis</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1ac35877bbe3673a2808cc84e18096ef44" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>max</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a3a130cba48da517fecb49295d65a1899" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>mean</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a62ac0f2e287ad67e6719f18bd8430fe1" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>min</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a6cbd32cbfab3d6973d209cfb7af46d41" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>percentile</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a81d804601ec9171d836104ee62a3fba4" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>potentialUpside</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a345a682b08493ffd28f47d56ca97bb91" prot="protected" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>quadraticSum_</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a3d7663bbbe6962b2f2f052ca047b009d" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>regret</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1ac9daf5b9ea32cb8208709d9b6312c518" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>reset</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a56f855cfc73dc7c18e00466efa6e6a35" prot="protected" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>results_</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1ab1329ef61038ee92f26e1e0e39295f71" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>samples</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1ae5e3da261a1d71aa8dcd6a074c57da05" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>semiDeviation</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1aed3db86c0c5bff13783d9105d95d3e1b" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>semiVariance</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1aabc40b15785d21702e4743d6c7bc45a1" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>shortfall</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a0c11b74192c1c056eaf37c4014db5241" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>size</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1acda0a686d451e184daad6134f005b5b0" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>skewness</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a3c1f943fb8e2e083045aef97b6bf0e4c" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>standardDeviation</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1add77c16f245c813110a55f573f0931e5" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>statistics_type</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a004ada7f5fb43c073be2ca51d37fa5bc" prot="protected" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>stats_</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a1662e89189ac88a9bdbe1effcca4725e" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>value_type</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1ad0782061efe0ebd69ceedf5ab7aeb75d" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>valueAtRisk</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a9561d171ad02fc60a38057e2f8b5f61e" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>variance</name></member>
      <member refid="class_quant_lib_1_1_generic_sequence_statistics_1a194b1dc1fb39c52c36aad47a6781360e" prot="public" virt="non-virtual"><scope>QuantLib::GenericSequenceStatistics</scope><name>weightSum</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
