<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_extended_black_scholes_merton_process" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::ExtendedBlackScholesMertonProcess</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_generalized_black_scholes_process" prot="public" virt="non-virtual">QuantLib::GeneralizedBlackScholesProcess</basecompoundref>
    <includes refid="extendedblackscholesprocess_8hpp" local="no">extendedblackscholesprocess.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_quant_lib_1_1_extended_black_scholes_merton_process_1aca4cc9e25a87be8035c019a7dafb2946" prot="public" static="no" strong="no">
        <type></type>
        <name>Discretization</name>
        <qualifiedname>QuantLib::ExtendedBlackScholesMertonProcess::Discretization</qualifiedname>
        <enumvalue id="class_quant_lib_1_1_extended_black_scholes_merton_process_1aca4cc9e25a87be8035c019a7dafb2946a76ddfe705d315af66db2595cd5f2e70c" prot="public">
          <name>Euler</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_extended_black_scholes_merton_process_1aca4cc9e25a87be8035c019a7dafb2946af8f0322dc0681de6977e3a4a5dec5670" prot="public">
          <name>Milstein</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_extended_black_scholes_merton_process_1aca4cc9e25a87be8035c019a7dafb2946a117c87e67365891f750582fd03321923" prot="public">
          <name>PredictorCorrector</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/extendedblackscholesprocess.hpp" line="39" column="9" bodyfile="ql/experimental/processes/extendedblackscholesprocess.hpp" bodystart="39" bodyend="39"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_extended_black_scholes_merton_process_1ab590b23de3995392dd7ad7e2d3b39381" prot="private" static="no" mutable="no">
        <type>const Discretization</type>
        <definition>const Discretization QuantLib::ExtendedBlackScholesMertonProcess::discretization_</definition>
        <argsstring></argsstring>
        <name>discretization_</name>
        <qualifiedname>QuantLib::ExtendedBlackScholesMertonProcess::discretization_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/extendedblackscholesprocess.hpp" line="53" column="30" bodyfile="ql/experimental/processes/extendedblackscholesprocess.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_extended_black_scholes_merton_process_1a33b4ae999a54b4c0a89c090f90e4caa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::ExtendedBlackScholesMertonProcess::ExtendedBlackScholesMertonProcess</definition>
        <argsstring>(const Handle&lt; Quote &gt; &amp;x0, const Handle&lt; YieldTermStructure &gt; &amp;dividendTS, const Handle&lt; YieldTermStructure &gt; &amp;riskFreeTS, const Handle&lt; BlackVolTermStructure &gt; &amp;blackVolTS, const ext::shared_ptr&lt; discretization &gt; &amp;d=ext::shared_ptr&lt; discretization &gt;(new EulerDiscretization), Discretization evolDisc=Milstein)</argsstring>
        <name>ExtendedBlackScholesMertonProcess</name>
        <qualifiedname>QuantLib::ExtendedBlackScholesMertonProcess::ExtendedBlackScholesMertonProcess</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
          <declname>dividendTS</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
          <declname>riskFreeTS</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_black_vol_term_structure" kindref="compound">BlackVolTermStructure</ref> &gt; &amp;</type>
          <declname>blackVolTS</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_stochastic_process_1_1discretization" kindref="compound">discretization</ref> &gt; &amp;</type>
          <declname>d</declname>
          <defval>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_stochastic_process_1_1discretization" kindref="compound">discretization</ref> &gt;(new <ref refid="class_quant_lib_1_1_euler_discretization" kindref="compound">EulerDiscretization</ref>)</defval>
        </param>
        <param>
          <type>Discretization</type>
          <declname>evolDisc</declname>
          <defval>Milstein</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/extendedblackscholesprocess.hpp" line="40" column="9" bodyfile="ql/experimental/processes/extendedblackscholesprocess.cpp" bodystart="24" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_extended_black_scholes_merton_process_1a0bf290a22e06b6ebf3f970cb3ac5c595" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ExtendedBlackScholesMertonProcess::drift</definition>
        <argsstring>(Time t, Real x) const override</argsstring>
        <name>drift</name>
        <qualifiedname>QuantLib::ExtendedBlackScholesMertonProcess::drift</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process1_d_1ad27eced4c2abbe7d8da5951969158e2d">drift</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the drift part of the equation, i.e. <formula id="478">$ \mu(t, x_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/extendedblackscholesprocess.hpp" line="48" column="14" bodyfile="ql/experimental/processes/extendedblackscholesprocess.cpp" bodystart="34" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_extended_black_scholes_merton_process_1a01278082a7b600270826af2f9e39b90d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ExtendedBlackScholesMertonProcess::diffusion</definition>
        <argsstring>(Time t, Real x) const override</argsstring>
        <name>diffusion</name>
        <qualifiedname>QuantLib::ExtendedBlackScholesMertonProcess::diffusion</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process1_d_1a66bde34ae0158d64169e39655fdfcfc0">diffusion</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the diffusion part of the equation, i.e. <formula id="479">$ \sigma(t, x_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/extendedblackscholesprocess.hpp" line="49" column="14" bodyfile="ql/experimental/processes/extendedblackscholesprocess.cpp" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_extended_black_scholes_merton_process_1aae9f92f2934c5cba48f23c292f1baf95" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ExtendedBlackScholesMertonProcess::evolve</definition>
        <argsstring>(Time t0, Real x0, Time dt, Real dw) const override</argsstring>
        <name>evolve</name>
        <qualifiedname>QuantLib::ExtendedBlackScholesMertonProcess::evolve</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process1_d_1a39605ea27c7ef3a7feafed4fafcc1f90">evolve</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>dw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the asset value after a time interval  <formula id="474">$ \Delta t
$</formula> according to the given discretization. By default, it returns   <formula id="483">\[E(x_0,t_0,\Delta t) + S(x_0,t_0,\Delta t) \cdot \Delta w
\]</formula> where <formula id="476">$ E $</formula> is the expectation and <formula id="290">$ S $</formula> the standard deviation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/processes/extendedblackscholesprocess.hpp" line="50" column="14" bodyfile="ql/experimental/processes/extendedblackscholesprocess.cpp" bodystart="48" bodyend="91"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>experimental Black-Scholes-Merton stochastic process </para>
    </briefdescription>
    <detaileddescription>
<para>This class allows to choose a built-in discretization scheme </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::ExtendedBlackScholesMertonProcess</label>
        <link refid="class_quant_lib_1_1_extended_black_scholes_merton_process"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::GeneralizedBlackScholesProcess</label>
        <link refid="class_quant_lib_1_1_generalized_black_scholes_process"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="4">
        <label>QuantLib::StochasticProcess</label>
        <link refid="class_quant_lib_1_1_stochastic_process"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::StochasticProcess1D</label>
        <link refid="class_quant_lib_1_1_stochastic_process1_d"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::ExtendedBlackScholesMertonProcess</label>
        <link refid="class_quant_lib_1_1_extended_black_scholes_merton_process"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::GeneralizedBlackScholesProcess</label>
        <link refid="class_quant_lib_1_1_generalized_black_scholes_process"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="4">
        <label>QuantLib::StochasticProcess</label>
        <link refid="class_quant_lib_1_1_stochastic_process"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::StochasticProcess1D</label>
        <link refid="class_quant_lib_1_1_stochastic_process1_d"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/processes/extendedblackscholesprocess.hpp" line="36" column="5" bodyfile="ql/experimental/processes/extendedblackscholesprocess.hpp" bodystart="37" bodyend="54"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_generalized_black_scholes_process_1af138c8d7679ab9ee3c1196db728a309c" prot="public" virt="virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>apply</name></member>
      <member refid="class_quant_lib_1_1_generalized_black_scholes_process_1a6da3dae01e3435556a3b14a06887aaa1" prot="public" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>blackVolatility</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_extended_black_scholes_merton_process_1a01278082a7b600270826af2f9e39b90d" prot="public" virt="virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>diffusion</name></member>
      <member refid="class_quant_lib_1_1_extended_black_scholes_merton_process_1aca4cc9e25a87be8035c019a7dafb2946" prot="public" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>Discretization</name></member>
      <member refid="class_quant_lib_1_1_extended_black_scholes_merton_process_1ab590b23de3995392dd7ad7e2d3b39381" prot="private" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>discretization_</name></member>
      <member refid="class_quant_lib_1_1_generalized_black_scholes_process_1af0b5ea3952602e4e9fb96cd63228ff1b" prot="public" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>dividendYield</name></member>
      <member refid="class_quant_lib_1_1_extended_black_scholes_merton_process_1a0bf290a22e06b6ebf3f970cb3ac5c595" prot="public" virt="virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>drift</name></member>
      <member refid="class_quant_lib_1_1_extended_black_scholes_merton_process_1aca4cc9e25a87be8035c019a7dafb2946a76ddfe705d315af66db2595cd5f2e70c" prot="public" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>Euler</name></member>
      <member refid="class_quant_lib_1_1_extended_black_scholes_merton_process_1aae9f92f2934c5cba48f23c292f1baf95" prot="public" virt="virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>evolve</name></member>
      <member refid="class_quant_lib_1_1_generalized_black_scholes_process_1a942429a2002692b5ceb0cfc646beb174" prot="public" virt="virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>expectation</name></member>
      <member refid="class_quant_lib_1_1_extended_black_scholes_merton_process_1a33b4ae999a54b4c0a89c090f90e4caa1" prot="public" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>ExtendedBlackScholesMertonProcess</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0346d38598fb9a5a1cd58024f05081aa" prot="public" virt="virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>factors</name></member>
      <member refid="class_quant_lib_1_1_generalized_black_scholes_process_1a6191843b621dcc99f9a94734bbf6548e" prot="public" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>GeneralizedBlackScholesProcess</name></member>
      <member refid="class_quant_lib_1_1_generalized_black_scholes_process_1abb0647caeacde504b534fdb76a435cc6" prot="public" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>GeneralizedBlackScholesProcess</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_generalized_black_scholes_process_1aeb481d0cd90e889c59593a433416f3f0" prot="public" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>localVolatility</name></member>
      <member refid="class_quant_lib_1_1_extended_black_scholes_merton_process_1aca4cc9e25a87be8035c019a7dafb2946af8f0322dc0681de6977e3a4a5dec5670" prot="public" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>Milstein</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_extended_black_scholes_merton_process_1aca4cc9e25a87be8035c019a7dafb2946a117c87e67365891f750582fd03321923" prot="public" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>PredictorCorrector</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_generalized_black_scholes_process_1aefe8b195c9074f66515647d1ddc7f16c" prot="public" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>riskFreeRate</name></member>
      <member refid="class_quant_lib_1_1_generalized_black_scholes_process_1a2fe1299eb59ac276c49a9f7544e16f19" prot="public" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>stateVariable</name></member>
      <member refid="class_quant_lib_1_1_generalized_black_scholes_process_1a7eacd46b71b39baa72872d454acdeeaf" prot="public" virt="virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>stdDeviation</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a2dd24b794a6b320bc60ba9e1a87bf48e" prot="protected" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>StochasticProcess</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a957ee9776d6048835106ea29ea44927f" prot="protected" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>StochasticProcess</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a8fd2dc83f956da3dd008242ee5a5c926" prot="protected" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>StochasticProcess1D</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a0971f058bea9a93d2ced17c685576686" prot="protected" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>StochasticProcess1D</name></member>
      <member refid="class_quant_lib_1_1_generalized_black_scholes_process_1aadbaae308a4066e94a3aa913b444ed52" prot="public" virt="virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>time</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_generalized_black_scholes_process_1a3a8724db10cd68b424d5572a4ebc7a62" prot="public" virt="virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_generalized_black_scholes_process_1a17b17c60b8a56d8eab8ed63ad7ff64d1" prot="public" virt="virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>variance</name></member>
      <member refid="class_quant_lib_1_1_generalized_black_scholes_process_1ae765ed8c43a8a485adf8baf3dcf608ba" prot="public" virt="virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>x0</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0e2b6a14e675db5abd0ab8965ff7b2c3" prot="public" virt="non-virtual"><scope>QuantLib::ExtendedBlackScholesMertonProcess</scope><name>~StochasticProcess</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
