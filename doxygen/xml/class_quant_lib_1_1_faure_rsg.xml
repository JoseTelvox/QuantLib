<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_faure_rsg" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::FaureRsg</compoundname>
    <includes refid="faurersg_8hpp" local="no">faurersg.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_faure_rsg_1ab71d0c0aaeeb11fd8018e584f479f5fa" prot="public" static="no">
        <type><ref refid="struct_quant_lib_1_1_sample" kindref="compound">Sample</ref>&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt;</type>
        <definition>typedef Sample&lt;std::vector&lt;Real&gt; &gt; QuantLib::FaureRsg::sample_type</definition>
        <argsstring></argsstring>
        <name>sample_type</name>
        <qualifiedname>QuantLib::FaureRsg::sample_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/faurersg.hpp" line="48" column="24" bodyfile="ql/math/randomnumbers/faurersg.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_faure_rsg_1aa60b900565a7a0223dfe0164ddbd46e7" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::FaureRsg::dimensionality_</definition>
        <argsstring></argsstring>
        <name>dimensionality_</name>
        <qualifiedname>QuantLib::FaureRsg::dimensionality_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/faurersg.hpp" line="67" column="14" bodyfile="ql/math/randomnumbers/faurersg.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_faure_rsg_1af59c41ee16e8704ded83bb216bb97aa3" prot="private" static="no" mutable="yes">
        <type><ref refid="struct_quant_lib_1_1_sample" kindref="compound">sample_type</ref></type>
        <definition>sample_type QuantLib::FaureRsg::sequence_</definition>
        <argsstring></argsstring>
        <name>sequence_</name>
        <qualifiedname>QuantLib::FaureRsg::sequence_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/faurersg.hpp" line="69" column="29" bodyfile="ql/math/randomnumbers/faurersg.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_faure_rsg_1aa04d12b0a09ef663d826391fd80594df" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; long int &gt;</type>
        <definition>std::vector&lt;long int&gt; QuantLib::FaureRsg::integerSequence_</definition>
        <argsstring></argsstring>
        <name>integerSequence_</name>
        <qualifiedname>QuantLib::FaureRsg::integerSequence_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/faurersg.hpp" line="70" column="29" bodyfile="ql/math/randomnumbers/faurersg.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_faure_rsg_1a3fa98710a409a7d5d861af9617f9da4a" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; long int &gt;</type>
        <definition>std::vector&lt;long int&gt; QuantLib::FaureRsg::bary_</definition>
        <argsstring></argsstring>
        <name>bary_</name>
        <qualifiedname>QuantLib::FaureRsg::bary_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/faurersg.hpp" line="71" column="29" bodyfile="ql/math/randomnumbers/faurersg.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_faure_rsg_1a1ab4fbef243ee2aaa2888b938e608971" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; std::vector&lt; long int &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;long int&gt; &gt; QuantLib::FaureRsg::gray_</definition>
        <argsstring></argsstring>
        <name>gray_</name>
        <qualifiedname>QuantLib::FaureRsg::gray_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/faurersg.hpp" line="72" column="29" bodyfile="ql/math/randomnumbers/faurersg.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_faure_rsg_1a745b6d09ef7439e7cf7d4eb81b814087" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::FaureRsg::base_</definition>
        <argsstring></argsstring>
        <name>base_</name>
        <qualifiedname>QuantLib::FaureRsg::base_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/faurersg.hpp" line="73" column="14" bodyfile="ql/math/randomnumbers/faurersg.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_faure_rsg_1aec8845bb358b5abc25cb641162e1fa97" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::FaureRsg::mbit_</definition>
        <argsstring></argsstring>
        <name>mbit_</name>
        <qualifiedname>QuantLib::FaureRsg::mbit_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/faurersg.hpp" line="73" column="20" bodyfile="ql/math/randomnumbers/faurersg.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_faure_rsg_1a3e2002177e5a1745631febfd527f3adc" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; long int &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;long int&gt; &gt; QuantLib::FaureRsg::powBase_</definition>
        <argsstring></argsstring>
        <name>powBase_</name>
        <qualifiedname>QuantLib::FaureRsg::powBase_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/faurersg.hpp" line="74" column="21" bodyfile="ql/math/randomnumbers/faurersg.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_faure_rsg_1a079497a9d3a47bb1057c59a8a4e5cc29" prot="private" static="no" mutable="no">
        <type>std::vector&lt; long int &gt;</type>
        <definition>std::vector&lt;long int&gt; QuantLib::FaureRsg::addOne_</definition>
        <argsstring></argsstring>
        <name>addOne_</name>
        <qualifiedname>QuantLib::FaureRsg::addOne_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/faurersg.hpp" line="75" column="21" bodyfile="ql/math/randomnumbers/faurersg.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_faure_rsg_1a9634977a77f56062a911c30b29609ab2" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; std::vector&lt; long int &gt; &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;std::vector&lt;long int&gt; &gt; &gt; QuantLib::FaureRsg::pascal3D</definition>
        <argsstring></argsstring>
        <name>pascal3D</name>
        <qualifiedname>QuantLib::FaureRsg::pascal3D</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/faurersg.hpp" line="76" column="21" bodyfile="ql/math/randomnumbers/faurersg.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_faure_rsg_1aa003fef840952a4e8a43ccb4e99b2368" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double QuantLib::FaureRsg::normalizationFactor_</definition>
        <argsstring></argsstring>
        <name>normalizationFactor_</name>
        <qualifiedname>QuantLib::FaureRsg::normalizationFactor_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/faurersg.hpp" line="77" column="16" bodyfile="ql/math/randomnumbers/faurersg.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_faure_rsg_1a5c3f5757df2c406cf963f69745aa1c05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::FaureRsg::FaureRsg</definition>
        <argsstring>(Size dimensionality)</argsstring>
        <name>FaureRsg</name>
        <qualifiedname>QuantLib::FaureRsg::FaureRsg</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>dimensionality</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/faurersg.hpp" line="49" column="9" bodyfile="ql/math/randomnumbers/faurersg.cpp" bodystart="26" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_faure_rsg_1aa854962afbfd38d9becc06ef44052a7b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; long int &gt; &amp;</type>
        <definition>const std::vector&lt; long int &gt; &amp; QuantLib::FaureRsg::nextIntSequence</definition>
        <argsstring>() const</argsstring>
        <name>nextIntSequence</name>
        <qualifiedname>QuantLib::FaureRsg::nextIntSequence</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/faurersg.hpp" line="50" column="27" bodyfile="ql/math/randomnumbers/faurersg.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_faure_rsg_1a2272f634e5b63b890b49a41e5f173efc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; long int &gt; &amp;</type>
        <definition>const std::vector&lt; long int &gt; &amp; QuantLib::FaureRsg::lastIntSequence</definition>
        <argsstring>() const</argsstring>
        <name>lastIntSequence</name>
        <qualifiedname>QuantLib::FaureRsg::lastIntSequence</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/faurersg.hpp" line="54" column="27" bodyfile="ql/math/randomnumbers/faurersg.hpp" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_faure_rsg_1a92d40dd0e6d75a75b4d1cd361c8955c6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="struct_quant_lib_1_1_sample" kindref="compound">sample_type</ref> &amp;</type>
        <definition>const sample_type &amp; QuantLib::FaureRsg::nextSequence</definition>
        <argsstring>() const</argsstring>
        <name>nextSequence</name>
        <qualifiedname>QuantLib::FaureRsg::nextSequence</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/faurersg.hpp" line="57" column="27" bodyfile="ql/math/randomnumbers/faurersg.hpp" bodystart="57" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_faure_rsg_1a8ccd4be4582bbf47bc588d716b4665ae" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="struct_quant_lib_1_1_sample" kindref="compound">sample_type</ref> &amp;</type>
        <definition>const sample_type &amp; QuantLib::FaureRsg::lastSequence</definition>
        <argsstring>() const</argsstring>
        <name>lastSequence</name>
        <qualifiedname>QuantLib::FaureRsg::lastSequence</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/faurersg.hpp" line="63" column="27" bodyfile="ql/math/randomnumbers/faurersg.hpp" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_faure_rsg_1af55daa7322c8ba38cdc871c7e0d235cd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::FaureRsg::dimension</definition>
        <argsstring>() const</argsstring>
        <name>dimension</name>
        <qualifiedname>QuantLib::FaureRsg::dimension</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/faurersg.hpp" line="64" column="14" bodyfile="ql/math/randomnumbers/faurersg.hpp" bodystart="64" bodyend="64"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_faure_rsg_1a28288c188868baca436f87b66c8a5c43" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::FaureRsg::generateNextIntSequence</definition>
        <argsstring>() const</argsstring>
        <name>generateNextIntSequence</name>
        <qualifiedname>QuantLib::FaureRsg::generateNextIntSequence</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/faurersg.hpp" line="66" column="14" bodyfile="ql/math/randomnumbers/faurersg.cpp" bodystart="109" bodyend="131"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Faure low-discrepancy sequence generator. </para>
    </briefdescription>
    <detaileddescription>
<para>It is based on existing Fortran and C algorithms to calculate pascal matrix and gray transforms.<orderedlist>
<listitem><para>E. Thiemard Economic generation of low-discrepancy sequences with a b-ary gray code.</para>
</listitem><listitem><para>Algorithms 659, 647. <ulink url="http://www.netlib.org/toms/647">http://www.netlib.org/toms/647</ulink>, <ulink url="http://www.netlib.org/toms/659">http://www.netlib.org/toms/659</ulink></para>
<para><xrefsect id="test_1_test000057"><xreftitle>Test</xreftitle><xrefdescription><para>the correctness of the returned values is tested by reproducing known good values. </para>
</xrefdescription></xrefsect></para>
</listitem></orderedlist>
</para>
    </detaileddescription>
    <location file="ql/math/randomnumbers/faurersg.hpp" line="46" column="5" bodyfile="ql/math/randomnumbers/faurersg.hpp" bodystart="46" bodyend="78"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_faure_rsg_1a079497a9d3a47bb1057c59a8a4e5cc29" prot="private" virt="non-virtual"><scope>QuantLib::FaureRsg</scope><name>addOne_</name></member>
      <member refid="class_quant_lib_1_1_faure_rsg_1a3fa98710a409a7d5d861af9617f9da4a" prot="private" virt="non-virtual"><scope>QuantLib::FaureRsg</scope><name>bary_</name></member>
      <member refid="class_quant_lib_1_1_faure_rsg_1a745b6d09ef7439e7cf7d4eb81b814087" prot="private" virt="non-virtual"><scope>QuantLib::FaureRsg</scope><name>base_</name></member>
      <member refid="class_quant_lib_1_1_faure_rsg_1af55daa7322c8ba38cdc871c7e0d235cd" prot="public" virt="non-virtual"><scope>QuantLib::FaureRsg</scope><name>dimension</name></member>
      <member refid="class_quant_lib_1_1_faure_rsg_1aa60b900565a7a0223dfe0164ddbd46e7" prot="private" virt="non-virtual"><scope>QuantLib::FaureRsg</scope><name>dimensionality_</name></member>
      <member refid="class_quant_lib_1_1_faure_rsg_1a5c3f5757df2c406cf963f69745aa1c05" prot="public" virt="non-virtual"><scope>QuantLib::FaureRsg</scope><name>FaureRsg</name></member>
      <member refid="class_quant_lib_1_1_faure_rsg_1a28288c188868baca436f87b66c8a5c43" prot="private" virt="non-virtual"><scope>QuantLib::FaureRsg</scope><name>generateNextIntSequence</name></member>
      <member refid="class_quant_lib_1_1_faure_rsg_1a1ab4fbef243ee2aaa2888b938e608971" prot="private" virt="non-virtual"><scope>QuantLib::FaureRsg</scope><name>gray_</name></member>
      <member refid="class_quant_lib_1_1_faure_rsg_1aa04d12b0a09ef663d826391fd80594df" prot="private" virt="non-virtual"><scope>QuantLib::FaureRsg</scope><name>integerSequence_</name></member>
      <member refid="class_quant_lib_1_1_faure_rsg_1a2272f634e5b63b890b49a41e5f173efc" prot="public" virt="non-virtual"><scope>QuantLib::FaureRsg</scope><name>lastIntSequence</name></member>
      <member refid="class_quant_lib_1_1_faure_rsg_1a8ccd4be4582bbf47bc588d716b4665ae" prot="public" virt="non-virtual"><scope>QuantLib::FaureRsg</scope><name>lastSequence</name></member>
      <member refid="class_quant_lib_1_1_faure_rsg_1aec8845bb358b5abc25cb641162e1fa97" prot="private" virt="non-virtual"><scope>QuantLib::FaureRsg</scope><name>mbit_</name></member>
      <member refid="class_quant_lib_1_1_faure_rsg_1aa854962afbfd38d9becc06ef44052a7b" prot="public" virt="non-virtual"><scope>QuantLib::FaureRsg</scope><name>nextIntSequence</name></member>
      <member refid="class_quant_lib_1_1_faure_rsg_1a92d40dd0e6d75a75b4d1cd361c8955c6" prot="public" virt="non-virtual"><scope>QuantLib::FaureRsg</scope><name>nextSequence</name></member>
      <member refid="class_quant_lib_1_1_faure_rsg_1aa003fef840952a4e8a43ccb4e99b2368" prot="private" virt="non-virtual"><scope>QuantLib::FaureRsg</scope><name>normalizationFactor_</name></member>
      <member refid="class_quant_lib_1_1_faure_rsg_1a9634977a77f56062a911c30b29609ab2" prot="private" virt="non-virtual"><scope>QuantLib::FaureRsg</scope><name>pascal3D</name></member>
      <member refid="class_quant_lib_1_1_faure_rsg_1a3e2002177e5a1745631febfd527f3adc" prot="private" virt="non-virtual"><scope>QuantLib::FaureRsg</scope><name>powBase_</name></member>
      <member refid="class_quant_lib_1_1_faure_rsg_1ab71d0c0aaeeb11fd8018e584f479f5fa" prot="public" virt="non-virtual"><scope>QuantLib::FaureRsg</scope><name>sample_type</name></member>
      <member refid="class_quant_lib_1_1_faure_rsg_1af59c41ee16e8704ded83bb216bb97aa3" prot="private" virt="non-virtual"><scope>QuantLib::FaureRsg</scope><name>sequence_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
