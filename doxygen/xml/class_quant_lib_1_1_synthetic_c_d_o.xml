<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_synthetic_c_d_o" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::SyntheticCDO</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_instrument" prot="public" virt="non-virtual">QuantLib::Instrument</basecompoundref>
    <includes refid="syntheticcdo_8hpp" local="no">syntheticcdo.hpp</includes>
    <innerclass refid="class_quant_lib_1_1_synthetic_c_d_o_1_1arguments" prot="public">QuantLib::SyntheticCDO::arguments</innerclass>
    <innerclass refid="class_quant_lib_1_1_synthetic_c_d_o_1_1engine" prot="public">QuantLib::SyntheticCDO::engine</innerclass>
    <innerclass refid="class_quant_lib_1_1_synthetic_c_d_o_1_1results" prot="public">QuantLib::SyntheticCDO::results</innerclass>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_synthetic_c_d_o_1a86835d5cf7262f1c7753d50896dc89c0" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_basket" kindref="compound">Basket</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;Basket&gt; QuantLib::SyntheticCDO::basket_</definition>
        <argsstring></argsstring>
        <name>basket_</name>
        <qualifiedname>QuantLib::SyntheticCDO::basket_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="172" column="25" bodyfile="ql/experimental/credit/syntheticcdo.hpp" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_synthetic_c_d_o_1a66df78b70dd98381bf33eb685ee240e9" prot="private" static="no" mutable="no">
        <type>Protection::Side</type>
        <definition>Protection::Side QuantLib::SyntheticCDO::side_</definition>
        <argsstring></argsstring>
        <name>side_</name>
        <qualifiedname>QuantLib::SyntheticCDO::side_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="173" column="26" bodyfile="ql/experimental/credit/syntheticcdo.hpp" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_synthetic_c_d_o_1a0c960d1ab523dd952d44abc2b6d09a9a" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref></type>
        <definition>Leg QuantLib::SyntheticCDO::normalizedLeg_</definition>
        <argsstring></argsstring>
        <name>normalizedLeg_</name>
        <qualifiedname>QuantLib::SyntheticCDO::normalizedLeg_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="174" column="13" bodyfile="ql/experimental/credit/syntheticcdo.hpp" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_synthetic_c_d_o_1add0c9497bd61c2c965bc3b52fd4e3788" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::SyntheticCDO::upfrontRate_</definition>
        <argsstring></argsstring>
        <name>upfrontRate_</name>
        <qualifiedname>QuantLib::SyntheticCDO::upfrontRate_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="176" column="14" bodyfile="ql/experimental/credit/syntheticcdo.hpp" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_synthetic_c_d_o_1add2fb6c9103a8ec7019749eac2e3490d" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::SyntheticCDO::runningRate_</definition>
        <argsstring></argsstring>
        <name>runningRate_</name>
        <qualifiedname>QuantLib::SyntheticCDO::runningRate_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="177" column="14" bodyfile="ql/experimental/credit/syntheticcdo.hpp" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_synthetic_c_d_o_1abb979dc117566553b8aeb959fbdf5c80" prot="private" static="no" mutable="no">
        <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>const Real QuantLib::SyntheticCDO::leverageFactor_</definition>
        <argsstring></argsstring>
        <name>leverageFactor_</name>
        <qualifiedname>QuantLib::SyntheticCDO::leverageFactor_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="178" column="20" bodyfile="ql/experimental/credit/syntheticcdo.hpp" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_synthetic_c_d_o_1a99ed3b53c941757493b5262361e6617f" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref></type>
        <definition>DayCounter QuantLib::SyntheticCDO::dayCounter_</definition>
        <argsstring></argsstring>
        <name>dayCounter_</name>
        <qualifiedname>QuantLib::SyntheticCDO::dayCounter_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="179" column="20" bodyfile="ql/experimental/credit/syntheticcdo.hpp" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_synthetic_c_d_o_1acc1827cc80277cdb0138948d4b7f6e0e" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881" kindref="member">BusinessDayConvention</ref></type>
        <definition>BusinessDayConvention QuantLib::SyntheticCDO::paymentConvention_</definition>
        <argsstring></argsstring>
        <name>paymentConvention_</name>
        <qualifiedname>QuantLib::SyntheticCDO::paymentConvention_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="180" column="31" bodyfile="ql/experimental/credit/syntheticcdo.hpp" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_synthetic_c_d_o_1ab6c2d077521a0eb468134918614a8c68" prot="private" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SyntheticCDO::premiumValue_</definition>
        <argsstring></argsstring>
        <name>premiumValue_</name>
        <qualifiedname>QuantLib::SyntheticCDO::premiumValue_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="182" column="22" bodyfile="ql/experimental/credit/syntheticcdo.hpp" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_synthetic_c_d_o_1a8eabe249f5e16d17d7c4673ef5a1975a" prot="private" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SyntheticCDO::protectionValue_</definition>
        <argsstring></argsstring>
        <name>protectionValue_</name>
        <qualifiedname>QuantLib::SyntheticCDO::protectionValue_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="183" column="22" bodyfile="ql/experimental/credit/syntheticcdo.hpp" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_synthetic_c_d_o_1ac8a25e8ea3ce6646e1bc26af67bdb10c" prot="private" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SyntheticCDO::upfrontPremiumValue_</definition>
        <argsstring></argsstring>
        <name>upfrontPremiumValue_</name>
        <qualifiedname>QuantLib::SyntheticCDO::upfrontPremiumValue_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="184" column="22" bodyfile="ql/experimental/credit/syntheticcdo.hpp" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_synthetic_c_d_o_1ad75a2342f7fb3688b23ea1438ef69c1d" prot="private" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SyntheticCDO::remainingNotional_</definition>
        <argsstring></argsstring>
        <name>remainingNotional_</name>
        <qualifiedname>QuantLib::SyntheticCDO::remainingNotional_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="185" column="22" bodyfile="ql/experimental/credit/syntheticcdo.hpp" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_synthetic_c_d_o_1a9ce9b8168ba244caaf6b2a6dfed0d943" prot="private" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::SyntheticCDO::error_</definition>
        <argsstring></argsstring>
        <name>error_</name>
        <qualifiedname>QuantLib::SyntheticCDO::error_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="186" column="22" bodyfile="ql/experimental/credit/syntheticcdo.hpp" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_synthetic_c_d_o_1a853fdd54221458ea2902d32f977cdf1d" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::SyntheticCDO::expectedTrancheLoss_</definition>
        <argsstring></argsstring>
        <name>expectedTrancheLoss_</name>
        <qualifiedname>QuantLib::SyntheticCDO::expectedTrancheLoss_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="187" column="29" bodyfile="ql/experimental/credit/syntheticcdo.hpp" bodystart="187" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_synthetic_c_d_o_1a41e8ceaf6791efa2d14a942e60031a5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::SyntheticCDO::SyntheticCDO</definition>
        <argsstring>(const ext::shared_ptr&lt; Basket &gt; &amp;basket, Protection::Side side, Schedule schedule, Rate upfrontRate, Rate runningRate, const DayCounter &amp;dayCounter, BusinessDayConvention paymentConvention, ext::optional&lt; Real &gt; notional=ext::nullopt)</argsstring>
        <name>SyntheticCDO</name>
        <qualifiedname>QuantLib::SyntheticCDO::SyntheticCDO</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_basket" kindref="compound">Basket</ref> &gt; &amp;</type>
          <declname>basket</declname>
        </param>
        <param>
          <type>Protection::Side</type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_schedule" kindref="compound">Schedule</ref></type>
          <declname>schedule</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>upfrontRate</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>runningRate</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881" kindref="member">BusinessDayConvention</ref></type>
          <declname>paymentConvention</declname>
        </param>
        <param>
          <type>ext::optional&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
          <declname>notional</declname>
          <defval>ext::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the notional exceeds the basket inception tranche notional, the cdo is leveraged by that factor.</para>
<para><xrefsect id="todo_1_todo000026"><xreftitle>Todo</xreftitle><xrefdescription><para>: allow for extra payment flags, arbitrary upfront payment date... </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="118" column="9" bodyfile="ql/experimental/credit/syntheticcdo.cpp" bodystart="36" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_synthetic_c_d_o_1a0ed61aaa7ab498daaaadfdf0b9162942" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_basket" kindref="compound">Basket</ref> &gt; &amp;</type>
        <definition>const ext::shared_ptr&lt; Basket &gt; &amp; QuantLib::SyntheticCDO::basket</definition>
        <argsstring>() const</argsstring>
        <name>basket</name>
        <qualifiedname>QuantLib::SyntheticCDO::basket</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="127" column="31" bodyfile="ql/experimental/credit/syntheticcdo.hpp" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_synthetic_c_d_o_1a590c7afbd1f827ddf4cfa7eea48ace0c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool QuantLib::SyntheticCDO::isExpired</definition>
        <argsstring>() const override</argsstring>
        <name>isExpired</name>
        <qualifiedname>QuantLib::SyntheticCDO::isExpired</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_instrument_1a121a2a929b179900744a58272d46aefe">isExpired</reimplements>
        <briefdescription>
<para>returns whether the instrument might have value greater than zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="129" column="14" bodyfile="ql/experimental/credit/syntheticcdo.cpp" bodystart="131" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_synthetic_c_d_o_1aaf4d7bfe5630565c49239a65f6de1b39" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::SyntheticCDO::fairPremium</definition>
        <argsstring>() const</argsstring>
        <name>fairPremium</name>
        <qualifiedname>QuantLib::SyntheticCDO::fairPremium</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="130" column="14" bodyfile="ql/experimental/credit/syntheticcdo.cpp" bodystart="109" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_synthetic_c_d_o_1a0cf21a2489a7b674b03ba8cd3b5b9e28" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::SyntheticCDO::fairUpfrontPremium</definition>
        <argsstring>() const</argsstring>
        <name>fairUpfrontPremium</name>
        <qualifiedname>QuantLib::SyntheticCDO::fairUpfrontPremium</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="131" column="14" bodyfile="ql/experimental/credit/syntheticcdo.cpp" bodystart="116" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_synthetic_c_d_o_1a63f2884fc4d9cc8806f7a50c90b91251" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::SyntheticCDO::premiumValue</definition>
        <argsstring>() const</argsstring>
        <name>premiumValue</name>
        <qualifiedname>QuantLib::SyntheticCDO::premiumValue</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="132" column="14" bodyfile="ql/experimental/credit/syntheticcdo.cpp" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_synthetic_c_d_o_1a0776c99be4f4cdf66babb9ff25b45baa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::SyntheticCDO::protectionValue</definition>
        <argsstring>() const</argsstring>
        <name>protectionValue</name>
        <qualifiedname>QuantLib::SyntheticCDO::protectionValue</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="133" column="14" bodyfile="ql/experimental/credit/syntheticcdo.cpp" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_synthetic_c_d_o_1ada6a036427221ad7caf62ce4bfb30274" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SyntheticCDO::premiumLegNPV</definition>
        <argsstring>() const</argsstring>
        <name>premiumLegNPV</name>
        <qualifiedname>QuantLib::SyntheticCDO::premiumLegNPV</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="134" column="14" bodyfile="ql/experimental/credit/syntheticcdo.cpp" bodystart="97" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_synthetic_c_d_o_1a406cd51053a00a89c9e349b497359bbe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SyntheticCDO::protectionLegNPV</definition>
        <argsstring>() const</argsstring>
        <name>protectionLegNPV</name>
        <qualifiedname>QuantLib::SyntheticCDO::protectionLegNPV</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="135" column="14" bodyfile="ql/experimental/credit/syntheticcdo.cpp" bodystart="103" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_synthetic_c_d_o_1af87c176a72267b2ca7731fc306118f26" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SyntheticCDO::remainingNotional</definition>
        <argsstring>() const</argsstring>
        <name>remainingNotional</name>
        <qualifiedname>QuantLib::SyntheticCDO::remainingNotional</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Total outstanding tranche notional, not wiped out </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="139" column="14" bodyfile="ql/experimental/credit/syntheticcdo.cpp" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_synthetic_c_d_o_1a4d3633818c42733a113090a328fd1703" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SyntheticCDO::leverageFactor</definition>
        <argsstring>() const</argsstring>
        <name>leverageFactor</name>
        <qualifiedname>QuantLib::SyntheticCDO::leverageFactor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The number of times the contract contains the portfolio tranched notional. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="143" column="14" bodyfile="ql/experimental/credit/syntheticcdo.hpp" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_synthetic_c_d_o_1ab932f6612e7fbb62c456ae8e69c2230f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        <definition>const Date &amp; QuantLib::SyntheticCDO::maturity</definition>
        <argsstring>() const</argsstring>
        <name>maturity</name>
        <qualifiedname>QuantLib::SyntheticCDO::maturity</qualifiedname>
        <briefdescription>
<para>Last protection date. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="147" column="20" bodyfile="ql/experimental/credit/syntheticcdo.hpp" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_synthetic_c_d_o_1ada70304809c53270936a09d7defb2ab4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::SyntheticCDO::implicitCorrelation</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;recoveries, const Handle&lt; YieldTermStructure &gt; &amp;discountCurve, Real targetNPV=0., Real accuracy=1.0e-3) const</argsstring>
        <name>implicitCorrelation</name>
        <qualifiedname>QuantLib::SyntheticCDO::implicitCorrelation</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>recoveries</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
          <declname>discountCurve</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>targetNPV</declname>
          <defval>0.</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.0e-3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The Gaussian Copula LHP implied correlation that makes the contract zero value. This is for a flat correlation along time and portfolio loss level. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="155" column="14" bodyfile="ql/experimental/credit/syntheticcdo.cpp" bodystart="229" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_synthetic_c_d_o_1a7ba5cb2f97c758cab24ab90e11316c8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::SyntheticCDO::expectedTrancheLoss</definition>
        <argsstring>() const</argsstring>
        <name>expectedTrancheLoss</name>
        <qualifiedname>QuantLib::SyntheticCDO::expectedTrancheLoss</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Expected tranche loss for all payment dates </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="163" column="21" bodyfile="ql/experimental/credit/syntheticcdo.cpp" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_synthetic_c_d_o_1a80266da6e5595ee30f8294906b5b0924" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::SyntheticCDO::error</definition>
        <argsstring>() const</argsstring>
        <name>error</name>
        <qualifiedname>QuantLib::SyntheticCDO::error</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="164" column="14" bodyfile="ql/experimental/credit/syntheticcdo.cpp" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_synthetic_c_d_o_1a1f64870c8288f28dc667cffe34c59bd4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::SyntheticCDO::setupArguments</definition>
        <argsstring>(PricingEngine::arguments *) const override</argsstring>
        <name>setupArguments</name>
        <qualifiedname>QuantLib::SyntheticCDO::setupArguments</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_instrument_1af7344eebc48a1a361386e5c5a90a8fcc">setupArguments</reimplements>
        <param>
          <type><ref refid="class_quant_lib_1_1_pricing_engine_1_1arguments" kindref="compound">PricingEngine::arguments</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When a derived argument structure is defined for an instrument, this method should be overridden to fill it. This is mandatory in case a pricing engine is used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="166" column="14" bodyfile="ql/experimental/credit/syntheticcdo.cpp" bodystart="143" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_synthetic_c_d_o_1a0fc02e8a6ea5e228606cc38efaf82edd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::SyntheticCDO::fetchResults</definition>
        <argsstring>(const PricingEngine::results *) const override</argsstring>
        <name>fetchResults</name>
        <qualifiedname>QuantLib::SyntheticCDO::fetchResults</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_instrument_1aebe809131db2941325d037c031bbf41b">fetchResults</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_pricing_engine_1_1results" kindref="compound">PricingEngine::results</ref> *</type>
          <defname>r</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When a derived result structure is defined for an instrument, this method should be overridden to read from it. This is mandatory in case a pricing engine is used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="167" column="14" bodyfile="ql/experimental/credit/syntheticcdo.cpp" bodystart="157" bodyend="169"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_synthetic_c_d_o_1ab6cfd2cb48c29c0732d209bfff5675fb" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::SyntheticCDO::setupExpired</definition>
        <argsstring>() const override</argsstring>
        <name>setupExpired</name>
        <qualifiedname>QuantLib::SyntheticCDO::setupExpired</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_instrument_1a73d90597fcd3ff52a8aed674393ab574">setupExpired</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must leave the instrument in a consistent state when the expiration condition is met. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/syntheticcdo.hpp" line="170" column="14" bodyfile="ql/experimental/credit/syntheticcdo.cpp" bodystart="171" bodyend="178"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Synthetic Collateralized Debt Obligation. </para>
    </briefdescription>
    <detaileddescription>
<para>The instrument prices a mezzanine <ref refid="class_quant_lib_1_1_c_d_o" kindref="compound">CDO</ref> tranche with loss given default between attachment point <formula id="29">$ D_1$</formula> and detachment point <formula id="30">$ D_2 &gt; D_1 $</formula>.</para>
<para>For purchased protection, the instrument value is given by the difference of the protection value <formula id="31">$ V_1 $</formula> and premium value <formula id="32">$ V_2 $</formula>,</para>
<para><formula id="33">\[ V = V_1 - V_2. \]</formula></para>
<para>The protection leg is priced as follows:</para>
<para><itemizedlist>
<listitem><para>Build the probability distribution for volume of defaults <formula id="6">$ L $</formula> (before recovery) or <ref refid="class_quant_lib_1_1_loss" kindref="compound">Loss</ref> Given <ref refid="struct_quant_lib_1_1_default" kindref="compound">Default</ref> <formula id="108">$ LGD = (1-r)\,L $</formula> at times/dates <formula id="35">$ t_i, i=1, ..., N$</formula> (premium schedule times with intermediate steps)</para>
</listitem><listitem><para>Determine the expected value <formula id="36">$ E_i = E_{t_i}\,\left[Pay(LGD)\right] $</formula> of the protection payoff <formula id="37">$ Pay(LGD) $</formula> at each time <formula id="38">$ t_i$</formula> where         <formula id="109">\[Pay(L) = min (D_1, LGD) - min (D_2, LGD) = \left\{
\begin{array}{lcl}
\displaystyle 0 &amp;;&amp; LGD &lt; D_1 \\
\displaystyle LGD - D_1 &amp;;&amp; D_1 \leq LGD \leq D_2 \\
\displaystyle D_2 - D_1 &amp;;&amp; LGD &gt; D_2
\end{array}
\right.
\]</formula></para>
</listitem><listitem><para>The protection value is then calculated as <formula id="40">\[ V_1 \:=\: \sum_{i=1}^N (E_i - E_{i-1}) \cdot  d_i \]</formula> where <formula id="41">$ d_i$</formula> is the discount factor at time/date <formula id="17">$ t_i $</formula></para>
</listitem></itemizedlist>
</para>
<para>The premium is paid on the protected notional amount, initially <formula id="42">$ D_2 - D_1. $</formula> This notional amount is reduced by the expected protection payments <formula id="43">$ E_i $</formula> at times <formula id="44">$ t_i, $</formula> so that the premium value is calculated as</para>
<para><formula id="110">\[V_2 =m \, \cdot \sum_{i=1}^N \,(D_2 - D_1 - E_i) \cdot \Delta_{i-1,i}\,d_i
\]</formula></para>
<para>where <formula id="46">$ m $</formula> is the premium rate, <formula id="47">$ \Delta_{i-1, i}$</formula> is the day count fraction between date/time <formula id="48">$ t_{i-1}$</formula> and <formula id="49">$ t_i.$</formula></para>
<para>The construction of the portfolio loss distribution <formula id="43">$ E_i $</formula> is based on the probability bucketing algorithm described in</para>
<para><bold> John Hull and Alan White, &quot;Valuation of a CDO and nth to default CDS
without Monte Carlo simulation&quot;, Journal of Derivatives 12, 2, 2004 </bold></para>
<para>The pricing algorithm allows for varying notional amounts and default termstructures of the underlyings.</para>
<para><xrefsect id="todo_1_todo000025"><xreftitle>Todo</xreftitle><xrefdescription><para>Investigate and fix cases <formula id="51">$ E_{i+1} &lt; E_i. $</formula> </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QuantLib::Instrument</label>
        <link refid="class_quant_lib_1_1_instrument"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="1">
        <label>QuantLib::SyntheticCDO</label>
        <link refid="class_quant_lib_1_1_synthetic_c_d_o"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>QuantLib::Date</label>
        <link refid="class_quant_lib_1_1_date"/>
      </node>
      <node id="2">
        <label>QuantLib::Instrument</label>
        <link refid="class_quant_lib_1_1_instrument"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>valuationDate_</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="1">
        <label>QuantLib::SyntheticCDO</label>
        <link refid="class_quant_lib_1_1_synthetic_c_d_o"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/credit/syntheticcdo.hpp" line="104" column="5" bodyfile="ql/experimental/credit/syntheticcdo.hpp" bodystart="104" bodyend="188"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_instrument_1a468edb294da268b097c91bf821084c07" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>additionalResults</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a57d2b34e8625ab3d9ffa50c0c7931099" prot="protected" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>additionalResults_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a02070ea7442d30625992c1711030d4b8" prot="protected" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>alwaysForward_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a17c9433135a259e4776baec66204a484" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>alwaysForwardNotifications</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1a0ed61aaa7ab498daaaadfdf0b9162942" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>basket</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1a86835d5cf7262f1c7753d50896dc89c0" prot="private" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>basket_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a4c573c48f7eaead5042864ac0eb5b025" prot="protected" virt="virtual"><scope>QuantLib::SyntheticCDO</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a58b4986a80efa18634483a92c121e26e" prot="protected" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>calculated_</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1a99ed3b53c941757493b5262361e6617f" prot="private" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>dayCounter_</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::SyntheticCDO</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_instrument_1ac548cb61c864779db09bd0fac6ae7c81" prot="protected" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>engine_</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1a80266da6e5595ee30f8294906b5b0924" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>error</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1a9ce9b8168ba244caaf6b2a6dfed0d943" prot="private" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>error_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a03502fb6c606b262c25acd94ff4c1e52" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>errorEstimate</name></member>
      <member refid="class_quant_lib_1_1_instrument_1abb8f4cfa7346fab7a2f3a8c8b4da30f3" prot="protected" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>errorEstimate_</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1a7ba5cb2f97c758cab24ab90e11316c8f" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>expectedTrancheLoss</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1a853fdd54221458ea2902d32f977cdf1d" prot="private" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>expectedTrancheLoss_</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1aaf4d7bfe5630565c49239a65f6de1b39" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>fairPremium</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1a0cf21a2489a7b674b03ba8cd3b5b9e28" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>fairUpfrontPremium</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1a0fc02e8a6ea5e228606cc38efaf82edd" prot="public" virt="virtual"><scope>QuantLib::SyntheticCDO</scope><name>fetchResults</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1afac6ee19c3107c453e1347dd8000e023" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>forwardFirstNotificationOnly</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7157f41e83f2c5d924f5c5bafda04d1d" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>freeze</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7bb721fe00c6854e602758aba629ab77" prot="protected" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>frozen_</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1ada70304809c53270936a09d7defb2ab4" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>implicitCorrelation</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a5e4c746cbf7999c83dc57f87e241f1cc" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>Instrument</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a0a7c5d42815a4e16ee2158e24dbfc748" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>isCalculated</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1a590c7afbd1f827ddf4cfa7eea48ace0c" prot="public" virt="virtual"><scope>QuantLib::SyntheticCDO</scope><name>isExpired</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a26f18f4ff7faaaebd8eae50e064b493e" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>LazyObject</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1a4d3633818c42733a113090a328fd1703" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>leverageFactor</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1abb979dc117566553b8aeb959fbdf5c80" prot="private" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>leverageFactor_</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1ab932f6612e7fbb62c456ae8e69c2230f" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>maturity</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1a0c960d1ab523dd952d44abc2b6d09a9a" prot="private" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>normalizedLeg_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a5afdd9698267cd30ddd10cf01f3487b0" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>NPV</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a997663780100d30ae59b14ac0285322d" prot="protected" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>NPV_</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::SyntheticCDO</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::SyntheticCDO</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::SyntheticCDO</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::SyntheticCDO</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::SyntheticCDO</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::QuantLib::Observer::"><scope>QuantLib::SyntheticCDO</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1acc1827cc80277cdb0138948d4b7f6e0e" prot="private" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>paymentConvention_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1aad23f546bbca156a49a95ca2bee124c4" prot="protected" virt="virtual"><scope>QuantLib::SyntheticCDO</scope><name>performCalculations</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1ada6a036427221ad7caf62ce4bfb30274" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>premiumLegNPV</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1a63f2884fc4d9cc8806f7a50c90b91251" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>premiumValue</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1ab6c2d077521a0eb468134918614a8c68" prot="private" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>premiumValue_</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1a406cd51053a00a89c9e349b497359bbe" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>protectionLegNPV</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1a0776c99be4f4cdf66babb9ff25b45baa" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>protectionValue</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1a8eabe249f5e16d17d7c4673ef5a1975a" prot="private" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>protectionValue_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a70c9b24e50132408d8d9ce4f6674662a" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>recalculate</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1af87c176a72267b2ca7731fc306118f26" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>remainingNotional</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1ad75a2342f7fb3688b23ea1438ef69c1d" prot="private" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>remainingNotional_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a266c15a12160a89f4f9707db85f9fa27" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>result</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1add2fb6c9103a8ec7019749eac2e3490d" prot="private" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>runningRate_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a3444386491f179f64f4f0aac24997071" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>setPricingEngine</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1a1f64870c8288f28dc667cffe34c59bd4" prot="public" virt="virtual"><scope>QuantLib::SyntheticCDO</scope><name>setupArguments</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1ab6cfd2cb48c29c0732d209bfff5675fb" prot="private" virt="virtual"><scope>QuantLib::SyntheticCDO</scope><name>setupExpired</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1a66df78b70dd98381bf33eb685ee240e9" prot="private" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>side_</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1a41e8ceaf6791efa2d14a942e60031a5a" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>SyntheticCDO</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a2e0e4786666453024b9d4e0761f2770b" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>unfreeze</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1adee2bf49be5c4c78736be293321a856d" prot="public" virt="virtual"><scope>QuantLib::SyntheticCDO</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1ac8a25e8ea3ce6646e1bc26af67bdb10c" prot="private" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>upfrontPremiumValue_</name></member>
      <member refid="class_quant_lib_1_1_synthetic_c_d_o_1add0c9497bd61c2c965bc3b52fd4e3788" prot="private" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>upfrontRate_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a53a0fc1adc70b73387ad53009725835d" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>valuationDate</name></member>
      <member refid="class_quant_lib_1_1_instrument_1aa60b558fc82f022e13535360ac4a6fed" prot="protected" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>valuationDate_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a9d719c43bb627177a90d7d12324a2d6e" prot="public" virt="non-virtual"><scope>QuantLib::SyntheticCDO</scope><name>~LazyObject</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::SyntheticCDO</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::SyntheticCDO</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
