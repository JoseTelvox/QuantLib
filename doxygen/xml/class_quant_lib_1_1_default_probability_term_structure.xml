<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_default_probability_term_structure" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>QuantLib::DefaultProbabilityTermStructure</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_term_structure" prot="public" virt="non-virtual">QuantLib::TermStructure</basecompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_default_density_structure" prot="public" virt="non-virtual">QuantLib::DefaultDensityStructure</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_hazard_rate_structure" prot="public" virt="non-virtual">QuantLib::HazardRateStructure</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_survival_probability_structure" prot="public" virt="non-virtual">QuantLib::SurvivalProbabilityStructure</derivedcompoundref>
    <includes refid="defaulttermstructure_8hpp" local="no">defaulttermstructure.hpp</includes>
    <sectiondef kind="user-defined">
      <header>Calculations</header>
      <description><para>The first two methods must be implemented in derived classes to perform the actual calculations. When they are called, range check has already been performed; therefore, they must assume that extrapolation is required. The third method has a default implementation which can be overriden with a more efficient implementation in derived classes. </para>
</description>
      <memberdef kind="variable" id="class_quant_lib_1_1_default_probability_term_structure_1aaa41807ad6a2d23d9221d637972686b4" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &gt;</type>
        <definition>std::vector&lt;Handle&lt;Quote&gt; &gt; QuantLib::DefaultProbabilityTermStructure::jumps_</definition>
        <argsstring></argsstring>
        <name>jumps_</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::jumps_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="168" column="21" bodyfile="ql/termstructures/defaulttermstructure.hpp" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_default_probability_term_structure_1a5b59eb80b998872cee32e1ec9308dbcb" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt;</type>
        <definition>std::vector&lt;Date&gt; QuantLib::DefaultProbabilityTermStructure::jumpDates_</definition>
        <argsstring></argsstring>
        <name>jumpDates_</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::jumpDates_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="169" column="21" bodyfile="ql/termstructures/defaulttermstructure.hpp" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_default_probability_term_structure_1acc7a01b69a8cebe04200ada068e8bdc2" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt;</type>
        <definition>std::vector&lt;Time&gt; QuantLib::DefaultProbabilityTermStructure::jumpTimes_</definition>
        <argsstring></argsstring>
        <name>jumpTimes_</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::jumpTimes_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="170" column="21" bodyfile="ql/termstructures/defaulttermstructure.hpp" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_default_probability_term_structure_1a927279205eb9831698c470400500d7c4" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::DefaultProbabilityTermStructure::nJumps_</definition>
        <argsstring></argsstring>
        <name>nJumps_</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::nJumps_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="171" column="14" bodyfile="ql/termstructures/defaulttermstructure.hpp" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_default_probability_term_structure_1a4de367eec4328f8561f7792b5a4a3dc2" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::DefaultProbabilityTermStructure::latestReference_</definition>
        <argsstring></argsstring>
        <name>latestReference_</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::latestReference_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="172" column="14" bodyfile="ql/termstructures/defaulttermstructure.hpp" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_default_probability_term_structure_1a9abd5b0deb84e66b5850baafa562ad4e" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>virtual Probability QuantLib::DefaultProbabilityTermStructure::survivalProbabilityImpl</definition>
        <argsstring>(Time) const =0</argsstring>
        <name>survivalProbabilityImpl</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::survivalProbabilityImpl</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_default_density_structure_1a75a82074d7130124b2629023e1968ea1">survivalProbabilityImpl</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_flat_hazard_rate_1a91cb2ad9e0e1b7c9f78d11b3a4523ba6">survivalProbabilityImpl</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hazard_rate_structure_1aa5e90da86c9290f755b6ed456d786134">survivalProbabilityImpl</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_interpolated_affine_hazard_rate_curve_1ab9536bd9192700df62e2f62ffa7ada26">survivalProbabilityImpl</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_interpolated_default_density_curve_1aefe3e118258aa53f66fb70dddeafe8c1">survivalProbabilityImpl</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_interpolated_hazard_rate_curve_1a05bf45f79c2f07004324059f13c3b8d4">survivalProbabilityImpl</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_interpolated_survival_probability_curve_1a394705dac4e511a0cd85b3e269b94a5f">survivalProbabilityImpl</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_one_factor_affine_survival_structure_1abdf10218905ef52a11b0737fb952e0d4">survivalProbabilityImpl</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        </param>
        <briefdescription>
<para>survival probability calculation </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="158" column="29"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_default_probability_term_structure_1ae4c4049701472416e631984e4bf9035b" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>virtual Real QuantLib::DefaultProbabilityTermStructure::defaultDensityImpl</definition>
        <argsstring>(Time) const =0</argsstring>
        <name>defaultDensityImpl</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::defaultDensityImpl</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_hazard_rate_structure_1ab6222d00a246f3d6ab56f37202a67ffc">defaultDensityImpl</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_interpolated_default_density_curve_1a088cc0126a95f30929d2996c3705be5d">defaultDensityImpl</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_interpolated_survival_probability_curve_1a11be30fd27efe402a3376fb35ed82661">defaultDensityImpl</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_one_factor_affine_survival_structure_1a87487077e9a57d99e4645ecc7b305853">defaultDensityImpl</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_survival_probability_structure_1a69217d429e23c181bde95b0226cce666">defaultDensityImpl</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        </param>
        <briefdescription>
<para>default density calculation </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="160" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_default_probability_term_structure_1a777dd25bd0bc3cab3df8f5151392aa05" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Rate QuantLib::DefaultProbabilityTermStructure::hazardRateImpl</definition>
        <argsstring>(Time) const</argsstring>
        <name>hazardRateImpl</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::hazardRateImpl</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_factor_spreaded_hazard_rate_curve_1af91b09379c5098f7730ebc9d47a73c04">hazardRateImpl</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_flat_hazard_rate_1ac979529e29d3b204e4feb9c5faf2635c">hazardRateImpl</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hazard_rate_structure_1a54ab66312dda719c022efeb35f670523">hazardRateImpl</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_interpolated_affine_hazard_rate_curve_1ae5b8a6bffbb7093980142e525599a92a">hazardRateImpl</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_interpolated_hazard_rate_curve_1a0957988bcb48158c3be472a509687f59">hazardRateImpl</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_one_factor_affine_survival_structure_1a8adfccd57fb151250cfb66efeb4e1b67">hazardRateImpl</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_spreaded_hazard_rate_curve_1ac7d06ef44d3404e1b4649f504bc692e2">hazardRateImpl</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <defname>t</defname>
        </param>
        <briefdescription>
<para>hazard rate calculation </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="162" column="22" bodyfile="ql/termstructures/defaulttermstructure.hpp" bodystart="220" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_default_probability_term_structure_1a621b310ceda1d692f3d063af942ca884" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::DefaultProbabilityTermStructure::setJumps</definition>
        <argsstring>()</argsstring>
        <name>setJumps</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::setJumps</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="166" column="14" bodyfile="ql/termstructures/defaulttermstructure.cpp" bodystart="64" bodyend="79"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Constructors</header>
      <description><para>See the <ref refid="class_quant_lib_1_1_term_structure" kindref="compound">TermStructure</ref> documentation for issues regarding constructors. </para>
</description>
      <memberdef kind="function" id="class_quant_lib_1_1_default_probability_term_structure_1a5772031aaac117d4316b13a64dd36e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::DefaultProbabilityTermStructure::DefaultProbabilityTermStructure</definition>
        <argsstring>(const DayCounter &amp;dc=DayCounter(), std::vector&lt; Handle&lt; Quote &gt; &gt; jumps={}, const std::vector&lt; Date &gt; &amp;jumpDates={})</argsstring>
        <name>DefaultProbabilityTermStructure</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::DefaultProbabilityTermStructure</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dc</declname>
          <defval><ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref>()</defval>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &gt;</type>
          <declname>jumps</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt; &amp;</type>
          <declname>jumpDates</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="48" column="9" bodyfile="ql/termstructures/defaulttermstructure.cpp" bodystart="29" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_default_probability_term_structure_1a35659d03c3c241136ccd3704beac62e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::DefaultProbabilityTermStructure::DefaultProbabilityTermStructure</definition>
        <argsstring>(const Date &amp;referenceDate, const Calendar &amp;cal=Calendar(), const DayCounter &amp;dc=DayCounter(), std::vector&lt; Handle&lt; Quote &gt; &gt; jumps={}, const std::vector&lt; Date &gt; &amp;jumpDates={})</argsstring>
        <name>DefaultProbabilityTermStructure</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::DefaultProbabilityTermStructure</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>referenceDate</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;</type>
          <declname>cal</declname>
          <defval><ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dc</declname>
          <defval><ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref>()</defval>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &gt;</type>
          <declname>jumps</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt; &amp;</type>
          <declname>jumpDates</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="52" column="9" bodyfile="ql/termstructures/defaulttermstructure.cpp" bodystart="38" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_default_probability_term_structure_1a100590357dde200e0714e494675ca6db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::DefaultProbabilityTermStructure::DefaultProbabilityTermStructure</definition>
        <argsstring>(Natural settlementDays, const Calendar &amp;cal, const DayCounter &amp;dc=DayCounter(), std::vector&lt; Handle&lt; Quote &gt; &gt; jumps={}, const std::vector&lt; Date &gt; &amp;jumpDates={})</argsstring>
        <name>DefaultProbabilityTermStructure</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::DefaultProbabilityTermStructure</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref></type>
          <declname>settlementDays</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;</type>
          <declname>cal</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dc</declname>
          <defval><ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref>()</defval>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &gt;</type>
          <declname>jumps</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt; &amp;</type>
          <declname>jumpDates</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="58" column="9" bodyfile="ql/termstructures/defaulttermstructure.cpp" bodystart="51" bodyend="62"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Survival probabilities</header>
      <description><para>These methods return the survival probability from the reference date until a given date or time. In the latter case, the time is calculated as a fraction of year from the reference date. </para>
</description>
      <memberdef kind="function" id="class_quant_lib_1_1_default_probability_term_structure_1aaf62e7c72afb270890984b4e129e29fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::DefaultProbabilityTermStructure::survivalProbability</definition>
        <argsstring>(const Date &amp;d, bool extrapolate=false) const</argsstring>
        <name>survivalProbability</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::survivalProbability</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extrapolate</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="73" column="21" bodyfile="ql/termstructures/defaulttermstructure.hpp" bodystart="178" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_default_probability_term_structure_1a9d2c4949bb2b66ebfef34e986cc50f4f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::DefaultProbabilityTermStructure::survivalProbability</definition>
        <argsstring>(Time t, bool extrapolate=false) const</argsstring>
        <name>survivalProbability</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::survivalProbability</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extrapolate</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The same day-counting rule used by the term structure should be used for calculating the passed time t. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="78" column="21" bodyfile="ql/termstructures/defaulttermstructure.cpp" bodystart="81" bodyend="101"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Default probabilities</header>
      <description><para>These methods return the default probability from the reference date until a given date or time. In the latter case, the time is calculated as a fraction of year from the reference date. </para>
</description>
      <memberdef kind="function" id="class_quant_lib_1_1_default_probability_term_structure_1ad227f187cd055b79ce2f762267dba742" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::DefaultProbabilityTermStructure::defaultProbability</definition>
        <argsstring>(const Date &amp;d, bool extrapolate=false) const</argsstring>
        <name>defaultProbability</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::defaultProbability</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extrapolate</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="89" column="21" bodyfile="ql/termstructures/defaulttermstructure.hpp" bodystart="185" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_default_probability_term_structure_1a52bd07aee5c775b9b656c1e2450f7af2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::DefaultProbabilityTermStructure::defaultProbability</definition>
        <argsstring>(Time t, bool extrapolate=false) const</argsstring>
        <name>defaultProbability</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::defaultProbability</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extrapolate</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The same day-counting rule used by the term structure should be used for calculating the passed time t. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="94" column="21" bodyfile="ql/termstructures/defaulttermstructure.hpp" bodystart="192" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_default_probability_term_structure_1abd9c7a3fcf2783e143128a3213de7e7e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::DefaultProbabilityTermStructure::defaultProbability</definition>
        <argsstring>(const Date &amp;, const Date &amp;, bool extrapolate=false) const</argsstring>
        <name>defaultProbability</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::defaultProbability</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <defname>d1</defname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <defname>d2</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>extrapolate</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>probability of default between two given dates </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="97" column="21" bodyfile="ql/termstructures/defaulttermstructure.cpp" bodystart="103" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_default_probability_term_structure_1a1aaa2eb79380d798d312569cc215b81c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::DefaultProbabilityTermStructure::defaultProbability</definition>
        <argsstring>(Time, Time, bool extrapo=false) const</argsstring>
        <name>defaultProbability</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::defaultProbability</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <defname>t1</defname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <defname>t2</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>extrapo</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>probability of default between two given times </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="101" column="21" bodyfile="ql/termstructures/defaulttermstructure.cpp" bodystart="116" bodyend="126"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Default densities</header>
      <description><para>These methods return the default density at a given date or time. In the latter case, the time is calculated as a fraction of year from the reference date. </para>
</description>
      <memberdef kind="function" id="class_quant_lib_1_1_default_probability_term_structure_1a2a64c69647782ccb93fcae8fd01f4f09" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::DefaultProbabilityTermStructure::defaultDensity</definition>
        <argsstring>(const Date &amp;d, bool extrapolate=false) const</argsstring>
        <name>defaultDensity</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::defaultDensity</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extrapolate</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="113" column="14" bodyfile="ql/termstructures/defaulttermstructure.hpp" bodystart="199" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_default_probability_term_structure_1a485232da71dad0064bd935fa4a3e194a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::DefaultProbabilityTermStructure::defaultDensity</definition>
        <argsstring>(Time t, bool extrapolate=false) const</argsstring>
        <name>defaultDensity</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::defaultDensity</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extrapolate</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="115" column="14" bodyfile="ql/termstructures/defaulttermstructure.hpp" bodystart="206" bodyend="211"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Hazard rates</header>
      <description><para>These methods returns the hazard rate at a given date or time. In the latter case, the time is calculated as a fraction of year from the reference date.</para>
<para>Hazard rates are defined with annual frequency and continuous compounding. </para>
</description>
      <memberdef kind="function" id="class_quant_lib_1_1_default_probability_term_structure_1a34185683a296917b42ed3e6b6f158758" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::DefaultProbabilityTermStructure::hazardRate</definition>
        <argsstring>(const Date &amp;d, bool extrapolate=false) const</argsstring>
        <name>hazardRate</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::hazardRate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extrapolate</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="130" column="14" bodyfile="ql/termstructures/defaulttermstructure.hpp" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_default_probability_term_structure_1acf7225aed2a92e1d7ae1b357f2d8df96" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::DefaultProbabilityTermStructure::hazardRate</definition>
        <argsstring>(Time t, bool extrapolate=false) const</argsstring>
        <name>hazardRate</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::hazardRate</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extrapolate</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="132" column="14" bodyfile="ql/termstructures/defaulttermstructure.hpp" bodystart="225" bodyend="229"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Jump inspectors</header>
      <memberdef kind="function" id="class_quant_lib_1_1_default_probability_term_structure_1ae52f8ae2d71c17d3bab2899e21550be5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Date &gt; &amp; QuantLib::DefaultProbabilityTermStructure::jumpDates</definition>
        <argsstring>() const</argsstring>
        <name>jumpDates</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::jumpDates</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="138" column="27" bodyfile="ql/termstructures/defaulttermstructure.hpp" bodystart="233" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_default_probability_term_structure_1a3fd8ffc1dcea0a75c9f21eecb805a999" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Time &gt; &amp; QuantLib::DefaultProbabilityTermStructure::jumpTimes</definition>
        <argsstring>() const</argsstring>
        <name>jumpTimes</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::jumpTimes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="139" column="27" bodyfile="ql/termstructures/defaulttermstructure.hpp" bodystart="239" bodyend="241"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Observer interface</header>
      <memberdef kind="function" id="class_quant_lib_1_1_default_probability_term_structure_1ad5e8ad7630b7b90f32b3f56659c82e23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::DefaultProbabilityTermStructure::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <qualifiedname>QuantLib::DefaultProbabilityTermStructure::update</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_observer_1a07905c55dca858470fcf4a1aea0005aa">update</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must be implemented in derived classes. An instance of Observer does not call this method directly: instead, it will be called by the observables the instance registered with when they need to notify any changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/defaulttermstructure.hpp" line="144" column="14" bodyfile="ql/termstructures/defaulttermstructure.hpp" bodystart="243" bodyend="247"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para><ref refid="struct_quant_lib_1_1_default" kindref="compound">Default</ref> probability term structure. </para>
    </briefdescription>
    <detaileddescription>
<para>This abstract class defines the interface of concrete credit structures which will be derived from this one. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="6">
        <label>QuantLib::DefaultDensityStructure</label>
        <link refid="class_quant_lib_1_1_default_density_structure"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::DefaultProbabilityTermStructure</label>
        <link refid="class_quant_lib_1_1_default_probability_term_structure"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Extrapolator</label>
        <link refid="class_quant_lib_1_1_extrapolator"/>
      </node>
      <node id="9">
        <label>QuantLib::FactorSpreadedHazardRateCurve</label>
        <link refid="class_quant_lib_1_1_factor_spreaded_hazard_rate_curve"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>QuantLib::FlatHazardRate</label>
        <link refid="class_quant_lib_1_1_flat_hazard_rate"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QuantLib::HazardRateStructure</label>
        <link refid="class_quant_lib_1_1_hazard_rate_structure"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>QuantLib::InterpolatedAffineHazardRateCurve&lt; Interpolator &gt;</label>
        <link refid="class_quant_lib_1_1_interpolated_affine_hazard_rate_curve"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::InterpolatedDefaultDensityCurve&lt; Interpolator &gt;</label>
        <link refid="class_quant_lib_1_1_interpolated_default_density_curve"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>QuantLib::InterpolatedHazardRateCurve&lt; Interpolator &gt;</label>
        <link refid="class_quant_lib_1_1_interpolated_hazard_rate_curve"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>QuantLib::InterpolatedSurvivalProbabilityCurve&lt; Interpolator &gt;</label>
        <link refid="class_quant_lib_1_1_interpolated_survival_probability_curve"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="3">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="12">
        <label>QuantLib::OneFactorAffineSurvivalStructure</label>
        <link refid="class_quant_lib_1_1_one_factor_affine_survival_structure"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>QuantLib::SpreadedHazardRateCurve</label>
        <link refid="class_quant_lib_1_1_spreaded_hazard_rate_curve"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>QuantLib::SurvivalProbabilityStructure</label>
        <link refid="class_quant_lib_1_1_survival_probability_structure"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::TermStructure</label>
        <link refid="class_quant_lib_1_1_term_structure"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>QuantLib::Calendar</label>
        <link refid="class_quant_lib_1_1_calendar"/>
      </node>
      <node id="1">
        <label>QuantLib::DefaultProbabilityTermStructure</label>
        <link refid="class_quant_lib_1_1_default_probability_term_structure"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Extrapolator</label>
        <link refid="class_quant_lib_1_1_extrapolator"/>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="3">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::TermStructure</label>
        <link refid="class_quant_lib_1_1_term_structure"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>calendar_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/termstructures/defaulttermstructure.hpp" line="41" column="5" bodyfile="ql/termstructures/defaulttermstructure.hpp" bodystart="41" bodyend="173"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_extrapolator_1ab3936a9b5b5c163d3e511437c16c1d9e" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>allowsExtrapolation</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1ac4ea5cbce495c9a47a44eeaedf7a9d45" prot="public" virt="virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>calendar</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1a0a09e3fa8cdfbc9aa9685da0c35ccb90" prot="protected" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>calendar_</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1aa7297742ffbeeb0c7611f90a0f7d15bf" prot="protected" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>checkRange</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1a4d246bcb13b7518a75088bf7cf01ea75" prot="protected" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>checkRange</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1ac03e725e4e0685b209caa626b00924ca" prot="public" virt="virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>dayCounter</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1a2a64c69647782ccb93fcae8fd01f4f09" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>defaultDensity</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1a485232da71dad0064bd935fa4a3e194a" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>defaultDensity</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1ae4c4049701472416e631984e4bf9035b" prot="protected" virt="pure-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>defaultDensityImpl</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1ad227f187cd055b79ce2f762267dba742" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>defaultProbability</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1a52bd07aee5c775b9b656c1e2450f7af2" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>defaultProbability</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1abd9c7a3fcf2783e143128a3213de7e7e" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>defaultProbability</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1a1aaa2eb79380d798d312569cc215b81c" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>defaultProbability</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1a5772031aaac117d4316b13a64dd36e1c" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>DefaultProbabilityTermStructure</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1a35659d03c3c241136ccd3704beac62e3" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>DefaultProbabilityTermStructure</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1a100590357dde200e0714e494675ca6db" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>DefaultProbabilityTermStructure</name></member>
      <member refid="class_quant_lib_1_1_extrapolator_1a6af69387d5cae0fe84d6a0c858406218" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>disableExtrapolation</name></member>
      <member refid="class_quant_lib_1_1_extrapolator_1a5f7b5650a44d6c63095bc739470c8bfb" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>enableExtrapolation</name></member>
      <member refid="class_quant_lib_1_1_extrapolator_1af1c3adaccdfaf07d3d07edaa234444f7" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>Extrapolator</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1a34185683a296917b42ed3e6b6f158758" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>hazardRate</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1acf7225aed2a92e1d7ae1b357f2d8df96" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>hazardRate</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1a777dd25bd0bc3cab3df8f5151392aa05" prot="protected" virt="virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>hazardRateImpl</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1ae52f8ae2d71c17d3bab2899e21550be5" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>jumpDates</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1a5b59eb80b998872cee32e1ec9308dbcb" prot="private" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>jumpDates_</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1aaa41807ad6a2d23d9221d637972686b4" prot="private" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>jumps_</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1a3fd8ffc1dcea0a75c9f21eecb805a999" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>jumpTimes</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1acc7a01b69a8cebe04200ada068e8bdc2" prot="private" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>jumpTimes_</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1a4de367eec4328f8561f7792b5a4a3dc2" prot="private" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>latestReference_</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1ae9af756bbddc15962711f77f514f08fa" prot="public" virt="pure-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>maxDate</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1a2f820c32e198e1046d97ca3dd9a807c5" prot="public" virt="virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>maxTime</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1a8319e5c2c37b09a825d61210c9cb8e2a" prot="protected" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>moving_</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1a927279205eb9831698c470400500d7c4" prot="private" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>nJumps_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::TermStructure::"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::TermStructure::"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::TermStructure::"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::TermStructure::QuantLib::Observable::"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1accbf3d4af41db0333d456eb5616c4e1e" prot="public" virt="virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>referenceDate</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1a621b310ceda1d692f3d063af942ca884" prot="private" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>setJumps</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1abeb79eefda70a9414f206ca9e70ced0f" prot="public" virt="virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>settlementDays</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1aaf62e7c72afb270890984b4e129e29fa" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>survivalProbability</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1a9d2c4949bb2b66ebfef34e986cc50f4f" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>survivalProbability</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1a9abd5b0deb84e66b5850baafa562ad4e" prot="protected" virt="pure-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>survivalProbabilityImpl</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1ac8365997e6d41134b4e0998fe6b4e949" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>TermStructure</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1a95764a49e0368b653eadbe619d9ef334" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>TermStructure</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1aab73d2acafdc8fbdf9336e7084bd88a1" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>TermStructure</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1ac8da61eb0f06ae07a35e8e4bbe7146b0" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>timeFromReference</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_default_probability_term_structure_1ad5e8ad7630b7b90f32b3f56659c82e23" prot="public" virt="virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1a2fcf1c78e57786ad5c123f52dbf619e8" prot="protected" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>updated_</name></member>
      <member refid="class_quant_lib_1_1_extrapolator_1af0ca0156436ffbce159183198eb27e2e" prot="public" virt="virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>~Extrapolator</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1ad202ddcc14fc4a6c16686d6164d7b36c" prot="public" virt="non-virtual"><scope>QuantLib::DefaultProbabilityTermStructure</scope><name>~TermStructure</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
