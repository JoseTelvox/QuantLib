<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_commodity_index" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::CommodityIndex</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_index" prot="public" virt="non-virtual">QuantLib::Index</basecompoundref>
    <includes refid="commodityindex_8hpp" local="no">commodityindex.hpp</includes>
    <sectiondef kind="user-defined">
      <header>Inspectors</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_commodity_index_1a29d57f15f25c0a06ec48f69fd4b9f4e3" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string QuantLib::CommodityIndex::name_</definition>
        <argsstring></argsstring>
        <name>name_</name>
        <qualifiedname>QuantLib::CommodityIndex::name_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="131" column="21" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_commodity_index_1a77ab4bcb03af0de6618979fa9705ba95" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref></type>
        <definition>CommodityType QuantLib::CommodityIndex::commodityType_</definition>
        <argsstring></argsstring>
        <name>commodityType_</name>
        <qualifiedname>QuantLib::CommodityIndex::commodityType_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="132" column="23" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_commodity_index_1af71b0d9872f251658c6ff1c0913980f1" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref></type>
        <definition>UnitOfMeasure QuantLib::CommodityIndex::unitOfMeasure_</definition>
        <argsstring></argsstring>
        <name>unitOfMeasure_</name>
        <qualifiedname>QuantLib::CommodityIndex::unitOfMeasure_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="133" column="23" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_commodity_index_1a761775e798db3b41292632c2967a07f0" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref></type>
        <definition>Currency QuantLib::CommodityIndex::currency_</definition>
        <argsstring></argsstring>
        <name>currency_</name>
        <qualifiedname>QuantLib::CommodityIndex::currency_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="134" column="18" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_commodity_index_1a54783a27e0054782f55e4b249114b242" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref></type>
        <definition>Calendar QuantLib::CommodityIndex::calendar_</definition>
        <argsstring></argsstring>
        <name>calendar_</name>
        <qualifiedname>QuantLib::CommodityIndex::calendar_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="135" column="18" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_commodity_index_1a65f75dd73f4f61988bd2582237b1de9f" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CommodityIndex::lotQuantity_</definition>
        <argsstring></argsstring>
        <name>lotQuantity_</name>
        <qualifiedname>QuantLib::CommodityIndex::lotQuantity_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="136" column="14" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_commodity_index_1ab3c8ee8d10e88eccb3020dac0115ab46" prot="protected" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_commodity_curve" kindref="compound">CommodityCurve</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;CommodityCurve&gt; QuantLib::CommodityIndex::forwardCurve_</definition>
        <argsstring></argsstring>
        <name>forwardCurve_</name>
        <qualifiedname>QuantLib::CommodityIndex::forwardCurve_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="137" column="25" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_commodity_index_1a4ef6e662ca2291d8be53978b3aa5b554" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CommodityIndex::forwardCurveUomConversionFactor_</definition>
        <argsstring></argsstring>
        <name>forwardCurveUomConversionFactor_</name>
        <qualifiedname>QuantLib::CommodityIndex::forwardCurveUomConversionFactor_</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="138" column="14" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_commodity_index_1a00b38d00eb259190c3b46b2475373427" prot="protected" static="no" mutable="no">
        <type>ext::shared_ptr&lt; ExchangeContracts &gt;</type>
        <definition>ext::shared_ptr&lt;ExchangeContracts&gt; QuantLib::CommodityIndex::exchangeContracts_</definition>
        <argsstring></argsstring>
        <name>exchangeContracts_</name>
        <qualifiedname>QuantLib::CommodityIndex::exchangeContracts_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="139" column="25" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_commodity_index_1a80a3e5a180463bfc7ed9b4a7434fc99b" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
        <definition>Integer QuantLib::CommodityIndex::nearbyOffset_</definition>
        <argsstring></argsstring>
        <name>nearbyOffset_</name>
        <qualifiedname>QuantLib::CommodityIndex::nearbyOffset_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="140" column="17" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_index_1a2e1c1ef6ed7ce2261877d9c885d21e98" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref> &amp;</type>
        <definition>const CommodityType &amp; QuantLib::CommodityIndex::commodityType</definition>
        <argsstring>() const</argsstring>
        <name>commodityType</name>
        <qualifiedname>QuantLib::CommodityIndex::commodityType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="60" column="29" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_index_1adb7323bd5d1bd52fdfc37ee471b69c28" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref> &amp;</type>
        <definition>const Currency &amp; QuantLib::CommodityIndex::currency</definition>
        <argsstring>() const</argsstring>
        <name>currency</name>
        <qualifiedname>QuantLib::CommodityIndex::currency</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="61" column="24" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="178" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_index_1aaecc856c40a1cb55e209ae55e11314cc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref> &amp;</type>
        <definition>const UnitOfMeasure &amp; QuantLib::CommodityIndex::unitOfMeasure</definition>
        <argsstring>() const</argsstring>
        <name>unitOfMeasure</name>
        <qualifiedname>QuantLib::CommodityIndex::unitOfMeasure</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="62" column="29" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="174" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_index_1acf676c95abcb26e35c50baffacd60fcc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_commodity_curve" kindref="compound">CommodityCurve</ref> &gt; &amp;</type>
        <definition>const ext::shared_ptr&lt; CommodityCurve &gt; &amp; QuantLib::CommodityIndex::forwardCurve</definition>
        <argsstring>() const</argsstring>
        <name>forwardCurve</name>
        <qualifiedname>QuantLib::CommodityIndex::forwardCurve</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="63" column="31" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="187" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_index_1ab88f39b4dc9a4108215ad0cc5742befe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CommodityIndex::lotQuantity</definition>
        <argsstring>() const</argsstring>
        <name>lotQuantity</name>
        <qualifiedname>QuantLib::CommodityIndex::lotQuantity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="64" column="14" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="182" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_index_1a2c91cfc26c1aa48286daafa8d00a95f8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CommodityIndex::forwardPrice</definition>
        <argsstring>(const Date &amp;date) const</argsstring>
        <name>forwardPrice</name>
        <qualifiedname>QuantLib::CommodityIndex::forwardPrice</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="65" column="14" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="191" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_index_1a1f674110571e41443037ecd959f11a95" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::CommodityIndex::lastQuoteDate</definition>
        <argsstring>() const</argsstring>
        <name>lastQuoteDate</name>
        <qualifiedname>QuantLib::CommodityIndex::lastQuoteDate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="66" column="14" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="202" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_index_1a7c20442684cb6c7dcb6a51f867a5a1a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::CommodityIndex::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>QuantLib::CommodityIndex::empty</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="67" column="14" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="206" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_index_1aa37340d86ef276a57b5f0cce901a4943" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::CommodityIndex::forwardCurveEmpty</definition>
        <argsstring>() const</argsstring>
        <name>forwardCurveEmpty</name>
        <qualifiedname>QuantLib::CommodityIndex::forwardCurveEmpty</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="68" column="14" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="210" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_index_1afbd1ab281834f479e26c3cfdd09377ac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;</type>
        <definition>const Calendar &amp; QuantLib::CommodityIndex::calendar</definition>
        <argsstring>() const</argsstring>
        <name>calendar</name>
        <qualifiedname>QuantLib::CommodityIndex::calendar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000014"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use fixingCalendar instead. Deprecated in version 1.37. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="75" column="24" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_index_1a0367ee921aecd579e2d970faa744997d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CommodityIndex::price</definition>
        <argsstring>(const Date &amp;date)</argsstring>
        <name>price</name>
        <qualifiedname>QuantLib::CommodityIndex::price</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000015"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use fixing instead. Deprecated in version 1.37. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="83" column="14" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_index_1ad6bffbb598d82cee9c45e070628a7ba1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::CommodityIndex::addQuote</definition>
        <argsstring>(const Date &amp;quoteDate, Real quote)</argsstring>
        <name>addQuote</name>
        <qualifiedname>QuantLib::CommodityIndex::addQuote</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>quoteDate</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>quote</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000016"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use addFixing instead. Deprecated in version 1.37. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="91" column="14" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_index_1ae4a98bc7625a3df0724946b1486ceb4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::CommodityIndex::addQuotes</definition>
        <argsstring>(const std::map&lt; Date, Real &gt; &amp;quotes)</argsstring>
        <name>addQuotes</name>
        <qualifiedname>QuantLib::CommodityIndex::addQuotes</qualifiedname>
        <param>
          <type>const std::map&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>quotes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000017"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use addFixings instead. Deprecated in version 1.37. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="99" column="14" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="99" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_index_1af45bf0bb5242cec93c176c1d30d5df1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::CommodityIndex::clearQuotes</definition>
        <argsstring>()</argsstring>
        <name>clearQuotes</name>
        <qualifiedname>QuantLib::CommodityIndex::clearQuotes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000018"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use clearFixings instead. Deprecated in version 1.37. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="109" column="14" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_index_1a419a9dbb0e3ac2e5f56e0159efd04996" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::CommodityIndex::isValidQuoteDate</definition>
        <argsstring>(const Date &amp;quoteDate) const</argsstring>
        <name>isValidQuoteDate</name>
        <qualifiedname>QuantLib::CommodityIndex::isValidQuoteDate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>quoteDate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000019"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use isValidFixingDate instead. Deprecated in version 1.37. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="117" column="14" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="117" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_index_1a6422563d8e554a7cce0124e8e1b96530" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_time_series" kindref="compound">TimeSeries</ref>&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        <definition>const TimeSeries&lt; Real &gt; &amp; QuantLib::CommodityIndex::quotes</definition>
        <argsstring>() const</argsstring>
        <name>quotes</name>
        <qualifiedname>QuantLib::CommodityIndex::quotes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000020"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use timeSeries instead. Deprecated in version 1.37. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="125" column="26" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="125" bodyend="127"/>
      </memberdef>
      <memberdef kind="friend" id="class_quant_lib_1_1_commodity_index_1a7298d4433d778841eed05a32d2c04305" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const CommodityIndex &amp;index)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::CommodityIndex::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_index" kindref="compound">CommodityIndex</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="129" column="16" bodyfile="ql/experimental/commodities/commodityindex.cpp" bodystart="52" bodyend="59"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Index interface</header>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_index_1a4d38c49f0af05f66ef80eda12c0128ad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string QuantLib::CommodityIndex::name</definition>
        <argsstring>() const override</argsstring>
        <name>name</name>
        <qualifiedname>QuantLib::CommodityIndex::name</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_index_1a1d71da32dc59a99b5e6bc9cbafa357fe">name</reimplements>
        <briefdescription>
<para>Returns the name of the index. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is used for output and comparison between indexes. It is <bold>not</bold> meant to be used for writing switch-on-type code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="48" column="21" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="154" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_index_1a2e74ac50a8b9acef7bde0ae601d145b4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref></type>
        <definition>Calendar QuantLib::CommodityIndex::fixingCalendar</definition>
        <argsstring>() const override</argsstring>
        <name>fixingCalendar</name>
        <qualifiedname>QuantLib::CommodityIndex::fixingCalendar</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_index_1a698fe28c856980f06db27a49ebd0fb05">fixingCalendar</reimplements>
        <briefdescription>
<para>returns the calendar defining valid fixing dates </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="49" column="18" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="158" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_index_1a3775f91c1e672c0291848cfb1c72b938" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool QuantLib::CommodityIndex::isValidFixingDate</definition>
        <argsstring>(const Date &amp;fixingDate) const override</argsstring>
        <name>isValidFixingDate</name>
        <qualifiedname>QuantLib::CommodityIndex::isValidFixingDate</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_index_1a9c26de5ae6c178fff2d898660e777b2a">isValidFixingDate</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>fixingDate</declname>
        </param>
        <briefdescription>
<para>returns TRUE if the fixing date is a valid one </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="50" column="14" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="162" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_index_1a4d97d47e7cd75562196d7b813671b00b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CommodityIndex::fixing</definition>
        <argsstring>(const Date &amp;fixingDate, bool forecastTodaysFixing=false) const override</argsstring>
        <name>fixing</name>
        <qualifiedname>QuantLib::CommodityIndex::fixing</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_index_1afe813b1909717dc0bcd1fa54105ee9d4">fixing</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>fixingDate</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forecastTodaysFixing</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>returns the fixing at the given date </para>
        </briefdescription>
        <detaileddescription>
<para>the date passed as arguments must be the actual calendar date of the fixing; no settlement days must be used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="51" column="14" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="166" bodyend="168"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Observer interface</header>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_index_1a9a118118c3e9607d00a20a486ffa5ec6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::CommodityIndex::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <qualifiedname>QuantLib::CommodityIndex::update</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_observer_1a07905c55dca858470fcf4a1aea0005aa">update</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must be implemented in derived classes. An instance of Observer does not call this method directly: instead, it will be called by the observables the instance registered with when they need to notify any changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="56" column="14" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="150" bodyend="152"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_index_1a4e20252123fbd73c8a7d9d5b8c1a64a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::CommodityIndex::CommodityIndex</definition>
        <argsstring>(std::string name, CommodityType commodityType, Currency currency, UnitOfMeasure unitOfMeasure, Calendar calendar, Real lotQuantity, ext::shared_ptr&lt; CommodityCurve &gt; forwardCurve, ext::shared_ptr&lt; ExchangeContracts &gt; exchangeContracts, int nearbyOffset)</argsstring>
        <name>CommodityIndex</name>
        <qualifiedname>QuantLib::CommodityIndex::CommodityIndex</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref></type>
          <declname>commodityType</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref></type>
          <declname>currency</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref></type>
          <declname>unitOfMeasure</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref></type>
          <declname>calendar</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>lotQuantity</declname>
        </param>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_commodity_curve" kindref="compound">CommodityCurve</ref> &gt;</type>
          <declname>forwardCurve</declname>
        </param>
        <param>
          <type>ext::shared_ptr&lt; ExchangeContracts &gt;</type>
          <declname>exchangeContracts</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nearbyOffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commodityindex.hpp" line="37" column="9" bodyfile="ql/experimental/commodities/commodityindex.cpp" bodystart="26" bodyend="50"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>base class for commodity indexes </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::CommodityIndex</label>
        <link refid="class_quant_lib_1_1_commodity_index"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::Index</label>
        <link refid="class_quant_lib_1_1_index"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8">
        <label>QuantLib::Calendar</label>
        <link refid="class_quant_lib_1_1_calendar"/>
      </node>
      <node id="1">
        <label>QuantLib::CommodityIndex</label>
        <link refid="class_quant_lib_1_1_commodity_index"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>commodityType_</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>unitOfMeasure_</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>currency_</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>calendar_</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::CommodityType</label>
        <link refid="class_quant_lib_1_1_commodity_type"/>
      </node>
      <node id="7">
        <label>QuantLib::Currency</label>
        <link refid="class_quant_lib_1_1_currency"/>
      </node>
      <node id="2">
        <label>QuantLib::Index</label>
        <link refid="class_quant_lib_1_1_index"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="6">
        <label>QuantLib::UnitOfMeasure</label>
        <link refid="class_quant_lib_1_1_unit_of_measure"/>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/commodities/commodityindex.hpp" line="35" column="5" bodyfile="ql/experimental/commodities/commodityindex.hpp" bodystart="35" bodyend="141"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_index_1a99d2677cae4cd185b34a170ee36eca9d" prot="public" virt="virtual"><scope>QuantLib::CommodityIndex</scope><name>addFixing</name></member>
      <member refid="class_quant_lib_1_1_index_1a91fce2b65887f04e2cbcae5d9ffcc15e" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>addFixings</name></member>
      <member refid="class_quant_lib_1_1_index_1a46b3d6241bd06bd76a49123c5c0011cf" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>addFixings</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1ad6bffbb598d82cee9c45e070628a7ba1" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>addQuote</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1ae4a98bc7625a3df0724946b1486ceb4a" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>addQuotes</name></member>
      <member refid="class_quant_lib_1_1_index_1aedde403ec6db8211816d7d1d0a883155" prot="public" virt="virtual"><scope>QuantLib::CommodityIndex</scope><name>allowsNativeFixings</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1afbd1ab281834f479e26c3cfdd09377ac" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>calendar</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1a54783a27e0054782f55e4b249114b242" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>calendar_</name></member>
      <member refid="class_quant_lib_1_1_index_1a6ebd31a5c6890f2dc0b25fc7824c809c" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>clearFixings</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1af45bf0bb5242cec93c176c1d30d5df1f" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>clearQuotes</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1a4e20252123fbd73c8a7d9d5b8c1a64a0" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>CommodityIndex</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1a2e1c1ef6ed7ce2261877d9c885d21e98" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>commodityType</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1a77ab4bcb03af0de6618979fa9705ba95" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>commodityType_</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1adb7323bd5d1bd52fdfc37ee471b69c28" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>currency</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1a761775e798db3b41292632c2967a07f0" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>currency_</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::CommodityIndex</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1a7c20442684cb6c7dcb6a51f867a5a1a6" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>empty</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1a00b38d00eb259190c3b46b2475373427" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>exchangeContracts_</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1a4d97d47e7cd75562196d7b813671b00b" prot="public" virt="virtual"><scope>QuantLib::CommodityIndex</scope><name>fixing</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1a2e74ac50a8b9acef7bde0ae601d145b4" prot="public" virt="virtual"><scope>QuantLib::CommodityIndex</scope><name>fixingCalendar</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1acf676c95abcb26e35c50baffacd60fcc" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>forwardCurve</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1ab3c8ee8d10e88eccb3020dac0115ab46" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>forwardCurve_</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1aa37340d86ef276a57b5f0cce901a4943" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>forwardCurveEmpty</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1a4ef6e662ca2291d8be53978b3aa5b554" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>forwardCurveUomConversionFactor_</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1a2c91cfc26c1aa48286daafa8d00a95f8" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>forwardPrice</name></member>
      <member refid="class_quant_lib_1_1_index_1a3ca2ef1910e74b22dd55c39013642a5c" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>hasHistoricalFixing</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1a3775f91c1e672c0291848cfb1c72b938" prot="public" virt="virtual"><scope>QuantLib::CommodityIndex</scope><name>isValidFixingDate</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1a419a9dbb0e3ac2e5f56e0159efd04996" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>isValidQuoteDate</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::CommodityIndex</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1a1f674110571e41443037ecd959f11a95" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>lastQuoteDate</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1ab88f39b4dc9a4108215ad0cc5742befe" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>lotQuantity</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1a65f75dd73f4f61988bd2582237b1de9f" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>lotQuantity_</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1a4d38c49f0af05f66ef80eda12c0128ad" prot="public" virt="virtual"><scope>QuantLib::CommodityIndex</scope><name>name</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1a29d57f15f25c0a06ec48f69fd4b9f4e3" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>name_</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1a80a3e5a180463bfc7ed9b4a7434fc99b" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>nearbyOffset_</name></member>
      <member refid="class_quant_lib_1_1_index_1aa9172bf19d428e1d212ef2e331ad8785" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>notifier</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::CommodityIndex</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::CommodityIndex</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1a7298d4433d778841eed05a32d2c04305" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::CommodityIndex</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::CommodityIndex</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::CommodityIndex</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_index_1a56f55745a69269f98c5ccc9b7e94d90e" prot="public" virt="virtual"><scope>QuantLib::CommodityIndex</scope><name>pastFixing</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1a0367ee921aecd579e2d970faa744997d" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>price</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1a6422563d8e554a7cce0124e8e1b96530" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>quotes</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_index_1a373faa497820b43992d18ead1a8b87a8" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>timeSeries</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1aaecc856c40a1cb55e209ae55e11314cc" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>unitOfMeasure</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1af71b0d9872f251658c6ff1c0913980f1" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>unitOfMeasure_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_commodity_index_1a9a118118c3e9607d00a20a486ffa5ec6" prot="public" virt="virtual"><scope>QuantLib::CommodityIndex</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_index_1a5e8202e51d4c2053f61cb47d3f76b42f" prot="public" virt="non-virtual"><scope>QuantLib::CommodityIndex</scope><name>~Index</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::CommodityIndex</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::CommodityIndex</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
