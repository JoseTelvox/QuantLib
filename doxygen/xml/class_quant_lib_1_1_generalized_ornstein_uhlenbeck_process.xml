<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_stochastic_process1_d" prot="public" virt="non-virtual">QuantLib::StochasticProcess1D</basecompoundref>
    <includes refid="generalizedornsteinuhlenbeckprocess_8hpp" local="no">generalizedornsteinuhlenbeckprocess.hpp</includes>
    <sectiondef kind="user-defined">
      <header>StochasticProcess1D interface</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1a83b1e49249dee1bb8d776ccf06ca878f" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GeneralizedOrnsteinUhlenbeckProcess::x0_</definition>
        <argsstring></argsstring>
        <name>x0_</name>
        <qualifiedname>QuantLib::GeneralizedOrnsteinUhlenbeckProcess::x0_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.hpp" line="66" column="14" bodyfile="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1ab151bfc7f30d8cd90756053c8a7f124d" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GeneralizedOrnsteinUhlenbeckProcess::level_</definition>
        <argsstring></argsstring>
        <name>level_</name>
        <qualifiedname>QuantLib::GeneralizedOrnsteinUhlenbeckProcess::level_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.hpp" line="66" column="18" bodyfile="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1a7476d2ecbbe58af61fbeb3634d15ad59" prot="private" static="no" mutable="no">
        <type>std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(<ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref>)&gt;</type>
        <definition>std::function&lt;Real (Time)&gt; QuantLib::GeneralizedOrnsteinUhlenbeckProcess::speed_</definition>
        <argsstring></argsstring>
        <name>speed_</name>
        <qualifiedname>QuantLib::GeneralizedOrnsteinUhlenbeckProcess::speed_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.hpp" line="67" column="23" bodyfile="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1a9d86854dd4dea56e4076fd500d981fa6" prot="private" static="no" mutable="no">
        <type>std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(<ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref>)&gt;</type>
        <definition>std::function&lt;Real (Time)&gt; QuantLib::GeneralizedOrnsteinUhlenbeckProcess::volatility_</definition>
        <argsstring></argsstring>
        <name>volatility_</name>
        <qualifiedname>QuantLib::GeneralizedOrnsteinUhlenbeckProcess::volatility_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.hpp" line="68" column="23" bodyfile="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1afc08de7502e8ff637f366c1bab473431" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GeneralizedOrnsteinUhlenbeckProcess::x0</definition>
        <argsstring>() const override</argsstring>
        <name>x0</name>
        <qualifiedname>QuantLib::GeneralizedOrnsteinUhlenbeckProcess::x0</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process1_d_1a4a0eee3b5c6592950bd6635177f76113">x0</reimplements>
        <briefdescription>
<para>returns the initial value of the state variable </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.hpp" line="51" column="14" bodyfile="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.cpp" bodystart="34" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1a539d5ea9f1d849c67fca664a8a2c7cb0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GeneralizedOrnsteinUhlenbeckProcess::drift</definition>
        <argsstring>(Time t, Real x) const override</argsstring>
        <name>drift</name>
        <qualifiedname>QuantLib::GeneralizedOrnsteinUhlenbeckProcess::drift</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process1_d_1ad27eced4c2abbe7d8da5951969158e2d">drift</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the drift part of the equation, i.e. <formula id="478">$ \mu(t, x_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.hpp" line="53" column="14" bodyfile="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.cpp" bodystart="38" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1ab43f5f077af60ee5d5a04a6f57362969" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GeneralizedOrnsteinUhlenbeckProcess::diffusion</definition>
        <argsstring>(Time t, Real x) const override</argsstring>
        <name>diffusion</name>
        <qualifiedname>QuantLib::GeneralizedOrnsteinUhlenbeckProcess::diffusion</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process1_d_1a66bde34ae0158d64169e39655fdfcfc0">diffusion</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the diffusion part of the equation, i.e. <formula id="479">$ \sigma(t, x_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.hpp" line="54" column="14" bodyfile="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.cpp" bodystart="42" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1a85fa81253b41f1d3220d1387afac7fb6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GeneralizedOrnsteinUhlenbeckProcess::expectation</definition>
        <argsstring>(Time t0, Real x0, Time dt) const override</argsstring>
        <name>expectation</name>
        <qualifiedname>QuantLib::GeneralizedOrnsteinUhlenbeckProcess::expectation</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process1_d_1a4543779731a4ce76e9dd85f3c81752e7">expectation</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the expectation <formula id="480">$ E(x_{t_0 + \Delta t} | x_{t_0} = x_0) $</formula> of the process after a time interval <formula id="471">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.hpp" line="56" column="14" bodyfile="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.cpp" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1af951cf8572fdcfafea9ff296d0b1dfd4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GeneralizedOrnsteinUhlenbeckProcess::stdDeviation</definition>
        <argsstring>(Time t0, Real x0, Time dt) const override</argsstring>
        <name>stdDeviation</name>
        <qualifiedname>QuantLib::GeneralizedOrnsteinUhlenbeckProcess::stdDeviation</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process1_d_1a3290404acdbfcbbd6bbf8b035862e803">stdDeviation</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the standard deviation <formula id="481">$ S(x_{t_0 + \Delta t} | x_{t_0} = x_0) $</formula> of the process after a time interval <formula id="471">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.hpp" line="57" column="14" bodyfile="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.cpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1a2103a661f362ea8b3655f85853dd01fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GeneralizedOrnsteinUhlenbeckProcess::variance</definition>
        <argsstring>(Time t0, Real x0, Time dt) const override</argsstring>
        <name>variance</name>
        <qualifiedname>QuantLib::GeneralizedOrnsteinUhlenbeckProcess::variance</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process1_d_1afec760c46c7f53d98cea9befd7087508">variance</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the variance <formula id="482">$ V(x_{t_0 + \Delta t} | x_{t_0} = x_0) $</formula> of the process after a time interval <formula id="471">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.hpp" line="58" column="14" bodyfile="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.cpp" bodystart="56" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1a5343e3e212d4499334e4e6b3b7d20050" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GeneralizedOrnsteinUhlenbeckProcess::speed</definition>
        <argsstring>(Time t) const</argsstring>
        <name>speed</name>
        <qualifiedname>QuantLib::GeneralizedOrnsteinUhlenbeckProcess::speed</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.hpp" line="61" column="14" bodyfile="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.cpp" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1a592871fdd23874150eaf7a3d6f0a60a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GeneralizedOrnsteinUhlenbeckProcess::volatility</definition>
        <argsstring>(Time t) const</argsstring>
        <name>volatility</name>
        <qualifiedname>QuantLib::GeneralizedOrnsteinUhlenbeckProcess::volatility</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.hpp" line="62" column="14" bodyfile="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.cpp" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1a79c8694656921979f5354f1bc6f6f1b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::GeneralizedOrnsteinUhlenbeckProcess::level</definition>
        <argsstring>() const</argsstring>
        <name>level</name>
        <qualifiedname>QuantLib::GeneralizedOrnsteinUhlenbeckProcess::level</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.hpp" line="63" column="14" bodyfile="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.cpp" bodystart="78" bodyend="80"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1a2b00ceeed823c79c21e0389b76617757" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::GeneralizedOrnsteinUhlenbeckProcess::GeneralizedOrnsteinUhlenbeckProcess</definition>
        <argsstring>(std::function&lt; Real(Time)&gt; speed, std::function&lt; Real(Time)&gt; vol, Real x0=0.0, Real level=0.0)</argsstring>
        <name>GeneralizedOrnsteinUhlenbeckProcess</name>
        <qualifiedname>QuantLib::GeneralizedOrnsteinUhlenbeckProcess::GeneralizedOrnsteinUhlenbeckProcess</qualifiedname>
        <param>
          <type>std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(<ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref>)&gt;</type>
          <declname>speed</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>(<ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref>)&gt;</type>
          <declname>vol</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x0</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>level</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.hpp" line="45" column="9" bodyfile="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.cpp" bodystart="26" bodyend="32"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Piecewise linear Ornstein-Uhlenbeck process class. </para>
    </briefdescription>
    <detaileddescription>
<para>This class describes the Ornstein-Uhlenbeck process governed by   <formula id="184">\[    dx = a (level - x_t) dt + \sigma dW_t
\]</formula></para>
<para>where the coefficients a and sigma are piecewise linear. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</label>
        <link refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="3">
        <label>QuantLib::StochasticProcess</label>
        <link refid="class_quant_lib_1_1_stochastic_process"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::StochasticProcess1D</label>
        <link refid="class_quant_lib_1_1_stochastic_process1_d"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</label>
        <link refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="3">
        <label>QuantLib::StochasticProcess</label>
        <link refid="class_quant_lib_1_1_stochastic_process"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::StochasticProcess1D</label>
        <link refid="class_quant_lib_1_1_stochastic_process1_d"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.hpp" line="43" column="5" bodyfile="ql/experimental/shortrate/generalizedornsteinuhlenbeckprocess.hpp" bodystart="43" bodyend="69"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a303b2e3c9243b674ac1f145c304811b7" prot="public" virt="virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>apply</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1ab43f5f077af60ee5d5a04a6f57362969" prot="public" virt="virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>diffusion</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1aff0e6c615f076baf4393abe860794583" prot="protected" virt="non-virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>discretization_</name></member>
      <member refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1a539d5ea9f1d849c67fca664a8a2c7cb0" prot="public" virt="virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>drift</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a39605ea27c7ef3a7feafed4fafcc1f90" prot="public" virt="virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>evolve</name></member>
      <member refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1a85fa81253b41f1d3220d1387afac7fb6" prot="public" virt="virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>expectation</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0346d38598fb9a5a1cd58024f05081aa" prot="public" virt="virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>factors</name></member>
      <member refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1a2b00ceeed823c79c21e0389b76617757" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>GeneralizedOrnsteinUhlenbeckProcess</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1a79c8694656921979f5354f1bc6f6f1b0" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>level</name></member>
      <member refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1ab151bfc7f30d8cd90756053c8a7f124d" prot="private" virt="non-virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>level_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1a5343e3e212d4499334e4e6b3b7d20050" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>speed</name></member>
      <member refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1a7476d2ecbbe58af61fbeb3634d15ad59" prot="private" virt="non-virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>speed_</name></member>
      <member refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1af951cf8572fdcfafea9ff296d0b1dfd4" prot="public" virt="virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>stdDeviation</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a2dd24b794a6b320bc60ba9e1a87bf48e" prot="protected" virt="non-virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>StochasticProcess</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a957ee9776d6048835106ea29ea44927f" prot="protected" virt="non-virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>StochasticProcess</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a8fd2dc83f956da3dd008242ee5a5c926" prot="protected" virt="non-virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>StochasticProcess1D</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a0971f058bea9a93d2ced17c685576686" prot="protected" virt="non-virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>StochasticProcess1D</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a39c5f08a3779665f9185a558d2b8418d" prot="public" virt="virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>time</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0f22628658fd2dc702c13c354ef3244e" prot="public" virt="virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1a2103a661f362ea8b3655f85853dd01fa" prot="public" virt="virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>variance</name></member>
      <member refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1a592871fdd23874150eaf7a3d6f0a60a3" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>volatility</name></member>
      <member refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1a9d86854dd4dea56e4076fd500d981fa6" prot="private" virt="non-virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>volatility_</name></member>
      <member refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1afc08de7502e8ff637f366c1bab473431" prot="public" virt="virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>x0</name></member>
      <member refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process_1a83b1e49249dee1bb8d776ccf06ca878f" prot="private" virt="non-virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>x0_</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0e2b6a14e675db5abd0ab8965ff7b2c3" prot="public" virt="non-virtual"><scope>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</scope><name>~StochasticProcess</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
