<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_default_latent_model" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::DefaultLatentModel</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_latent_model" prot="public" virt="non-virtual">QuantLib::LatentModel&lt; copulaPolicy &gt;</basecompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_constant_loss_latentmodel" prot="public" virt="non-virtual">QuantLib::ConstantLossLatentmodel&lt; copulaPolicy &gt;</derivedcompoundref>
    <includes refid="defaultprobabilitylatentmodel_8hpp" local="no">defaultprobabilitylatentmodel.hpp</includes>
    <templateparamlist>
      <param>
        <type>class copulaPolicy</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_default_latent_model_1a17f4e9bffc1d1440c48953117fdcfecc" prot="private" static="no">
        <type>copulaPolicy::initTraits</type>
        <definition>typedef copulaPolicy::initTraits QuantLib::DefaultLatentModel&lt; copulaPolicy &gt;::initTraits</definition>
        <argsstring></argsstring>
        <name>initTraits</name>
        <qualifiedname>QuantLib::DefaultLatentModel::initTraits</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" line="60" column="51" bodyfile="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_default_latent_model_1a02009926334b7e8e3f8ca0717540e1e1" prot="protected" static="no" mutable="yes">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_basket" kindref="compound">Basket</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;Basket&gt; QuantLib::DefaultLatentModel&lt; copulaPolicy &gt;::basket_</definition>
        <argsstring></argsstring>
        <name>basket_</name>
        <qualifiedname>QuantLib::DefaultLatentModel::basket_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" line="57" column="33" bodyfile="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_default_latent_model_1a7ae22566362d3a033b9772a6bcdb25d1" prot="protected" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_l_m_integration" kindref="compound">LMIntegration</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;LMIntegration&gt; QuantLib::DefaultLatentModel&lt; copulaPolicy &gt;::integration_</definition>
        <argsstring></argsstring>
        <name>integration_</name>
        <qualifiedname>QuantLib::DefaultLatentModel::integration_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" line="58" column="25" bodyfile="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_default_latent_model_1a1c8277cedada4e4a6bb66863948a15a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::DefaultLatentModel&lt; copulaPolicy &gt;::DefaultLatentModel</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; Real &gt; &gt; &amp;factorWeights, LatentModelIntegrationType::LatentModelIntegrationType integralType, const initTraits &amp;ini=initTraits())</argsstring>
        <name>DefaultLatentModel</name>
        <qualifiedname>QuantLib::DefaultLatentModel::DefaultLatentModel</qualifiedname>
        <param>
          <type>const std::vector&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt; &amp;</type>
          <declname>factorWeights</declname>
        </param>
        <param>
          <type>LatentModelIntegrationType::LatentModelIntegrationType</type>
          <declname>integralType</declname>
        </param>
        <param>
          <type>const initTraits &amp;</type>
          <declname>ini</declname>
          <defval>initTraits()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>factorWeights</parametername>
</parameternamelist>
<parameterdescription>
<para>Latent model independent factors weights for each variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integralType</parametername>
</parameternamelist>
<parameterdescription>
<para>Integration type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ini</parametername>
</parameternamelist>
<parameterdescription>
<para>Copula initialization if any.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>Baskets with realized defaults not tested/WIP. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" line="70" column="9" bodyfile="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" bodystart="70" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_default_latent_model_1a880b4a42bb1666531ea16ceb39d2defd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::DefaultLatentModel&lt; copulaPolicy &gt;::DefaultLatentModel</definition>
        <argsstring>(const Handle&lt; Quote &gt; &amp;mktCorrel, Size nVariables, LatentModelIntegrationType::LatentModelIntegrationType integralType, const initTraits &amp;ini=initTraits())</argsstring>
        <name>DefaultLatentModel</name>
        <qualifiedname>QuantLib::DefaultLatentModel::DefaultLatentModel</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &amp;</type>
          <declname>mktCorrel</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>nVariables</declname>
        </param>
        <param>
          <type>LatentModelIntegrationType::LatentModelIntegrationType</type>
          <declname>integralType</declname>
        </param>
        <param>
          <type>const initTraits &amp;</type>
          <declname>ini</declname>
          <defval>initTraits()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" line="79" column="9" bodyfile="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" bodystart="79" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_default_latent_model_1a9b98bab8ee02b28ee95b7eb100c7b5ea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::DefaultLatentModel&lt; copulaPolicy &gt;::resetBasket</definition>
        <argsstring>(const ext::shared_ptr&lt; Basket &gt; &amp;basket) const</argsstring>
        <name>resetBasket</name>
        <qualifiedname>QuantLib::DefaultLatentModel::resetBasket</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_basket" kindref="compound">Basket</ref> &gt; &amp;</type>
          <declname>basket</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" line="97" column="14" bodyfile="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" bodystart="97" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_default_latent_model_1adeafa90c0190ca6df804755b7fbc762f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::DefaultLatentModel&lt; copulaPolicy &gt;::conditionalDefaultProbability</definition>
        <argsstring>(Probability prob, Size iName, const std::vector&lt; Real &gt; &amp;mktFactors) const</argsstring>
        <name>conditionalDefaultProbability</name>
        <qualifiedname>QuantLib::DefaultLatentModel::conditionalDefaultProbability</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
          <declname>prob</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the probability of default of a given name conditional on the realization of a given set of values of the model independent factors. The date at which the probability is given is implicit in the probability since theres not other time dependence in this model. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prob</parametername>
</parameternamelist>
<parameterdescription>
<para>Unconditional probability of default. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iName</parametername>
</parameternamelist>
<parameterdescription>
<para>desired name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mktFactors</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of LM independent factors. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>Most often it is preferred to use the method below avoiding the cumulative inversion. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" line="114" column="21" bodyfile="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" bodystart="114" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_default_latent_model_1ae42643670e071e369b0859af9d948990" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::DefaultLatentModel&lt; copulaPolicy &gt;::conditionalDefaultProbabilityInvP</definition>
        <argsstring>(Real invCumYProb, Size iName, const std::vector&lt; Real &gt; &amp;m) const</argsstring>
        <name>conditionalDefaultProbabilityInvP</name>
        <qualifiedname>QuantLib::DefaultLatentModel::conditionalDefaultProbabilityInvP</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>invCumYProb</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the probability of default of a given name conditional on the realization of a given set of values of the model independent factors. The date at which the probability is given is implicit in the probability since theres not other time dependent in this model. Same intention as above but provides a performance opportunity, if the integration is along the market factors (as usually is) avoids computing the inverse of the probability on each call. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>invCumYProb</parametername>
</parameternamelist>
<parameterdescription>
<para>Inverse cumul of the unconditional probability of default, has to follow the same copula law for results to be coherent </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iName</parametername>
</parameternamelist>
<parameterdescription>
<para>desired name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of LM independent factors. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" line="151" column="21" bodyfile="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" bodystart="151" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_default_latent_model_1ae282023c13b0e2404d29163b8e5a6b5c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::DefaultLatentModel&lt; copulaPolicy &gt;::probOfDefault</definition>
        <argsstring>(Size iName, const Date &amp;d) const</argsstring>
        <name>probOfDefault</name>
        <qualifiedname>QuantLib::DefaultLatentModel::probOfDefault</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes the unconditional probability of default of a given name. Trivial method for testing </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" line="211" column="21" bodyfile="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" bodystart="211" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_default_latent_model_1a21018a103e011428082f5697486c2e5d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::DefaultLatentModel&lt; CP &gt;::defaultCorrelation</definition>
        <argsstring>(const Date &amp;d, Size iNamei, Size iNamej) const</argsstring>
        <name>defaultCorrelation</name>
        <qualifiedname>QuantLib::DefaultLatentModel::defaultCorrelation</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iNamei</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iNamej</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pearsons&apos; default probability correlation. Users should consider specialization on the copula type for specific distributions since that might simplify the integrations, most importantly if this is to be used in calibration of observations for factor coefficients as it is expensive to integrate directly. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" line="232" column="14" bodyfile="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" bodystart="249" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_default_latent_model_1af683416c9c109efaaa58f51e72224fa0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::DefaultLatentModel&lt; copulaPolicy &gt;::probAtLeastNEvents</definition>
        <argsstring>(Size n, const Date &amp;date) const</argsstring>
        <name>probAtLeastNEvents</name>
        <qualifiedname>QuantLib::DefaultLatentModel::probAtLeastNEvents</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the probaility of having a given or larger number of defaults in the basket portfolio at a given time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" line="237" column="21" bodyfile="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" bodystart="237" bodyend="242"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_default_latent_model_1a68cb23471d12e47dae26213b6fa3f73b" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::DefaultLatentModel&lt; copulaPolicy &gt;::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <qualifiedname>QuantLib::DefaultLatentModel::update</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_observer_1a07905c55dca858470fcf4a1aea0005aa">update</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must be implemented in derived classes. An instance of Observer does not call this method directly: instead, it will be called by the observables the instance registered with when they need to notify any changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" line="131" column="12" bodyfile="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" bodystart="131" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_default_latent_model_1a24a7009dfa3918fe8e577a120a3d4a52" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::DefaultLatentModel&lt; copulaPolicy &gt;::conditionalDefaultProbability</definition>
        <argsstring>(const Date &amp;date, Size iName, const std::vector&lt; Real &gt; &amp;mktFactors) const</argsstring>
        <name>conditionalDefaultProbability</name>
        <qualifiedname>QuantLib::DefaultLatentModel::conditionalDefaultProbability</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the probability of default of a given name conditional on the realization of a given set of values of the model independent factors. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>date</parametername>
</parameternamelist>
<parameterdescription>
<para>The date for the probability of default. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iName</parametername>
</parameternamelist>
<parameterdescription>
<para>desired name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mktFactors</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of LM independent factors.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Same intention as the above methods. Usage of this one is typically more expensive because most often the date we call this method with repeats itself and with this one the probability can not be cached outside the call. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" line="179" column="21" bodyfile="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" bodystart="179" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_default_latent_model_1a6db2041303cd4a079a6e6d8e96b3b70a" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::DefaultLatentModel&lt; copulaPolicy &gt;::condProbProduct</definition>
        <argsstring>(Real invCumYProb1, Real invCumYProb2, Size iName1, Size iName2, const std::vector&lt; Real &gt; &amp;mktFactors) const</argsstring>
        <name>condProbProduct</name>
        <qualifiedname>QuantLib::DefaultLatentModel::condProbProduct</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>invCumYProb1</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>invCumYProb2</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName1</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>iName2</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Conditional default probability product, intermediate step in the correlation calculation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" line="191" column="21" bodyfile="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" bodystart="191" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_default_latent_model_1a21d3a5426480ed63c72f8b4492f514cf" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::DefaultLatentModel&lt; CP &gt;::conditionalProbAtLeastNEvents</definition>
        <argsstring>(Size n, const Date &amp;date, const std::vector&lt; Real &gt; &amp;mktFactors) const</argsstring>
        <name>conditionalProbAtLeastNEvents</name>
        <qualifiedname>QuantLib::DefaultLatentModel::conditionalProbAtLeastNEvents</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactors</declname>
        </param>
        <briefdescription>
<para>Conditional probability of n default events or more. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" line="202" column="14" bodyfile="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" bodystart="279" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_default_latent_model_1a25bb529ee409a22cc0384aed147d0528" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_l_m_integration" kindref="compound">LMIntegration</ref> &gt; &amp;</type>
        <definition>const ext::shared_ptr&lt; LMIntegration &gt; &amp; QuantLib::DefaultLatentModel&lt; copulaPolicy &gt;::integration</definition>
        <argsstring>() const override</argsstring>
        <name>integration</name>
        <qualifiedname>QuantLib::DefaultLatentModel::integration</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_latent_model_1a89eb0c30269ba582f13776a19048c94b">integration</reimplements>
        <briefdescription>
<para>access to integration: </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" line="205" column="31" bodyfile="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" bodystart="205" bodyend="205"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para><ref refid="struct_quant_lib_1_1_default" kindref="compound">Default</ref> event Latent Model. </para>
    </briefdescription>
    <detaileddescription>
<para>This is a model for joint default events based on a generic Latent Model. It models solely the default events in a portfolio, not making any reference to severities, exposures, etc... An implicit correspondence is stablished between the variables modelled and the names in the basket given by the basket and model variable access indices. The class is parametric on the Latent Model copula.</para>
<para><xrefsect id="todo_1_todo000012"><xreftitle>Todo</xreftitle><xrefdescription><para>Consider QL_REQUIRE(basket_, &quot;No portfolio basket set.&quot;) test in debug model only for performance reasons. </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>QuantLib::ConstantLossLatentmodel&lt; copulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_constant_loss_latentmodel"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::ConstantLossModel&lt; copulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_constant_loss_model"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::DefaultLatentModel&lt; copulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_default_latent_model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::LatentModel&lt; copulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_latent_model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="3">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::DefaultLatentModel&lt; copulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_default_latent_model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Handle&lt; QuantLib::Quote &gt;</label>
        <link refid="class_quant_lib_1_1_handle"/>
      </node>
      <node id="2">
        <label>QuantLib::LatentModel&lt; copulaPolicy &gt;</label>
        <link refid="class_quant_lib_1_1_latent_model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>cachedMktFactor_</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="3">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" line="44" column="5" bodyfile="ql/experimental/credit/defaultprobabilitylatentmodel.hpp" bodystart="44" bodyend="243"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_latent_model_1a77b6963ac7d92d55caade265c40af9e4" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>allFactorCumulInverter</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1a02009926334b7e8e3f8ca0717540e1e1" prot="protected" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>basket_</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a68e201047207fd50ca0725a2cb7a21d4" prot="protected" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>cachedMktFactor_</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1adeafa90c0190ca6df804755b7fbc762f" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>conditionalDefaultProbability</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1a24a7009dfa3918fe8e577a120a3d4a52" prot="protected" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>conditionalDefaultProbability</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1ae42643670e071e369b0859af9d948990" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>conditionalDefaultProbabilityInvP</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1a21d3a5426480ed63c72f8b4492f514cf" prot="protected" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>conditionalProbAtLeastNEvents</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1a6db2041303cd4a079a6e6d8e96b3b70a" prot="protected" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>condProbProduct</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1ae56d8a54eabfb0d0216f472c727b65ac" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>copula</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1aa3dbc85525bd7e1dfbf3a41591cabe27" prot="protected" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>copula_</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1aad1fd370b3f36c3cf24b661d189fed01" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>copulaType</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1af159333d575c0b252de3c71371919dc2" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>cumulativeY</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1ae64724a9ecdc4cb7dadd555b019da10b" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>cumulativeZ</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::DefaultLatentModel</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1a21018a103e011428082f5697486c2e5d" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>defaultCorrelation</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1a1c8277cedada4e4a6bb66863948a15a2" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>DefaultLatentModel</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1a880b4a42bb1666531ea16ceb39d2defd" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>DefaultLatentModel</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a9711849d61e8bc79608424661ac9dde2" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>density</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a9058f44d45963e20631cf813f500ed50" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>factorWeights</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a416b1acb0a0321ba7eac54c1bc1c494d" prot="protected" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>factorWeights_</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1ad630746a257d3e970ecf83cd47878cd3" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>idiosyncFctrs</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a4f058b49788035828bbe2b3e78db9ebe" prot="protected" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>idiosyncFctrs_</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1a17f4e9bffc1d1440c48953117fdcfecc" prot="private" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>initTraits</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a8f73847f26e632e54de23dc218e44875" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>integratedExpectedValue</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a450b60907aff21aa12ef61c50206ec4b" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>integratedExpectedValueV</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1a25bb529ee409a22cc0384aed147d0528" prot="protected" virt="virtual"><scope>QuantLib::DefaultLatentModel</scope><name>integration</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1a7ae22566362d3a033b9772a6bcdb25d1" prot="protected" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>integration_</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a10f1e843503876609d1cb14ac9b26c8e" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>inverseCumulativeDensity</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a8f4c7a3b52e2a50a88b3a2e67cc1109b" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>inverseCumulativeY</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a28355f257003546d33fda003452c820e" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>inverseCumulativeZ</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a2423b7437ca2ba9796e153bd9b9df050" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>LatentModel</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a250ac646a6be88e253dc37c2620de9dd" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>LatentModel</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a762ae56003287bdd2995e5a46a8c9f57" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>LatentModel</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a4200b7490c6d6690d2ec1df95d4862ba" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>LatentModel</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a9d3034be325054187dfafbd5f7ef1890" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>latentVariableCorrel</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1aede4740894962881f21e1522349eb287" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>latentVarValue</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1acd1daf4e28ce8ab5233065be60fd2896" prot="protected" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>nFactors_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1ad410d410b17c524efa114598a0455936" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>numFactors</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a752c04c15550a49537c7eb0557bd6b16" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>numTotalFactors</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a43e8cf454283157cab9a90b5aa261409" prot="protected" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>nVariables_</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LatentModel&lt; copulaPolicy &gt;::"><scope>QuantLib::DefaultLatentModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LatentModel&lt; copulaPolicy &gt;::"><scope>QuantLib::DefaultLatentModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LatentModel&lt; copulaPolicy &gt;::"><scope>QuantLib::DefaultLatentModel</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::DefaultLatentModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LatentModel&lt; copulaPolicy &gt;::QuantLib::Observable::"><scope>QuantLib::DefaultLatentModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::DefaultLatentModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1af683416c9c109efaaa58f51e72224fa0" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>probAtLeastNEvents</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1ae282023c13b0e2404d29163b8e5a6b5c" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>probOfDefault</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1a9b98bab8ee02b28ee95b7eb100c7b5ea" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>resetBasket</name></member>
      <member refid="class_quant_lib_1_1_latent_model_1a1dedcee7cecd341a0ed6131577b2f48e" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>size</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::DefaultLatentModel</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_default_latent_model_1a68cb23471d12e47dae26213b6fa3f73b" prot="protected" virt="virtual"><scope>QuantLib::DefaultLatentModel</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::DefaultLatentModel</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::DefaultLatentModel</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
