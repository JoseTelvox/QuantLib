<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_m_c_heston_hull_white_engine" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::MCHestonHullWhiteEngine</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_m_c_vanilla_engine" prot="public" virt="non-virtual">QuantLib::MCVanillaEngine&lt; MultiVariate, PseudoRandom, Statistics &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>class RNG</type>
        <defval><ref refid="namespace_quant_lib_1a68b9aaf5f0c17983506b1a1db8575ab0" kindref="member">PseudoRandom</ref></defval>
      </param>
      <param>
        <type>class S</type>
        <defval><ref refid="namespace_quant_lib_1ae2e788da35d2b866040a03b96227ee6e" kindref="member">Statistics</ref></defval>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_m_c_heston_hull_white_engine_1a541c7ee1242f52ae0e234b20e219ec39" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_m_c_vanilla_engine" kindref="compound">MCVanillaEngine</ref>&lt; <ref refid="struct_quant_lib_1_1_multi_variate" kindref="compound">MultiVariate</ref>, RNG, S &gt;</type>
        <definition>typedef MCVanillaEngine&lt;MultiVariate, RNG,S&gt; QuantLib::MCHestonHullWhiteEngine&lt; RNG, S &gt;::base_type</definition>
        <argsstring></argsstring>
        <name>base_type</name>
        <qualifiedname>QuantLib::MCHestonHullWhiteEngine::base_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="40" column="33" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_m_c_heston_hull_white_engine_1ac14bd93723cbf77d2725961ae4599a87" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_multi_path_generator" kindref="compound">base_type::path_generator_type</ref></type>
        <definition>typedef base_type::path_generator_type QuantLib::MCHestonHullWhiteEngine&lt; RNG, S &gt;::path_generator_type</definition>
        <argsstring></argsstring>
        <name>path_generator_type</name>
        <qualifiedname>QuantLib::MCHestonHullWhiteEngine::path_generator_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="41" column="57" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_m_c_heston_hull_white_engine_1aab98ba5a5b1a5824db10379ef0ef42bc" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_path_pricer" kindref="compound">base_type::path_pricer_type</ref></type>
        <definition>typedef base_type::path_pricer_type QuantLib::MCHestonHullWhiteEngine&lt; RNG, S &gt;::path_pricer_type</definition>
        <argsstring></argsstring>
        <name>path_pricer_type</name>
        <qualifiedname>QuantLib::MCHestonHullWhiteEngine::path_pricer_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="42" column="54" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_m_c_heston_hull_white_engine_1a5183aaa5bda197e0356f30e54224938d" prot="public" static="no">
        <type>base_type::stats_type</type>
        <definition>typedef base_type::stats_type QuantLib::MCHestonHullWhiteEngine&lt; RNG, S &gt;::stats_type</definition>
        <argsstring></argsstring>
        <name>stats_type</name>
        <qualifiedname>QuantLib::MCHestonHullWhiteEngine::stats_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="43" column="48" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_m_c_heston_hull_white_engine_1ad813d25299d625ceb4d1575ce7c8a963" prot="public" static="no">
        <type>base_type::result_type</type>
        <definition>typedef base_type::result_type QuantLib::MCHestonHullWhiteEngine&lt; RNG, S &gt;::result_type</definition>
        <argsstring></argsstring>
        <name>result_type</name>
        <qualifiedname>QuantLib::MCHestonHullWhiteEngine::result_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="44" column="49" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_m_c_heston_hull_white_engine_1acafd96880677cb6bb7efcff60c22eb8b" prot="protected" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_hybrid_heston_hull_white_process" kindref="compound">HybridHestonHullWhiteProcess</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;HybridHestonHullWhiteProcess&gt; QuantLib::MCHestonHullWhiteEngine&lt; RNG, S &gt;::process_</definition>
        <argsstring></argsstring>
        <name>process_</name>
        <qualifiedname>QuantLib::MCHestonHullWhiteEngine::process_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="61" column="25" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_m_c_heston_hull_white_engine_1aa30babf7ac59d724e0233216e0bb8ab8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MCHestonHullWhiteEngine&lt; RNG, S &gt;::MCHestonHullWhiteEngine</definition>
        <argsstring>(const ext::shared_ptr&lt; HybridHestonHullWhiteProcess &gt; &amp;process, Size timeSteps, Size timeStepsPerYear, bool antitheticVariate, bool controlVariate, Size requiredSamples, Real requiredTolerance, Size maxSamples, BigNatural seed)</argsstring>
        <name>MCHestonHullWhiteEngine</name>
        <qualifiedname>QuantLib::MCHestonHullWhiteEngine::MCHestonHullWhiteEngine</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_hybrid_heston_hull_white_process" kindref="compound">HybridHestonHullWhiteProcess</ref> &gt; &amp;</type>
          <declname>process</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>timeSteps</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>timeStepsPerYear</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>antitheticVariate</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>controlVariate</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>requiredSamples</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>requiredTolerance</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxSamples</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="46" column="9" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="111" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_m_c_heston_hull_white_engine_1ac4d281bddfa9cac94fbc43b7ece95e79" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::MCHestonHullWhiteEngine&lt; RNG, S &gt;::calculate</definition>
        <argsstring>() const override</argsstring>
        <name>calculate</name>
        <qualifiedname>QuantLib::MCHestonHullWhiteEngine::calculate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="57" column="14" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="128" bodyend="136"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_m_c_heston_hull_white_engine_1a88b05de902aee45e6606374eb423ed85" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_path_pricer" kindref="compound">path_pricer_type</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; typename MCHestonHullWhiteEngine&lt; RNG, S &gt;::path_pricer_type &gt; QuantLib::MCHestonHullWhiteEngine&lt; RNG, S &gt;::pathPricer</definition>
        <argsstring>() const override</argsstring>
        <name>pathPricer</name>
        <qualifiedname>QuantLib::MCHestonHullWhiteEngine::pathPricer</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_mc_simulation_1a0e142b20adbf77779877d3603f9fa9b5">pathPricer</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="63" column="25" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="140" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_m_c_heston_hull_white_engine_1a8f670e48070648b39f2d57f2fdf4dc4d" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_path_pricer" kindref="compound">path_pricer_type</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; typename MCHestonHullWhiteEngine&lt; RNG, S &gt;::path_pricer_type &gt; QuantLib::MCHestonHullWhiteEngine&lt; RNG, S &gt;::controlPathPricer</definition>
        <argsstring>() const override</argsstring>
        <name>controlPathPricer</name>
        <qualifiedname>QuantLib::MCHestonHullWhiteEngine::controlPathPricer</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_mc_simulation_1ae3b7f6e12eaf228b5c65f70a721eb729">controlPathPricer</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="65" column="25" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="158" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_m_c_heston_hull_white_engine_1a0d96671954183b7bce8aaa51d4c2bbf1" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_pricing_engine" kindref="compound">PricingEngine</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; PricingEngine &gt; QuantLib::MCHestonHullWhiteEngine&lt; RNG, S &gt;::controlPricingEngine</definition>
        <argsstring>() const override</argsstring>
        <name>controlPricingEngine</name>
        <qualifiedname>QuantLib::MCHestonHullWhiteEngine::controlPricingEngine</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_mc_simulation_1ad835a3988a983d55494f911f53b78408">controlPricingEngine</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="66" column="25" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="182" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_m_c_heston_hull_white_engine_1a7e0d15ae2849c84e708bd69402ea1c2a" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_multi_path_generator" kindref="compound">path_generator_type</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; typename MCHestonHullWhiteEngine&lt; RNG, S &gt;::path_generator_type &gt; QuantLib::MCHestonHullWhiteEngine&lt; RNG, S &gt;::controlPathGenerator</definition>
        <argsstring>() const override</argsstring>
        <name>controlPathGenerator</name>
        <qualifiedname>QuantLib::MCHestonHullWhiteEngine::controlPathGenerator</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_mc_simulation_1a81f0b6c250bc8a1ba246faa3b7bbe70f">controlPathGenerator</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="67" column="25" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="204" bodyend="220"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::MCHestonHullWhiteEngine&lt; RNG, S &gt;</label>
        <link refid="class_quant_lib_1_1_m_c_heston_hull_white_engine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::MCVanillaEngine&lt; MultiVariate, PseudoRandom, Statistics &gt;</label>
        <link refid="class_quant_lib_1_1_m_c_vanilla_engine"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::McSimulation&lt; MultiVariate, PseudoRandom, Statistics &gt;</label>
        <link refid="class_quant_lib_1_1_mc_simulation"/>
      </node>
      <node id="3">
        <label>VanillaOption::engine</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::MCHestonHullWhiteEngine&lt; RNG, S &gt;</label>
        <link refid="class_quant_lib_1_1_m_c_heston_hull_white_engine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::MCVanillaEngine&lt; MultiVariate, PseudoRandom, Statistics &gt;</label>
        <link refid="class_quant_lib_1_1_m_c_vanilla_engine"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::McSimulation&lt; MultiVariate, PseudoRandom, Statistics &gt;</label>
        <link refid="class_quant_lib_1_1_mc_simulation"/>
      </node>
      <node id="3">
        <label>VanillaOption::engine</label>
      </node>
    </collaborationgraph>
    <location file="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" line="37" column="5" bodyfile="ql/pricingengines/vanilla/mchestonhullwhiteengine.hpp" bodystart="38" bodyend="68"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_mc_simulation_1a06f6de1952807cb9e689619d3f48450d" prot="protected" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>antitheticVariate_</name></member>
      <member refid="class_quant_lib_1_1_m_c_heston_hull_white_engine_1a541c7ee1242f52ae0e234b20e219ec39" prot="public" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>base_type</name></member>
      <member refid="class_quant_lib_1_1_m_c_vanilla_engine_1aa83929498aa10e44950b6ca09284cbe0" prot="protected" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>brownianBridge_</name></member>
      <member refid="class_quant_lib_1_1_m_c_heston_hull_white_engine_1ac4d281bddfa9cac94fbc43b7ece95e79" prot="public" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1af5ccf2e30a050c14f9e30965855b4993" prot="public" virt="non-virtual" ambiguityscope="QuantLib::McSimulation&lt; MultiVariate, PseudoRandom, Statistics &gt;::"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_m_c_heston_hull_white_engine_1a7e0d15ae2849c84e708bd69402ea1c2a" prot="protected" virt="virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>controlPathGenerator</name></member>
      <member refid="class_quant_lib_1_1_m_c_heston_hull_white_engine_1a8f670e48070648b39f2d57f2fdf4dc4d" prot="protected" virt="virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>controlPathPricer</name></member>
      <member refid="class_quant_lib_1_1_m_c_heston_hull_white_engine_1a0d96671954183b7bce8aaa51d4c2bbf1" prot="protected" virt="virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>controlPricingEngine</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a0c55429fb2a2d840cd8d358a5973cc40" prot="protected" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>controlVariate_</name></member>
      <member refid="class_quant_lib_1_1_m_c_vanilla_engine_1ac1df3f9481ce47a70dfb4bef1eb393ea" prot="protected" virt="virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>controlVariateValue</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1aa74e7e1891852e5c96da544b87af083c" prot="public" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>errorEstimate</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1ae21c92c6196d56c6a889389268ef2075" prot="protected" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>maxError</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a10d5e5d85cc108ab976899890055e061" prot="protected" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>maxError</name></member>
      <member refid="class_quant_lib_1_1_m_c_vanilla_engine_1a32b1d358361dec1b85c6a4085da5c73b" prot="protected" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>maxSamples_</name></member>
      <member refid="class_quant_lib_1_1_m_c_heston_hull_white_engine_1aa30babf7ac59d724e0233216e0bb8ab8" prot="public" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>MCHestonHullWhiteEngine</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1afbdbf4a8ce56b1b6060c49ac91b1f55a" prot="protected" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>mcModel_</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a3242253b8262657e78739463a077c1d6" prot="protected" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>McSimulation</name></member>
      <member refid="class_quant_lib_1_1_m_c_vanilla_engine_1a0da73f7e7964a61da3adc30fd168f2db" prot="protected" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>MCVanillaEngine</name></member>
      <member refid="class_quant_lib_1_1_m_c_heston_hull_white_engine_1ac14bd93723cbf77d2725961ae4599a87" prot="public" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>path_generator_type</name></member>
      <member refid="class_quant_lib_1_1_m_c_heston_hull_white_engine_1aab98ba5a5b1a5824db10379ef0ef42bc" prot="public" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>path_pricer_type</name></member>
      <member refid="class_quant_lib_1_1_m_c_vanilla_engine_1af619e062350d6b7f5f8b5e09e435c0ff" prot="protected" virt="virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>pathGenerator</name></member>
      <member refid="class_quant_lib_1_1_m_c_heston_hull_white_engine_1a88b05de902aee45e6606374eb423ed85" prot="protected" virt="virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>pathPricer</name></member>
      <member refid="class_quant_lib_1_1_m_c_heston_hull_white_engine_1acafd96880677cb6bb7efcff60c22eb8b" prot="protected" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>process_</name></member>
      <member refid="class_quant_lib_1_1_m_c_vanilla_engine_1a2fc6d9a617935d2802aee2a51af90d5d" prot="protected" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>requiredSamples_</name></member>
      <member refid="class_quant_lib_1_1_m_c_vanilla_engine_1a94996af57128d0ae8b0ff8cc90e09a68" prot="protected" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>requiredTolerance_</name></member>
      <member refid="class_quant_lib_1_1_m_c_heston_hull_white_engine_1ad813d25299d625ceb4d1575ce7c8a963" prot="public" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>result_type</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1aada0200a7fb38c4bc94bbcb49464d35b" prot="public" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>sampleAccumulator</name></member>
      <member refid="class_quant_lib_1_1_m_c_vanilla_engine_1a9e2a9433f99d100189f4a364536e7f81" prot="protected" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>seed_</name></member>
      <member refid="class_quant_lib_1_1_m_c_heston_hull_white_engine_1a5183aaa5bda197e0356f30e54224938d" prot="public" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>stats_type</name></member>
      <member refid="class_quant_lib_1_1_m_c_vanilla_engine_1a9860e354e46988f9fca156a8177ecf62" prot="protected" virt="virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>timeGrid</name></member>
      <member refid="class_quant_lib_1_1_m_c_vanilla_engine_1af1c36d911974082085bf4017ee24a8c0" prot="protected" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>timeSteps_</name></member>
      <member refid="class_quant_lib_1_1_m_c_vanilla_engine_1a8f49dec4cdb7429744822425438dcdc6" prot="protected" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>timeStepsPerYear_</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a1c903a9dd586755f55377b522d99ac16" prot="public" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>value</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a06e9db2fbd3d80e6358e8494f4b6b6ea" prot="public" virt="non-virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>valueWithSamples</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a11624b5e53889858d9189f85e27d653d" prot="public" virt="virtual"><scope>QuantLib::MCHestonHullWhiteEngine</scope><name>~McSimulation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
