<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="struct_quant_lib_1_1_hazard_rate" kind="struct" language="C++" prot="public">
    <compoundname>QuantLib::HazardRate</compoundname>
    <includes refid="probabilitytraits_8hpp" local="no">probabilitytraits.hpp</includes>
    <innerclass refid="struct_quant_lib_1_1_hazard_rate_1_1curve" prot="public">QuantLib::HazardRate::curve</innerclass>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_quant_lib_1_1_hazard_rate_1af27f6a808192f380778a1a0660c6b7f1" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_bootstrap_helper" kindref="compound">BootstrapHelper</ref>&lt; <ref refid="class_quant_lib_1_1_default_probability_term_structure" kindref="compound">DefaultProbabilityTermStructure</ref> &gt;</type>
        <definition>typedef BootstrapHelper&lt;DefaultProbabilityTermStructure&gt; QuantLib::HazardRate::helper</definition>
        <argsstring></argsstring>
        <name>helper</name>
        <qualifiedname>QuantLib::HazardRate::helper</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/probabilitytraits.hpp" line="122" column="33" bodyfile="ql/termstructures/credit/probabilitytraits.hpp" bodystart="122" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_quant_lib_1_1_hazard_rate_1a8d3558d2d27c86c48ca872973e094e6e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>static Date QuantLib::HazardRate::initialDate</definition>
        <argsstring>(const DefaultProbabilityTermStructure *c)</argsstring>
        <name>initialDate</name>
        <qualifiedname>QuantLib::HazardRate::initialDate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_default_probability_term_structure" kindref="compound">DefaultProbabilityTermStructure</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/probabilitytraits.hpp" line="125" column="21" bodyfile="ql/termstructures/credit/probabilitytraits.hpp" bodystart="125" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_hazard_rate_1a21259a90225d8308725663c1a9dc7698" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>static Real QuantLib::HazardRate::initialValue</definition>
        <argsstring>(const DefaultProbabilityTermStructure *)</argsstring>
        <name>initialValue</name>
        <qualifiedname>QuantLib::HazardRate::initialValue</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_default_probability_term_structure" kindref="compound">DefaultProbabilityTermStructure</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/probabilitytraits.hpp" line="129" column="21" bodyfile="ql/termstructures/credit/probabilitytraits.hpp" bodystart="129" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_hazard_rate_1a290baab2ae9012ba612a9363bd473a66" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>static Real QuantLib::HazardRate::guess</definition>
        <argsstring>(Size i, const C *c, bool validData, Size)</argsstring>
        <name>guess</name>
        <qualifiedname>QuantLib::HazardRate::guess</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type>const C *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>validData</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/probabilitytraits.hpp" line="135" column="21" bodyfile="ql/termstructures/credit/probabilitytraits.hpp" bodystart="135" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_hazard_rate_1ad51d683adb94d43c48862ae7095faff1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>static Real QuantLib::HazardRate::minValueAfter</definition>
        <argsstring>(Size i, const C *c, bool validData, Size)</argsstring>
        <name>minValueAfter</name>
        <qualifiedname>QuantLib::HazardRate::minValueAfter</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type>const C *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>validData</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/probabilitytraits.hpp" line="153" column="21" bodyfile="ql/termstructures/credit/probabilitytraits.hpp" bodystart="153" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_hazard_rate_1ab45d55fef2b7e8a4210067bde1312f61" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>static Real QuantLib::HazardRate::maxValueAfter</definition>
        <argsstring>(Size i, const C *c, bool validData, Size)</argsstring>
        <name>maxValueAfter</name>
        <qualifiedname>QuantLib::HazardRate::maxValueAfter</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type>const C *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>validData</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/probabilitytraits.hpp" line="165" column="21" bodyfile="ql/termstructures/credit/probabilitytraits.hpp" bodystart="165" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_hazard_rate_1a20f06b0eb8981fdaeb374d5c747d2a3d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void QuantLib::HazardRate::updateGuess</definition>
        <argsstring>(std::vector&lt; Real &gt; &amp;data, Real rate, Size i)</argsstring>
        <name>updateGuess</name>
        <qualifiedname>QuantLib::HazardRate::updateGuess</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>rate</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/probabilitytraits.hpp" line="179" column="21" bodyfile="ql/termstructures/credit/probabilitytraits.hpp" bodystart="179" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_hazard_rate_1a562a25530b246b3e40757aa29f4db2a0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>static Size QuantLib::HazardRate::maxIterations</definition>
        <argsstring>()</argsstring>
        <name>maxIterations</name>
        <qualifiedname>QuantLib::HazardRate::maxIterations</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/probabilitytraits.hpp" line="187" column="21" bodyfile="ql/termstructures/credit/probabilitytraits.hpp" bodystart="187" bodyend="187"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Hazard-rate-curve traits. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ql/termstructures/credit/probabilitytraits.hpp" line="115" column="5" bodyfile="ql/termstructures/credit/probabilitytraits.hpp" bodystart="115" bodyend="188"/>
    <listofallmembers>
      <member refid="struct_quant_lib_1_1_hazard_rate_1a290baab2ae9012ba612a9363bd473a66" prot="public" virt="non-virtual"><scope>QuantLib::HazardRate</scope><name>guess</name></member>
      <member refid="struct_quant_lib_1_1_hazard_rate_1af27f6a808192f380778a1a0660c6b7f1" prot="public" virt="non-virtual"><scope>QuantLib::HazardRate</scope><name>helper</name></member>
      <member refid="struct_quant_lib_1_1_hazard_rate_1a8d3558d2d27c86c48ca872973e094e6e" prot="public" virt="non-virtual"><scope>QuantLib::HazardRate</scope><name>initialDate</name></member>
      <member refid="struct_quant_lib_1_1_hazard_rate_1a21259a90225d8308725663c1a9dc7698" prot="public" virt="non-virtual"><scope>QuantLib::HazardRate</scope><name>initialValue</name></member>
      <member refid="struct_quant_lib_1_1_hazard_rate_1a562a25530b246b3e40757aa29f4db2a0" prot="public" virt="non-virtual"><scope>QuantLib::HazardRate</scope><name>maxIterations</name></member>
      <member refid="struct_quant_lib_1_1_hazard_rate_1ab45d55fef2b7e8a4210067bde1312f61" prot="public" virt="non-virtual"><scope>QuantLib::HazardRate</scope><name>maxValueAfter</name></member>
      <member refid="struct_quant_lib_1_1_hazard_rate_1ad51d683adb94d43c48862ae7095faff1" prot="public" virt="non-virtual"><scope>QuantLib::HazardRate</scope><name>minValueAfter</name></member>
      <member refid="struct_quant_lib_1_1_hazard_rate_1a20f06b0eb8981fdaeb374d5c747d2a3d" prot="public" virt="non-virtual"><scope>QuantLib::HazardRate</scope><name>updateGuess</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
