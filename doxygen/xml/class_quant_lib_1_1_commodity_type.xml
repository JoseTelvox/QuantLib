<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_commodity_type" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::CommodityType</compoundname>
    <derivedcompoundref refid="class_quant_lib_1_1_null_commodity_type" prot="public" virt="non-virtual">QuantLib::NullCommodityType</derivedcompoundref>
    <includes refid="commoditytype_8hpp" local="no">commoditytype.hpp</includes>
    <innerclass refid="struct_quant_lib_1_1_commodity_type_1_1_data" prot="protected">QuantLib::CommodityType::Data</innerclass>
    <sectiondef kind="user-defined">
      <header>Other information</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_commodity_type_1a1c729df01278471aa5dca62d71b28d67" prot="protected" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="struct_quant_lib_1_1_commodity_type_1_1_data" kindref="compound">Data</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;Data&gt; QuantLib::CommodityType::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <qualifiedname>QuantLib::CommodityType::data_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditytype.hpp" line="63" column="25" bodyfile="ql/experimental/commodities/commoditytype.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_commodity_type_1afdfbc50911354e2ea2605c3ec10a2222" prot="protected" static="yes" mutable="no">
        <type>std::map&lt; std::string, ext::shared_ptr&lt; <ref refid="struct_quant_lib_1_1_commodity_type_1_1_data" kindref="compound">Data</ref> &gt; &gt;</type>
        <definition>std::map&lt; std::string, ext::shared_ptr&lt; CommodityType::Data &gt; &gt; QuantLib::CommodityType::commodityTypes_</definition>
        <argsstring></argsstring>
        <name>commodityTypes_</name>
        <qualifiedname>QuantLib::CommodityType::commodityTypes_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditytype.hpp" line="72" column="25" bodyfile="ql/experimental/commodities/commoditytype.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_type_1ae0c5e6be523a1ace92f515a6ba03221b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::CommodityType::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <qualifiedname>QuantLib::CommodityType::empty</qualifiedname>
        <briefdescription>
<para>is this a usable instance? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditytype.hpp" line="58" column="14" bodyfile="ql/experimental/commodities/commoditytype.hpp" bodystart="103" bodyend="105"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Inspectors</header>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_type_1af8ee7bc276af49ace29fc7565163ef28" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; QuantLib::CommodityType::code</definition>
        <argsstring>() const</argsstring>
        <name>code</name>
        <qualifiedname>QuantLib::CommodityType::code</qualifiedname>
        <briefdescription>
<para>commodity code, e.g, &quot;HO&quot; </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditytype.hpp" line="50" column="27" bodyfile="ql/experimental/commodities/commoditytype.hpp" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_type_1aa39f32fcf21feaa8bcb0ded617abdaa2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; QuantLib::CommodityType::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <qualifiedname>QuantLib::CommodityType::name</qualifiedname>
        <briefdescription>
<para>name, e.g, &quot;Heating Oil&quot; </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditytype.hpp" line="52" column="27" bodyfile="ql/experimental/commodities/commoditytype.hpp" bodystart="99" bodyend="101"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_type_1a12b20958ee4d859fc578f3c8e8ec08b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::CommodityType::CommodityType</definition>
        <argsstring>()=default</argsstring>
        <name>CommodityType</name>
        <qualifiedname>QuantLib::CommodityType::CommodityType</qualifiedname>
        <briefdescription>
<para>default constructor </para>
        </briefdescription>
        <detaileddescription>
<para>Instances built via this constructor have undefined behavior. Such instances can only act as placeholders and must be reassigned to a valid currency before being used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditytype.hpp" line="45" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_type_1a2590fbe5a3ba59ab9fcc66ce85b9dc0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::CommodityType::CommodityType</definition>
        <argsstring>(const std::string &amp;code, const std::string &amp;name)</argsstring>
        <name>CommodityType</name>
        <qualifiedname>QuantLib::CommodityType::CommodityType</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditytype.hpp" line="46" column="9" bodyfile="ql/experimental/commodities/commoditytype.cpp" bodystart="28" bodyend="38"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="related">
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_type_1a672fd02545f740f194d879cb2b260456" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const CommodityType &amp;, const CommodityType &amp;)</argsstring>
        <name>operator==</name>
        <qualifiedname>QuantLib::CommodityType::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditytype.hpp" line="76" column="10" bodyfile="ql/experimental/commodities/commoditytype.hpp" bodystart="107" bodyend="109" declfile="ql/experimental/commodities/commoditytype.hpp" declline="76" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_type_1a77a9b9f71c1ed95bd31d2ad73dcc3202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const CommodityType &amp;, const CommodityType &amp;)</argsstring>
        <name>operator!=</name>
        <qualifiedname>QuantLib::CommodityType::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditytype.hpp" line="80" column="10" bodyfile="ql/experimental/commodities/commoditytype.hpp" bodystart="111" bodyend="113" declfile="ql/experimental/commodities/commoditytype.hpp" declline="80" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_commodity_type_1ae9b4ce5917c9d8624983d67323e0b081" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const CommodityType &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>QuantLib::CommodityType::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/commoditytype.hpp" line="84" column="5" bodyfile="ql/experimental/commodities/commoditytype.cpp" bodystart="40" bodyend="45" declfile="ql/experimental/commodities/commoditytype.hpp" declline="84" declcolumn="5"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>commodity type </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::CommodityType</label>
        <link refid="class_quant_lib_1_1_commodity_type"/>
      </node>
      <node id="2">
        <label>QuantLib::NullCommodityType</label>
        <link refid="class_quant_lib_1_1_null_commodity_type"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="ql/experimental/commodities/commoditytype.hpp" line="37" column="5" bodyfile="ql/experimental/commodities/commoditytype.hpp" bodystart="37" bodyend="73"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_commodity_type_1af8ee7bc276af49ace29fc7565163ef28" prot="public" virt="non-virtual"><scope>QuantLib::CommodityType</scope><name>code</name></member>
      <member refid="class_quant_lib_1_1_commodity_type_1a12b20958ee4d859fc578f3c8e8ec08b4" prot="public" virt="non-virtual"><scope>QuantLib::CommodityType</scope><name>CommodityType</name></member>
      <member refid="class_quant_lib_1_1_commodity_type_1a2590fbe5a3ba59ab9fcc66ce85b9dc0d" prot="public" virt="non-virtual"><scope>QuantLib::CommodityType</scope><name>CommodityType</name></member>
      <member refid="class_quant_lib_1_1_commodity_type_1afdfbc50911354e2ea2605c3ec10a2222" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityType</scope><name>commodityTypes_</name></member>
      <member refid="class_quant_lib_1_1_commodity_type_1a1c729df01278471aa5dca62d71b28d67" prot="protected" virt="non-virtual"><scope>QuantLib::CommodityType</scope><name>data_</name></member>
      <member refid="class_quant_lib_1_1_commodity_type_1ae0c5e6be523a1ace92f515a6ba03221b" prot="public" virt="non-virtual"><scope>QuantLib::CommodityType</scope><name>empty</name></member>
      <member refid="class_quant_lib_1_1_commodity_type_1aa39f32fcf21feaa8bcb0ded617abdaa2" prot="public" virt="non-virtual"><scope>QuantLib::CommodityType</scope><name>name</name></member>
      <member refid="class_quant_lib_1_1_commodity_type_1a77a9b9f71c1ed95bd31d2ad73dcc3202" prot="public" virt="non-virtual"><scope>QuantLib::CommodityType</scope><name>operator!=</name></member>
      <member refid="class_quant_lib_1_1_commodity_type_1ae9b4ce5917c9d8624983d67323e0b081" prot="public" virt="non-virtual"><scope>QuantLib::CommodityType</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_quant_lib_1_1_commodity_type_1a672fd02545f740f194d879cb2b260456" prot="public" virt="non-virtual"><scope>QuantLib::CommodityType</scope><name>operator==</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
