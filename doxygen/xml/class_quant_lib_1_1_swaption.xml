<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_swaption" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::Swaption</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_option" prot="public" virt="non-virtual">QuantLib::Option</basecompoundref>
    <includes refid="swaption_8hpp" local="no">swaption.hpp</includes>
    <innerclass refid="class_quant_lib_1_1_swaption_1_1arguments" prot="public">QuantLib::Swaption::arguments</innerclass>
    <innerclass refid="class_quant_lib_1_1_swaption_1_1engine" prot="public">QuantLib::Swaption::engine</innerclass>
    <sectiondef kind="user-defined">
      <header>Inspectors</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_swaption_1a351082ba10ab6e53a42965ec59785f01" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_fixed_vs_floating_swap" kindref="compound">FixedVsFloatingSwap</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;FixedVsFloatingSwap&gt; QuantLib::Swaption::swap_</definition>
        <argsstring></argsstring>
        <name>swap_</name>
        <qualifiedname>QuantLib::Swaption::swap_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/swaption.hpp" line="139" column="25" bodyfile="ql/instruments/swaption.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_swaption_1ae9cc7e9135cc0f58833d2200b9dc9c22" prot="private" static="no" mutable="no">
        <type>Settlement::Type</type>
        <definition>Settlement::Type QuantLib::Swaption::settlementType_</definition>
        <argsstring></argsstring>
        <name>settlementType_</name>
        <qualifiedname>QuantLib::Swaption::settlementType_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/swaption.hpp" line="141" column="26" bodyfile="ql/instruments/swaption.hpp" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_swaption_1ad4cd4724aaf6ffae262c8d4b6ea5685f" prot="private" static="no" mutable="no">
        <type>Settlement::Method</type>
        <definition>Settlement::Method QuantLib::Swaption::settlementMethod_</definition>
        <argsstring></argsstring>
        <name>settlementMethod_</name>
        <qualifiedname>QuantLib::Swaption::settlementMethod_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/swaption.hpp" line="142" column="28" bodyfile="ql/instruments/swaption.hpp" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_swaption_1ae5db00d2efef5da58c4f098313f86ca8" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_vanilla_swap" kindref="compound">VanillaSwap</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;VanillaSwap&gt; QuantLib::Swaption::vanilla_</definition>
        <argsstring></argsstring>
        <name>vanilla_</name>
        <qualifiedname>QuantLib::Swaption::vanilla_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/swaption.hpp" line="144" column="25" bodyfile="ql/instruments/swaption.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_swaption_1a1548dd2e4a042317a0b181df0337b496" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Settlement::Type</type>
        <definition>Settlement::Type QuantLib::Swaption::settlementType</definition>
        <argsstring>() const</argsstring>
        <name>settlementType</name>
        <qualifiedname>QuantLib::Swaption::settlementType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/swaption.hpp" line="108" column="26" bodyfile="ql/instruments/swaption.hpp" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_swaption_1afc1425253f948c16340255eff8108d86" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Settlement::Method</type>
        <definition>Settlement::Method QuantLib::Swaption::settlementMethod</definition>
        <argsstring>() const</argsstring>
        <name>settlementMethod</name>
        <qualifiedname>QuantLib::Swaption::settlementMethod</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/swaption.hpp" line="109" column="28" bodyfile="ql/instruments/swaption.hpp" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_swaption_1a15ab79b91fd4dc6eec790ff23a2894d1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_swap_1ad0806daa5b111fcb11ce521b19124b4e" kindref="member">Swap::Type</ref></type>
        <definition>Swap::Type QuantLib::Swaption::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <qualifiedname>QuantLib::Swaption::type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/swaption.hpp" line="112" column="20" bodyfile="ql/instruments/swaption.hpp" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_swaption_1a6d252ecc798dcbe6c4a4ea3f19d916c4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_fixed_vs_floating_swap" kindref="compound">FixedVsFloatingSwap</ref> &gt; &amp;</type>
        <definition>const ext::shared_ptr&lt; FixedVsFloatingSwap &gt; &amp; QuantLib::Swaption::underlying</definition>
        <argsstring>() const</argsstring>
        <name>underlying</name>
        <qualifiedname>QuantLib::Swaption::underlying</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/swaption.hpp" line="113" column="31" bodyfile="ql/instruments/swaption.hpp" bodystart="113" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_swaption_1a3a7dd0b3844b1d5b4f39220802c2e7d1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_vanilla_swap" kindref="compound">VanillaSwap</ref> &gt; &amp;</type>
        <definition>const ext::shared_ptr&lt; VanillaSwap &gt; &amp; QuantLib::Swaption::underlyingSwap</definition>
        <argsstring>() const</argsstring>
        <name>underlyingSwap</name>
        <qualifiedname>QuantLib::Swaption::underlyingSwap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000104"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use the Swaption::underlying method instead. Deprecated in version 1.34. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/swaption.hpp" line="120" column="31" bodyfile="ql/instruments/swaption.hpp" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_swaption_1abc2ca7ef06905b791d6df0910d95a0c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref></type>
        <definition>Volatility QuantLib::Swaption::impliedVolatility</definition>
        <argsstring>(Real price, const Handle&lt; YieldTermStructure &gt; &amp;discountCurve, Volatility guess, Real accuracy=1.0e-4, Natural maxEvaluations=100, Volatility minVol=1.0e-7, Volatility maxVol=4.0, VolatilityType type=ShiftedLognormal, Real displacement=0.0, PriceType priceType=Spot) const</argsstring>
        <name>impliedVolatility</name>
        <qualifiedname>QuantLib::Swaption::impliedVolatility</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>price</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
          <declname>discountCurve</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref></type>
          <declname>guess</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>accuracy</declname>
          <defval>1.0e-4</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref></type>
          <declname>maxEvaluations</declname>
          <defval>100</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref></type>
          <declname>minVol</declname>
          <defval>1.0e-7</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref></type>
          <declname>maxVol</declname>
          <defval>4.0</defval>
        </param>
        <param>
          <type>VolatilityType</type>
          <declname>type</declname>
          <defval>ShiftedLognormal</defval>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>displacement</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>PriceType</type>
          <declname>priceType</declname>
          <defval>Spot</defval>
        </param>
        <briefdescription>
<para>implied volatility </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/swaption.hpp" line="126" column="20" bodyfile="ql/instruments/swaption.cpp" bodystart="182" bodyend="205"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Observer interface</header>
      <memberdef kind="function" id="class_quant_lib_1_1_swaption_1a81237d99ca921a1f2d3640ceb9996bfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::Swaption::deepUpdate</definition>
        <argsstring>() override</argsstring>
        <name>deepUpdate</name>
        <qualifiedname>QuantLib::Swaption::deepUpdate</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183">deepUpdate</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method allows to explicitly update the instance itself and nested observers. If notifications are disabled a call to this method ensures an update of such nested observers. It should be implemented in derived classes whenever applicable </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/swaption.hpp" line="99" column="14" bodyfile="ql/instruments/swaption.cpp" bodystart="153" bodyend="156"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Instrument interface</header>
      <memberdef kind="function" id="class_quant_lib_1_1_swaption_1a95d7b019e8f7363cdec27835a61658f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool QuantLib::Swaption::isExpired</definition>
        <argsstring>() const override</argsstring>
        <name>isExpired</name>
        <qualifiedname>QuantLib::Swaption::isExpired</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_instrument_1a121a2a929b179900744a58272d46aefe">isExpired</reimplements>
        <briefdescription>
<para>returns whether the instrument might have value greater than zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/swaption.hpp" line="103" column="14" bodyfile="ql/instruments/swaption.cpp" bodystart="158" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_swaption_1ac9c2116635bb5855643cfd9bc5f369fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::Swaption::setupArguments</definition>
        <argsstring>(PricingEngine::arguments *) const override</argsstring>
        <name>setupArguments</name>
        <qualifiedname>QuantLib::Swaption::setupArguments</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_option_1ade8dc0f95885cb8ac36364b24d29b057">setupArguments</reimplements>
        <param>
          <type><ref refid="class_quant_lib_1_1_pricing_engine_1_1arguments" kindref="compound">PricingEngine::arguments</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When a derived argument structure is defined for an instrument, this method should be overridden to fill it. This is mandatory in case a pricing engine is used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/swaption.hpp" line="104" column="14" bodyfile="ql/instruments/swaption.cpp" bodystart="162" bodyend="173"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_quant_lib_1_1_swaption_1acdccf62a2e4316a24e4118092339c36c" prot="public" static="no" strong="no">
        <type></type>
        <name>PriceType</name>
        <qualifiedname>QuantLib::Swaption::PriceType</qualifiedname>
        <enumvalue id="class_quant_lib_1_1_swaption_1acdccf62a2e4316a24e4118092339c36ca985c50d53d20b63bc213f15d950bde4d" prot="public">
          <name>Spot</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_swaption_1acdccf62a2e4316a24e4118092339c36ca3bf5213a7550287c751eac1d4fcfd963" prot="public">
          <name>Forward</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/swaption.hpp" line="90" column="9" bodyfile="ql/instruments/swaption.hpp" bodystart="90" bodyend="90"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_swaption_1adf55cd140dc11277123af45d871f34c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Swaption::Swaption</definition>
        <argsstring>(ext::shared_ptr&lt; FixedVsFloatingSwap &gt; swap, const ext::shared_ptr&lt; Exercise &gt; &amp;exercise, Settlement::Type delivery=Settlement::Physical, Settlement::Method settlementMethod=Settlement::PhysicalOTC)</argsstring>
        <name>Swaption</name>
        <qualifiedname>QuantLib::Swaption::Swaption</qualifiedname>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_fixed_vs_floating_swap" kindref="compound">FixedVsFloatingSwap</ref> &gt;</type>
          <declname>swap</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_exercise" kindref="compound">Exercise</ref> &gt; &amp;</type>
          <declname>exercise</declname>
        </param>
        <param>
          <type>Settlement::Type</type>
          <declname>delivery</declname>
          <defval>Settlement::Physical</defval>
        </param>
        <param>
          <type>Settlement::Method</type>
          <declname>settlementMethod</declname>
          <defval>Settlement::PhysicalOTC</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/instruments/swaption.hpp" line="93" column="9" bodyfile="ql/instruments/swaption.cpp" bodystart="133" bodyend="151"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Swaption class </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="warning"><para>it&apos;s possible to pass an overnight-indexed swap to the constructor, but the only engine to fully support it is <ref refid="class_quant_lib_1_1_black_swaption_engine" kindref="compound">BlackSwaptionEngine</ref>; other engines will treat it as a vanilla swap. This is at best a decent proxy, at worst simply wrong. Use with caution.</para>
</simplesect>
<xrefsect id="test_1_test000025"><xreftitle>Test</xreftitle><xrefdescription><para><itemizedlist>
<listitem><para>the correctness of the returned value is tested by checking that the price of a payer (resp. receiver) swaption decreases (resp. increases) with the strike.</para>
</listitem><listitem><para>the correctness of the returned value is tested by checking that the price of a payer (resp. receiver) swaption increases (resp. decreases) with the spread.</para>
</listitem><listitem><para>the correctness of the returned value is tested by checking it against that of a swaption on a swap with no spread and a correspondingly adjusted fixed rate.</para>
</listitem><listitem><para>the correctness of the returned value is tested by checking it against a known good value.</para>
</listitem><listitem><para>the correctness of the returned value of cash settled swaptions is tested by checking the modified annuity against a value calculated without using the <ref refid="class_quant_lib_1_1_swaption" kindref="compound">Swaption</ref> class.</para>
</listitem></itemizedlist>
</para>
</xrefdescription></xrefsect></para>
<para><xrefsect id="todo_1_todo000044"><xreftitle>Todo</xreftitle><xrefdescription><para>add greeks and explicit exercise lag </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>QuantLib::Instrument</label>
        <link refid="class_quant_lib_1_1_instrument"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="6">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::Option</label>
        <link refid="class_quant_lib_1_1_option"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::Swaption</label>
        <link refid="class_quant_lib_1_1_swaption"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7">
        <label>QuantLib::Date</label>
        <link refid="class_quant_lib_1_1_date"/>
      </node>
      <node id="3">
        <label>QuantLib::Instrument</label>
        <link refid="class_quant_lib_1_1_instrument"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>valuationDate_</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="6">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::Option</label>
        <link refid="class_quant_lib_1_1_option"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::Swaption</label>
        <link refid="class_quant_lib_1_1_swaption"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/instruments/swaption.hpp" line="88" column="5" bodyfile="ql/instruments/swaption.hpp" bodystart="88" bodyend="145"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_instrument_1a468edb294da268b097c91bf821084c07" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>additionalResults</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a57d2b34e8625ab3d9ffa50c0c7931099" prot="protected" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>additionalResults_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a02070ea7442d30625992c1711030d4b8" prot="protected" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>alwaysForward_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a17c9433135a259e4776baec66204a484" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>alwaysForwardNotifications</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a4c573c48f7eaead5042864ac0eb5b025" prot="protected" virt="virtual"><scope>QuantLib::Swaption</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a58b4986a80efa18634483a92c121e26e" prot="protected" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>calculated_</name></member>
      <member refid="class_quant_lib_1_1_option_1abaee7fc605354c444867545492cd5845a4f872c1ba3286c1af60485c2f4a4d3c1" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>Call</name></member>
      <member refid="class_quant_lib_1_1_swaption_1a81237d99ca921a1f2d3640ceb9996bfb" prot="public" virt="virtual"><scope>QuantLib::Swaption</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_instrument_1ac548cb61c864779db09bd0fac6ae7c81" prot="protected" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>engine_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a03502fb6c606b262c25acd94ff4c1e52" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>errorEstimate</name></member>
      <member refid="class_quant_lib_1_1_instrument_1abb8f4cfa7346fab7a2f3a8c8b4da30f3" prot="protected" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>errorEstimate_</name></member>
      <member refid="class_quant_lib_1_1_option_1a983bd3fd1eb1437bbdef1f3fa2adf899" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>exercise</name></member>
      <member refid="class_quant_lib_1_1_option_1a3e8fca2ab5ba46c45b99badeeacd7e7a" prot="protected" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>exercise_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1aebe809131db2941325d037c031bbf41b" prot="public" virt="virtual"><scope>QuantLib::Swaption</scope><name>fetchResults</name></member>
      <member refid="class_quant_lib_1_1_swaption_1acdccf62a2e4316a24e4118092339c36ca3bf5213a7550287c751eac1d4fcfd963" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>Forward</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1afac6ee19c3107c453e1347dd8000e023" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>forwardFirstNotificationOnly</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7157f41e83f2c5d924f5c5bafda04d1d" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>freeze</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7bb721fe00c6854e602758aba629ab77" prot="protected" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>frozen_</name></member>
      <member refid="class_quant_lib_1_1_swaption_1abc2ca7ef06905b791d6df0910d95a0c5" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>impliedVolatility</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a5e4c746cbf7999c83dc57f87e241f1cc" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>Instrument</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a0a7c5d42815a4e16ee2158e24dbfc748" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>isCalculated</name></member>
      <member refid="class_quant_lib_1_1_swaption_1a95d7b019e8f7363cdec27835a61658f2" prot="public" virt="virtual"><scope>QuantLib::Swaption</scope><name>isExpired</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a26f18f4ff7faaaebd8eae50e064b493e" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>LazyObject</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a5afdd9698267cd30ddd10cf01f3487b0" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>NPV</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a997663780100d30ae59b14ac0285322d" prot="protected" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>NPV_</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::Swaption</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::Swaption</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::Swaption</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_option_1a03bf400e04666eadc73907b0c716739e" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::Swaption</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::Swaption</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::QuantLib::Observer::"><scope>QuantLib::Swaption</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_option_1a53a00c225649c5da693898cb8b4b364b" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>Option</name></member>
      <member refid="class_quant_lib_1_1_option_1a85744e7ba21d0df6987f618893ea76ce" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>payoff</name></member>
      <member refid="class_quant_lib_1_1_option_1ada24896615e540bebf2b9623c3537def" prot="protected" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>payoff_</name></member>
      <member refid="class_quant_lib_1_1_instrument_1aad23f546bbca156a49a95ca2bee124c4" prot="protected" virt="virtual"><scope>QuantLib::Swaption</scope><name>performCalculations</name></member>
      <member refid="class_quant_lib_1_1_swaption_1acdccf62a2e4316a24e4118092339c36c" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>PriceType</name></member>
      <member refid="class_quant_lib_1_1_option_1abaee7fc605354c444867545492cd5845aa96ffa37e51c7bbea13951f106dbd3c0" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>Put</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a70c9b24e50132408d8d9ce4f6674662a" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>recalculate</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a266c15a12160a89f4f9707db85f9fa27" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>result</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a3444386491f179f64f4f0aac24997071" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>setPricingEngine</name></member>
      <member refid="class_quant_lib_1_1_swaption_1afc1425253f948c16340255eff8108d86" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>settlementMethod</name></member>
      <member refid="class_quant_lib_1_1_swaption_1ad4cd4724aaf6ffae262c8d4b6ea5685f" prot="private" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>settlementMethod_</name></member>
      <member refid="class_quant_lib_1_1_swaption_1a1548dd2e4a042317a0b181df0337b496" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>settlementType</name></member>
      <member refid="class_quant_lib_1_1_swaption_1ae9cc7e9135cc0f58833d2200b9dc9c22" prot="private" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>settlementType_</name></member>
      <member refid="class_quant_lib_1_1_swaption_1ac9c2116635bb5855643cfd9bc5f369fa" prot="public" virt="virtual"><scope>QuantLib::Swaption</scope><name>setupArguments</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a73d90597fcd3ff52a8aed674393ab574" prot="protected" virt="virtual"><scope>QuantLib::Swaption</scope><name>setupExpired</name></member>
      <member refid="class_quant_lib_1_1_swaption_1acdccf62a2e4316a24e4118092339c36ca985c50d53d20b63bc213f15d950bde4d" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>Spot</name></member>
      <member refid="class_quant_lib_1_1_swaption_1a351082ba10ab6e53a42965ec59785f01" prot="private" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>swap_</name></member>
      <member refid="class_quant_lib_1_1_swaption_1adf55cd140dc11277123af45d871f34c0" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>Swaption</name></member>
      <member refid="class_quant_lib_1_1_option_1abaee7fc605354c444867545492cd5845" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>Type</name></member>
      <member refid="class_quant_lib_1_1_swaption_1a15ab79b91fd4dc6eec790ff23a2894d1" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>type</name></member>
      <member refid="class_quant_lib_1_1_swaption_1a6d252ecc798dcbe6c4a4ea3f19d916c4" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>underlying</name></member>
      <member refid="class_quant_lib_1_1_swaption_1a3a7dd0b3844b1d5b4f39220802c2e7d1" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>underlyingSwap</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a2e0e4786666453024b9d4e0761f2770b" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>unfreeze</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1adee2bf49be5c4c78736be293321a856d" prot="public" virt="virtual"><scope>QuantLib::Swaption</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_instrument_1a53a0fc1adc70b73387ad53009725835d" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>valuationDate</name></member>
      <member refid="class_quant_lib_1_1_instrument_1aa60b558fc82f022e13535360ac4a6fed" prot="protected" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>valuationDate_</name></member>
      <member refid="class_quant_lib_1_1_swaption_1ae5db00d2efef5da58c4f098313f86ca8" prot="private" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>vanilla_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a9d719c43bb627177a90d7d12324a2d6e" prot="public" virt="non-virtual"><scope>QuantLib::Swaption</scope><name>~LazyObject</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::Swaption</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::Swaption</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
