<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_issuer" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::Issuer</compoundname>
    <sectiondef kind="user-defined">
      <header>Utilities</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_issuer_1a2254e9cf3220f8ce00283a4bfe89e76c" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::pair&lt; <ref refid="class_quant_lib_1_1_default_prob_key" kindref="compound">DefaultProbKey</ref>, <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_default_probability_term_structure" kindref="compound">DefaultProbabilityTermStructure</ref> &gt; &gt; &gt;</type>
        <definition>std::vector&lt;std::pair&lt;DefaultProbKey, Handle&lt;DefaultProbabilityTermStructure&gt; &gt; &gt; QuantLib::Issuer::probabilities_</definition>
        <argsstring></argsstring>
        <name>probabilities_</name>
        <qualifiedname>QuantLib::Issuer::probabilities_</qualifiedname>
        <briefdescription>
<para>probabilities of events for each bond collection </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/issuer.hpp" line="94" column="2" bodyfile="ql/experimental/credit/issuer.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_issuer_1a2bcd95a867e39b5d56840b02ae914b4e" prot="private" static="no" mutable="no">
        <type>DefaultEventSet</type>
        <definition>DefaultEventSet QuantLib::Issuer::events_</definition>
        <argsstring></argsstring>
        <name>events_</name>
        <qualifiedname>QuantLib::Issuer::events_</qualifiedname>
        <briefdescription>
<para>History of past events affecting this issuer. Notice it is possible. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/issuer.hpp" line="98" column="25" bodyfile="ql/experimental/credit/issuer.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_issuer_1a7658474a41ba9e485291dcbd8d3232ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_default_event" kindref="compound">DefaultEvent</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; DefaultEvent &gt; QuantLib::Issuer::defaultedBetween</definition>
        <argsstring>(const Date &amp;start, const Date &amp;end, const DefaultProbKey &amp;key, bool includeRefDate=false) const</argsstring>
        <name>defaultedBetween</name>
        <qualifiedname>QuantLib::Issuer::defaultedBetween</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_default_prob_key" kindref="compound">DefaultProbKey</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeRefDate</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>If a default event with the required seniority and. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/issuer.hpp" line="77" column="9" bodyfile="ql/experimental/credit/issuer.cpp" bodystart="68" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_issuer_1ada0dc18fbeaa4d12a306417d3dcac76e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_default_event" kindref="compound">DefaultEvent</ref> &gt; &gt;</type>
        <definition>std::vector&lt; ext::shared_ptr&lt; DefaultEvent &gt; &gt; QuantLib::Issuer::defaultsBetween</definition>
        <argsstring>(const Date &amp;start, const Date &amp;end, const DefaultProbKey &amp;contractKey, bool includeRefDate) const</argsstring>
        <name>defaultsBetween</name>
        <qualifiedname>QuantLib::Issuer::defaultsBetween</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_default_prob_key" kindref="compound">DefaultProbKey</ref> &amp;</type>
          <declname>contractKey</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeRefDate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/issuer.hpp" line="85" column="9" bodyfile="ql/experimental/credit/issuer.cpp" bodystart="84" bodyend="97"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Inspectors</header>
      <memberdef kind="function" id="class_quant_lib_1_1_issuer_1a46155308f56ecb46716bb68e5524cd88" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_default_probability_term_structure" kindref="compound">DefaultProbabilityTermStructure</ref> &gt; &amp;</type>
        <definition>const Handle&lt; DefaultProbabilityTermStructure &gt; &amp; QuantLib::Issuer::defaultProbability</definition>
        <argsstring>(const DefaultProbKey &amp;key) const</argsstring>
        <name>defaultProbability</name>
        <qualifiedname>QuantLib::Issuer::defaultProbability</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_default_prob_key" kindref="compound">DefaultProbKey</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/issuer.hpp" line="67" column="13" bodyfile="ql/experimental/credit/issuer.cpp" bodystart="60" bodyend="65"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_issuer_1ac24754c9ea9053bd611410ac9ff6b517" prot="public" static="no">
        <type>std::pair&lt; <ref refid="class_quant_lib_1_1_default_prob_key" kindref="compound">DefaultProbKey</ref>, <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_default_probability_term_structure" kindref="compound">DefaultProbabilityTermStructure</ref> &gt; &gt;</type>
        <definition>typedef std::pair&lt;DefaultProbKey, Handle&lt;DefaultProbabilityTermStructure&gt; &gt; QuantLib::Issuer::key_curve_pair</definition>
        <argsstring></argsstring>
        <name>key_curve_pair</name>
        <qualifiedname>QuantLib::Issuer::key_curve_pair</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/issuer.hpp" line="44" column="64" bodyfile="ql/experimental/credit/issuer.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_issuer_1a8d21a6ef3f89c0561111d95e04ff55c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Issuer::Issuer</definition>
        <argsstring>(std::vector&lt; key_curve_pair &gt; probabilities=std::vector&lt; key_curve_pair &gt;(), DefaultEventSet events=DefaultEventSet())</argsstring>
        <name>Issuer</name>
        <qualifiedname>QuantLib::Issuer::Issuer</qualifiedname>
        <param>
          <type>std::vector&lt; key_curve_pair &gt;</type>
          <declname>probabilities</declname>
          <defval>std::vector&lt; key_curve_pair &gt;()</defval>
        </param>
        <param>
          <type>DefaultEventSet</type>
          <declname>events</declname>
          <defval>DefaultEventSet()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The first argument represents the probability of an issuer of having any of its bonds with the given seniority, currency incurring in that particular event. The second argument represents the history of past events. Theres no check on whether the event list makes sense, events can occur several times and several of them can take place on the same date.</para>
<para>To do: add settlement event access </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/issuer.hpp" line="55" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_issuer_1a64124792e0f459c1dc21147856f0bdea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Issuer::Issuer</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; ext::shared_ptr&lt; DefaultType &gt; &gt; &gt; &amp;eventTypes, const std::vector&lt; Currency &gt; &amp;currencies, const std::vector&lt; Seniority &gt; &amp;seniorities, const std::vector&lt; Handle&lt; DefaultProbabilityTermStructure &gt; &gt; &amp;curves, DefaultEventSet events=DefaultEventSet())</argsstring>
        <name>Issuer</name>
        <qualifiedname>QuantLib::Issuer::Issuer</qualifiedname>
        <param>
          <type>const std::vector&lt; std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_default_type" kindref="compound">DefaultType</ref> &gt; &gt; &gt; &amp;</type>
          <declname>eventTypes</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref> &gt; &amp;</type>
          <declname>currencies</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a197bfb2321381d9a5d8c94b56f6ef6cf" kindref="member">Seniority</ref> &gt; &amp;</type>
          <declname>seniorities</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_default_probability_term_structure" kindref="compound">DefaultProbabilityTermStructure</ref> &gt; &gt; &amp;</type>
          <declname>curves</declname>
        </param>
        <param>
          <type>DefaultEventSet</type>
          <declname>events</declname>
          <defval>DefaultEventSet()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/issuer.hpp" line="58" column="9" bodyfile="ql/experimental/credit/issuer.cpp" bodystart="41" bodyend="57"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ql/experimental/credit/issuer.hpp" line="40" column="5" bodyfile="ql/experimental/credit/issuer.hpp" bodystart="40" bodyend="99"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_issuer_1a7658474a41ba9e485291dcbd8d3232ea" prot="public" virt="non-virtual"><scope>QuantLib::Issuer</scope><name>defaultedBetween</name></member>
      <member refid="class_quant_lib_1_1_issuer_1a46155308f56ecb46716bb68e5524cd88" prot="public" virt="non-virtual"><scope>QuantLib::Issuer</scope><name>defaultProbability</name></member>
      <member refid="class_quant_lib_1_1_issuer_1ada0dc18fbeaa4d12a306417d3dcac76e" prot="public" virt="non-virtual"><scope>QuantLib::Issuer</scope><name>defaultsBetween</name></member>
      <member refid="class_quant_lib_1_1_issuer_1a2bcd95a867e39b5d56840b02ae914b4e" prot="private" virt="non-virtual"><scope>QuantLib::Issuer</scope><name>events_</name></member>
      <member refid="class_quant_lib_1_1_issuer_1a8d21a6ef3f89c0561111d95e04ff55c1" prot="public" virt="non-virtual"><scope>QuantLib::Issuer</scope><name>Issuer</name></member>
      <member refid="class_quant_lib_1_1_issuer_1a64124792e0f459c1dc21147856f0bdea" prot="public" virt="non-virtual"><scope>QuantLib::Issuer</scope><name>Issuer</name></member>
      <member refid="class_quant_lib_1_1_issuer_1ac24754c9ea9053bd611410ac9ff6b517" prot="public" virt="non-virtual"><scope>QuantLib::Issuer</scope><name>key_curve_pair</name></member>
      <member refid="class_quant_lib_1_1_issuer_1a2254e9cf3220f8ce00283a4bfe89e76c" prot="private" virt="non-virtual"><scope>QuantLib::Issuer</scope><name>probabilities_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
