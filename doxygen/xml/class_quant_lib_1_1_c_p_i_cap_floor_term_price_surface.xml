<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>QuantLib::CPICapFloorTermPriceSurface</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_term_structure" prot="public" virt="non-virtual">QuantLib::TermStructure</basecompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_interpolated_c_p_i_cap_floor_term_price_surface" prot="public" virt="non-virtual">QuantLib::InterpolatedCPICapFloorTermPriceSurface&lt; Interpolator2D &gt;</derivedcompoundref>
    <includes refid="cpicapfloortermpricesurface_8hpp" local="no">cpicapfloortermpricesurface.hpp</includes>
    <sectiondef kind="user-defined">
      <header>InflationTermStructure interface</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a29acdb0f8849a8d57be9208f47dbea27" prot="protected" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_zero_inflation_index" kindref="compound">ZeroInflationIndex</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;ZeroInflationIndex&gt; QuantLib::CPICapFloorTermPriceSurface::zii_</definition>
        <argsstring></argsstring>
        <name>zii_</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::zii_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="128" column="25" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a8316dad296921c6349d32dd9d6480e18" prot="protected" static="no" mutable="no">
        <type><ref refid="struct_quant_lib_1_1_c_p_i_1adaf018681fd1d9478c984348c82c9013" kindref="member">CPI::InterpolationType</ref></type>
        <definition>CPI::InterpolationType QuantLib::CPICapFloorTermPriceSurface::interpolationType_</definition>
        <argsstring></argsstring>
        <name>interpolationType_</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::interpolationType_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="129" column="32" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1ae536a78aadb88191e0ae14817ae092bd" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt;</type>
        <definition>Handle&lt;YieldTermStructure&gt; QuantLib::CPICapFloorTermPriceSurface::nominalTS_</definition>
        <argsstring></argsstring>
        <name>nominalTS_</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::nominalTS_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="130" column="16" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a27ef3265aebd264a1b923ee2052d3183" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt;</type>
        <definition>std::vector&lt;Rate&gt; QuantLib::CPICapFloorTermPriceSurface::cStrikes_</definition>
        <argsstring></argsstring>
        <name>cStrikes_</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::cStrikes_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="132" column="21" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1ab17db05546eaa09c53af31fc5ccf0816" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt;</type>
        <definition>std::vector&lt;Rate&gt; QuantLib::CPICapFloorTermPriceSurface::fStrikes_</definition>
        <argsstring></argsstring>
        <name>fStrikes_</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::fStrikes_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="133" column="21" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1aba324269c9ce28f5a0e1426a5f1ff65d" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &gt;</type>
        <definition>std::vector&lt;Period&gt; QuantLib::CPICapFloorTermPriceSurface::cfMaturities_</definition>
        <argsstring></argsstring>
        <name>cfMaturities_</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::cfMaturities_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="134" column="21" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a4ede94b89cd5041dd182bc4605828d4d" prot="protected" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt;Real&gt; QuantLib::CPICapFloorTermPriceSurface::cfMaturityTimes_</definition>
        <argsstring></argsstring>
        <name>cfMaturityTimes_</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::cfMaturityTimes_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="135" column="29" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1aa6b6b3ad3abde82a06762f557458a9f2" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::CPICapFloorTermPriceSurface::cPrice_</definition>
        <argsstring></argsstring>
        <name>cPrice_</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::cPrice_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="136" column="16" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a8c8f287f6b3f5fa96054507a0acc5e3c" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::CPICapFloorTermPriceSurface::fPrice_</definition>
        <argsstring></argsstring>
        <name>fPrice_</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::fPrice_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="137" column="16" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1ae516c2c99cd263239120f59f52500c7c" prot="protected" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt;</type>
        <definition>std::vector&lt;Rate&gt; QuantLib::CPICapFloorTermPriceSurface::cfStrikes_</definition>
        <argsstring></argsstring>
        <name>cfStrikes_</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::cfStrikes_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="139" column="29" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1aa7a987915470ef700d8c435da8c6f53b" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CPICapFloorTermPriceSurface::nominal_</definition>
        <argsstring></argsstring>
        <name>nominal_</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::nominal_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="141" column="14" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a84c668174fbf6b36b225838c0fe769e6" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881" kindref="member">BusinessDayConvention</ref></type>
        <definition>BusinessDayConvention QuantLib::CPICapFloorTermPriceSurface::bdc_</definition>
        <argsstring></argsstring>
        <name>bdc_</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::bdc_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="142" column="31" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a6e25403a7c2b0f05ad60cd0bc629c0bd" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref></type>
        <definition>Period QuantLib::CPICapFloorTermPriceSurface::observationLag_</definition>
        <argsstring></argsstring>
        <name>observationLag_</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::observationLag_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="143" column="16" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a389f2682957b8c793e5f3863ef080e7e" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::CPICapFloorTermPriceSurface::baseRate_</definition>
        <argsstring></argsstring>
        <name>baseRate_</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::baseRate_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="144" column="14" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a2bb9863d867a69fb11431695b01c46f3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref></type>
        <definition>Period QuantLib::CPICapFloorTermPriceSurface::observationLag</definition>
        <argsstring>() const</argsstring>
        <name>observationLag</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::observationLag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="74" column="24" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="332" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a7d0c88480a2c0d1c0f5783049ef31b1c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref></type>
        <definition>Frequency QuantLib::CPICapFloorTermPriceSurface::frequency</definition>
        <argsstring>() const</argsstring>
        <name>frequency</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::frequency</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="75" column="27" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="336" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a19d2a73df56f6437943cab026d61775b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::CPICapFloorTermPriceSurface::baseDate</definition>
        <argsstring>() const</argsstring>
        <name>baseDate</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::baseDate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="76" column="22" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="340" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1afd56c4bd7b345a08ffc5373049d37786" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::CPICapFloorTermPriceSurface::baseRate</definition>
        <argsstring>() const</argsstring>
        <name>baseRate</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::baseRate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="77" column="22" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="344" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a2edf1b31add3fd6d90701f4d7048c588" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CPICapFloorTermPriceSurface::nominal</definition>
        <argsstring>() const</argsstring>
        <name>nominal</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::nominal</qualifiedname>
        <briefdescription>
<para>inspectors </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>you don&apos;t know if <ref refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a17cc0c491f846b80b1474ed2025e97a1" kindref="member">price()</ref> is a cap or a floor without checking the ZeroInflation ATM level. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="85" column="22" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="348" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a46452ea1452827c869b4906c71b344ac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881" kindref="member">BusinessDayConvention</ref></type>
        <definition>BusinessDayConvention QuantLib::CPICapFloorTermPriceSurface::businessDayConvention</definition>
        <argsstring>() const</argsstring>
        <name>businessDayConvention</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::businessDayConvention</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="86" column="39" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="353" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a1334e62ea7901ddd28e4fc3d4f53995b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_zero_inflation_index" kindref="compound">ZeroInflationIndex</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; ZeroInflationIndex &gt; QuantLib::CPICapFloorTermPriceSurface::zeroInflationIndex</definition>
        <argsstring>() const</argsstring>
        <name>zeroInflationIndex</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::zeroInflationIndex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="87" column="25" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1ae28bab6c0153b0ced00ead8c79b40a41" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::CPICapFloorTermPriceSurface::atmRate</definition>
        <argsstring>(Date maturity) const</argsstring>
        <name>atmRate</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::atmRate</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
          <declname>maturity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="90" column="14" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.cpp" bodystart="112" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a17cc0c491f846b80b1474ed2025e97a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CPICapFloorTermPriceSurface::price</definition>
        <argsstring>(const Period &amp;d, Rate k) const</argsstring>
        <name>price</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::price</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_interpolated_c_p_i_cap_floor_term_price_surface_1a17cc0c491f846b80b1474ed2025e97a1">price</reimplementedby>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>you MUST remind the compiler in any descendants with the using:: mechanism because you overload the names remember that the strikes use the quoting convention </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="96" column="22" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.cpp" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a3ec3b7d9806558358a3bf7af4c567824" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CPICapFloorTermPriceSurface::capPrice</definition>
        <argsstring>(const Period &amp;d, Rate k) const</argsstring>
        <name>capPrice</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::capPrice</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_interpolated_c_p_i_cap_floor_term_price_surface_1a3ec3b7d9806558358a3bf7af4c567824">capPrice</reimplementedby>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="97" column="22" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.cpp" bodystart="135" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1af4643994a455aeddc24f2ea7f384245c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CPICapFloorTermPriceSurface::floorPrice</definition>
        <argsstring>(const Period &amp;d, Rate k) const</argsstring>
        <name>floorPrice</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::floorPrice</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_interpolated_c_p_i_cap_floor_term_price_surface_1af4643994a455aeddc24f2ea7f384245c">floorPrice</reimplementedby>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="98" column="22" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.cpp" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a0aa9611d3395a8d10c0877b1abe31873" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>virtual Real QuantLib::CPICapFloorTermPriceSurface::price</definition>
        <argsstring>(const Date &amp;d, Rate k) const =0</argsstring>
        <name>price</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::price</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_interpolated_c_p_i_cap_floor_term_price_surface_1acbdb84a3e362c2057e146232b3d75ecf">price</reimplementedby>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="99" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1afa0eca89805155ae35d66058b5cc58e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>virtual Real QuantLib::CPICapFloorTermPriceSurface::capPrice</definition>
        <argsstring>(const Date &amp;d, Rate k) const =0</argsstring>
        <name>capPrice</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::capPrice</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_interpolated_c_p_i_cap_floor_term_price_surface_1a1690de2fd5e61a2d1c95b3c49b37b469">capPrice</reimplementedby>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="100" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a7f402a63725417a30851fbd2089572a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>virtual Real QuantLib::CPICapFloorTermPriceSurface::floorPrice</definition>
        <argsstring>(const Date &amp;d, Rate k) const =0</argsstring>
        <name>floorPrice</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::floorPrice</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_interpolated_c_p_i_cap_floor_term_price_surface_1a3193093b2439953263b86392fc5d9c52">floorPrice</reimplementedby>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="101" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a6d24a4ceb6df65c25061a87244c101c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt;</type>
        <definition>virtual std::vector&lt; Rate &gt; QuantLib::CPICapFloorTermPriceSurface::strikes</definition>
        <argsstring>() const</argsstring>
        <name>strikes</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::strikes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="104" column="29" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1af8f8f87b81c80a1dbd73a3446f0c8f99" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt;</type>
        <definition>virtual std::vector&lt; Rate &gt; QuantLib::CPICapFloorTermPriceSurface::capStrikes</definition>
        <argsstring>() const</argsstring>
        <name>capStrikes</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::capStrikes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="105" column="29" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a3a4ffaa9ce3cb3dd84d0518660578516" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt;</type>
        <definition>virtual std::vector&lt; Rate &gt; QuantLib::CPICapFloorTermPriceSurface::floorStrikes</definition>
        <argsstring>() const</argsstring>
        <name>floorStrikes</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::floorStrikes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="106" column="29" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1afc3c79339f4921c7473c013f8ed0a5a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &gt;</type>
        <definition>virtual std::vector&lt; Period &gt; QuantLib::CPICapFloorTermPriceSurface::maturities</definition>
        <argsstring>() const</argsstring>
        <name>maturities</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::maturities</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="107" column="29" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1af644207868516cdb91018cf2b829b11e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>virtual const Matrix &amp; QuantLib::CPICapFloorTermPriceSurface::capPrices</definition>
        <argsstring>() const</argsstring>
        <name>capPrices</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::capPrices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="109" column="30" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a2c63ac67431521dc437fe7f27b814c58" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>virtual const Matrix &amp; QuantLib::CPICapFloorTermPriceSurface::floorPrices</definition>
        <argsstring>() const</argsstring>
        <name>floorPrices</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::floorPrices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="110" column="30" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a6bd4b07b0f58110995ea3afc1ff44c4e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>virtual Rate QuantLib::CPICapFloorTermPriceSurface::minStrike</definition>
        <argsstring>() const</argsstring>
        <name>minStrike</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::minStrike</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="112" column="22" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a44fa88bec7fad8612e9db65d9430209a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>virtual Rate QuantLib::CPICapFloorTermPriceSurface::maxStrike</definition>
        <argsstring>() const</argsstring>
        <name>maxStrike</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::maxStrike</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="113" column="22" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a565fdfaf0d1ff7c3be606413b253147a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>virtual Date QuantLib::CPICapFloorTermPriceSurface::minDate</definition>
        <argsstring>() const</argsstring>
        <name>minDate</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::minDate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="114" column="22" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a1153f54864da19824f155ac8d9b8b656" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::CPICapFloorTermPriceSurface::maxDate</definition>
        <argsstring>() const override</argsstring>
        <name>maxDate</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::maxDate</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_term_structure_1ae9af756bbddc15962711f77f514f08fa">maxDate</reimplements>
        <briefdescription>
<para>the latest date for which the curve can return values </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="115" column="14" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a33eadebffa7a2695d2c7f5f5426d6ebb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::CPICapFloorTermPriceSurface::cpiOptionDateFromTenor</definition>
        <argsstring>(const Period &amp;p) const</argsstring>
        <name>cpiOptionDateFromTenor</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::cpiOptionDateFromTenor</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="118" column="22" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.cpp" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a2d3c4e1d8f43e648c101ea39521cea84" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool QuantLib::CPICapFloorTermPriceSurface::checkStrike</definition>
        <argsstring>(Rate K)</argsstring>
        <name>checkStrike</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::checkStrike</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="121" column="22" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="121" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1aeb9170a60788466431925e73c9f76c70" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool QuantLib::CPICapFloorTermPriceSurface::checkMaturity</definition>
        <argsstring>(const Date &amp;d)</argsstring>
        <name>checkMaturity</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::checkMaturity</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="124" column="22" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="124" bodyend="126"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1aa1456454e2a034b032c55b428e49a9c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::CPICapFloorTermPriceSurface::CPICapFloorTermPriceSurface</definition>
        <argsstring>(Real nominal, Real baseRate, const Period &amp;observationLag, const Calendar &amp;cal, const BusinessDayConvention &amp;bdc, const DayCounter &amp;dc, ext::shared_ptr&lt; ZeroInflationIndex &gt; zii, CPI::InterpolationType interpolationType, Handle&lt; YieldTermStructure &gt; yts, const std::vector&lt; Rate &gt; &amp;cStrikes, const std::vector&lt; Rate &gt; &amp;fStrikes, const std::vector&lt; Period &gt; &amp;cfMaturities, const Matrix &amp;cPrice, const Matrix &amp;fPrice)</argsstring>
        <name>CPICapFloorTermPriceSurface</name>
        <qualifiedname>QuantLib::CPICapFloorTermPriceSurface::CPICapFloorTermPriceSurface</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nominal</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>baseRate</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;</type>
          <declname>observationLag</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;</type>
          <declname>cal</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881" kindref="member">BusinessDayConvention</ref> &amp;</type>
          <declname>bdc</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dc</declname>
        </param>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_zero_inflation_index" kindref="compound">ZeroInflationIndex</ref> &gt;</type>
          <declname>zii</declname>
        </param>
        <param>
          <type><ref refid="struct_quant_lib_1_1_c_p_i_1adaf018681fd1d9478c984348c82c9013" kindref="member">CPI::InterpolationType</ref></type>
          <declname>interpolationType</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt;</type>
          <declname>yts</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt; &amp;</type>
          <declname>cStrikes</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt; &amp;</type>
          <declname>fStrikes</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &gt; &amp;</type>
          <declname>cfMaturities</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>cPrice</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>fPrice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="56" column="9" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.cpp" bodystart="27" bodyend="110"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Provides cpi cap/floor prices by interpolation and put/call parity (not cap/floor/swap* parity). </para>
    </briefdescription>
    <detaileddescription>
<para>The inflation index MUST contain a <ref refid="class_quant_lib_1_1_zero_inflation_term_structure" kindref="compound">ZeroInflationTermStructure</ref> as this is used to create ATM. Unlike YoY price surfaces we assume that 1) an ATM <ref refid="class_quant_lib_1_1_zero_inflation_term_structure" kindref="compound">ZeroInflationTermStructure</ref> is available and 2) that it is safe to use it. This is supported by the fact that no stripping is required for <ref refid="struct_quant_lib_1_1_c_p_i" kindref="compound">CPI</ref> cap/floors as they only give one flow.</para>
<para>cpi cap/floors have a single (one) flow (unlike nominal caps) because they observe cumulative inflation up to their maturity. Options are on CPI(T)/CPI(0) but strikes are quoted for yearly average inflation, so require transformation via (1+quote)^T to obtain actual strikes. These are consistent with ZCIIS quoting conventions.</para>
<para>The observationLag is that for the referenced instrument prices. Strikes are as-quoted not as-used. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::CPICapFloorTermPriceSurface</label>
        <link refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Extrapolator</label>
        <link refid="class_quant_lib_1_1_extrapolator"/>
      </node>
      <node id="6">
        <label>QuantLib::InterpolatedCPICapFloorTermPriceSurface&lt; Interpolator2D &gt;</label>
        <link refid="class_quant_lib_1_1_interpolated_c_p_i_cap_floor_term_price_surface"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="3">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::TermStructure</label>
        <link refid="class_quant_lib_1_1_term_structure"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::CPICapFloorTermPriceSurface</label>
        <link refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>nominalTS_</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>cPrice_</edgelabel>
          <edgelabel>fPrice_</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::Calendar</label>
        <link refid="class_quant_lib_1_1_calendar"/>
      </node>
      <node id="5">
        <label>QuantLib::Extrapolator</label>
        <link refid="class_quant_lib_1_1_extrapolator"/>
      </node>
      <node id="7">
        <label>QuantLib::Handle&lt; QuantLib::YieldTermStructure &gt;</label>
        <link refid="class_quant_lib_1_1_handle"/>
      </node>
      <node id="8">
        <label>QuantLib::Matrix</label>
        <link refid="class_quant_lib_1_1_matrix"/>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="3">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::TermStructure</label>
        <link refid="class_quant_lib_1_1_term_structure"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>calendar_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" line="54" column="5" bodyfile="ql/experimental/inflation/cpicapfloortermpricesurface.hpp" bodystart="54" bodyend="145"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_extrapolator_1ab3936a9b5b5c163d3e511437c16c1d9e" prot="public" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>allowsExtrapolation</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1ae28bab6c0153b0ced00ead8c79b40a41" prot="public" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>atmRate</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a19d2a73df56f6437943cab026d61775b" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>baseDate</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1afd56c4bd7b345a08ffc5373049d37786" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>baseRate</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a389f2682957b8c793e5f3863ef080e7e" prot="private" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>baseRate_</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a84c668174fbf6b36b225838c0fe769e6" prot="private" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>bdc_</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a46452ea1452827c869b4906c71b344ac" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>businessDayConvention</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1ac4ea5cbce495c9a47a44eeaedf7a9d45" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>calendar</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1a0a09e3fa8cdfbc9aa9685da0c35ccb90" prot="protected" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>calendar_</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a3ec3b7d9806558358a3bf7af4c567824" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>capPrice</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1afa0eca89805155ae35d66058b5cc58e1" prot="public" virt="pure-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>capPrice</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1af644207868516cdb91018cf2b829b11e" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>capPrices</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1af8f8f87b81c80a1dbd73a3446f0c8f99" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>capStrikes</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1aba324269c9ce28f5a0e1426a5f1ff65d" prot="protected" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>cfMaturities_</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a4ede94b89cd5041dd182bc4605828d4d" prot="protected" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>cfMaturityTimes_</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1ae516c2c99cd263239120f59f52500c7c" prot="protected" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>cfStrikes_</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1aeb9170a60788466431925e73c9f76c70" prot="protected" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>checkMaturity</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1aa7297742ffbeeb0c7611f90a0f7d15bf" prot="protected" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>checkRange</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1a4d246bcb13b7518a75088bf7cf01ea75" prot="protected" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>checkRange</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a2d3c4e1d8f43e648c101ea39521cea84" prot="protected" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>checkStrike</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1aa1456454e2a034b032c55b428e49a9c8" prot="public" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>CPICapFloorTermPriceSurface</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a33eadebffa7a2695d2c7f5f5426d6ebb" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>cpiOptionDateFromTenor</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1aa6b6b3ad3abde82a06762f557458a9f2" prot="protected" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>cPrice_</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a27ef3265aebd264a1b923ee2052d3183" prot="protected" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>cStrikes_</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1ac03e725e4e0685b209caa626b00924ca" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>dayCounter</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_extrapolator_1a6af69387d5cae0fe84d6a0c858406218" prot="public" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>disableExtrapolation</name></member>
      <member refid="class_quant_lib_1_1_extrapolator_1a5f7b5650a44d6c63095bc739470c8bfb" prot="public" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>enableExtrapolation</name></member>
      <member refid="class_quant_lib_1_1_extrapolator_1af1c3adaccdfaf07d3d07edaa234444f7" prot="public" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>Extrapolator</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1af4643994a455aeddc24f2ea7f384245c" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>floorPrice</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a7f402a63725417a30851fbd2089572a2" prot="public" virt="pure-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>floorPrice</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a2c63ac67431521dc437fe7f27b814c58" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>floorPrices</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a3a4ffaa9ce3cb3dd84d0518660578516" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>floorStrikes</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a8c8f287f6b3f5fa96054507a0acc5e3c" prot="protected" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>fPrice_</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a7d0c88480a2c0d1c0f5783049ef31b1c" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>frequency</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1ab17db05546eaa09c53af31fc5ccf0816" prot="protected" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>fStrikes_</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a8316dad296921c6349d32dd9d6480e18" prot="protected" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>interpolationType_</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1afc3c79339f4921c7473c013f8ed0a5a3" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>maturities</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a1153f54864da19824f155ac8d9b8b656" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>maxDate</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a44fa88bec7fad8612e9db65d9430209a" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>maxStrike</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1a2f820c32e198e1046d97ca3dd9a807c5" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>maxTime</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a565fdfaf0d1ff7c3be606413b253147a" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>minDate</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a6bd4b07b0f58110995ea3afc1ff44c4e" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>minStrike</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1a8319e5c2c37b09a825d61210c9cb8e2a" prot="protected" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>moving_</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a2edf1b31add3fd6d90701f4d7048c588" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>nominal</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1aa7a987915470ef700d8c435da8c6f53b" prot="private" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>nominal_</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1ae536a78aadb88191e0ae14817ae092bd" prot="protected" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>nominalTS_</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::TermStructure::"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::TermStructure::"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a2bb9863d867a69fb11431695b01c46f3" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>observationLag</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a6e25403a7c2b0f05ad60cd0bc629c0bd" prot="private" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>observationLag_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::TermStructure::"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::TermStructure::QuantLib::Observable::"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a17cc0c491f846b80b1474ed2025e97a1" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>price</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a0aa9611d3395a8d10c0877b1abe31873" prot="public" virt="pure-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>price</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1accbf3d4af41db0333d456eb5616c4e1e" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>referenceDate</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1abeb79eefda70a9414f206ca9e70ced0f" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>settlementDays</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a6d24a4ceb6df65c25061a87244c101c1" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>strikes</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1ac8365997e6d41134b4e0998fe6b4e949" prot="public" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>TermStructure</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1a95764a49e0368b653eadbe619d9ef334" prot="public" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>TermStructure</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1aab73d2acafdc8fbdf9336e7084bd88a1" prot="public" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>TermStructure</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1ac8da61eb0f06ae07a35e8e4bbe7146b0" prot="public" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>timeFromReference</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1a016528f1fe9cabca6472d8f4776351e2" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1a2fcf1c78e57786ad5c123f52dbf619e8" prot="protected" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>updated_</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a1334e62ea7901ddd28e4fc3d4f53995b" prot="public" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>zeroInflationIndex</name></member>
      <member refid="class_quant_lib_1_1_c_p_i_cap_floor_term_price_surface_1a29acdb0f8849a8d57be9208f47dbea27" prot="protected" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>zii_</name></member>
      <member refid="class_quant_lib_1_1_extrapolator_1af0ca0156436ffbce159183198eb27e2e" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>~Extrapolator</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_term_structure_1ad202ddcc14fc4a6c16686d6164d7b36c" prot="public" virt="non-virtual"><scope>QuantLib::CPICapFloorTermPriceSurface</scope><name>~TermStructure</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
