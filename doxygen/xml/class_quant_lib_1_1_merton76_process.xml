<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_merton76_process" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::Merton76Process</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_stochastic_process1_d" prot="public" virt="non-virtual">QuantLib::StochasticProcess1D</basecompoundref>
    <includes refid="merton76process_8hpp" local="no">merton76process.hpp</includes>
    <sectiondef kind="user-defined">
      <header>Inspectors</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_merton76_process_1a2f1bb82b6401bb1af48d9e680b5bbcad" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;GeneralizedBlackScholesProcess&gt; QuantLib::Merton76Process::blackProcess_</definition>
        <argsstring></argsstring>
        <name>blackProcess_</name>
        <qualifiedname>QuantLib::Merton76Process::blackProcess_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/merton76process.hpp" line="66" column="25" bodyfile="ql/processes/merton76process.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_merton76_process_1ae3152ce9e6f333b8d3a66c83c2a81e38" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
        <definition>Handle&lt;Quote&gt; QuantLib::Merton76Process::jumpIntensity_</definition>
        <argsstring></argsstring>
        <name>jumpIntensity_</name>
        <qualifiedname>QuantLib::Merton76Process::jumpIntensity_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/merton76process.hpp" line="67" column="16" bodyfile="ql/processes/merton76process.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_merton76_process_1a90f9bfaa9aac5115f8ac5a4b83734117" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
        <definition>Handle&lt;Quote&gt; QuantLib::Merton76Process::logMeanJump_</definition>
        <argsstring></argsstring>
        <name>logMeanJump_</name>
        <qualifiedname>QuantLib::Merton76Process::logMeanJump_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/merton76process.hpp" line="67" column="31" bodyfile="ql/processes/merton76process.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_merton76_process_1a1665cf745193c1eaefa923b3f3c1d583" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
        <definition>Handle&lt;Quote&gt; QuantLib::Merton76Process::logJumpVolatility_</definition>
        <argsstring></argsstring>
        <name>logJumpVolatility_</name>
        <qualifiedname>QuantLib::Merton76Process::logJumpVolatility_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/merton76process.hpp" line="67" column="44" bodyfile="ql/processes/merton76process.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_merton76_process_1a635824cc6dce6d0057566e66d2061740" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &amp;</type>
        <definition>const Handle&lt; Quote &gt; &amp; QuantLib::Merton76Process::stateVariable</definition>
        <argsstring>() const</argsstring>
        <name>stateVariable</name>
        <qualifiedname>QuantLib::Merton76Process::stateVariable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/merton76process.hpp" line="57" column="22" bodyfile="ql/processes/merton76process.cpp" bodystart="53" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_merton76_process_1a4f20c84224c4f2bd86bd9b44e9379312" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
        <definition>const Handle&lt; YieldTermStructure &gt; &amp; QuantLib::Merton76Process::dividendYield</definition>
        <argsstring>() const</argsstring>
        <name>dividendYield</name>
        <qualifiedname>QuantLib::Merton76Process::dividendYield</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/merton76process.hpp" line="58" column="22" bodyfile="ql/processes/merton76process.cpp" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_merton76_process_1af78c4755522ee3b695747c09a1bb6dce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
        <definition>const Handle&lt; YieldTermStructure &gt; &amp; QuantLib::Merton76Process::riskFreeRate</definition>
        <argsstring>() const</argsstring>
        <name>riskFreeRate</name>
        <qualifiedname>QuantLib::Merton76Process::riskFreeRate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/merton76process.hpp" line="59" column="22" bodyfile="ql/processes/merton76process.cpp" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_merton76_process_1a3a0cbc4449eb6e6a868d88cb4232b3c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_black_vol_term_structure" kindref="compound">BlackVolTermStructure</ref> &gt; &amp;</type>
        <definition>const Handle&lt; BlackVolTermStructure &gt; &amp; QuantLib::Merton76Process::blackVolatility</definition>
        <argsstring>() const</argsstring>
        <name>blackVolatility</name>
        <qualifiedname>QuantLib::Merton76Process::blackVolatility</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/merton76process.hpp" line="60" column="22" bodyfile="ql/processes/merton76process.cpp" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_merton76_process_1a71264f95663d29750d664b9fd4697861" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &amp;</type>
        <definition>const Handle&lt; Quote &gt; &amp; QuantLib::Merton76Process::jumpIntensity</definition>
        <argsstring>() const</argsstring>
        <name>jumpIntensity</name>
        <qualifiedname>QuantLib::Merton76Process::jumpIntensity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/merton76process.hpp" line="61" column="22" bodyfile="ql/processes/merton76process.cpp" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_merton76_process_1a4957061ba1d40abf181153b717e9789f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &amp;</type>
        <definition>const Handle&lt; Quote &gt; &amp; QuantLib::Merton76Process::logMeanJump</definition>
        <argsstring>() const</argsstring>
        <name>logMeanJump</name>
        <qualifiedname>QuantLib::Merton76Process::logMeanJump</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/merton76process.hpp" line="62" column="22" bodyfile="ql/processes/merton76process.cpp" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_merton76_process_1ab371aa9025f08e6db1da5f638903d95a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &amp;</type>
        <definition>const Handle&lt; Quote &gt; &amp; QuantLib::Merton76Process::logJumpVolatility</definition>
        <argsstring>() const</argsstring>
        <name>logJumpVolatility</name>
        <qualifiedname>QuantLib::Merton76Process::logJumpVolatility</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/merton76process.hpp" line="63" column="22" bodyfile="ql/processes/merton76process.cpp" bodystart="78" bodyend="80"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>StochasticProcess1D interface</header>
      <memberdef kind="function" id="class_quant_lib_1_1_merton76_process_1ab11494eecaaef79871bb68f9dc7c6ea8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Merton76Process::x0</definition>
        <argsstring>() const override</argsstring>
        <name>x0</name>
        <qualifiedname>QuantLib::Merton76Process::x0</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process1_d_1a4a0eee3b5c6592950bd6635177f76113">x0</reimplements>
        <briefdescription>
<para>returns the initial value of the state variable </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/merton76process.hpp" line="49" column="14" bodyfile="ql/processes/merton76process.cpp" bodystart="45" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_merton76_process_1a7278ffed104fdfa0f19a98752d35edc4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Merton76Process::drift</definition>
        <argsstring>(Time, Real) const override</argsstring>
        <name>drift</name>
        <qualifiedname>QuantLib::Merton76Process::drift</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process1_d_1ad27eced4c2abbe7d8da5951969158e2d">drift</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the drift part of the equation, i.e. <formula id="478">$ \mu(t, x_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/merton76process.hpp" line="50" column="14" bodyfile="ql/processes/merton76process.hpp" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_merton76_process_1af10d5135a8b7250b62e8f1d87fe15160" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Merton76Process::diffusion</definition>
        <argsstring>(Time, Real) const override</argsstring>
        <name>diffusion</name>
        <qualifiedname>QuantLib::Merton76Process::diffusion</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process1_d_1a66bde34ae0158d64169e39655fdfcfc0">diffusion</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the diffusion part of the equation, i.e. <formula id="479">$ \sigma(t, x_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/merton76process.hpp" line="51" column="14" bodyfile="ql/processes/merton76process.hpp" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_merton76_process_1ae6a94b497f64a880bcc7dee947a17752" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::Merton76Process::apply</definition>
        <argsstring>(Real, Real) const override</argsstring>
        <name>apply</name>
        <qualifiedname>QuantLib::Merton76Process::apply</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process1_d_1a303b2e3c9243b674ac1f145c304811b7">apply</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>dx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>applies a change to the asset value. By default, it returns <formula id="484">$ x + \Delta x $</formula>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/merton76process.hpp" line="52" column="14" bodyfile="ql/processes/merton76process.hpp" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_merton76_process_1a8a88514463d8622033e4a8f100650db7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        <definition>Time QuantLib::Merton76Process::time</definition>
        <argsstring>(const Date &amp;) const override</argsstring>
        <name>time</name>
        <qualifiedname>QuantLib::Merton76Process::time</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_stochastic_process_1a39c5f08a3779665f9185a558d2b8418d">time</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the time value corresponding to the given date in the reference system of the stochastic process.</para>
<para><simplesect kind="note"><para>As a number of processes might not need this functionality, a default implementation is given which raises an exception. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/merton76process.hpp" line="54" column="14" bodyfile="ql/processes/merton76process.cpp" bodystart="49" bodyend="51"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_merton76_process_1abf2e7a3ceecb54274aea4d5d248e25d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::Merton76Process::Merton76Process</definition>
        <argsstring>(const Handle&lt; Quote &gt; &amp;stateVariable, const Handle&lt; YieldTermStructure &gt; &amp;dividendTS, const Handle&lt; YieldTermStructure &gt; &amp;riskFreeTS, const Handle&lt; BlackVolTermStructure &gt; &amp;blackVolTS, Handle&lt; Quote &gt; jumpInt, Handle&lt; Quote &gt; logJMean, Handle&lt; Quote &gt; logJVol, const ext::shared_ptr&lt; discretization &gt; &amp;d=ext::shared_ptr&lt; discretization &gt;(new EulerDiscretization))</argsstring>
        <name>Merton76Process</name>
        <qualifiedname>QuantLib::Merton76Process::Merton76Process</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &amp;</type>
          <declname>stateVariable</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
          <declname>dividendTS</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
          <declname>riskFreeTS</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_black_vol_term_structure" kindref="compound">BlackVolTermStructure</ref> &gt; &amp;</type>
          <declname>blackVolTS</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
          <declname>jumpInt</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
          <declname>logJMean</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
          <declname>logJVol</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_stochastic_process_1_1discretization" kindref="compound">discretization</ref> &gt; &amp;</type>
          <declname>d</declname>
          <defval>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_stochastic_process_1_1discretization" kindref="compound">discretization</ref> &gt;(new <ref refid="class_quant_lib_1_1_euler_discretization" kindref="compound">EulerDiscretization</ref>)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/processes/merton76process.hpp" line="38" column="9" bodyfile="ql/processes/merton76process.cpp" bodystart="27" bodyend="43"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Merton-76 jump-diffusion process. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::Merton76Process</label>
        <link refid="class_quant_lib_1_1_merton76_process"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="3">
        <label>QuantLib::StochasticProcess</label>
        <link refid="class_quant_lib_1_1_stochastic_process"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::StochasticProcess1D</label>
        <link refid="class_quant_lib_1_1_stochastic_process1_d"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::Merton76Process</label>
        <link refid="class_quant_lib_1_1_merton76_process"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="3">
        <label>QuantLib::StochasticProcess</label>
        <link refid="class_quant_lib_1_1_stochastic_process"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::StochasticProcess1D</label>
        <link refid="class_quant_lib_1_1_stochastic_process1_d"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/processes/merton76process.hpp" line="36" column="5" bodyfile="ql/processes/merton76process.hpp" bodystart="36" bodyend="68"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_merton76_process_1ae6a94b497f64a880bcc7dee947a17752" prot="public" virt="virtual"><scope>QuantLib::Merton76Process</scope><name>apply</name></member>
      <member refid="class_quant_lib_1_1_merton76_process_1a2f1bb82b6401bb1af48d9e680b5bbcad" prot="private" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>blackProcess_</name></member>
      <member refid="class_quant_lib_1_1_merton76_process_1a3a0cbc4449eb6e6a868d88cb4232b3c9" prot="public" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>blackVolatility</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::Merton76Process</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_merton76_process_1af10d5135a8b7250b62e8f1d87fe15160" prot="public" virt="virtual"><scope>QuantLib::Merton76Process</scope><name>diffusion</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1aff0e6c615f076baf4393abe860794583" prot="protected" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>discretization_</name></member>
      <member refid="class_quant_lib_1_1_merton76_process_1a4f20c84224c4f2bd86bd9b44e9379312" prot="public" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>dividendYield</name></member>
      <member refid="class_quant_lib_1_1_merton76_process_1a7278ffed104fdfa0f19a98752d35edc4" prot="public" virt="virtual"><scope>QuantLib::Merton76Process</scope><name>drift</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a39605ea27c7ef3a7feafed4fafcc1f90" prot="public" virt="virtual"><scope>QuantLib::Merton76Process</scope><name>evolve</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a4543779731a4ce76e9dd85f3c81752e7" prot="public" virt="virtual"><scope>QuantLib::Merton76Process</scope><name>expectation</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0346d38598fb9a5a1cd58024f05081aa" prot="public" virt="virtual"><scope>QuantLib::Merton76Process</scope><name>factors</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::Merton76Process</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_merton76_process_1a71264f95663d29750d664b9fd4697861" prot="public" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>jumpIntensity</name></member>
      <member refid="class_quant_lib_1_1_merton76_process_1ae3152ce9e6f333b8d3a66c83c2a81e38" prot="private" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>jumpIntensity_</name></member>
      <member refid="class_quant_lib_1_1_merton76_process_1ab371aa9025f08e6db1da5f638903d95a" prot="public" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>logJumpVolatility</name></member>
      <member refid="class_quant_lib_1_1_merton76_process_1a1665cf745193c1eaefa923b3f3c1d583" prot="private" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>logJumpVolatility_</name></member>
      <member refid="class_quant_lib_1_1_merton76_process_1a4957061ba1d40abf181153b717e9789f" prot="public" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>logMeanJump</name></member>
      <member refid="class_quant_lib_1_1_merton76_process_1a90f9bfaa9aac5115f8ac5a4b83734117" prot="private" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>logMeanJump_</name></member>
      <member refid="class_quant_lib_1_1_merton76_process_1abf2e7a3ceecb54274aea4d5d248e25d7" prot="public" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>Merton76Process</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::Merton76Process</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::Merton76Process</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::Merton76Process</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::Merton76Process</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::Merton76Process</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_merton76_process_1af78c4755522ee3b695747c09a1bb6dce" prot="public" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>riskFreeRate</name></member>
      <member refid="class_quant_lib_1_1_merton76_process_1a635824cc6dce6d0057566e66d2061740" prot="public" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>stateVariable</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a3290404acdbfcbbd6bbf8b035862e803" prot="public" virt="virtual"><scope>QuantLib::Merton76Process</scope><name>stdDeviation</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a2dd24b794a6b320bc60ba9e1a87bf48e" prot="protected" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>StochasticProcess</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a957ee9776d6048835106ea29ea44927f" prot="protected" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>StochasticProcess</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a8fd2dc83f956da3dd008242ee5a5c926" prot="protected" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>StochasticProcess1D</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1a0971f058bea9a93d2ced17c685576686" prot="protected" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>StochasticProcess1D</name></member>
      <member refid="class_quant_lib_1_1_merton76_process_1a8a88514463d8622033e4a8f100650db7" prot="public" virt="virtual"><scope>QuantLib::Merton76Process</scope><name>time</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0f22628658fd2dc702c13c354ef3244e" prot="public" virt="virtual"><scope>QuantLib::Merton76Process</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process1_d_1afec760c46c7f53d98cea9befd7087508" prot="public" virt="virtual"><scope>QuantLib::Merton76Process</scope><name>variance</name></member>
      <member refid="class_quant_lib_1_1_merton76_process_1ab11494eecaaef79871bb68f9dc7c6ea8" prot="public" virt="virtual"><scope>QuantLib::Merton76Process</scope><name>x0</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::Merton76Process</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::Merton76Process</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0e2b6a14e675db5abd0ab8965ff7b2c3" prot="public" virt="non-virtual"><scope>QuantLib::Merton76Process</scope><name>~StochasticProcess</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
