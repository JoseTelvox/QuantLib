<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_m_c_discrete_arithmetic_a_s_engine" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::MCDiscreteArithmeticASEngine</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_m_c_discrete_averaging_asian_engine_base" prot="public" virt="non-virtual">QuantLib::MCDiscreteAveragingAsianEngineBase&lt; SingleVariate, PseudoRandom, Statistics &gt;</basecompoundref>
    <includes refid="mc__discr__arith__av__strike_8hpp" local="no">mc_discr_arith_av_strike.hpp</includes>
    <templateparamlist>
      <param>
        <type>class RNG</type>
        <defval><ref refid="namespace_quant_lib_1a68b9aaf5f0c17983506b1a1db8575ab0" kindref="member">PseudoRandom</ref></defval>
      </param>
      <param>
        <type>class S</type>
        <defval><ref refid="namespace_quant_lib_1ae2e788da35d2b866040a03b96227ee6e" kindref="member">Statistics</ref></defval>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_m_c_discrete_arithmetic_a_s_engine_1a930298096682352a936384c99cd928e5" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_m_c_discrete_averaging_asian_engine_base" kindref="compound">MCDiscreteAveragingAsianEngineBase</ref>&lt; <ref refid="struct_quant_lib_1_1_single_variate" kindref="compound">SingleVariate</ref>, RNG, S &gt;::path_generator_type</type>
        <definition>typedef MCDiscreteAveragingAsianEngineBase&lt;SingleVariate,RNG,S&gt;::path_generator_type QuantLib::MCDiscreteArithmeticASEngine&lt; RNG, S &gt;::path_generator_type</definition>
        <argsstring></argsstring>
        <name>path_generator_type</name>
        <qualifiedname>QuantLib::MCDiscreteArithmeticASEngine::path_generator_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" line="42" column="13" bodyfile="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_m_c_discrete_arithmetic_a_s_engine_1a4e303c3e006f4faa542a057f7ff8ff0c" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_m_c_discrete_averaging_asian_engine_base" kindref="compound">MCDiscreteAveragingAsianEngineBase</ref>&lt; <ref refid="struct_quant_lib_1_1_single_variate" kindref="compound">SingleVariate</ref>, RNG, S &gt;::path_pricer_type</type>
        <definition>typedef MCDiscreteAveragingAsianEngineBase&lt;SingleVariate,RNG,S&gt;::path_pricer_type QuantLib::MCDiscreteArithmeticASEngine&lt; RNG, S &gt;::path_pricer_type</definition>
        <argsstring></argsstring>
        <name>path_pricer_type</name>
        <qualifiedname>QuantLib::MCDiscreteArithmeticASEngine::path_pricer_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" line="44" column="13" bodyfile="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_m_c_discrete_arithmetic_a_s_engine_1ab3b97e795e2d566b55f10367cea0a163" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1_m_c_discrete_averaging_asian_engine_base" kindref="compound">MCDiscreteAveragingAsianEngineBase</ref>&lt; <ref refid="struct_quant_lib_1_1_single_variate" kindref="compound">SingleVariate</ref>, RNG, S &gt;::stats_type</type>
        <definition>typedef MCDiscreteAveragingAsianEngineBase&lt;SingleVariate,RNG,S&gt;::stats_type QuantLib::MCDiscreteArithmeticASEngine&lt; RNG, S &gt;::stats_type</definition>
        <argsstring></argsstring>
        <name>stats_type</name>
        <qualifiedname>QuantLib::MCDiscreteArithmeticASEngine::stats_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" line="46" column="13" bodyfile="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_m_c_discrete_arithmetic_a_s_engine_1a05f8d03383144c933ecf8dcce5073367" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MCDiscreteArithmeticASEngine&lt; RNG, S &gt;::MCDiscreteArithmeticASEngine</definition>
        <argsstring>(const ext::shared_ptr&lt; GeneralizedBlackScholesProcess &gt; &amp;process, bool brownianBridge, bool antitheticVariate, Size requiredSamples, Real requiredTolerance, Size maxSamples, BigNatural seed)</argsstring>
        <name>MCDiscreteArithmeticASEngine</name>
        <qualifiedname>QuantLib::MCDiscreteArithmeticASEngine::MCDiscreteArithmeticASEngine</qualifiedname>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt; &amp;</type>
          <declname>process</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>brownianBridge</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>antitheticVariate</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>requiredSamples</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>requiredTolerance</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>maxSamples</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" line="48" column="9" bodyfile="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" bodystart="82" bodyend="97"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_m_c_discrete_arithmetic_a_s_engine_1af5dc5bd5d1873d6039d5566f312f4936" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_path_pricer" kindref="compound">path_pricer_type</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; typename MCDiscreteArithmeticASEngine&lt; RNG, S &gt;::path_pricer_type &gt; QuantLib::MCDiscreteArithmeticASEngine&lt; RNG, S &gt;::pathPricer</definition>
        <argsstring>() const override</argsstring>
        <name>pathPricer</name>
        <qualifiedname>QuantLib::MCDiscreteArithmeticASEngine::pathPricer</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_mc_simulation_1a0e142b20adbf77779877d3603f9fa9b5">pathPricer</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" line="57" column="25" bodyfile="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" bodystart="103" bodyend="127"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Monte Carlo pricing engine for discrete arithmetic average-strike Asian. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>QuantLib::DiscreteAveragingAsianOption::engine</label>
        <link refid="class_quant_lib_1_1_discrete_averaging_asian_option_1_1engine"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::GenericEngine&lt; DiscreteAveragingAsianOption::arguments, DiscreteAveragingAsianOption::results &gt;</label>
        <link refid="class_quant_lib_1_1_generic_engine"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::MCDiscreteArithmeticASEngine&lt; RNG, S &gt;</label>
        <link refid="class_quant_lib_1_1_m_c_discrete_arithmetic_a_s_engine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::MCDiscreteAveragingAsianEngineBase&lt; SingleVariate, PseudoRandom, Statistics &gt;</label>
        <link refid="class_quant_lib_1_1_m_c_discrete_averaging_asian_engine_base"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QuantLib::McSimulation&lt; SingleVariate, PseudoRandom, Statistics &gt;</label>
        <link refid="class_quant_lib_1_1_mc_simulation"/>
      </node>
      <node id="6">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="7">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="5">
        <label>QuantLib::PricingEngine</label>
        <link refid="class_quant_lib_1_1_pricing_engine"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="9">
        <label>OneAssetOption::arguments</label>
      </node>
      <node id="8">
        <label>QuantLib::DiscreteAveragingAsianOption::arguments</label>
        <link refid="class_quant_lib_1_1_discrete_averaging_asian_option_1_1arguments"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::DiscreteAveragingAsianOption::engine</label>
        <link refid="class_quant_lib_1_1_discrete_averaging_asian_option_1_1engine"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::GenericEngine&lt; DiscreteAveragingAsianOption::arguments, DiscreteAveragingAsianOption::results &gt;</label>
        <link refid="class_quant_lib_1_1_generic_engine"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>arguments_</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::MCDiscreteArithmeticASEngine&lt; RNG, S &gt;</label>
        <link refid="class_quant_lib_1_1_m_c_discrete_arithmetic_a_s_engine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::MCDiscreteAveragingAsianEngineBase&lt; SingleVariate, PseudoRandom, Statistics &gt;</label>
        <link refid="class_quant_lib_1_1_m_c_discrete_averaging_asian_engine_base"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>QuantLib::McSimulation&lt; SingleVariate, PseudoRandom, Statistics &gt;</label>
        <link refid="class_quant_lib_1_1_mc_simulation"/>
      </node>
      <node id="6">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="7">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="5">
        <label>QuantLib::PricingEngine</label>
        <link refid="class_quant_lib_1_1_pricing_engine"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" line="37" column="5" bodyfile="ql/pricingengines/asian/mc_discr_arith_av_strike.hpp" bodystart="38" bodyend="58"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_mc_simulation_1a06f6de1952807cb9e689619d3f48450d" prot="protected" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>antitheticVariate_</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1ad2371cdbafa1989afb0e4733b1212c0d" prot="protected" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>arguments_</name></member>
      <member refid="class_quant_lib_1_1_m_c_discrete_averaging_asian_engine_base_1a767b74de1fda503ca8ea914a89b47ae7" prot="protected" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>brownianBridge_</name></member>
      <member refid="class_quant_lib_1_1_m_c_discrete_averaging_asian_engine_base_1a03c0da962d035c40e14083a24f77e500" prot="public" virt="virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1af5ccf2e30a050c14f9e30965855b4993" prot="public" virt="non-virtual" ambiguityscope="QuantLib::McSimulation&lt; SingleVariate, PseudoRandom, Statistics &gt;::"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a81f0b6c250bc8a1ba246faa3b7bbe70f" prot="protected" virt="virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>controlPathGenerator</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1ae3b7f6e12eaf228b5c65f70a721eb729" prot="protected" virt="virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>controlPathPricer</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1ad835a3988a983d55494f911f53b78408" prot="protected" virt="virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>controlPricingEngine</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a0c55429fb2a2d840cd8d358a5973cc40" prot="protected" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>controlVariate_</name></member>
      <member refid="class_quant_lib_1_1_m_c_discrete_averaging_asian_engine_base_1a2ae1ef63dba5436dc687afdcd512bae5" prot="protected" virt="virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>controlVariateValue</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1aa74e7e1891852e5c96da544b87af083c" prot="public" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>errorEstimate</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1ad9c6e8dc65ca072d5e6e17640d74db3e" prot="public" virt="virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>getArguments</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1aea8272ef6e5e0ea1cffadfed0454fa88" prot="public" virt="virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>getResults</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1ae21c92c6196d56c6a889389268ef2075" prot="protected" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>maxError</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a10d5e5d85cc108ab976899890055e061" prot="protected" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>maxError</name></member>
      <member refid="class_quant_lib_1_1_m_c_discrete_averaging_asian_engine_base_1ac63cda807dd9cbbacf7e07e9805c4dbf" prot="protected" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>maxSamples_</name></member>
      <member refid="class_quant_lib_1_1_m_c_discrete_arithmetic_a_s_engine_1a05f8d03383144c933ecf8dcce5073367" prot="public" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>MCDiscreteArithmeticASEngine</name></member>
      <member refid="class_quant_lib_1_1_m_c_discrete_averaging_asian_engine_base_1ab50870d25840120d2e604ab6381077a9" prot="public" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>MCDiscreteAveragingAsianEngineBase</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1afbdbf4a8ce56b1b6060c49ac91b1f55a" prot="protected" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>mcModel_</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a3242253b8262657e78739463a077c1d6" prot="protected" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>McSimulation</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_m_c_discrete_arithmetic_a_s_engine_1a930298096682352a936384c99cd928e5" prot="public" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>path_generator_type</name></member>
      <member refid="class_quant_lib_1_1_m_c_discrete_arithmetic_a_s_engine_1a4e303c3e006f4faa542a057f7ff8ff0c" prot="public" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>path_pricer_type</name></member>
      <member refid="class_quant_lib_1_1_m_c_discrete_averaging_asian_engine_base_1a68e1871fa4693ed40279e438152f3016" prot="protected" virt="virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>pathGenerator</name></member>
      <member refid="class_quant_lib_1_1_m_c_discrete_arithmetic_a_s_engine_1af5dc5bd5d1873d6039d5566f312f4936" prot="protected" virt="virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>pathPricer</name></member>
      <member refid="class_quant_lib_1_1_m_c_discrete_averaging_asian_engine_base_1a94b1f6ed4babb85d2079663fb17d5072" prot="protected" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>process_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_m_c_discrete_averaging_asian_engine_base_1af631528b24db91f239104afdf18f5728" prot="protected" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>requiredSamples_</name></member>
      <member refid="class_quant_lib_1_1_m_c_discrete_averaging_asian_engine_base_1acc47bcc22a3ab5ab2f82aee8b2e837a0" prot="protected" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>requiredTolerance_</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1a81c5390ba1e713e57ca87d5f841d37f2" prot="public" virt="virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>reset</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a5c793e8d12a221aec4c60f022d34eb81" prot="public" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>result_type</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1a41281f2ea4990dbce90be1f9f2e231f6" prot="protected" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>results_</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1aada0200a7fb38c4bc94bbcb49464d35b" prot="public" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>sampleAccumulator</name></member>
      <member refid="class_quant_lib_1_1_m_c_discrete_averaging_asian_engine_base_1a936536f6b9d6a8905e2f248bfef9a378" prot="protected" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>seed_</name></member>
      <member refid="class_quant_lib_1_1_m_c_discrete_arithmetic_a_s_engine_1ab3b97e795e2d566b55f10367cea0a163" prot="public" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>stats_type</name></member>
      <member refid="class_quant_lib_1_1_m_c_discrete_averaging_asian_engine_base_1a73db7a157361f154cb366af5d9be2efd" prot="protected" virt="virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>timeGrid</name></member>
      <member refid="class_quant_lib_1_1_m_c_discrete_averaging_asian_engine_base_1a18d40317d3aced3712e91627a6e797f3" prot="protected" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>timeSteps_</name></member>
      <member refid="class_quant_lib_1_1_m_c_discrete_averaging_asian_engine_base_1af9801762d9cd18839839fe566754191f" prot="protected" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>timeStepsPerYear_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1aaf5ef54d9e1abf8b1b50b48804edf3dc" prot="public" virt="virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a1c903a9dd586755f55377b522d99ac16" prot="public" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>value</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a06e9db2fbd3d80e6358e8494f4b6b6ea" prot="public" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>valueWithSamples</name></member>
      <member refid="class_quant_lib_1_1_mc_simulation_1a11624b5e53889858d9189f85e27d653d" prot="public" virt="virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>~McSimulation</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_pricing_engine_1a66b279a54578cd7e60d402e5147eb526" prot="public" virt="non-virtual"><scope>QuantLib::MCDiscreteArithmeticASEngine</scope><name>~PricingEngine</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
