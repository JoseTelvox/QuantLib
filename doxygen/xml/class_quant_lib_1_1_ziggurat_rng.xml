<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_ziggurat_rng" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::ZigguratRng</compoundname>
    <includes refid="zigguratrng_8hpp" local="no">zigguratrng.hpp</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_ziggurat_rng_1af8ee215909532e45a1da43ab5e638844" prot="public" static="no">
        <type><ref refid="struct_quant_lib_1_1_sample" kindref="compound">Sample</ref>&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>typedef Sample&lt;Real&gt; QuantLib::ZigguratRng::sample_type</definition>
        <argsstring></argsstring>
        <name>sample_type</name>
        <qualifiedname>QuantLib::ZigguratRng::sample_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/zigguratrng.hpp" line="54" column="24" bodyfile="ql/experimental/math/zigguratrng.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_ziggurat_rng_1ae462c48ae1409f073df4ee4861ffb114" prot="private" static="no" mutable="yes">
        <type><ref refid="class_quant_lib_1_1_mersenne_twister_uniform_rng" kindref="compound">MersenneTwisterUniformRng</ref></type>
        <definition>MersenneTwisterUniformRng QuantLib::ZigguratRng::mt32_</definition>
        <argsstring></argsstring>
        <name>mt32_</name>
        <qualifiedname>QuantLib::ZigguratRng::mt32_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/zigguratrng.hpp" line="59" column="43" bodyfile="ql/experimental/math/zigguratrng.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_ziggurat_rng_1a40b17909c0d0f22f55533db772671496" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::ZigguratRng::ZigguratRng</definition>
        <argsstring>(unsigned long seed=0)</argsstring>
        <name>ZigguratRng</name>
        <qualifiedname>QuantLib::ZigguratRng::ZigguratRng</qualifiedname>
        <param>
          <type>unsigned long</type>
          <declname>seed</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/zigguratrng.hpp" line="55" column="18" bodyfile="ql/experimental/math/zigguratrng.cpp" bodystart="209" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_ziggurat_rng_1a86fa023ffb7f95157ea77f635d0f27da" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_quant_lib_1_1_sample" kindref="compound">sample_type</ref></type>
        <definition>sample_type QuantLib::ZigguratRng::next</definition>
        <argsstring>() const</argsstring>
        <name>next</name>
        <qualifiedname>QuantLib::ZigguratRng::next</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/zigguratrng.hpp" line="56" column="21" bodyfile="ql/experimental/math/zigguratrng.hpp" bodystart="56" bodyend="56"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_ziggurat_rng_1a0fa766039026281ded1faca714322890" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZigguratRng::nextGaussian</definition>
        <argsstring>() const</argsstring>
        <name>nextGaussian</name>
        <qualifiedname>QuantLib::ZigguratRng::nextGaussian</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/zigguratrng.hpp" line="60" column="14" bodyfile="ql/experimental/math/zigguratrng.cpp" bodystart="212" bodyend="239"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para><ref refid="struct_quant_lib_1_1_ziggurat" kindref="compound">Ziggurat</ref> random-number generator. </para>
    </briefdescription>
    <detaileddescription>
<para>This generator returns standard normal variates using the <ref refid="struct_quant_lib_1_1_ziggurat" kindref="compound">Ziggurat</ref> method. The underlying RNG is mt19937 (32 bit version). The algorithm is described in Marsaglia and Tsang (2000). &quot;The Ziggurat Method for Generating Random
Variables&quot;. Journal of Statistical Software 5 (8). Note that step 2 from the above paper reuses the rightmost 8 bits of the random integer, which creates correlation between steps 1 and<orderedlist>
<listitem><para>This implementation was written from scratch, following Marsaglia and Tsang. It avoids the correlation by using only the leftmost 24 bits of mt19937&apos;s output.</para>
</listitem></orderedlist>
</para>
<para>Note that the GNU GSL implementation uses a different value for the right-most step. The GSL value is somewhat different from the one reported by Marsaglia and Tsang because GSL uses a different tail. This implementation uses the same right-most step as reported by Marsaglia and Tsang. The generator was put through Marsaglia&apos;s Diehard battery of tests and didn&apos;t exibit any abnormal behavior. </para>
    </detaileddescription>
    <location file="ql/experimental/math/zigguratrng.hpp" line="52" column="5" bodyfile="ql/experimental/math/zigguratrng.hpp" bodystart="52" bodyend="61"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_ziggurat_rng_1ae462c48ae1409f073df4ee4861ffb114" prot="private" virt="non-virtual"><scope>QuantLib::ZigguratRng</scope><name>mt32_</name></member>
      <member refid="class_quant_lib_1_1_ziggurat_rng_1a86fa023ffb7f95157ea77f635d0f27da" prot="public" virt="non-virtual"><scope>QuantLib::ZigguratRng</scope><name>next</name></member>
      <member refid="class_quant_lib_1_1_ziggurat_rng_1a0fa766039026281ded1faca714322890" prot="private" virt="non-virtual"><scope>QuantLib::ZigguratRng</scope><name>nextGaussian</name></member>
      <member refid="class_quant_lib_1_1_ziggurat_rng_1af8ee215909532e45a1da43ab5e638844" prot="public" virt="non-virtual"><scope>QuantLib::ZigguratRng</scope><name>sample_type</name></member>
      <member refid="class_quant_lib_1_1_ziggurat_rng_1a40b17909c0d0f22f55533db772671496" prot="public" virt="non-virtual"><scope>QuantLib::ZigguratRng</scope><name>ZigguratRng</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
