<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="deprecated" kind="page">
    <compoundname>deprecated</compoundname>
    <title>Deprecated List</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><variablelist>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1a0c277356fbdba31d3a62c61e8a3ce0dc" kindref="member">QuantLib::aggregateNPV</ref>  (const std::vector&lt; ext::shared_ptr&lt; Instrument &gt; &gt; &amp;, const std::vector&lt; Real &gt; &amp;quantities)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000031"/>Out of scope; copy this function in your codebase if needed. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_arithmetic_average_o_i_s" kindref="compound">QuantLib::ArithmeticAverageOIS</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000011"/>Use <ref refid="class_quant_lib_1_1_overnight_indexed_swap" kindref="compound">OvernightIndexedSwap</ref> instead. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_arithmetic_o_i_s_rate_helper" kindref="compound">QuantLib::ArithmeticOISRateHelper</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000012"/>Use <ref refid="class_quant_lib_1_1_o_i_s_rate_helper" kindref="compound">OISRateHelper</ref> instead. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_asset_swap_1a7afa7ae3116d95a74009688992501115" kindref="member">QuantLib::AssetSwap::AssetSwap</ref>  (bool parAssetSwap, ext::shared_ptr&lt; Bond &gt; bond, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> bondCleanPrice, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> nonParRepayment, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> gearing, const ext::shared_ptr&lt; IborIndex &gt; &amp;iborIndex, <ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref> spread=0.0, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;floatingDayCount=DayCounter(), <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> dealMaturity=Date(), bool payBondCoupon=false)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000101"/>Use the other overload. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1a31555691a6fab9b538e0e50b0a0cc9f1" kindref="member">QuantLib::AveragingRatePricer</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000005"/>Renamed to <ref refid="class_quant_lib_1_1_averaging_multiple_resets_pricer" kindref="compound">AveragingMultipleResetsPricer</ref>. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_bibor9_m" kindref="compound">QuantLib::Bibor9M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000049"/>If needed, use the <ref refid="class_quant_lib_1_1_bibor" kindref="compound">Bibor</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_bond_1afa69fb56ae9a24d725adc2c825982357" kindref="member">QuantLib::Bond::yield</ref>  (<ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> price, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dc, <ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref> comp, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> freq, <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> settlementDate=Date(), <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> accuracy=1.0e-8, <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> maxEvaluations=100, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> guess=0.05, Bond::Price::Type priceType=Bond::Price::Clean) const</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000102"/>Use the overload taking a <ref refid="class_quant_lib_1_1_bond_1_1_price" kindref="compound">Bond::Price</ref> argument instead. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Member <ref refid="struct_quant_lib_1_1_bond_functions_1a860c7e88e5c6b60672b01d92df093434" kindref="member">QuantLib::BondFunctions::atmRate</ref>  (const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;bond, const <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &amp;discountCurve, <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> settlementDate, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> cleanPrice)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000118"/>Use the overload taking a <ref refid="class_quant_lib_1_1_bond_1_1_price" kindref="compound">Bond::Price</ref> argument instead. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Member <ref refid="struct_quant_lib_1_1_bond_functions_1a2aba512137a2a145f62977c91c47c294" kindref="member">QuantLib::BondFunctions::yield</ref>  (const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;bond, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> price, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, <ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref> compounding, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> settlementDate=Date(), <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> accuracy=1.0e-10, <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> maxIterations=100, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> guess=0.05, Bond::Price::Type priceType=Bond::Price::Clean)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000119"/>Use the overload taking a <ref refid="class_quant_lib_1_1_bond_1_1_price" kindref="compound">Bond::Price</ref> argument instead. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Member <ref refid="struct_quant_lib_1_1_bond_functions_1af30645b47d340cbb5ecba3f3e988fcbc" kindref="member">QuantLib::BondFunctions::yield</ref>  (const Solver &amp;solver, const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;bond, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> price, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, <ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref> compounding, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> settlementDate=Date(), <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> accuracy=1.0e-10, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> guess=0.05, Bond::Price::Type priceType=Bond::Price::Clean)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000120"/>Use the overload taking a <ref refid="class_quant_lib_1_1_bond_1_1_price" kindref="compound">Bond::Price</ref> argument instead. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Member <ref refid="struct_quant_lib_1_1_bond_functions_1a5a3f4cab52d0acb15690510b384adf32" kindref="member">QuantLib::BondFunctions::zSpread</ref>  (const <ref refid="class_quant_lib_1_1_bond" kindref="compound">Bond</ref> &amp;bond, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> cleanPrice, const ext::shared_ptr&lt; YieldTermStructure &gt; &amp;, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, <ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref> compounding, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> settlementDate=Date(), <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> accuracy=1.0e-10, <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> maxIterations=100, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> guess=0.0)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000121"/>Use the overload taking a <ref refid="class_quant_lib_1_1_bond_1_1_price" kindref="compound">Bond::Price</ref> argument instead. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1a6bf22435f3d7d11f58e4e430784f4981" kindref="member">QuantLib::BoundedGrid</ref>  (<ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> xMin, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> xMax, <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> steps)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000045"/>Part of the old FD framework; copy this function in your codebase if needed. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1ac2a631b171034f0cdee5ba80b803a6a8" kindref="member">QuantLib::BoundedLogGrid</ref>  (<ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> xMin, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> xMax, <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> steps)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000046"/>Part of the old FD framework; copy this function in your codebase if needed. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_b_s_m_operator" kindref="compound">QuantLib::BSMOperator</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000111"/>Part of the old FD framework; copy this function in your codebase if needed. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1a02df7c8e8e7bc396e6bd54e9279683b3" kindref="member">QuantLib::bucketAnalysis</ref>  (const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; SimpleQuote &gt;</ref> &amp;quote, const std::vector&lt; ext::shared_ptr&lt; Instrument &gt; &gt; &amp;, const std::vector&lt; Real &gt; &amp;quantities, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> shift=0.0001, <ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref> type=Centered, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> referenceNpv=Null&lt; Real &gt;())</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000034"/>Out of scope; copy this function in your codebase if needed. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1afe07b1dd77a5889c1a072146fddf9f88" kindref="member">QuantLib::bucketAnalysis</ref>  (std::vector&lt; Real &gt; &amp;deltaVector, std::vector&lt; Real &gt; &amp;gammaVector, std::vector&lt; Real &gt; &amp;referenceValues, const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; SimpleQuote &gt;</ref> &amp;quote, const std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; Quote &gt;</ref> &gt; &amp;parameters, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> shift=0.0001, <ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref> type=Centered)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000035"/>Out of scope; copy this function in your codebase if needed. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1aab55e0975a5da136a3860ffe6eea93e8" kindref="member">QuantLib::bucketAnalysis</ref>  (const std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; SimpleQuote &gt;</ref> &gt; &amp;quotes, const std::vector&lt; ext::shared_ptr&lt; Instrument &gt; &gt; &amp;, const std::vector&lt; Real &gt; &amp;quantities, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> shift=0.0001, <ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref> type=Centered)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000036"/>Out of scope; copy this function in your codebase if needed. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1a973f11d563be3e401e0b0d76b7e7c369" kindref="member">QuantLib::bucketAnalysis</ref>  (std::vector&lt; std::vector&lt; Real &gt; &gt; &amp;deltaMatrix, std::vector&lt; std::vector&lt; Real &gt; &gt; &amp;gammaMatrix, const std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; SimpleQuote &gt;</ref> &gt; &amp;quotes, const std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; Quote &gt;</ref> &gt; &amp;parameters, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> shift=0.0001, <ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref> type=Centered)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000037"/>Out of scope; copy this function in your codebase if needed. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1a5df9ff181855f8d8aba4e6239e69a214" kindref="member">QuantLib::bucketAnalysis</ref>  (const std::vector&lt; std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; SimpleQuote &gt;</ref> &gt; &gt; &amp;, const std::vector&lt; ext::shared_ptr&lt; Instrument &gt; &gt; &amp;, const std::vector&lt; Real &gt; &amp;quantities, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> shift=0.0001, <ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref> type=Centered)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000038"/>Out of scope; copy this function in your codebase if needed. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_capped_floored_yo_y_inflation_coupon_1a48a38ea490b903df192fe31131113e58" kindref="member">QuantLib::CappedFlooredYoYInflationCoupon::CappedFlooredYoYInflationCoupon</ref>  (const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;paymentDate, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> nominal, const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;startDate, const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;endDate, <ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref> fixingDays, const ext::shared_ptr&lt; YoYInflationIndex &gt; &amp;index, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;observationLag, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> gearing=1.0, <ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref> spread=0.0, const <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> cap=Null&lt; Rate &gt;(), const <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> floor=Null&lt; Rate &gt;(), const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;refPeriodStart=Date(), const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;refPeriodEnd=Date())</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000001"/>Use the overload that passes an interpolation type instead. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_cash_flows_1ad6f1d7c6df0dac69827b5d4269f4edf5" kindref="member">QuantLib::CashFlows::zSpread</ref>  (const <ref refid="namespace_quant_lib_1a14f786c47ee979097c448d96b2defaab" kindref="member">Leg</ref> &amp;leg, const ext::shared_ptr&lt; YieldTermStructure &gt; &amp;d, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> npv, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, <ref refid="namespace_quant_lib_1a1d1b94285bc6741279c70fac8b34265b" kindref="member">Compounding</ref> compounding, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, bool includeSettlementDateFlows, <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> settlementDate=Date(), <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> npvDate=Date(), <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> accuracy=1.0e-10, <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> maxIterations=100, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> guess=0.0)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000002"/>Use the other overload. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1ab026984ace9e25d8d9bcc52d5a7e94ab" kindref="member">QuantLib::CenteredGrid</ref>  (<ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> center, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> dx, <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> steps)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000044"/>Part of the old FD framework; copy this function in your codebase if needed. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_commodity_index_1ad6bffbb598d82cee9c45e070628a7ba1" kindref="member">QuantLib::CommodityIndex::addQuote</ref>  (const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;quoteDate, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> quote)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000016"/>Use addFixing instead. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_commodity_index_1ae4a98bc7625a3df0724946b1486ceb4a" kindref="member">QuantLib::CommodityIndex::addQuotes</ref>  (const std::map&lt; Date, Real &gt; &amp;quotes)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000017"/>Use addFixings instead. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_commodity_index_1afbd1ab281834f479e26c3cfdd09377ac" kindref="member">QuantLib::CommodityIndex::calendar</ref>  () const</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000014"/>Use fixingCalendar instead. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_commodity_index_1af45bf0bb5242cec93c176c1d30d5df1f" kindref="member">QuantLib::CommodityIndex::clearQuotes</ref>  ()</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000018"/>Use clearFixings instead. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_commodity_index_1a419a9dbb0e3ac2e5f56e0159efd04996" kindref="member">QuantLib::CommodityIndex::isValidQuoteDate</ref>  (const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;quoteDate) const</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000019"/>Use isValidFixingDate instead. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_commodity_index_1a0367ee921aecd579e2d970faa744997d" kindref="member">QuantLib::CommodityIndex::price</ref>  (const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;date)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000015"/>Use fixing instead. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_commodity_index_1a6422563d8e554a7cce0124e8e1b96530" kindref="member">QuantLib::CommodityIndex::quotes</ref>  () const</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000020"/>Use timeSeries instead. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1a24227fc2ee2a782bc70b4cfbfcd6816f" kindref="member">QuantLib::CompoundingRatePricer</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000006"/>Renamed to <ref refid="class_quant_lib_1_1_compounding_multiple_resets_pricer" kindref="compound">CompoundingMultipleResetsPricer</ref>. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_c_p_i_bond_helper_1a8f4edd923cc683be6f1ef0cc93abd7bc" kindref="member">QuantLib::CPIBondHelper::cpiBond</ref>  () const</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000150"/>Do not use; this method is broken and will be removed. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_c_p_i_bond_helper_1ab96f99454b121e91baeafb3bdf05b406" kindref="member">QuantLib::CPIBondHelper::cpiBond_</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000151"/>Do not use; this pointer is always null. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_credit_risk_plus" kindref="compound">QuantLib::CreditRiskPlus</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000028"/>Out of scope; copy this class in your codebase if needed. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_dated_o_i_s_rate_helper" kindref="compound">QuantLib::DatedOISRateHelper</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000152"/>Use <ref refid="class_quant_lib_1_1_o_i_s_rate_helper" kindref="compound">OISRateHelper</ref> instead. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_dated_o_i_s_rate_helper_1a90d8c641c4dfa4121ff33b1ed2a21aa8" kindref="member">QuantLib::DatedOISRateHelper::DatedOISRateHelper</ref>  (const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;startDate, const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;endDate, const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; Quote &gt;</ref> &amp;fixedRate, const ext::shared_ptr&lt; OvernightIndex &gt; &amp;overnightIndex, <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; YieldTermStructure &gt;</ref> discountingCurve, bool telescopicValueDates, <ref refid="struct_quant_lib_1_1_rate_averaging_1a62ddddd541804c42dae5d108a1ae5437" kindref="member">RateAveraging::Type</ref> averagingMethod, <ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref> paymentLag, <ref refid="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881" kindref="member">BusinessDayConvention</ref> paymentConvention, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> paymentFrequency, const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;paymentCalendar, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;forwardStart, <ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref> overnightSpread=0.0, ext::optional&lt; bool &gt; endOfMonth=ext::nullopt, ext::optional&lt; Frequency &gt; fixedPaymentFrequency=ext::nullopt, const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;fixedCalendar=Calendar())</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000153"/>Use the overload without forward start. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_equity_index_1adb4a25f825fbdf3f979deca0c5bd39ee" kindref="member">QuantLib::EquityIndex::EquityIndex</ref>  (std::string name, <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> fixingCalendar, <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; YieldTermStructure &gt;</ref> interest={}, <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; YieldTermStructure &gt;</ref> dividend={}, <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; Quote &gt;</ref> spot={})</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000048"/>Use the constructor taking a currency. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor10_m" kindref="compound">QuantLib::Euribor10M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000059"/>If really needed, use the <ref refid="class_quant_lib_1_1_euribor" kindref="compound">Euribor</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor11_m" kindref="compound">QuantLib::Euribor11M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000060"/>If really needed, use the <ref refid="class_quant_lib_1_1_euribor" kindref="compound">Euribor</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor2_m" kindref="compound">QuantLib::Euribor2M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000053"/>If really needed, use the <ref refid="class_quant_lib_1_1_euribor" kindref="compound">Euribor</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor2_w" kindref="compound">QuantLib::Euribor2W</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000051"/>If really needed, use the <ref refid="class_quant_lib_1_1_euribor" kindref="compound">Euribor</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor365__10_m" kindref="compound">QuantLib::Euribor365_10M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000073"/>If needed, use the <ref refid="class_quant_lib_1_1_euribor365" kindref="compound">Euribor365</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor365__11_m" kindref="compound">QuantLib::Euribor365_11M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000074"/>If needed, use the <ref refid="class_quant_lib_1_1_euribor365" kindref="compound">Euribor365</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor365__1_m" kindref="compound">QuantLib::Euribor365_1M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000064"/>If needed, use the <ref refid="class_quant_lib_1_1_euribor365" kindref="compound">Euribor365</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor365__1_y" kindref="compound">QuantLib::Euribor365_1Y</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000075"/>If needed, use the <ref refid="class_quant_lib_1_1_euribor365" kindref="compound">Euribor365</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor365__2_m" kindref="compound">QuantLib::Euribor365_2M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000065"/>If needed, use the <ref refid="class_quant_lib_1_1_euribor365" kindref="compound">Euribor365</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor365__2_w" kindref="compound">QuantLib::Euribor365_2W</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000062"/>If needed, use the <ref refid="class_quant_lib_1_1_euribor365" kindref="compound">Euribor365</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor365__3_m" kindref="compound">QuantLib::Euribor365_3M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000066"/>If needed, use the <ref refid="class_quant_lib_1_1_euribor365" kindref="compound">Euribor365</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor365__3_w" kindref="compound">QuantLib::Euribor365_3W</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000063"/>If needed, use the <ref refid="class_quant_lib_1_1_euribor365" kindref="compound">Euribor365</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor365__4_m" kindref="compound">QuantLib::Euribor365_4M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000067"/>If needed, use the <ref refid="class_quant_lib_1_1_euribor365" kindref="compound">Euribor365</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor365__5_m" kindref="compound">QuantLib::Euribor365_5M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000068"/>If needed, use the <ref refid="class_quant_lib_1_1_euribor365" kindref="compound">Euribor365</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor365__6_m" kindref="compound">QuantLib::Euribor365_6M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000069"/>If needed, use the <ref refid="class_quant_lib_1_1_euribor365" kindref="compound">Euribor365</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor365__7_m" kindref="compound">QuantLib::Euribor365_7M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000070"/>If needed, use the <ref refid="class_quant_lib_1_1_euribor365" kindref="compound">Euribor365</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor365__8_m" kindref="compound">QuantLib::Euribor365_8M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000071"/>If needed, use the <ref refid="class_quant_lib_1_1_euribor365" kindref="compound">Euribor365</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor365__9_m" kindref="compound">QuantLib::Euribor365_9M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000072"/>If needed, use the <ref refid="class_quant_lib_1_1_euribor365" kindref="compound">Euribor365</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor365___s_w" kindref="compound">QuantLib::Euribor365_SW</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000061"/>If needed, use the <ref refid="class_quant_lib_1_1_euribor365" kindref="compound">Euribor365</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor3_w" kindref="compound">QuantLib::Euribor3W</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000052"/>If really needed, use the <ref refid="class_quant_lib_1_1_euribor" kindref="compound">Euribor</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor4_m" kindref="compound">QuantLib::Euribor4M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000054"/>If really needed, use the <ref refid="class_quant_lib_1_1_euribor" kindref="compound">Euribor</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor5_m" kindref="compound">QuantLib::Euribor5M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000055"/>If really needed, use the <ref refid="class_quant_lib_1_1_euribor" kindref="compound">Euribor</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor7_m" kindref="compound">QuantLib::Euribor7M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000056"/>If really needed, use the <ref refid="class_quant_lib_1_1_euribor" kindref="compound">Euribor</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor8_m" kindref="compound">QuantLib::Euribor8M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000057"/>If really needed, use the <ref refid="class_quant_lib_1_1_euribor" kindref="compound">Euribor</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_euribor9_m" kindref="compound">QuantLib::Euribor9M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000058"/>If really needed, use the <ref refid="class_quant_lib_1_1_euribor" kindref="compound">Euribor</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1a3a5807953ebd18abd721601217d3a62e" kindref="member">QuantLib::EuriborSW</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000050"/>Renamed to <ref refid="class_quant_lib_1_1_euribor1_w" kindref="compound">Euribor1W</ref>. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_e_u_r_libor10_m" kindref="compound">QuantLib::EURLibor10M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000084"/>If needed, use the <ref refid="class_quant_lib_1_1_e_u_r_libor" kindref="compound">EURLibor</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_e_u_r_libor11_m" kindref="compound">QuantLib::EURLibor11M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000085"/>If needed, use the <ref refid="class_quant_lib_1_1_e_u_r_libor" kindref="compound">EURLibor</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_e_u_r_libor2_m" kindref="compound">QuantLib::EURLibor2M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000078"/>If needed, use the <ref refid="class_quant_lib_1_1_e_u_r_libor" kindref="compound">EURLibor</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_e_u_r_libor2_w" kindref="compound">QuantLib::EURLibor2W</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000077"/>If needed, use the <ref refid="class_quant_lib_1_1_e_u_r_libor" kindref="compound">EURLibor</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_e_u_r_libor4_m" kindref="compound">QuantLib::EURLibor4M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000079"/>If needed, use the <ref refid="class_quant_lib_1_1_e_u_r_libor" kindref="compound">EURLibor</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_e_u_r_libor5_m" kindref="compound">QuantLib::EURLibor5M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000080"/>If needed, use the <ref refid="class_quant_lib_1_1_e_u_r_libor" kindref="compound">EURLibor</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_e_u_r_libor7_m" kindref="compound">QuantLib::EURLibor7M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000081"/>If needed, use the <ref refid="class_quant_lib_1_1_e_u_r_libor" kindref="compound">EURLibor</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_e_u_r_libor8_m" kindref="compound">QuantLib::EURLibor8M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000082"/>If needed, use the <ref refid="class_quant_lib_1_1_e_u_r_libor" kindref="compound">EURLibor</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_e_u_r_libor9_m" kindref="compound">QuantLib::EURLibor9M</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000083"/>If needed, use the <ref refid="class_quant_lib_1_1_e_u_r_libor" kindref="compound">EURLibor</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_e_u_r_libor_s_w" kindref="compound">QuantLib::EURLiborSW</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000076"/>If needed, use the <ref refid="class_quant_lib_1_1_e_u_r_libor" kindref="compound">EURLibor</ref> class with an explicit tenor instead. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Namespace <ref refid="namespace_quant_lib_1_1ext_1_1placeholders" kindref="compound">QuantLib::ext::placeholders</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000043"/>Use the std::placeholders namespace instead. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_fixed_rate_bond_helper_1a22f22d44f7042ac1745fffd4dbda3ece" kindref="member">QuantLib::FixedRateBondHelper::fixedRateBond</ref>  () const</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000148"/>Do not use; this method is broken and will be removed. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_fixed_rate_bond_helper_1a3de2f80ff5ebb605131ac3b4f6a49122" kindref="member">QuantLib::FixedRateBondHelper::fixedRateBond_</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000149"/>Do not use; this pointer is always null. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_generic_time_setter" kindref="compound">QuantLib::GenericTimeSetter&lt; PdeClass &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000114"/>Part of the old FD framework; copy this function in your codebase if needed. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_index_manager_1aed0131e372bbb1b28589d8db8abe9f9c" kindref="member">QuantLib::IndexManager::clearHistory</ref>  (const std::string &amp;name)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000088"/>Use <ref refid="class_quant_lib_1_1_index_1a6ebd31a5c6890f2dc0b25fc7824c809c" kindref="member">Index::clearFixings</ref> instead. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_index_manager_1a3f97171cf7bdb7925257dc0943af9cc4" kindref="member">QuantLib::IndexManager::getHistory</ref>  (const std::string &amp;name) const</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000087"/>Use <ref refid="class_quant_lib_1_1_index_1a373faa497820b43992d18ead1a8b87a8" kindref="member">Index::timeSeries</ref> instead. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_index_manager_1a894f51198b68149af6fabcf43492e977" kindref="member">QuantLib::IndexManager::hasHistoricalFixing</ref>  (const std::string &amp;name, const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;fixingDate) const</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000089"/>Use <ref refid="class_quant_lib_1_1_index_1a3ca2ef1910e74b22dd55c39013642a5c" kindref="member">Index::hasHistoricalFixing</ref> instead. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_index_manager_1abd559a3b1bc2aed558b51c5908901432" kindref="member">QuantLib::IndexManager::hasHistory</ref>  (const std::string &amp;name) const</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000086"/>Use <ref refid="class_quant_lib_1_1_index_1a3ca2ef1910e74b22dd55c39013642a5c" kindref="member">Index::hasHistoricalFixing</ref> instead. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_index_manager_1a0bb6d151320a984c4dcaec76675a6fad" kindref="member">QuantLib::IndexManager::notifier</ref>  (const std::string &amp;name) const</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000091"/>Register with the relevant index instead. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_index_manager_1a02de69384fb7bb770925e01fe83e8c40" kindref="member">QuantLib::IndexManager::setHistory</ref>  (const std::string &amp;name, <ref refid="class_quant_lib_1_1_time_series" kindref="compound">TimeSeries&lt; Real &gt;</ref> history)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000090"/>Use <ref refid="class_quant_lib_1_1_index_1a91fce2b65887f04e2cbcae5d9ffcc15e" kindref="member">Index::addFixings</ref> instead. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_inflation_term_structure_1abab0f95e920b2f4a490fa5026cbf4a1c" kindref="member">QuantLib::InflationTermStructure::InflationTermStructure</ref>  (<ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> baseRate, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;observationLag, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter=DayCounter(), ext::shared_ptr&lt; Seasonality &gt; seasonality={})</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000132"/>Use another overload and pass the base date directly instead of using a lag. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_inflation_term_structure_1a5b0317e013dc62557a787e05104212d5" kindref="member">QuantLib::InflationTermStructure::InflationTermStructure</ref>  (const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;referenceDate, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> baseRate, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;observationLag, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;calendar=Calendar(), const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter=DayCounter(), ext::shared_ptr&lt; Seasonality &gt; seasonality={})</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000133"/>Use another overload and pass the base date directly instead of using a lag. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_inflation_term_structure_1a2bf753bcc49a18f68f0bdf2cda7ebb88" kindref="member">QuantLib::InflationTermStructure::InflationTermStructure</ref>  (<ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref> settlementDays, const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;calendar, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> baseRate, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;observationLag, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter=DayCounter(), ext::shared_ptr&lt; Seasonality &gt; seasonality={})</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000134"/>Use another overload and pass the base date directly instead of using a lag. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_inflation_term_structure_1ae9bf5f77a2a54d23b151c5656b10cd62" kindref="member">QuantLib::InflationTermStructure::setBaseRate</ref>  (const <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &amp;r)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000136"/>Do not use; set baseRate_ directly if needed. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_inflation_term_structure_1ad116c16d4e68e8231a1bd3107ce02077" kindref="member">QuantLib::InflationTermStructure::setSeasonality</ref>  ()</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000135"/>Use the overload taking a pointer and pass an empty one to remove seasonality. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_interpolated_yo_y_cap_floor_term_price_surface_1a9b73e054e6a5038ea609057fdb886897" kindref="member">QuantLib::InterpolatedYoYCapFloorTermPriceSurface&lt; Interpolator2D, Interpolator1D &gt;::InterpolatedYoYCapFloorTermPriceSurface</ref>  (<ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref> fixingDays, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;yyLag, const ext::shared_ptr&lt; YoYInflationIndex &gt; &amp;yii, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> baseRate, const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; YieldTermStructure &gt;</ref> &amp;nominal, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dc, const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;cal, const <ref refid="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881" kindref="member">BusinessDayConvention</ref> &amp;bdc, const std::vector&lt; Rate &gt; &amp;cStrikes, const std::vector&lt; Rate &gt; &amp;fStrikes, const std::vector&lt; Period &gt; &amp;cfMaturities, const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;cPrice, const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;fPrice, const Interpolator2D &amp;interpolator2d=Interpolator2D(), const Interpolator1D &amp;interpolator1d=Interpolator1D())</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000026"/>Use the overload that passes an interpolation type instead. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_interpolated_yo_y_inflation_curve_1a587df1c5d2bcf196f4aad924ed18dfb9" kindref="member">QuantLib::InterpolatedYoYInflationCurve&lt; Interpolator &gt;::InterpolatedYoYInflationCurve</ref>  (const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;referenceDate, std::vector&lt; Date &gt; dates, const std::vector&lt; Rate &gt; &amp;rates, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, bool indexIsInterpolated, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, const ext::shared_ptr&lt; Seasonality &gt; &amp;seasonality={}, const Interpolator &amp;interpolator=Interpolator())</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000123"/>Use the overload without indexIsInterpolated. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_interpolated_yo_y_inflation_curve_1ab67391cd8b5e95c687a0e8165e2dd56f" kindref="member">QuantLib::InterpolatedYoYInflationCurve&lt; Interpolator &gt;::InterpolatedYoYInflationCurve</ref>  (const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;referenceDate, const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;calendar, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;lag, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, bool indexIsInterpolated, std::vector&lt; Date &gt; dates, const std::vector&lt; Rate &gt; &amp;rates, const Interpolator &amp;interpolator=Interpolator())</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000124"/>Use the overload without lag and indexIsInterpolated and pass the base date as the first date in the vector. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_interpolated_yo_y_inflation_curve_1a7d00e4c54a34a7c69381a9fcc47c8800" kindref="member">QuantLib::InterpolatedYoYInflationCurve&lt; Interpolator &gt;::InterpolatedYoYInflationCurve</ref>  (const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;referenceDate, <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> baseDate, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> baseYoYRate, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, bool indexIsInterpolated, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, const ext::shared_ptr&lt; Seasonality &gt; &amp;seasonality={}, const Interpolator &amp;interpolator=Interpolator())</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000125"/>Use the overload without indexIsInterpolated. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_interpolated_yo_y_inflation_curve_1af0858ce36a8f49f489771ee0acfaa7d8" kindref="member">QuantLib::InterpolatedYoYInflationCurve&lt; Interpolator &gt;::InterpolatedYoYInflationCurve</ref>  (const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;referenceDate, const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;calendar, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> baseYoYRate, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;lag, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, bool indexIsInterpolated, const Interpolator &amp;interpolator=Interpolator())</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000126"/>Use the overload without lag and indexIsInterpolated and pass the base date as the first date in the vector. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_interpolated_zero_inflation_curve_1aa596239113a913f677358e05ab3f2502" kindref="member">QuantLib::InterpolatedZeroInflationCurve&lt; Interpolator &gt;::InterpolatedZeroInflationCurve</ref>  (const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;referenceDate, const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;calendar, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;lag, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, std::vector&lt; Date &gt; dates, const std::vector&lt; Rate &gt; &amp;rates, const Interpolator &amp;interpolator=Interpolator())</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000127"/>Use the other overload and pass the base date directly as the first date in the vector instead of using a lag. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_interpolated_zero_inflation_curve_1a082de06a33ca8a342430657ca1158585" kindref="member">QuantLib::InterpolatedZeroInflationCurve&lt; Interpolator &gt;::InterpolatedZeroInflationCurve</ref>  (const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;referenceDate, const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;calendar, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;lag, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> baseZeroRate, const Interpolator &amp;interpolator=Interpolator())</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000128"/>Use the other overload and pass the base date directly instead of using a lag. A base rate should not be needed. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_kirk_spread_option_engine" kindref="compound">QuantLib::KirkSpreadOptionEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000021"/>Use <ref refid="class_quant_lib_1_1_basket_option" kindref="compound">BasketOption</ref> and <ref refid="class_quant_lib_1_1_kirk_engine" kindref="compound">KirkEngine</ref> instead. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_levenberg_marquardt_1a2a285512371fe68a12cbcbd04f3cac01" kindref="member">QuantLib::LevenbergMarquardt::fcn</ref>  (int m, int n, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> *x, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> *fvec, int *)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000107"/>Don&apos;t use this method; it is for internal use. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_levenberg_marquardt_1ad2292fe3d7ef8ccda0f79b21ea2cc359" kindref="member">QuantLib::LevenbergMarquardt::getInfo</ref>  () const</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000106"/>Don&apos;t use this method; inspect the result of minimize instead. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_levenberg_marquardt_1a777d790ccfd8d2146c1f0ead95824c7b" kindref="member">QuantLib::LevenbergMarquardt::jacFcn</ref>  (int m, int n, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> *x, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> *fjac, int *)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000108"/>Don&apos;t use this method; it is for internal use. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_log_grid" kindref="compound">QuantLib::LogGrid</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000110"/>Part of the old FD framework; copy this function in your codebase if needed. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_make_arithmetic_average_o_i_s" kindref="compound">QuantLib::MakeArithmeticAverageOIS</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000013"/>Use <ref refid="class_quant_lib_1_1_make_o_i_s" kindref="compound">MakeOIS</ref> instead. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_make_yo_y_inflation_cap_floor_1a3f8bd2b0b7bff74929fd331a018f1290" kindref="member">QuantLib::MakeYoYInflationCapFloor::MakeYoYInflationCapFloor</ref>  (YoYInflationCapFloor::Type capFloorType, ext::shared_ptr&lt; YoYInflationIndex &gt; index, const <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &amp;length, <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> cal, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;observationLag)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000103"/>Use the overload that passes an interpolation type instead. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_multiple_resets_coupon_1a8b80befa8a7970eda42485e4e5595dce" kindref="member">QuantLib::MultipleResetsCoupon::MultipleResetsCoupon</ref>  (const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;paymentDate, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> nominal, const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;startDate, const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;endDate, <ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref> fixingDays, const ext::shared_ptr&lt; IborIndex &gt; &amp;index, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> gearing=1.0, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> couponSpread=0.0, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> rateSpread=0.0, const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;refPeriodStart=Date(), const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;refPeriodEnd=Date(), const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter=DayCounter(), const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;exCouponDate=Date())</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000008"/>Use the other constructor. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1abd5a6a180249e9d37d62387fbdcbe288" kindref="member">QuantLib::parallelAnalysis</ref>  (const std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; SimpleQuote &gt;</ref> &gt; &amp;, const std::vector&lt; ext::shared_ptr&lt; Instrument &gt; &gt; &amp;, const std::vector&lt; Real &gt; &amp;quantities, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> shift=0.0001, <ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref> type=Centered, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> referenceNpv=Null&lt; Real &gt;())</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000032"/>Out of scope; copy this function in your codebase if needed. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1a152440af1e25db009656a1725556b207" kindref="member">QuantLib::parallelAnalysis</ref>  (const std::vector&lt; std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; SimpleQuote &gt;</ref> &gt; &gt; &amp;, const std::vector&lt; ext::shared_ptr&lt; Instrument &gt; &gt; &amp;, const std::vector&lt; Real &gt; &amp;quantities, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> shift=0.0001, <ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">SensitivityAnalysis</ref> type=Centered, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> referenceNpv=Null&lt; Real &gt;())</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000033"/>Out of scope; copy this function in your codebase if needed. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_pde_b_s_m" kindref="compound">QuantLib::PdeBSM</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000116"/>Part of the old FD framework; copy this function in your codebase if needed. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_pde_constant_coeff" kindref="compound">QuantLib::PdeConstantCoeff&lt; PdeClass &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000113"/>Part of the old FD framework; copy this function in your codebase if needed. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_pde_operator" kindref="compound">QuantLib::PdeOperator&lt; PdeClass &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000115"/>Part of the old FD framework; copy this function in your codebase if needed. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_pde_second_order_parabolic" kindref="compound">QuantLib::PdeSecondOrderParabolic</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000112"/>Part of the old FD framework; copy this function in your codebase if needed. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_piecewise_yo_y_inflation_curve_1a75c4549d497b4b255a55977188d38c49" kindref="member">QuantLib::PiecewiseYoYInflationCurve&lt; Interpolator, Bootstrap, Traits &gt;::PiecewiseYoYInflationCurve</ref>  (const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;referenceDate, <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> baseDate, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> baseYoYRate, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, bool indexIsInterpolated, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, std::vector&lt; ext::shared_ptr&lt; typename Traits::helper &gt; &gt; instruments, const ext::shared_ptr&lt; Seasonality &gt; &amp;seasonality={}, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> accuracy=1.0e-12, const Interpolator &amp;i=Interpolator())</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000129"/>Use the overload without indexIsInterpolated. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_piecewise_yo_y_inflation_curve_1a2aadf8b90d6ff8ddc71cbf8c99480de3" kindref="member">QuantLib::PiecewiseYoYInflationCurve&lt; Interpolator, Bootstrap, Traits &gt;::PiecewiseYoYInflationCurve</ref>  (const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;referenceDate, const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;calendar, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;lag, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, bool indexIsInterpolated, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> baseYoYRate, std::vector&lt; ext::shared_ptr&lt; typename Traits::helper &gt; &gt; instruments, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> accuracy=1.0e-12, const Interpolator &amp;i=Interpolator())</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000130"/>Use the overload without lag and indexIsInterpolated and pass the base date as the first date in the vector. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_piecewise_zero_inflation_curve_1a46562aa8901022d89441e19d30d6c53f" kindref="member">QuantLib::PiecewiseZeroInflationCurve&lt; Interpolator, Bootstrap, Traits &gt;::PiecewiseZeroInflationCurve</ref>  (const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;referenceDate, const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;calendar, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;lag, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> baseZeroRate, std::vector&lt; ext::shared_ptr&lt; typename Traits::helper &gt; &gt; instruments, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> accuracy=1.0e-12, const Interpolator &amp;i=Interpolator())</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000131"/>Use the other overload and pass the base date directly instead of using a lag. A base rate is not needed. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_relinkable_handle_1a3eb68df0a3bf75915d1ebbd07f4b57e5" kindref="member">QuantLib::RelinkableHandle&lt; T &gt;::RelinkableHandle</ref>  (T *p, bool registerAsObserver=true)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000047"/>Use one of the constructors taking shared_ptr. Deprecated in version 1.35.  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1aec640f352a6039438786a95fc53edb98" kindref="member">QuantLib::SensitivityAnalysis</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000029"/>Out of scope; copy this enumeration in your codebase if needed. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_spread_option" kindref="compound">QuantLib::SpreadOption</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000022"/>Use <ref refid="class_quant_lib_1_1_basket_option" kindref="compound">BasketOption</ref> and <ref refid="class_quant_lib_1_1_kirk_engine" kindref="compound">KirkEngine</ref> instead. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_spread_option_1_1engine" kindref="compound">QuantLib::SpreadOption::engine</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000023"/>Use <ref refid="class_quant_lib_1_1_basket_option" kindref="compound">BasketOption</ref> and <ref refid="class_quant_lib_1_1_kirk_engine" kindref="compound">KirkEngine</ref> instead. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1a3196129d3f811280b103721dfef66585" kindref="member">QuantLib::SubPeriodsCoupon</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000003"/>Renamed to <ref refid="class_quant_lib_1_1_multiple_resets_coupon" kindref="compound">MultipleResetsCoupon</ref>. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_sub_periods_leg" kindref="compound">QuantLib::SubPeriodsLeg</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000007"/>Use <ref refid="class_quant_lib_1_1_multiple_resets_leg" kindref="compound">MultipleResetsLeg</ref> instead. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="namespace_quant_lib_1a2e6f80fabd8719564fdf60881ad5fec7" kindref="member">QuantLib::SubPeriodsPricer</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000004"/>Renamed to <ref refid="class_quant_lib_1_1_multiple_resets_pricer" kindref="compound">MultipleResetsPricer</ref>. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_swaption_1a3a7dd0b3844b1d5b4f39220802c2e7d1" kindref="member">QuantLib::Swaption::underlyingSwap</ref>  () const</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000104"/>Use the Swaption::underlying method instead. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_swaption_helper_1a32baa6d9e4b9350d752f4fc775d26ef8" kindref="member">QuantLib::SwaptionHelper::underlyingSwap</ref>  () const</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000117"/>Use the SwaptionHelper::underlying method instead. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_transformed_grid" kindref="compound">QuantLib::TransformedGrid</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000109"/>Part of the old FD framework; copy this function in your codebase if needed. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_year_on_year_inflation_swap_1a4dd822f04b1d352d1e4160d28418b742" kindref="member">QuantLib::YearOnYearInflationSwap::YearOnYearInflationSwap</ref>  (<ref refid="class_quant_lib_1_1_swap_1ad0806daa5b111fcb11ce521b19124b4e" kindref="member">Type</ref> type, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> nominal, <ref refid="class_quant_lib_1_1_schedule" kindref="compound">Schedule</ref> fixedSchedule, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> fixedRate, <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> fixedDayCount, <ref refid="class_quant_lib_1_1_schedule" kindref="compound">Schedule</ref> yoySchedule, ext::shared_ptr&lt; YoYInflationIndex &gt; yoyIndex, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;observationLag, <ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref> spread, <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> yoyDayCount, <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> paymentCalendar, <ref refid="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881" kindref="member">BusinessDayConvention</ref> paymentConvention=ModifiedFollowing)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000105"/>Use the overload that passes an interpolation type instead. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_year_on_year_inflation_swap_helper_1afe1d95587890d0479496d9311e999735" kindref="member">QuantLib::YearOnYearInflationSwapHelper::YearOnYearInflationSwapHelper</ref>  (const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; Quote &gt;</ref> &amp;quote, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;swapObsLag_, const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;maturity, <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> calendar, <ref refid="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881" kindref="member">BusinessDayConvention</ref> paymentConvention, <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> dayCounter, ext::shared_ptr&lt; YoYInflationIndex &gt; yii, <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; YieldTermStructure &gt;</ref> nominalTermStructure)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000122"/>Use the overload that passes an interpolation type instead. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_yo_y_cap_floor_term_price_surface_1a4db3e0b96218013e51a4f421dae0bbcd" kindref="member">QuantLib::YoYCapFloorTermPriceSurface::YoYCapFloorTermPriceSurface</ref>  (<ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref> fixingDays, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;yyLag, const ext::shared_ptr&lt; YoYInflationIndex &gt; &amp;yii, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> baseRate, <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; YieldTermStructure &gt;</ref> nominal, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dc, const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;cal, const <ref refid="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881" kindref="member">BusinessDayConvention</ref> &amp;bdc, const std::vector&lt; Rate &gt; &amp;cStrikes, const std::vector&lt; Rate &gt; &amp;fStrikes, const std::vector&lt; Period &gt; &amp;cfMaturities, const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;cPrice, const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;fPrice)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000025"/>Use the overload that passes an interpolation type instead. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_yo_y_inflation_coupon_1af0ae0cdca51e5b20e1d545dc84c6a2c0" kindref="member">QuantLib::YoYInflationCoupon::YoYInflationCoupon</ref>  (const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;paymentDate, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> nominal, const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;startDate, const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;endDate, <ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref> fixingDays, const ext::shared_ptr&lt; YoYInflationIndex &gt; &amp;index, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;observationLag, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> gearing=1.0, <ref refid="namespace_quant_lib_1ad61d2e1a3f01154233de0d5fbb85177c" kindref="member">Spread</ref> spread=0.0, const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;refPeriodStart=Date(), const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;refPeriodEnd=Date())</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000009"/>Use the overload that passes an interpolation type instead. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_yo_y_inflation_index_1a04c0163c588e63075d123eb59e2fecd8" kindref="member">QuantLib::YoYInflationIndex::YoYInflationIndex</ref>  (const ext::shared_ptr&lt; ZeroInflationIndex &gt; &amp;underlyingIndex, bool interpolated, <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; YoYInflationTermStructure &gt;</ref> ts={})</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000099"/>Use the similar overload without the interpolated parameter. Deprecated in version 1.38.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_yo_y_inflation_index_1aba293911febd5cae380ac820bb8c796d" kindref="member">QuantLib::YoYInflationIndex::YoYInflationIndex</ref>  (const std::string &amp;familyName, const <ref refid="class_quant_lib_1_1_region" kindref="compound">Region</ref> &amp;region, bool revised, bool interpolated, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;availabilityLag, const <ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref> &amp;currency, <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; YoYInflationTermStructure &gt;</ref> ts={})</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000100"/>Use the similar overload without the interpolated parameter. Deprecated in version 1.38.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1yoy_inflation_leg_1a2fbc15494fbbf55aae84a7a54af27553" kindref="member">QuantLib::yoyInflationLeg::yoyInflationLeg</ref>  (<ref refid="class_quant_lib_1_1_schedule" kindref="compound">Schedule</ref> schedule, <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> cal, ext::shared_ptr&lt; YoYInflationIndex &gt; index, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;observationLag)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000010"/>Use the overload that passes an interpolation type instead. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_yo_y_inflation_term_structure_1a5a91177ad922d2daf5017bd6b38e4681" kindref="member">QuantLib::YoYInflationTermStructure::indexIsInterpolated</ref>  () const</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000146"/>This method will disappear. When it does, the curve will behave as if it returned false. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_yo_y_inflation_term_structure_1ae4f21251e423b660f21edabad6ffefd0" kindref="member">QuantLib::YoYInflationTermStructure::indexIsInterpolated_</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000147"/>This data member will disappear. When it does, the curve will behave as if it was false. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_yo_y_inflation_term_structure_1aa67821d1c91ccdd21eea7fe92bcc1112" kindref="member">QuantLib::YoYInflationTermStructure::YoYInflationTermStructure</ref>  (<ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> baseDate, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> baseYoYRate, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, bool indexIsInterpolated, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, const ext::shared_ptr&lt; Seasonality &gt; &amp;seasonality={})</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000140"/>Use an overload with an explicit base date and without indexIsInterpolated. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_yo_y_inflation_term_structure_1a21a009a9c23feaa5479d58cb6c9252b0" kindref="member">QuantLib::YoYInflationTermStructure::YoYInflationTermStructure</ref>  (const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;referenceDate, <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> baseDate, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> baseYoYRate, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, bool indexIsInterpolated, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, const ext::shared_ptr&lt; Seasonality &gt; &amp;seasonality={})</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000141"/>Use an overload with an explicit base date and without indexIsInterpolated. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_yo_y_inflation_term_structure_1a86a0c6cf492de21ed8267b4d81fd1530" kindref="member">QuantLib::YoYInflationTermStructure::YoYInflationTermStructure</ref>  (<ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref> settlementDays, const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;calendar, <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> baseDate, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> baseYoYRate, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, bool indexIsInterpolated, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, const ext::shared_ptr&lt; Seasonality &gt; &amp;seasonality={})</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000142"/>Use an overload with an explicit base date and without indexIsInterpolated. Deprecated in version 1.37.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_yo_y_inflation_term_structure_1ad04874f6248941f8853e9343c4b531dc" kindref="member">QuantLib::YoYInflationTermStructure::YoYInflationTermStructure</ref>  (const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> baseYoYRate, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;lag, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, bool indexIsInterpolated, const ext::shared_ptr&lt; Seasonality &gt; &amp;seasonality={})</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000143"/>Use an overload with an explicit base date and without indexIsInterpolated. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_yo_y_inflation_term_structure_1a6f00110723362964a52f11a97bea0120" kindref="member">QuantLib::YoYInflationTermStructure::YoYInflationTermStructure</ref>  (const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;referenceDate, const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;calendar, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> baseYoYRate, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;lag, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, bool indexIsInterpolated, const ext::shared_ptr&lt; Seasonality &gt; &amp;seasonality={})</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000144"/>Use an overload with an explicit base date and without indexIsInterpolated. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_yo_y_inflation_term_structure_1a84b00ea458acd1a869c97218a05ff1b3" kindref="member">QuantLib::YoYInflationTermStructure::YoYInflationTermStructure</ref>  (<ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref> settlementDays, const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;calendar, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> baseYoYRate, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;lag, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, bool indexIsInterpolated, const ext::shared_ptr&lt; Seasonality &gt; &amp;seasonality={})</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000145"/>Use an overload with an explicit base date and without indexIsInterpolated. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_yo_y_optionlet_helper_1a082055ae65affd3af2660fb216659b66" kindref="member">QuantLib::YoYOptionletHelper::YoYOptionletHelper</ref>  (const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; Quote &gt;</ref> &amp;price, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> notional, YoYInflationCapFloor::Type capFloorType, <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;lag, <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> yoyDayCounter, <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> paymentCalendar, <ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref> fixingDays, ext::shared_ptr&lt; YoYInflationIndex &gt; index, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> strike, <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> n, ext::shared_ptr&lt; YoYInflationCapFloorEngine &gt; pricer)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000027"/>Use the overload that passes an interpolation type instead. Deprecated in version 1.36.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_y_y_a_u_c_p_i_1aa865108fc400bf6d1a4c75f36e60b4b3" kindref="member">QuantLib::YYAUCPI::YYAUCPI</ref>  (<ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, bool revised, bool interpolated, const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; YoYInflationTermStructure &gt;</ref> &amp;ts={})</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000092"/>Use the overload without the interpolated parameter. Deprecated in version 1.38.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_y_y_e_u_h_i_c_p_1acd5a5308b009f09d34181aaff50766fd" kindref="member">QuantLib::YYEUHICP::YYEUHICP</ref>  (bool interpolated, const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; YoYInflationTermStructure &gt;</ref> &amp;ts={})</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000093"/>Use the overload without the interpolated parameter. Deprecated in version 1.38.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_y_y_e_u_h_i_c_p_x_t_1a9593f8b7b76ee8512c10f7824d3f4c84" kindref="member">QuantLib::YYEUHICPXT::YYEUHICPXT</ref>  (bool interpolated, const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; YoYInflationTermStructure &gt;</ref> &amp;ts={})</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000094"/>Use the overload without the interpolated parameter. Deprecated in version 1.38.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_y_y_f_r_h_i_c_p_1a0371a188a452828c78d56dfd931b68e2" kindref="member">QuantLib::YYFRHICP::YYFRHICP</ref>  (bool interpolated, const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; YoYInflationTermStructure &gt;</ref> &amp;ts={})</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000095"/>Use the overload without the interpolated parameter. Deprecated in version 1.38.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_y_y_generic_c_p_i_1aa4339663a54cfc1efc331a8f13410c0e" kindref="member">QuantLib::YYGenericCPI::YYGenericCPI</ref>  (<ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, bool revised, bool interpolated, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;lag, const <ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref> &amp;ccy, const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; YoYInflationTermStructure &gt;</ref> &amp;ts={})</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000024"/>Use the overload without the interpolated parameter. Deprecated in version 1.38.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_y_y_u_k_r_p_i_1a3a04754decec587c5c373c36ad79280d" kindref="member">QuantLib::YYUKRPI::YYUKRPI</ref>  (bool interpolated, const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; YoYInflationTermStructure &gt;</ref> &amp;ts={})</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000096"/>Use the overload without the interpolated parameter. Deprecated in version 1.38.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_y_y_u_s_c_p_i_1a4a04a3fa6faf7c5ce95c335923588ab2" kindref="member">QuantLib::YYUSCPI::YYUSCPI</ref>  (bool interpolated, const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; YoYInflationTermStructure &gt;</ref> &amp;ts={})</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000097"/>Use the overload without the interpolated parameter. Deprecated in version 1.38.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_y_y_z_a_c_p_i_1afd43796e6204d767a2c13140ccb81759" kindref="member">QuantLib::YYZACPI::YYZACPI</ref>  (bool interpolated, const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle&lt; YoYInflationTermStructure &gt;</ref> &amp;ts={})</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000098"/>Use the overload without the interpolated parameter. Deprecated in version 1.38.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_zero_inflation_term_structure_1a911d1c1a212d0af516586dc7bf6ffa95" kindref="member">QuantLib::ZeroInflationTermStructure::ZeroInflationTermStructure</ref>  (const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> baseZeroRate, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;lag, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, const ext::shared_ptr&lt; Seasonality &gt; &amp;seasonality={})</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000137"/>Use another overload and pass the base date directly instead of using a lag. A base rate should not be needed. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_zero_inflation_term_structure_1a95bcbce3620cfc05b8b2d5d66e20eb48" kindref="member">QuantLib::ZeroInflationTermStructure::ZeroInflationTermStructure</ref>  (const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;referenceDate, const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;calendar, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> baseZeroRate, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;lag, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, const ext::shared_ptr&lt; Seasonality &gt; &amp;seasonality={})</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000138"/>Use another overload and pass the base date directly instead of using a lag. A base rate should not be needed. Deprecated in version 1.34.  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_zero_inflation_term_structure_1abc20c9e83e84206312a6163d8402f38f" kindref="member">QuantLib::ZeroInflationTermStructure::ZeroInflationTermStructure</ref>  (<ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref> settlementDays, const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;calendar, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> baseZeroRate, const <ref refid="class_quant_lib_1_1_period" kindref="compound">Period</ref> &amp;lag, <ref refid="namespace_quant_lib_1abfa020992bcf412e2bc99f56d4381b4a" kindref="member">Frequency</ref> frequency, const ext::shared_ptr&lt; Seasonality &gt; &amp;seasonality={})</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000139"/>Use another overload and pass the base date directly instead of using a lag. A base rate should not be needed. Deprecated in version 1.34. </para>
</listitem>
</variablelist>
</para>
    </detaileddescription>
    <location file="deprecated"/>
  </compounddef>
</doxygen>
