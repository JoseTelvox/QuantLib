<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_c_l_gaussian_rng" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::CLGaussianRng</compoundname>
    <includes refid="centrallimitgaussianrng_8hpp" local="no">centrallimitgaussianrng.hpp</includes>
    <templateparamlist>
      <param>
        <type>class RNG</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_c_l_gaussian_rng_1a5b546e6ebf8f27ccaeb4c1d13d1a4567" prot="public" static="no">
        <type><ref refid="struct_quant_lib_1_1_sample" kindref="compound">Sample</ref>&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>typedef Sample&lt;Real&gt; QuantLib::CLGaussianRng&lt; RNG &gt;::sample_type</definition>
        <argsstring></argsstring>
        <name>sample_type</name>
        <qualifiedname>QuantLib::CLGaussianRng::sample_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/centrallimitgaussianrng.hpp" line="46" column="24" bodyfile="ql/math/randomnumbers/centrallimitgaussianrng.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_c_l_gaussian_rng_1a6a0f9a97482cc8fd5991175e3877395f" prot="public" static="no">
        <type>RNG</type>
        <definition>typedef RNG QuantLib::CLGaussianRng&lt; RNG &gt;::urng_type</definition>
        <argsstring></argsstring>
        <name>urng_type</name>
        <qualifiedname>QuantLib::CLGaussianRng::urng_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/centrallimitgaussianrng.hpp" line="47" column="21" bodyfile="ql/math/randomnumbers/centrallimitgaussianrng.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_c_l_gaussian_rng_1a829381347833fc1a381fcad4b8d125e2" prot="private" static="no" mutable="no">
        <type>RNG</type>
        <definition>RNG QuantLib::CLGaussianRng&lt; RNG &gt;::uniformGenerator_</definition>
        <argsstring></argsstring>
        <name>uniformGenerator_</name>
        <qualifiedname>QuantLib::CLGaussianRng::uniformGenerator_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/centrallimitgaussianrng.hpp" line="52" column="13" bodyfile="ql/math/randomnumbers/centrallimitgaussianrng.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_c_l_gaussian_rng_1a3c2d9557bc4703be4bced7acfce54542" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::CLGaussianRng&lt; RNG &gt;::CLGaussianRng</definition>
        <argsstring>(const RNG &amp;uniformGenerator)</argsstring>
        <name>CLGaussianRng</name>
        <qualifiedname>QuantLib::CLGaussianRng::CLGaussianRng</qualifiedname>
        <param>
          <type>const RNG &amp;</type>
          <declname>uniformGenerator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/centrallimitgaussianrng.hpp" line="48" column="18" bodyfile="ql/math/randomnumbers/centrallimitgaussianrng.hpp" bodystart="56" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_c_l_gaussian_rng_1a60be88349e768b3bb376689e5f54c32c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="struct_quant_lib_1_1_sample" kindref="compound">sample_type</ref></type>
        <definition>CLGaussianRng&lt; RNG &gt;::sample_type QuantLib::CLGaussianRng&lt; RNG &gt;::next</definition>
        <argsstring>() const</argsstring>
        <name>next</name>
        <qualifiedname>QuantLib::CLGaussianRng::next</qualifiedname>
        <briefdescription>
<para>returns a sample from a Gaussian distribution </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/randomnumbers/centrallimitgaussianrng.hpp" line="50" column="21" bodyfile="ql/math/randomnumbers/centrallimitgaussianrng.hpp" bodystart="61" bodyend="69"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Gaussian random number generator. </para>
    </briefdescription>
    <detaileddescription>
<para>It uses the well-known fact that the sum of 12 uniform deviate in (-.5,.5) is approximately a Gaussian deviate with average 0 and standard deviation 1. The uniform deviate is supplied by RNG.</para>
<para>Class RNG must implement the following interface: <programlisting><codeline><highlight class="normal">RNG::sample_type<sp/>RNG::next()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="ql/math/randomnumbers/centrallimitgaussianrng.hpp" line="44" column="5" bodyfile="ql/math/randomnumbers/centrallimitgaussianrng.hpp" bodystart="44" bodyend="53"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_c_l_gaussian_rng_1a3c2d9557bc4703be4bced7acfce54542" prot="public" virt="non-virtual"><scope>QuantLib::CLGaussianRng</scope><name>CLGaussianRng</name></member>
      <member refid="class_quant_lib_1_1_c_l_gaussian_rng_1a60be88349e768b3bb376689e5f54c32c" prot="public" virt="non-virtual"><scope>QuantLib::CLGaussianRng</scope><name>next</name></member>
      <member refid="class_quant_lib_1_1_c_l_gaussian_rng_1a5b546e6ebf8f27ccaeb4c1d13d1a4567" prot="public" virt="non-virtual"><scope>QuantLib::CLGaussianRng</scope><name>sample_type</name></member>
      <member refid="class_quant_lib_1_1_c_l_gaussian_rng_1a829381347833fc1a381fcad4b8d125e2" prot="private" virt="non-virtual"><scope>QuantLib::CLGaussianRng</scope><name>uniformGenerator_</name></member>
      <member refid="class_quant_lib_1_1_c_l_gaussian_rng_1a6a0f9a97482cc8fd5991175e3877395f" prot="public" virt="non-virtual"><scope>QuantLib::CLGaussianRng</scope><name>urng_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
