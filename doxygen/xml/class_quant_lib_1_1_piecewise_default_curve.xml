<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_piecewise_default_curve" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::PiecewiseDefaultCurve</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Traits::template curve::type</basecompoundref>
    <basecompoundref refid="class_quant_lib_1_1_lazy_object" prot="public" virt="non-virtual">QuantLib::LazyObject</basecompoundref>
    <includes refid="piecewisedefaultcurve_8hpp" local="no">piecewisedefaultcurve.hpp</includes>
    <templateparamlist>
      <param>
        <type>class Traits</type>
      </param>
      <param>
        <type>class Interpolator</type>
      </param>
      <param>
        <type>template&lt; class &gt; class</type>
        <declname>Bootstrap</declname>
        <defname>Bootstrap</defname>
        <defval><ref refid="class_quant_lib_1_1_iterative_bootstrap" kindref="compound">IterativeBootstrap</ref></defval>
      </param>
    </templateparamlist>
    <sectiondef kind="user-defined">
      <header>LazyObject interface</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_piecewise_default_curve_1a8ac28dc24d7286680932f61a6709ec5f" prot="private" static="no" mutable="no">
        <type>std::vector&lt; ext::shared_ptr&lt; typename Traits::helper &gt; &gt;</type>
        <definition>std::vector&lt;ext::shared_ptr&lt;typename Traits::helper&gt; &gt; QuantLib::PiecewiseDefaultCurve&lt; Traits, Interpolator, Bootstrap &gt;::instruments_</definition>
        <argsstring></argsstring>
        <name>instruments_</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::instruments_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="199" column="21" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_piecewise_default_curve_1a77a7e9840b5cfd9375aea9d0ff5b3d2e" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::PiecewiseDefaultCurve&lt; Traits, Interpolator, Bootstrap &gt;::accuracy_</definition>
        <argsstring></argsstring>
        <name>accuracy_</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::accuracy_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="200" column="14" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_piecewise_default_curve_1ace7155f7f92a715243c32ccb990cb78b" prot="private" static="no" mutable="no">
        <type>Bootstrap&lt; <ref refid="class_quant_lib_1_1_piecewise_default_curve" kindref="compound">this_curve</ref> &gt;</type>
        <definition>Bootstrap&lt;this_curve&gt; QuantLib::PiecewiseDefaultCurve&lt; Traits, Interpolator, Bootstrap &gt;::bootstrap_</definition>
        <argsstring></argsstring>
        <name>bootstrap_</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::bootstrap_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="208" column="19" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_quant_lib_1_1_piecewise_default_curve_1ae111cb608a73ca819237b5c9f93f1088" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class Bootstrap&lt; this_curve &gt;</definition>
        <argsstring></argsstring>
        <name>Bootstrap&lt; this_curve &gt;</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::Bootstrap&lt; this_curve &gt;</qualifiedname>
        <param>
          <type>Bootstrap&lt; <ref refid="class_quant_lib_1_1_piecewise_default_curve" kindref="compound">this_curve</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="200" column="14" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_quant_lib_1_1_piecewise_default_curve_1a57e9e8eaf5be1d62515629611b40421e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class BootstrapError&lt; this_curve &gt;</definition>
        <argsstring></argsstring>
        <name>BootstrapError&lt; this_curve &gt;</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::BootstrapError&lt; this_curve &gt;</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_bootstrap_error" kindref="compound">BootstrapError</ref>&lt; <ref refid="class_quant_lib_1_1_piecewise_default_curve" kindref="compound">this_curve</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="200" column="14" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_piecewise_default_curve_1ae10a1edfb4ee18fb8161d0338f0562b0" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::PiecewiseDefaultCurve&lt; C, I, B &gt;::performCalculations</definition>
        <argsstring>() const override</argsstring>
        <name>performCalculations</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::performCalculations</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_lazy_object_1aafa5583a3743d9f93fa40da5b62e1ff8">performCalculations</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must implement any calculations which must be (re)done in order to calculate the desired results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="192" column="14" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="280" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_piecewise_default_curve_1abee977869bfd465a463fb60065f1b4b0" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref></type>
        <definition>Probability QuantLib::PiecewiseDefaultCurve&lt; C, I, B &gt;::survivalProbabilityImpl</definition>
        <argsstring>(Time) const override</argsstring>
        <name>survivalProbabilityImpl</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::survivalProbabilityImpl</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <defname>t</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="195" column="21" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="262" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_piecewise_default_curve_1acbe7dd636ae222725a18829d815c4448" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::PiecewiseDefaultCurve&lt; C, I, B &gt;::defaultDensityImpl</definition>
        <argsstring>(Time) const override</argsstring>
        <name>defaultDensityImpl</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::defaultDensityImpl</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <defname>t</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="196" column="14" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="268" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_piecewise_default_curve_1a2089708fef191500b3b6cba45612a9c4" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::PiecewiseDefaultCurve&lt; C, I, B &gt;::hazardRateImpl</definition>
        <argsstring>(Time) const override</argsstring>
        <name>hazardRateImpl</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::hazardRateImpl</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <defname>t</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="197" column="14" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="274" bodyend="277"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Constructors</header>
      <memberdef kind="function" id="class_quant_lib_1_1_piecewise_default_curve_1a1be2f5cc6778548e43e172583c9b8da7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::PiecewiseDefaultCurve&lt; Traits, Interpolator, Bootstrap &gt;::PiecewiseDefaultCurve</definition>
        <argsstring>(const Date &amp;referenceDate, std::vector&lt; ext::shared_ptr&lt; typename Traits::helper &gt; &gt; instruments, const DayCounter &amp;dayCounter, const std::vector&lt; Handle&lt; Quote &gt; &gt; &amp;jumps={}, const std::vector&lt; Date &gt; &amp;jumpDates={}, const Interpolator &amp;i={}, bootstrap_type bootstrap={})</argsstring>
        <name>PiecewiseDefaultCurve</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::PiecewiseDefaultCurve</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>referenceDate</declname>
        </param>
        <param>
          <type>std::vector&lt; ext::shared_ptr&lt; typename Traits::helper &gt; &gt;</type>
          <declname>instruments</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &gt; &amp;</type>
          <declname>jumps</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt; &amp;</type>
          <declname>jumpDates</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const Interpolator &amp;</type>
          <declname>i</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>bootstrap_type</type>
          <declname>bootstrap</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="68" column="9" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="68" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_piecewise_default_curve_1aba4b38b36e15d56f90cea67503987716" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::PiecewiseDefaultCurve&lt; Traits, Interpolator, Bootstrap &gt;::PiecewiseDefaultCurve</definition>
        <argsstring>(const Date &amp;referenceDate, const std::vector&lt; ext::shared_ptr&lt; typename Traits::helper &gt; &gt; &amp;instruments, const DayCounter &amp;dayCounter, const Interpolator &amp;i, const bootstrap_type &amp;bootstrap=bootstrap_type())</argsstring>
        <name>PiecewiseDefaultCurve</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::PiecewiseDefaultCurve</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>referenceDate</declname>
        </param>
        <param>
          <type>const std::vector&lt; ext::shared_ptr&lt; typename Traits::helper &gt; &gt; &amp;</type>
          <declname>instruments</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type>const Interpolator &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bootstrap_type &amp;</type>
          <declname>bootstrap</declname>
          <defval>bootstrap_type()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="82" column="9" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="82" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_piecewise_default_curve_1ad7b5a93a6424516f9fda5e02df433714" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::PiecewiseDefaultCurve&lt; Traits, Interpolator, Bootstrap &gt;::PiecewiseDefaultCurve</definition>
        <argsstring>(const Date &amp;referenceDate, std::vector&lt; ext::shared_ptr&lt; typename Traits::helper &gt; &gt; instruments, const DayCounter &amp;dayCounter, bootstrap_type bootstrap)</argsstring>
        <name>PiecewiseDefaultCurve</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::PiecewiseDefaultCurve</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>referenceDate</declname>
        </param>
        <param>
          <type>std::vector&lt; ext::shared_ptr&lt; typename Traits::helper &gt; &gt;</type>
          <declname>instruments</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type>bootstrap_type</type>
          <declname>bootstrap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="95" column="9" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="95" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_piecewise_default_curve_1a8ddc90f17fa454aeb94fa56235f6824b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::PiecewiseDefaultCurve&lt; Traits, Interpolator, Bootstrap &gt;::PiecewiseDefaultCurve</definition>
        <argsstring>(Natural settlementDays, const Calendar &amp;calendar, std::vector&lt; ext::shared_ptr&lt; typename Traits::helper &gt; &gt; instruments, const DayCounter &amp;dayCounter, const std::vector&lt; Handle&lt; Quote &gt; &gt; &amp;jumps={}, const std::vector&lt; Date &gt; &amp;jumpDates={}, const Interpolator &amp;i={}, bootstrap_type bootstrap={})</argsstring>
        <name>PiecewiseDefaultCurve</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::PiecewiseDefaultCurve</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref></type>
          <declname>settlementDays</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;</type>
          <declname>calendar</declname>
        </param>
        <param>
          <type>std::vector&lt; ext::shared_ptr&lt; typename Traits::helper &gt; &gt;</type>
          <declname>instruments</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &gt; &amp;</type>
          <declname>jumps</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt; &amp;</type>
          <declname>jumpDates</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const Interpolator &amp;</type>
          <declname>i</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>bootstrap_type</type>
          <declname>bootstrap</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="106" column="9" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="106" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_piecewise_default_curve_1a7d25867f972807f172d053c07e2c2c91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::PiecewiseDefaultCurve&lt; Traits, Interpolator, Bootstrap &gt;::PiecewiseDefaultCurve</definition>
        <argsstring>(Natural settlementDays, const Calendar &amp;calendar, const std::vector&lt; ext::shared_ptr&lt; typename Traits::helper &gt; &gt; &amp;instruments, const DayCounter &amp;dayCounter, const Interpolator &amp;i, const bootstrap_type &amp;bootstrap=bootstrap_type())</argsstring>
        <name>PiecewiseDefaultCurve</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::PiecewiseDefaultCurve</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref></type>
          <declname>settlementDays</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;</type>
          <declname>calendar</declname>
        </param>
        <param>
          <type>const std::vector&lt; ext::shared_ptr&lt; typename Traits::helper &gt; &gt; &amp;</type>
          <declname>instruments</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type>const Interpolator &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bootstrap_type &amp;</type>
          <declname>bootstrap</declname>
          <defval>bootstrap_type()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="121" column="9" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="121" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_piecewise_default_curve_1a3eac3c106378f3f11caa1750157a66ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::PiecewiseDefaultCurve&lt; Traits, Interpolator, Bootstrap &gt;::PiecewiseDefaultCurve</definition>
        <argsstring>(Natural settlementDays, const Calendar &amp;calendar, const std::vector&lt; ext::shared_ptr&lt; typename Traits::helper &gt; &gt; &amp;instruments, const DayCounter &amp;dayCounter, const bootstrap_type &amp;bootstrap)</argsstring>
        <name>PiecewiseDefaultCurve</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::PiecewiseDefaultCurve</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref></type>
          <declname>settlementDays</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref> &amp;</type>
          <declname>calendar</declname>
        </param>
        <param>
          <type>const std::vector&lt; ext::shared_ptr&lt; typename Traits::helper &gt; &gt; &amp;</type>
          <declname>instruments</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type>const bootstrap_type &amp;</type>
          <declname>bootstrap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="135" column="9" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="135" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_piecewise_default_curve_1a5383b16487c7e41b5c81336635929551" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::PiecewiseDefaultCurve&lt; Traits, Interpolator, Bootstrap &gt;::PiecewiseDefaultCurve</definition>
        <argsstring>(const Date &amp;referenceDate, const std::vector&lt; ext::shared_ptr&lt; typename Traits::helper &gt; &gt; &amp;instruments, const DayCounter &amp;dayCounter, const ext::shared_ptr&lt; OneFactorAffineModel &gt; &amp;model, const Interpolator &amp;i={}, const bootstrap_type &amp;bootstrap={})</argsstring>
        <name>PiecewiseDefaultCurve</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::PiecewiseDefaultCurve</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>referenceDate</declname>
        </param>
        <param>
          <type>const std::vector&lt; ext::shared_ptr&lt; typename Traits::helper &gt; &gt; &amp;</type>
          <declname>instruments</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dayCounter</declname>
        </param>
        <param>
          <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_one_factor_affine_model" kindref="compound">OneFactorAffineModel</ref> &gt; &amp;</type>
          <declname>model</declname>
        </param>
        <param>
          <type>const Interpolator &amp;</type>
          <declname>i</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const bootstrap_type &amp;</type>
          <declname>bootstrap</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="157" column="9" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="157" bodyend="172"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>TermStructure interface</header>
      <memberdef kind="function" id="class_quant_lib_1_1_piecewise_default_curve_1a393bd8332643b8084c03b648ad6e67d6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::PiecewiseDefaultCurve&lt; C, I, B &gt;::maxDate</definition>
        <argsstring>() const override</argsstring>
        <name>maxDate</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::maxDate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="176" column="14" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="215" bodyend="218"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>base_curve interface</header>
      <memberdef kind="function" id="class_quant_lib_1_1_piecewise_default_curve_1a374c36c26b6c19ac5354708e947a5474" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Time &gt; &amp; QuantLib::PiecewiseDefaultCurve&lt; C, I, B &gt;::times</definition>
        <argsstring>() const</argsstring>
        <name>times</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::times</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="180" column="27" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_piecewise_default_curve_1a7ba589820722f8f3bf22354ef58cefc0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Date &gt; &amp; QuantLib::PiecewiseDefaultCurve&lt; C, I, B &gt;::dates</definition>
        <argsstring>() const</argsstring>
        <name>dates</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::dates</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="181" column="27" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="229" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_piecewise_default_curve_1ac6e913b7ad54f90a4d23c7660830e5b8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Real &gt; &amp; QuantLib::PiecewiseDefaultCurve&lt; C, I, B &gt;::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="182" column="27" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="236" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_piecewise_default_curve_1aba13d9a35ab451edd351e217f3f3b34d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; Date, Real &gt; &gt; QuantLib::PiecewiseDefaultCurve&lt; C, I, B &gt;::nodes</definition>
        <argsstring>() const</argsstring>
        <name>nodes</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::nodes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="183" column="21" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="243" bodyend="246"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Observer interface</header>
      <memberdef kind="function" id="class_quant_lib_1_1_piecewise_default_curve_1af21d12ed64fbf20cc560bc2fb3cb2608" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::PiecewiseDefaultCurve&lt; C, I, B &gt;::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::update</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_lazy_object_1adee2bf49be5c4c78736be293321a856d">update</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must be implemented in derived classes. An instance of Observer does not call this method directly: instead, it will be called by the observables the instance registered with when they need to notify any changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="187" column="14" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="249" bodyend="258"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_piecewise_default_curve_1a255a86878535bba7b68c27f0ae6a1c66" prot="private" static="no">
        <type>Traits::template curve&lt; Interpolator &gt;::type</type>
        <definition>typedef Traits::template curve&lt;Interpolator&gt;::type QuantLib::PiecewiseDefaultCurve&lt; Traits, Interpolator, Bootstrap &gt;::base_curve</definition>
        <argsstring></argsstring>
        <name>base_curve</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::base_curve</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="59" column="56" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_piecewise_default_curve_1ab96d113ec79f2d58bccc7e7ab120a3e6" prot="private" static="no">
        <type><ref refid="class_quant_lib_1_1_piecewise_default_curve" kindref="compound">PiecewiseDefaultCurve</ref>&lt; Traits, Interpolator, Bootstrap &gt;</type>
        <definition>typedef PiecewiseDefaultCurve&lt;Traits,Interpolator,Bootstrap&gt; QuantLib::PiecewiseDefaultCurve&lt; Traits, Interpolator, Bootstrap &gt;::this_curve</definition>
        <argsstring></argsstring>
        <name>this_curve</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::this_curve</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="60" column="39" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_piecewise_default_curve_1a6ba1ac1a08bc1a24f37f0e44dae124a9" prot="public" static="no">
        <type>Traits</type>
        <definition>typedef Traits QuantLib::PiecewiseDefaultCurve&lt; Traits, Interpolator, Bootstrap &gt;::traits_type</definition>
        <argsstring></argsstring>
        <name>traits_type</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::traits_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="62" column="24" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_piecewise_default_curve_1a57f0143e740ea427054ac2dcdd288a44" prot="public" static="no">
        <type>Interpolator</type>
        <definition>typedef Interpolator QuantLib::PiecewiseDefaultCurve&lt; Traits, Interpolator, Bootstrap &gt;::interpolator_type</definition>
        <argsstring></argsstring>
        <name>interpolator_type</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::interpolator_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="63" column="30" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_piecewise_default_curve_1ab1a9876b243d9d8bb8f53cd09b32c087" prot="public" static="no">
        <type>Bootstrap&lt; <ref refid="class_quant_lib_1_1_piecewise_default_curve" kindref="compound">this_curve</ref> &gt;</type>
        <definition>typedef Bootstrap&lt;this_curve&gt; QuantLib::PiecewiseDefaultCurve&lt; Traits, Interpolator, Bootstrap &gt;::bootstrap_type</definition>
        <argsstring></argsstring>
        <name>bootstrap_type</name>
        <qualifiedname>QuantLib::PiecewiseDefaultCurve::bootstrap_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="64" column="27" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Piecewise default-probability term structure. </para>
    </briefdescription>
    <detaileddescription>
<para>This term structure is bootstrapped on a number of credit instruments which are passed as a vector of handles to <ref refid="namespace_quant_lib_1a443cae7b36fc003f04d81b88fa6c095b" kindref="member">DefaultProbabilityHelper</ref> instances. Their maturities mark the boundaries of the interpolated segments.</para>
<para>Each segment is determined sequentially starting from the earliest period to the latest and is chosen so that the instrument whose maturity marks the end of such segment is correctly repriced on the curve.</para>
<para><simplesect kind="warning"><para>The bootstrapping algorithm will raise an exception if any two instruments have the same maturity date. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="1">
        <label>QuantLib::PiecewiseDefaultCurve&lt; Traits, Interpolator, Bootstrap &gt;</label>
        <link refid="class_quant_lib_1_1_piecewise_default_curve"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Traits::template curve::type</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="5">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="1">
        <label>QuantLib::PiecewiseDefaultCurve&lt; Traits, Interpolator, Bootstrap &gt;</label>
        <link refid="class_quant_lib_1_1_piecewise_default_curve"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Traits::template curve::type</label>
      </node>
    </collaborationgraph>
    <location file="ql/termstructures/credit/piecewisedefaultcurve.hpp" line="55" column="5" bodyfile="ql/termstructures/credit/piecewisedefaultcurve.hpp" bodystart="57" bodyend="209"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1a77a7e9840b5cfd9375aea9d0ff5b3d2e" prot="private" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>accuracy_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a02070ea7442d30625992c1711030d4b8" prot="protected" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>alwaysForward_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a17c9433135a259e4776baec66204a484" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>alwaysForwardNotifications</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1a255a86878535bba7b68c27f0ae6a1c66" prot="private" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>base_curve</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1ae111cb608a73ca819237b5c9f93f1088" prot="private" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>Bootstrap&lt; this_curve &gt;</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1ace7155f7f92a715243c32ccb990cb78b" prot="private" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>bootstrap_</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1ab1a9876b243d9d8bb8f53cd09b32c087" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>bootstrap_type</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1a57e9e8eaf5be1d62515629611b40421e" prot="private" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>BootstrapError&lt; this_curve &gt;</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a5244c7f83592375a0ea9048296435fd1" prot="protected" virt="virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a58b4986a80efa18634483a92c121e26e" prot="protected" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>calculated_</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1ac6e913b7ad54f90a4d23c7660830e5b8" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>data</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1a7ba589820722f8f3bf22354ef58cefc0" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>dates</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1acbe7dd636ae222725a18829d815c4448" prot="private" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>defaultDensityImpl</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1afac6ee19c3107c453e1347dd8000e023" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>forwardFirstNotificationOnly</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7157f41e83f2c5d924f5c5bafda04d1d" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>freeze</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7bb721fe00c6854e602758aba629ab77" prot="protected" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>frozen_</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1a2089708fef191500b3b6cba45612a9c4" prot="private" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>hazardRateImpl</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1a8ac28dc24d7286680932f61a6709ec5f" prot="private" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>instruments_</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1a57f0143e740ea427054ac2dcdd288a44" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>interpolator_type</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a0a7c5d42815a4e16ee2158e24dbfc748" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>isCalculated</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a26f18f4ff7faaaebd8eae50e064b493e" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>LazyObject</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1a393bd8332643b8084c03b648ad6e67d6" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>maxDate</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1aba13d9a35ab451edd351e217f3f3b34d" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>nodes</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::LazyObject::QuantLib::Observer::"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1ae10a1edfb4ee18fb8161d0338f0562b0" prot="private" virt="virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>performCalculations</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1a1be2f5cc6778548e43e172583c9b8da7" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>PiecewiseDefaultCurve</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1aba4b38b36e15d56f90cea67503987716" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>PiecewiseDefaultCurve</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1ad7b5a93a6424516f9fda5e02df433714" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>PiecewiseDefaultCurve</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1a8ddc90f17fa454aeb94fa56235f6824b" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>PiecewiseDefaultCurve</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1a7d25867f972807f172d053c07e2c2c91" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>PiecewiseDefaultCurve</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1a3eac3c106378f3f11caa1750157a66ab" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>PiecewiseDefaultCurve</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1a5383b16487c7e41b5c81336635929551" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>PiecewiseDefaultCurve</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a70c9b24e50132408d8d9ce4f6674662a" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>recalculate</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1abee977869bfd465a463fb60065f1b4b0" prot="private" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>survivalProbabilityImpl</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1ab96d113ec79f2d58bccc7e7ab120a3e6" prot="private" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>this_curve</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1a374c36c26b6c19ac5354708e947a5474" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>times</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1a6ba1ac1a08bc1a24f37f0e44dae124a9" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>traits_type</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a2e0e4786666453024b9d4e0761f2770b" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>unfreeze</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_piecewise_default_curve_1af21d12ed64fbf20cc560bc2fb3cb2608" prot="public" virt="virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a9d719c43bb627177a90d7d12324a2d6e" prot="public" virt="non-virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>~LazyObject</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::PiecewiseDefaultCurve</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
