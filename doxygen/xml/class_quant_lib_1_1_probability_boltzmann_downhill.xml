<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_probability_boltzmann_downhill" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::ProbabilityBoltzmannDownhill</compoundname>
    <includes refid="hybridsimulatedannealingfunctors_8hpp" local="no">hybridsimulatedannealingfunctors.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_probability_boltzmann_downhill_1abb0d4d790eb098acd785b1158d046a89" prot="private" static="no" mutable="no">
        <type>std::mt19937</type>
        <definition>std::mt19937 QuantLib::ProbabilityBoltzmannDownhill::generator_</definition>
        <argsstring></argsstring>
        <name>generator_</name>
        <qualifiedname>QuantLib::ProbabilityBoltzmannDownhill::generator_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="251" column="22" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_probability_boltzmann_downhill_1af4e5f1773bd3f1c18866b53e7b4cbc37" prot="private" static="no" mutable="no">
        <type>std::uniform_real_distribution&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::uniform_real_distribution&lt;Real&gt; QuantLib::ProbabilityBoltzmannDownhill::distribution_</definition>
        <argsstring></argsstring>
        <name>distribution_</name>
        <qualifiedname>QuantLib::ProbabilityBoltzmannDownhill::distribution_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="252" column="40" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="252" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_probability_boltzmann_downhill_1aa1386273d50f8a58faaeb029535def52" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::ProbabilityBoltzmannDownhill::ProbabilityBoltzmannDownhill</definition>
        <argsstring>(unsigned long seed=SeedGenerator::instance().get())</argsstring>
        <name>ProbabilityBoltzmannDownhill</name>
        <qualifiedname>QuantLib::ProbabilityBoltzmannDownhill::ProbabilityBoltzmannDownhill</qualifiedname>
        <param>
          <type>unsigned long</type>
          <declname>seed</declname>
          <defval><ref refid="class_quant_lib_1_1_singleton_1ac412b7766b32f56372a3e966c5f3f386" kindref="member">SeedGenerator::instance</ref>().get()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="242" column="18" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="242" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_probability_boltzmann_downhill_1afa6c3262f1a8faa2799d062a729429ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::ProbabilityBoltzmannDownhill::operator()</definition>
        <argsstring>(Real currentValue, Real newValue, const Array &amp;temp)</argsstring>
        <name>operator()</name>
        <qualifiedname>QuantLib::ProbabilityBoltzmannDownhill::operator()</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>currentValue</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>newValue</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="244" column="14" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="244" bodyend="249"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Boltzmann Downhill <ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>Similarly to the Boltzmann <ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref>, but if new &lt; current, then the point is always accepted. </para>
    </detaileddescription>
    <location file="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" line="239" column="5" bodyfile="ql/experimental/math/hybridsimulatedannealingfunctors.hpp" bodystart="240" bodyend="253"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_probability_boltzmann_downhill_1af4e5f1773bd3f1c18866b53e7b4cbc37" prot="private" virt="non-virtual"><scope>QuantLib::ProbabilityBoltzmannDownhill</scope><name>distribution_</name></member>
      <member refid="class_quant_lib_1_1_probability_boltzmann_downhill_1abb0d4d790eb098acd785b1158d046a89" prot="private" virt="non-virtual"><scope>QuantLib::ProbabilityBoltzmannDownhill</scope><name>generator_</name></member>
      <member refid="class_quant_lib_1_1_probability_boltzmann_downhill_1afa6c3262f1a8faa2799d062a729429ac" prot="public" virt="non-virtual"><scope>QuantLib::ProbabilityBoltzmannDownhill</scope><name>operator()</name></member>
      <member refid="class_quant_lib_1_1_probability_boltzmann_downhill_1aa1386273d50f8a58faaeb029535def52" prot="public" virt="non-virtual"><scope>QuantLib::ProbabilityBoltzmannDownhill</scope><name>ProbabilityBoltzmannDownhill</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
