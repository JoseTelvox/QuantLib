<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_boundary_condition" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>QuantLib::BoundaryCondition</compoundname>
    <includes refid="boundarycondition_8hpp" local="no">boundarycondition.hpp</includes>
    <templateparamlist>
      <param>
        <type>class Operator</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_quant_lib_1_1_boundary_condition_1ab685ab8e5ea909d20f659fab031a3dcb" prot="public" static="no" strong="no">
        <type></type>
        <name>Side</name>
        <qualifiedname>QuantLib::BoundaryCondition::Side</qualifiedname>
        <enumvalue id="class_quant_lib_1_1_boundary_condition_1ab685ab8e5ea909d20f659fab031a3dcba48c5df323aff7c2236f668e0d163972a" prot="public">
          <name>None</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_boundary_condition_1ab685ab8e5ea909d20f659fab031a3dcba3d5d43fcd0df2653be0ec400275f1c44" prot="public">
          <name>Upper</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_boundary_condition_1ab685ab8e5ea909d20f659fab031a3dcbafddc4f73585f67e4c01a46c1baf4d3e6" prot="public">
          <name>Lower</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000055"><xreftitle>Todo</xreftitle><xrefdescription><para>Generalize for n-dimensional conditions </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/boundarycondition.hpp" line="41" column="9" bodyfile="ql/methods/finitedifferences/boundarycondition.hpp" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_boundary_condition_1adcd0cbae913cd891085312f3719efb3c" prot="public" static="no">
        <type>Operator</type>
        <definition>typedef Operator QuantLib::BoundaryCondition&lt; Operator &gt;::operator_type</definition>
        <argsstring></argsstring>
        <name>operator_type</name>
        <qualifiedname>QuantLib::BoundaryCondition::operator_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/boundarycondition.hpp" line="38" column="26" bodyfile="ql/methods/finitedifferences/boundarycondition.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_boundary_condition_1a61ad23b096be9049f1fe9402c95956da" prot="public" static="no">
        <type>Operator::array_type</type>
        <definition>typedef Operator::array_type QuantLib::BoundaryCondition&lt; Operator &gt;::array_type</definition>
        <argsstring></argsstring>
        <name>array_type</name>
        <qualifiedname>QuantLib::BoundaryCondition::array_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/boundarycondition.hpp" line="39" column="47" bodyfile="ql/methods/finitedifferences/boundarycondition.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_boundary_condition_1ab0b634722e1c2ffe8e994b443decd603" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual QuantLib::BoundaryCondition&lt; Operator &gt;::~BoundaryCondition</definition>
        <argsstring>()=default</argsstring>
        <name>~BoundaryCondition</name>
        <qualifiedname>QuantLib::BoundaryCondition::~BoundaryCondition</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/boundarycondition.hpp" line="43" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_boundary_condition_1a090e687cdd747c7131aa95d564a26cff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void QuantLib::BoundaryCondition&lt; Operator &gt;::applyBeforeApplying</definition>
        <argsstring>(operator_type &amp;) const =0</argsstring>
        <name>applyBeforeApplying</name>
        <qualifiedname>QuantLib::BoundaryCondition::applyBeforeApplying</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_dirichlet_b_c_1a3121ac03df8ca5b4c050318ed601226d">applyBeforeApplying</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_fdm_dirichlet_boundary_1a559e1590d305600b44f5849ea995dffc">applyBeforeApplying</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_fdm_discount_dirichlet_boundary_1a5ce316ff46bf2dba16976f01c75c15c0">applyBeforeApplying</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_fdm_time_dep_dirichlet_boundary_1a1504c825bcc007b8d5c93f2961970f2e">applyBeforeApplying</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_neumann_b_c_1aee8d2b79d26946bae0fff30bf6c9ae10">applyBeforeApplying</reimplementedby>
        <param>
          <type>operator_type &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method modifies an operator <formula id="6">$ L $</formula> before it is applied to an array <formula id="125">$ u $</formula> so that <formula id="371">$ v = Lu $</formula> will satisfy the given condition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/boundarycondition.hpp" line="48" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_boundary_condition_1af885136ffc2b670924fd6579b6fb360e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void QuantLib::BoundaryCondition&lt; Operator &gt;::applyAfterApplying</definition>
        <argsstring>(array_type &amp;) const =0</argsstring>
        <name>applyAfterApplying</name>
        <qualifiedname>QuantLib::BoundaryCondition::applyAfterApplying</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_dirichlet_b_c_1a107da3510517ee27cbe5711a01ddc17e">applyAfterApplying</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_fdm_dirichlet_boundary_1a10cd583eaf41a5e18d599fe826ac1bf8">applyAfterApplying</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_fdm_discount_dirichlet_boundary_1ae170a52ac2eac219348df6fb83570b69">applyAfterApplying</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_fdm_time_dep_dirichlet_boundary_1a5e945e06c7bc9f9696635d480c968102">applyAfterApplying</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_neumann_b_c_1a46574aeb587edd7da26c8b8697e7e027">applyAfterApplying</reimplementedby>
        <param>
          <type>array_type &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method modifies an array <formula id="125">$ u $</formula> so that it satisfies the given condition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/boundarycondition.hpp" line="51" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_boundary_condition_1a1d5d7879dbecac59bef8df64e3b10fa7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void QuantLib::BoundaryCondition&lt; Operator &gt;::applyBeforeSolving</definition>
        <argsstring>(operator_type &amp;, array_type &amp;rhs) const =0</argsstring>
        <name>applyBeforeSolving</name>
        <qualifiedname>QuantLib::BoundaryCondition::applyBeforeSolving</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_dirichlet_b_c_1adf82dd5aa567ffd92d677983329e42fd">applyBeforeSolving</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_fdm_dirichlet_boundary_1a0c1544b4a6fe7e2871ac163b9e568d26">applyBeforeSolving</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_fdm_discount_dirichlet_boundary_1a2f74aa6f78ca8f48c8bdb177385f0566">applyBeforeSolving</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_fdm_time_dep_dirichlet_boundary_1a3dc47e18a7d9cc7ab8be6496f24a7b5c">applyBeforeSolving</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_neumann_b_c_1a0b65a0a6818fb1ddcd4cd1dc85751777">applyBeforeSolving</reimplementedby>
        <param>
          <type>operator_type &amp;</type>
        </param>
        <param>
          <type>array_type &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method modifies an operator <formula id="6">$ L $</formula> before the linear system <formula id="372">$ Lu&apos; = u $</formula> is solved so that <formula id="373">$ u&apos; $</formula> will satisfy the given condition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/boundarycondition.hpp" line="55" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_boundary_condition_1ab63c69a9c991dcb908d399c2e6304970" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void QuantLib::BoundaryCondition&lt; Operator &gt;::applyAfterSolving</definition>
        <argsstring>(array_type &amp;) const =0</argsstring>
        <name>applyAfterSolving</name>
        <qualifiedname>QuantLib::BoundaryCondition::applyAfterSolving</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_dirichlet_b_c_1a4873c11ee8d117df6557c8123fe21b5c">applyAfterSolving</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_fdm_dirichlet_boundary_1a4cfcadbe8f06e2866bc90f9ccd833f07">applyAfterSolving</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_fdm_discount_dirichlet_boundary_1a743769e9c92c8c0f161b3830cdfc96f7">applyAfterSolving</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_fdm_time_dep_dirichlet_boundary_1abb63233bd3ef0830a4f30c1861b6be8a">applyAfterSolving</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_neumann_b_c_1a21148dd45b0e910f60319966ef539ccb">applyAfterSolving</reimplementedby>
        <param>
          <type>array_type &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method modifies an array <formula id="125">$ u $</formula> so that it satisfies the given condition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/boundarycondition.hpp" line="59" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_boundary_condition_1a391ec4058846a3d2f0cd49324c3de790" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void QuantLib::BoundaryCondition&lt; Operator &gt;::setTime</definition>
        <argsstring>(Time t)=0</argsstring>
        <name>setTime</name>
        <qualifiedname>QuantLib::BoundaryCondition::setTime</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_dirichlet_b_c_1ad0e0a84f21eca06bce8d8eff830f9fa2">setTime</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_fdm_dirichlet_boundary_1abb7816265b6812125d9899fe6fea081f">setTime</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_fdm_discount_dirichlet_boundary_1ac45e99f12dcd8eef6bdf0832547d7dd8">setTime</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_fdm_time_dep_dirichlet_boundary_1a789257b7e3d492a08aafb4893fd5259e">setTime</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_neumann_b_c_1a959a84d01a7c46ad5ed042278d85f5c8">setTime</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method sets the current time for time-dependent boundary conditions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/methods/finitedifferences/boundarycondition.hpp" line="62" column="22"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Abstract boundary condition class for finite difference problems. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ql/methods/finitedifferences/boundarycondition.hpp" line="35" column="5" bodyfile="ql/methods/finitedifferences/boundarycondition.hpp" bodystart="35" bodyend="63"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_boundary_condition_1af885136ffc2b670924fd6579b6fb360e" prot="public" virt="pure-virtual"><scope>QuantLib::BoundaryCondition</scope><name>applyAfterApplying</name></member>
      <member refid="class_quant_lib_1_1_boundary_condition_1ab63c69a9c991dcb908d399c2e6304970" prot="public" virt="pure-virtual"><scope>QuantLib::BoundaryCondition</scope><name>applyAfterSolving</name></member>
      <member refid="class_quant_lib_1_1_boundary_condition_1a090e687cdd747c7131aa95d564a26cff" prot="public" virt="pure-virtual"><scope>QuantLib::BoundaryCondition</scope><name>applyBeforeApplying</name></member>
      <member refid="class_quant_lib_1_1_boundary_condition_1a1d5d7879dbecac59bef8df64e3b10fa7" prot="public" virt="pure-virtual"><scope>QuantLib::BoundaryCondition</scope><name>applyBeforeSolving</name></member>
      <member refid="class_quant_lib_1_1_boundary_condition_1a61ad23b096be9049f1fe9402c95956da" prot="public" virt="non-virtual"><scope>QuantLib::BoundaryCondition</scope><name>array_type</name></member>
      <member refid="class_quant_lib_1_1_boundary_condition_1ab685ab8e5ea909d20f659fab031a3dcbafddc4f73585f67e4c01a46c1baf4d3e6" prot="public" virt="non-virtual"><scope>QuantLib::BoundaryCondition</scope><name>Lower</name></member>
      <member refid="class_quant_lib_1_1_boundary_condition_1ab685ab8e5ea909d20f659fab031a3dcba48c5df323aff7c2236f668e0d163972a" prot="public" virt="non-virtual"><scope>QuantLib::BoundaryCondition</scope><name>None</name></member>
      <member refid="class_quant_lib_1_1_boundary_condition_1adcd0cbae913cd891085312f3719efb3c" prot="public" virt="non-virtual"><scope>QuantLib::BoundaryCondition</scope><name>operator_type</name></member>
      <member refid="class_quant_lib_1_1_boundary_condition_1a391ec4058846a3d2f0cd49324c3de790" prot="public" virt="pure-virtual"><scope>QuantLib::BoundaryCondition</scope><name>setTime</name></member>
      <member refid="class_quant_lib_1_1_boundary_condition_1ab685ab8e5ea909d20f659fab031a3dcb" prot="public" virt="non-virtual"><scope>QuantLib::BoundaryCondition</scope><name>Side</name></member>
      <member refid="class_quant_lib_1_1_boundary_condition_1ab685ab8e5ea909d20f659fab031a3dcba3d5d43fcd0df2653be0ec400275f1c44" prot="public" virt="non-virtual"><scope>QuantLib::BoundaryCondition</scope><name>Upper</name></member>
      <member refid="class_quant_lib_1_1_boundary_condition_1ab0b634722e1c2ffe8e994b443decd603" prot="public" virt="virtual"><scope>QuantLib::BoundaryCondition</scope><name>~BoundaryCondition</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
