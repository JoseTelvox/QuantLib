<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_make_m_c_performance_engine" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::MakeMCPerformanceEngine</compoundname>
    <includes refid="mcperformanceengine_8hpp" local="no">mcperformanceengine.hpp</includes>
    <templateparamlist>
      <param>
        <type>class RNG</type>
        <defval><ref refid="namespace_quant_lib_1a68b9aaf5f0c17983506b1a1db8575ab0" kindref="member">PseudoRandom</ref></defval>
      </param>
      <param>
        <type>class S</type>
        <defval><ref refid="namespace_quant_lib_1ae2e788da35d2b866040a03b96227ee6e" kindref="member">Statistics</ref></defval>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_performance_engine_1a0e05ab930537599a712ae1d8ed58a58f" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;GeneralizedBlackScholesProcess&gt; QuantLib::MakeMCPerformanceEngine&lt; RNG, S &gt;::process_</definition>
        <argsstring></argsstring>
        <name>process_</name>
        <qualifiedname>QuantLib::MakeMCPerformanceEngine::process_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/cliquet/mcperformanceengine.hpp" line="98" column="25" bodyfile="ql/pricingengines/cliquet/mcperformanceengine.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_performance_engine_1ab5b95cd434c45050c3fd9974ef74cb2c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::MakeMCPerformanceEngine&lt; RNG, S &gt;::brownianBridge_</definition>
        <argsstring></argsstring>
        <name>brownianBridge_</name>
        <qualifiedname>QuantLib::MakeMCPerformanceEngine::brownianBridge_</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/cliquet/mcperformanceengine.hpp" line="99" column="14" bodyfile="ql/pricingengines/cliquet/mcperformanceengine.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_performance_engine_1aa560b43da3f4edfd752895054e6628f8" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::MakeMCPerformanceEngine&lt; RNG, S &gt;::antithetic_</definition>
        <argsstring></argsstring>
        <name>antithetic_</name>
        <qualifiedname>QuantLib::MakeMCPerformanceEngine::antithetic_</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/cliquet/mcperformanceengine.hpp" line="99" column="31" bodyfile="ql/pricingengines/cliquet/mcperformanceengine.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_performance_engine_1a9327a24cc5829f5fce8487b5a452f9ff" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MakeMCPerformanceEngine&lt; RNG, S &gt;::samples_</definition>
        <argsstring></argsstring>
        <name>samples_</name>
        <qualifiedname>QuantLib::MakeMCPerformanceEngine::samples_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/cliquet/mcperformanceengine.hpp" line="100" column="14" bodyfile="ql/pricingengines/cliquet/mcperformanceengine.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_performance_engine_1ad9dde5d382f768d1fd85374c2eaf9f4e" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::MakeMCPerformanceEngine&lt; RNG, S &gt;::maxSamples_</definition>
        <argsstring></argsstring>
        <name>maxSamples_</name>
        <qualifiedname>QuantLib::MakeMCPerformanceEngine::maxSamples_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/cliquet/mcperformanceengine.hpp" line="100" column="23" bodyfile="ql/pricingengines/cliquet/mcperformanceengine.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_performance_engine_1ace2e3edae80b1797ae56b4b371107f89" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::MakeMCPerformanceEngine&lt; RNG, S &gt;::tolerance_</definition>
        <argsstring></argsstring>
        <name>tolerance_</name>
        <qualifiedname>QuantLib::MakeMCPerformanceEngine::tolerance_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/cliquet/mcperformanceengine.hpp" line="101" column="14" bodyfile="ql/pricingengines/cliquet/mcperformanceengine.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_make_m_c_performance_engine_1aa8f4f226f4b23a37c7ead77513473299" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
        <definition>BigNatural QuantLib::MakeMCPerformanceEngine&lt; RNG, S &gt;::seed_</definition>
        <argsstring></argsstring>
        <name>seed_</name>
        <qualifiedname>QuantLib::MakeMCPerformanceEngine::seed_</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/cliquet/mcperformanceengine.hpp" line="102" column="20" bodyfile="ql/pricingengines/cliquet/mcperformanceengine.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_performance_engine_1a3b1e633066c0eb6cf3a603db056c0a71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MakeMCPerformanceEngine&lt; RNG, S &gt;::MakeMCPerformanceEngine</definition>
        <argsstring>(ext::shared_ptr&lt; GeneralizedBlackScholesProcess &gt;)</argsstring>
        <name>MakeMCPerformanceEngine</name>
        <qualifiedname>QuantLib::MakeMCPerformanceEngine::MakeMCPerformanceEngine</qualifiedname>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt;</type>
          <defname>process</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/cliquet/mcperformanceengine.hpp" line="87" column="9" bodyfile="ql/pricingengines/cliquet/mcperformanceengine.hpp" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_performance_engine_1a346f4645bb5f8f29e97c31e9780108dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_performance_engine" kindref="compound">MakeMCPerformanceEngine</ref> &amp;</type>
        <definition>MakeMCPerformanceEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCPerformanceEngine&lt; RNG, S &gt;::withBrownianBridge</definition>
        <argsstring>(bool b=true)</argsstring>
        <name>withBrownianBridge</name>
        <qualifiedname>QuantLib::MakeMCPerformanceEngine::withBrownianBridge</qualifiedname>
        <param>
          <type>bool</type>
          <declname>b</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/cliquet/mcperformanceengine.hpp" line="89" column="33" bodyfile="ql/pricingengines/cliquet/mcperformanceengine.hpp" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_performance_engine_1a51ff21b2d2cbe5a7d30fb19ba652e729" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_performance_engine" kindref="compound">MakeMCPerformanceEngine</ref> &amp;</type>
        <definition>MakeMCPerformanceEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCPerformanceEngine&lt; RNG, S &gt;::withAntitheticVariate</definition>
        <argsstring>(bool b=true)</argsstring>
        <name>withAntitheticVariate</name>
        <qualifiedname>QuantLib::MakeMCPerformanceEngine::withAntitheticVariate</qualifiedname>
        <param>
          <type>bool</type>
          <declname>b</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/cliquet/mcperformanceengine.hpp" line="90" column="33" bodyfile="ql/pricingengines/cliquet/mcperformanceengine.hpp" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_performance_engine_1a87b5edf84e1ed76af696de528f8640e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_performance_engine" kindref="compound">MakeMCPerformanceEngine</ref> &amp;</type>
        <definition>MakeMCPerformanceEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCPerformanceEngine&lt; RNG, S &gt;::withSamples</definition>
        <argsstring>(Size samples)</argsstring>
        <name>withSamples</name>
        <qualifiedname>QuantLib::MakeMCPerformanceEngine::withSamples</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>samples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/cliquet/mcperformanceengine.hpp" line="91" column="33" bodyfile="ql/pricingengines/cliquet/mcperformanceengine.hpp" bodystart="205" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_performance_engine_1ab2d32e8183385df2b4fbc0c34c318537" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_performance_engine" kindref="compound">MakeMCPerformanceEngine</ref> &amp;</type>
        <definition>MakeMCPerformanceEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCPerformanceEngine&lt; RNG, S &gt;::withAbsoluteTolerance</definition>
        <argsstring>(Real tolerance)</argsstring>
        <name>withAbsoluteTolerance</name>
        <qualifiedname>QuantLib::MakeMCPerformanceEngine::withAbsoluteTolerance</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/cliquet/mcperformanceengine.hpp" line="92" column="33" bodyfile="ql/pricingengines/cliquet/mcperformanceengine.hpp" bodystart="214" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_performance_engine_1ad66fa096faea16e6d5bb5d163fec68cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_performance_engine" kindref="compound">MakeMCPerformanceEngine</ref> &amp;</type>
        <definition>MakeMCPerformanceEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCPerformanceEngine&lt; RNG, S &gt;::withMaxSamples</definition>
        <argsstring>(Size samples)</argsstring>
        <name>withMaxSamples</name>
        <qualifiedname>QuantLib::MakeMCPerformanceEngine::withMaxSamples</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>samples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/cliquet/mcperformanceengine.hpp" line="93" column="33" bodyfile="ql/pricingengines/cliquet/mcperformanceengine.hpp" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_performance_engine_1a3debb120cc61f4cb6933da8d57d7a727" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_make_m_c_performance_engine" kindref="compound">MakeMCPerformanceEngine</ref> &amp;</type>
        <definition>MakeMCPerformanceEngine&lt; RNG, S &gt; &amp; QuantLib::MakeMCPerformanceEngine&lt; RNG, S &gt;::withSeed</definition>
        <argsstring>(BigNatural seed)</argsstring>
        <name>withSeed</name>
        <qualifiedname>QuantLib::MakeMCPerformanceEngine::withSeed</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a9fbc8c414c2b597d214cca2f9e914740" kindref="member">BigNatural</ref></type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/cliquet/mcperformanceengine.hpp" line="94" column="33" bodyfile="ql/pricingengines/cliquet/mcperformanceengine.hpp" bodystart="233" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_make_m_c_performance_engine_1a406b0c5928ac350f7e1d008915b54124" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::MakeMCPerformanceEngine&lt; RNG, S &gt;::operator ext::shared_ptr&lt; PricingEngine &gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator ext::shared_ptr&lt; PricingEngine &gt;</name>
        <qualifiedname>QuantLib::MakeMCPerformanceEngine::shared_ptr&lt; PricingEngine &gt;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/cliquet/mcperformanceengine.hpp" line="96" column="9" bodyfile="ql/pricingengines/cliquet/mcperformanceengine.hpp" bodystart="240" bodyend="250"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Monte Carlo performance-option engine factory. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ql/pricingengines/cliquet/mcperformanceengine.hpp" line="85" column="5" bodyfile="ql/pricingengines/cliquet/mcperformanceengine.hpp" bodystart="85" bodyend="103"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_make_m_c_performance_engine_1aa560b43da3f4edfd752895054e6628f8" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCPerformanceEngine</scope><name>antithetic_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_performance_engine_1ab5b95cd434c45050c3fd9974ef74cb2c" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCPerformanceEngine</scope><name>brownianBridge_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_performance_engine_1a3b1e633066c0eb6cf3a603db056c0a71" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCPerformanceEngine</scope><name>MakeMCPerformanceEngine</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_performance_engine_1ad9dde5d382f768d1fd85374c2eaf9f4e" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCPerformanceEngine</scope><name>maxSamples_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_performance_engine_1a406b0c5928ac350f7e1d008915b54124" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCPerformanceEngine</scope><name>operator ext::shared_ptr&lt; PricingEngine &gt;</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_performance_engine_1a0e05ab930537599a712ae1d8ed58a58f" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCPerformanceEngine</scope><name>process_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_performance_engine_1a9327a24cc5829f5fce8487b5a452f9ff" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCPerformanceEngine</scope><name>samples_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_performance_engine_1aa8f4f226f4b23a37c7ead77513473299" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCPerformanceEngine</scope><name>seed_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_performance_engine_1ace2e3edae80b1797ae56b4b371107f89" prot="private" virt="non-virtual"><scope>QuantLib::MakeMCPerformanceEngine</scope><name>tolerance_</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_performance_engine_1ab2d32e8183385df2b4fbc0c34c318537" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCPerformanceEngine</scope><name>withAbsoluteTolerance</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_performance_engine_1a51ff21b2d2cbe5a7d30fb19ba652e729" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCPerformanceEngine</scope><name>withAntitheticVariate</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_performance_engine_1a346f4645bb5f8f29e97c31e9780108dc" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCPerformanceEngine</scope><name>withBrownianBridge</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_performance_engine_1ad66fa096faea16e6d5bb5d163fec68cb" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCPerformanceEngine</scope><name>withMaxSamples</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_performance_engine_1a87b5edf84e1ed76af696de528f8640e7" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCPerformanceEngine</scope><name>withSamples</name></member>
      <member refid="class_quant_lib_1_1_make_m_c_performance_engine_1a3debb120cc61f4cb6933da8d57d7a727" prot="public" virt="non-virtual"><scope>QuantLib::MakeMCPerformanceEngine</scope><name>withSeed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
