<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_analytic_barrier_engine" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::AnalyticBarrierEngine</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_barrier_option_1_1engine" prot="public" virt="non-virtual">QuantLib::BarrierOption::engine</basecompoundref>
    <includes refid="analyticbarrierengine_8hpp" local="no">analyticbarrierengine.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_barrier_engine_1a875ddcd50b9eccf46f0ea5aa25837e7a" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;GeneralizedBlackScholesProcess&gt; QuantLib::AnalyticBarrierEngine::process_</definition>
        <argsstring></argsstring>
        <name>process_</name>
        <qualifiedname>QuantLib::AnalyticBarrierEngine::process_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticbarrierengine.hpp" line="52" column="25" bodyfile="ql/pricingengines/barrier/analyticbarrierengine.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_barrier_engine_1a5fb5e8975e680ae82262d0f1231a44a4" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_cumulative_normal_distribution" kindref="compound">CumulativeNormalDistribution</ref></type>
        <definition>CumulativeNormalDistribution QuantLib::AnalyticBarrierEngine::f_</definition>
        <argsstring></argsstring>
        <name>f_</name>
        <qualifiedname>QuantLib::AnalyticBarrierEngine::f_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticbarrierengine.hpp" line="53" column="38" bodyfile="ql/pricingengines/barrier/analyticbarrierengine.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_barrier_engine_1ab010f4949557d16d9a6eba22860d5178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::AnalyticBarrierEngine::AnalyticBarrierEngine</definition>
        <argsstring>(ext::shared_ptr&lt; GeneralizedBlackScholesProcess &gt; process)</argsstring>
        <name>AnalyticBarrierEngine</name>
        <qualifiedname>QuantLib::AnalyticBarrierEngine::AnalyticBarrierEngine</qualifiedname>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt;</type>
          <declname>process</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticbarrierengine.hpp" line="48" column="9" bodyfile="ql/pricingengines/barrier/analyticbarrierengine.cpp" bodystart="30" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_barrier_engine_1a8d1eed8a51da656c7d9f11e19184436a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::AnalyticBarrierEngine::calculate</definition>
        <argsstring>() const override</argsstring>
        <name>calculate</name>
        <qualifiedname>QuantLib::AnalyticBarrierEngine::calculate</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_pricing_engine_1ad2be11cff80d9792f0cc8231711fcb06">calculate</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticbarrierengine.hpp" line="49" column="14" bodyfile="ql/pricingengines/barrier/analyticbarrierengine.cpp" bodystart="36" bodyend="114"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_barrier_engine_1aa83e6c3a62938ab0348558620c509e9c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticBarrierEngine::underlying</definition>
        <argsstring>() const</argsstring>
        <name>underlying</name>
        <qualifiedname>QuantLib::AnalyticBarrierEngine::underlying</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticbarrierengine.hpp" line="55" column="14" bodyfile="ql/pricingengines/barrier/analyticbarrierengine.cpp" bodystart="117" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_barrier_engine_1afed1b37997d0ca0e695e31fb4c7d1493" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticBarrierEngine::strike</definition>
        <argsstring>() const</argsstring>
        <name>strike</name>
        <qualifiedname>QuantLib::AnalyticBarrierEngine::strike</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticbarrierengine.hpp" line="56" column="14" bodyfile="ql/pricingengines/barrier/analyticbarrierengine.cpp" bodystart="121" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_barrier_engine_1abab2f014cff67cf76183385df888c265" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref></type>
        <definition>Volatility QuantLib::AnalyticBarrierEngine::volatility</definition>
        <argsstring>() const</argsstring>
        <name>volatility</name>
        <qualifiedname>QuantLib::AnalyticBarrierEngine::volatility</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticbarrierengine.hpp" line="57" column="20" bodyfile="ql/pricingengines/barrier/analyticbarrierengine.cpp" bodystart="128" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_barrier_engine_1a6f5ac8778b38eafd296e6bee1707318d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticBarrierEngine::barrier</definition>
        <argsstring>() const</argsstring>
        <name>barrier</name>
        <qualifiedname>QuantLib::AnalyticBarrierEngine::barrier</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticbarrierengine.hpp" line="58" column="14" bodyfile="ql/pricingengines/barrier/analyticbarrierengine.cpp" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_barrier_engine_1aa31035a08cab39c1ceca33159310ac11" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticBarrierEngine::rebate</definition>
        <argsstring>() const</argsstring>
        <name>rebate</name>
        <qualifiedname>QuantLib::AnalyticBarrierEngine::rebate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticbarrierengine.hpp" line="59" column="14" bodyfile="ql/pricingengines/barrier/analyticbarrierengine.cpp" bodystart="144" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_barrier_engine_1af90428233e1757cd987d7a08b54015a0" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticBarrierEngine::stdDeviation</definition>
        <argsstring>() const</argsstring>
        <name>stdDeviation</name>
        <qualifiedname>QuantLib::AnalyticBarrierEngine::stdDeviation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticbarrierengine.hpp" line="60" column="14" bodyfile="ql/pricingengines/barrier/analyticbarrierengine.cpp" bodystart="134" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_barrier_engine_1ad10fc5787c837023139404643bad340d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::AnalyticBarrierEngine::riskFreeRate</definition>
        <argsstring>() const</argsstring>
        <name>riskFreeRate</name>
        <qualifiedname>QuantLib::AnalyticBarrierEngine::riskFreeRate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticbarrierengine.hpp" line="61" column="14" bodyfile="ql/pricingengines/barrier/analyticbarrierengine.cpp" bodystart="148" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_barrier_engine_1a42b4eda2a2543557374d54c62618553e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a05e8e288a4bdedfe5b4e16d8cec14f1c" kindref="member">DiscountFactor</ref></type>
        <definition>DiscountFactor QuantLib::AnalyticBarrierEngine::riskFreeDiscount</definition>
        <argsstring>() const</argsstring>
        <name>riskFreeDiscount</name>
        <qualifiedname>QuantLib::AnalyticBarrierEngine::riskFreeDiscount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticbarrierengine.hpp" line="62" column="24" bodyfile="ql/pricingengines/barrier/analyticbarrierengine.cpp" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_barrier_engine_1a8953d3cfa9f032d260bef312b08190ff" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::AnalyticBarrierEngine::dividendYield</definition>
        <argsstring>() const</argsstring>
        <name>dividendYield</name>
        <qualifiedname>QuantLib::AnalyticBarrierEngine::dividendYield</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticbarrierengine.hpp" line="63" column="14" bodyfile="ql/pricingengines/barrier/analyticbarrierengine.cpp" bodystart="160" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_barrier_engine_1ac7a49c7206524b0e112aa6735a4dc800" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a05e8e288a4bdedfe5b4e16d8cec14f1c" kindref="member">DiscountFactor</ref></type>
        <definition>DiscountFactor QuantLib::AnalyticBarrierEngine::dividendDiscount</definition>
        <argsstring>() const</argsstring>
        <name>dividendDiscount</name>
        <qualifiedname>QuantLib::AnalyticBarrierEngine::dividendDiscount</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticbarrierengine.hpp" line="64" column="24" bodyfile="ql/pricingengines/barrier/analyticbarrierengine.cpp" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_barrier_engine_1a4bc120b6bf290e766b1aa4d85762a64d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::AnalyticBarrierEngine::mu</definition>
        <argsstring>() const</argsstring>
        <name>mu</name>
        <qualifiedname>QuantLib::AnalyticBarrierEngine::mu</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticbarrierengine.hpp" line="65" column="14" bodyfile="ql/pricingengines/barrier/analyticbarrierengine.cpp" bodystart="172" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_barrier_engine_1a58c360515c1d6cb8e07a6c63d4c24bbf" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticBarrierEngine::muSigma</definition>
        <argsstring>() const</argsstring>
        <name>muSigma</name>
        <qualifiedname>QuantLib::AnalyticBarrierEngine::muSigma</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticbarrierengine.hpp" line="66" column="14" bodyfile="ql/pricingengines/barrier/analyticbarrierengine.cpp" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_barrier_engine_1a274eb2ab04390c45898cdd0190b39cb8" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticBarrierEngine::A</definition>
        <argsstring>(Real phi) const</argsstring>
        <name>A</name>
        <qualifiedname>QuantLib::AnalyticBarrierEngine::A</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>phi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticbarrierengine.hpp" line="67" column="14" bodyfile="ql/pricingengines/barrier/analyticbarrierengine.cpp" bodystart="181" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_barrier_engine_1a1c697265cdadf10e867558078fa17bf1" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticBarrierEngine::B</definition>
        <argsstring>(Real phi) const</argsstring>
        <name>B</name>
        <qualifiedname>QuantLib::AnalyticBarrierEngine::B</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>phi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticbarrierengine.hpp" line="68" column="14" bodyfile="ql/pricingengines/barrier/analyticbarrierengine.cpp" bodystart="191" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_barrier_engine_1a02831c1de596eb06d6628065bb44ed19" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticBarrierEngine::C</definition>
        <argsstring>(Real eta, Real phi) const</argsstring>
        <name>C</name>
        <qualifiedname>QuantLib::AnalyticBarrierEngine::C</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>eta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>phi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticbarrierengine.hpp" line="69" column="14" bodyfile="ql/pricingengines/barrier/analyticbarrierengine.cpp" bodystart="200" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_barrier_engine_1ab28496a57957b6c2f116720cc47dc05a" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticBarrierEngine::D</definition>
        <argsstring>(Real eta, Real phi) const</argsstring>
        <name>D</name>
        <qualifiedname>QuantLib::AnalyticBarrierEngine::D</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>eta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>phi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticbarrierengine.hpp" line="70" column="14" bodyfile="ql/pricingengines/barrier/analyticbarrierengine.cpp" bodystart="213" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_barrier_engine_1a13bc2c2daea277d2031464dd96b939e0" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticBarrierEngine::E</definition>
        <argsstring>(Real eta) const</argsstring>
        <name>E</name>
        <qualifiedname>QuantLib::AnalyticBarrierEngine::E</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>eta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticbarrierengine.hpp" line="71" column="14" bodyfile="ql/pricingengines/barrier/analyticbarrierengine.cpp" bodystart="226" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_barrier_engine_1ad252f85e81f94397deba5e74a33375d7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticBarrierEngine::F</definition>
        <argsstring>(Real eta) const</argsstring>
        <name>F</name>
        <qualifiedname>QuantLib::AnalyticBarrierEngine::F</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>eta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analyticbarrierengine.hpp" line="72" column="14" bodyfile="ql/pricingengines/barrier/analyticbarrierengine.cpp" bodystart="243" bodyend="264"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Pricing engine for barrier options using analytical formulae. </para>
    </briefdescription>
    <detaileddescription>
<para>The formulas are taken from &quot;Option pricing formulas&quot;, E.G. Haug, McGraw-Hill, p.69 and following.</para>
<para><xrefsect id="test_1_test000101"><xreftitle>Test</xreftitle><xrefdescription><para>the correctness of the returned value is tested by reproducing results available in literature. </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::AnalyticBarrierEngine</label>
        <link refid="class_quant_lib_1_1_analytic_barrier_engine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::BarrierOption::engine</label>
        <link refid="class_quant_lib_1_1_barrier_option_1_1engine"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::GenericEngine&lt; BarrierOption::arguments, BarrierOption::results &gt;</label>
        <link refid="class_quant_lib_1_1_generic_engine"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="6">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="4">
        <label>QuantLib::PricingEngine</label>
        <link refid="class_quant_lib_1_1_pricing_engine"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8">
        <label>OneAssetOption::arguments</label>
      </node>
      <node id="1">
        <label>QuantLib::AnalyticBarrierEngine</label>
        <link refid="class_quant_lib_1_1_analytic_barrier_engine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::BarrierOption::arguments</label>
        <link refid="class_quant_lib_1_1_barrier_option_1_1arguments"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::BarrierOption::engine</label>
        <link refid="class_quant_lib_1_1_barrier_option_1_1engine"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::GenericEngine&lt; BarrierOption::arguments, BarrierOption::results &gt;</label>
        <link refid="class_quant_lib_1_1_generic_engine"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>arguments_</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="6">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="4">
        <label>QuantLib::PricingEngine</label>
        <link refid="class_quant_lib_1_1_pricing_engine"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/pricingengines/barrier/analyticbarrierengine.hpp" line="46" column="5" bodyfile="ql/pricingengines/barrier/analyticbarrierengine.hpp" bodystart="46" bodyend="73"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_analytic_barrier_engine_1a274eb2ab04390c45898cdd0190b39cb8" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>A</name></member>
      <member refid="class_quant_lib_1_1_analytic_barrier_engine_1ab010f4949557d16d9a6eba22860d5178" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>AnalyticBarrierEngine</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1ad2371cdbafa1989afb0e4733b1212c0d" prot="protected" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>arguments_</name></member>
      <member refid="class_quant_lib_1_1_analytic_barrier_engine_1a1c697265cdadf10e867558078fa17bf1" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>B</name></member>
      <member refid="class_quant_lib_1_1_analytic_barrier_engine_1a6f5ac8778b38eafd296e6bee1707318d" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>barrier</name></member>
      <member refid="class_quant_lib_1_1_analytic_barrier_engine_1a02831c1de596eb06d6628065bb44ed19" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>C</name></member>
      <member refid="class_quant_lib_1_1_analytic_barrier_engine_1a8d1eed8a51da656c7d9f11e19184436a" prot="public" virt="virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_analytic_barrier_engine_1ab28496a57957b6c2f116720cc47dc05a" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>D</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_analytic_barrier_engine_1ac7a49c7206524b0e112aa6735a4dc800" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>dividendDiscount</name></member>
      <member refid="class_quant_lib_1_1_analytic_barrier_engine_1a8953d3cfa9f032d260bef312b08190ff" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>dividendYield</name></member>
      <member refid="class_quant_lib_1_1_analytic_barrier_engine_1a13bc2c2daea277d2031464dd96b939e0" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>E</name></member>
      <member refid="class_quant_lib_1_1_analytic_barrier_engine_1ad252f85e81f94397deba5e74a33375d7" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>F</name></member>
      <member refid="class_quant_lib_1_1_analytic_barrier_engine_1a5fb5e8975e680ae82262d0f1231a44a4" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>f_</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1ad9c6e8dc65ca072d5e6e17640d74db3e" prot="public" virt="virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>getArguments</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1aea8272ef6e5e0ea1cffadfed0454fa88" prot="public" virt="virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>getResults</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_analytic_barrier_engine_1a4bc120b6bf290e766b1aa4d85762a64d" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>mu</name></member>
      <member refid="class_quant_lib_1_1_analytic_barrier_engine_1a58c360515c1d6cb8e07a6c63d4c24bbf" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>muSigma</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::AnalyticBarrierEngine</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::AnalyticBarrierEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::AnalyticBarrierEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::AnalyticBarrierEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_analytic_barrier_engine_1a875ddcd50b9eccf46f0ea5aa25837e7a" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>process_</name></member>
      <member refid="class_quant_lib_1_1_analytic_barrier_engine_1aa31035a08cab39c1ceca33159310ac11" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>rebate</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1a81c5390ba1e713e57ca87d5f841d37f2" prot="public" virt="virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>reset</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1a41281f2ea4990dbce90be1f9f2e231f6" prot="protected" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>results_</name></member>
      <member refid="class_quant_lib_1_1_analytic_barrier_engine_1a42b4eda2a2543557374d54c62618553e" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>riskFreeDiscount</name></member>
      <member refid="class_quant_lib_1_1_analytic_barrier_engine_1ad10fc5787c837023139404643bad340d" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>riskFreeRate</name></member>
      <member refid="class_quant_lib_1_1_analytic_barrier_engine_1af90428233e1757cd987d7a08b54015a0" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>stdDeviation</name></member>
      <member refid="class_quant_lib_1_1_analytic_barrier_engine_1afed1b37997d0ca0e695e31fb4c7d1493" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>strike</name></member>
      <member refid="class_quant_lib_1_1_barrier_option_1_1engine_1a1eb25f58b0553b862aa3fabd89ad6e5e" prot="protected" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>triggered</name></member>
      <member refid="class_quant_lib_1_1_analytic_barrier_engine_1aa83e6c3a62938ab0348558620c509e9c" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>underlying</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1aaf5ef54d9e1abf8b1b50b48804edf3dc" prot="public" virt="virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_analytic_barrier_engine_1abab2f014cff67cf76183385df888c265" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>volatility</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_pricing_engine_1a66b279a54578cd7e60d402e5147eb526" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticBarrierEngine</scope><name>~PricingEngine</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
