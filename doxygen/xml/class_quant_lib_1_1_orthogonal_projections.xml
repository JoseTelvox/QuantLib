<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_orthogonal_projections" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::OrthogonalProjections</compoundname>
    <includes refid="basisincompleteordered_8hpp" local="no">basisincompleteordered.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_orthogonal_projections_1a61636bcafdb902e53fb1997355407b03" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::OrthogonalProjections::originalVectors_</definition>
        <argsstring></argsstring>
        <name>originalVectors_</name>
        <qualifiedname>QuantLib::OrthogonalProjections::originalVectors_</qualifiedname>
        <briefdescription>
<para>inputs </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/basisincompleteordered.hpp" line="70" column="16" bodyfile="ql/math/matrixutilities/basisincompleteordered.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_orthogonal_projections_1a260c951577565fd8c3beab80c263e1b7" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::OrthogonalProjections::multiplierCutoff_</definition>
        <argsstring></argsstring>
        <name>multiplierCutoff_</name>
        <qualifiedname>QuantLib::OrthogonalProjections::multiplierCutoff_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/basisincompleteordered.hpp" line="71" column="14" bodyfile="ql/math/matrixutilities/basisincompleteordered.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_orthogonal_projections_1a9fa528fb06b43f7ceface6a7339cbca2" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::OrthogonalProjections::numberVectors_</definition>
        <argsstring></argsstring>
        <name>numberVectors_</name>
        <qualifiedname>QuantLib::OrthogonalProjections::numberVectors_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/basisincompleteordered.hpp" line="72" column="14" bodyfile="ql/math/matrixutilities/basisincompleteordered.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_orthogonal_projections_1a45a5a209a638ff8f6a5499f13ac7afb8" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::OrthogonalProjections::numberValidVectors_</definition>
        <argsstring></argsstring>
        <name>numberValidVectors_</name>
        <qualifiedname>QuantLib::OrthogonalProjections::numberValidVectors_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/basisincompleteordered.hpp" line="73" column="14" bodyfile="ql/math/matrixutilities/basisincompleteordered.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_orthogonal_projections_1a320208748a08cadbca0cd0d92271369c" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::OrthogonalProjections::dimension_</definition>
        <argsstring></argsstring>
        <name>dimension_</name>
        <qualifiedname>QuantLib::OrthogonalProjections::dimension_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/basisincompleteordered.hpp" line="74" column="14" bodyfile="ql/math/matrixutilities/basisincompleteordered.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_orthogonal_projections_1a8dbea476fab4dfac75ddf820191a9b0d" prot="private" static="no" mutable="no">
        <type>std::valarray&lt; bool &gt;</type>
        <definition>std::valarray&lt;bool&gt; QuantLib::OrthogonalProjections::validVectors_</definition>
        <argsstring></argsstring>
        <name>validVectors_</name>
        <qualifiedname>QuantLib::OrthogonalProjections::validVectors_</qualifiedname>
        <briefdescription>
<para>outputs </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/basisincompleteordered.hpp" line="77" column="23" bodyfile="ql/math/matrixutilities/basisincompleteordered.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_orthogonal_projections_1af9f72e977c609de39f99bb3afc8d940a" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;Real&gt; &gt; QuantLib::OrthogonalProjections::projectedVectors_</definition>
        <argsstring></argsstring>
        <name>projectedVectors_</name>
        <qualifiedname>QuantLib::OrthogonalProjections::projectedVectors_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/basisincompleteordered.hpp" line="78" column="21" bodyfile="ql/math/matrixutilities/basisincompleteordered.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_orthogonal_projections_1adcd5854fd7f7dfc1a57ed60ef00529f0" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::OrthogonalProjections::orthoNormalizedVectors_</definition>
        <argsstring></argsstring>
        <name>orthoNormalizedVectors_</name>
        <qualifiedname>QuantLib::OrthogonalProjections::orthoNormalizedVectors_</qualifiedname>
        <briefdescription>
<para>workspace </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/basisincompleteordered.hpp" line="81" column="16" bodyfile="ql/math/matrixutilities/basisincompleteordered.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_orthogonal_projections_1ad07e116caf609cf1f0ff7d385a38a121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::OrthogonalProjections::OrthogonalProjections</definition>
        <argsstring>(const Matrix &amp;originalVectors, Real multiplierCutOff, Real tolerance)</argsstring>
        <name>OrthogonalProjections</name>
        <qualifiedname>QuantLib::OrthogonalProjections::OrthogonalProjections</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>originalVectors</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>multiplierCutOff</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/basisincompleteordered.hpp" line="57" column="9" bodyfile="ql/math/matrixutilities/basisincompleteordered.cpp" bodystart="111" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_orthogonal_projections_1a79cfd2bfe18e5b1bfe1c0405850afbce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::valarray&lt; bool &gt; &amp;</type>
        <definition>const std::valarray&lt; bool &gt; &amp; QuantLib::OrthogonalProjections::validVectors</definition>
        <argsstring>() const</argsstring>
        <name>validVectors</name>
        <qualifiedname>QuantLib::OrthogonalProjections::validVectors</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/basisincompleteordered.hpp" line="61" column="29" bodyfile="ql/math/matrixutilities/basisincompleteordered.cpp" bodystart="208" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_orthogonal_projections_1a87b911607fae4d0b0df2ff9ee8c318e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; Real &gt; &amp; QuantLib::OrthogonalProjections::GetVector</definition>
        <argsstring>(Size index) const</argsstring>
        <name>GetVector</name>
        <qualifiedname>QuantLib::OrthogonalProjections::GetVector</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/basisincompleteordered.hpp" line="62" column="27" bodyfile="ql/math/matrixutilities/basisincompleteordered.cpp" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_orthogonal_projections_1a6e824995fe82a83a39a35b2a238cde09" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::OrthogonalProjections::numberValidVectors</definition>
        <argsstring>() const</argsstring>
        <name>numberValidVectors</name>
        <qualifiedname>QuantLib::OrthogonalProjections::numberValidVectors</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/matrixutilities/basisincompleteordered.hpp" line="64" column="14" bodyfile="ql/math/matrixutilities/basisincompleteordered.cpp" bodystart="220" bodyend="223"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Given a collection of vectors, w_i, find a collection of vectors x_i such that x_i is orthogonal to w_j for i != j, and &lt;x_i, w_i&gt; = &lt;w_i, w_i&gt;</para>
<para>This is done by performing GramSchmidt on the other vectors and then projecting onto the orthogonal space.</para>
<para>This class is tested in <verbatim>MatricesTest::testOrthogonalProjection();
</verbatim> </para>
    </detaileddescription>
    <location file="ql/math/matrixutilities/basisincompleteordered.hpp" line="54" column="5" bodyfile="ql/math/matrixutilities/basisincompleteordered.hpp" bodystart="55" bodyend="84"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_orthogonal_projections_1a320208748a08cadbca0cd0d92271369c" prot="private" virt="non-virtual"><scope>QuantLib::OrthogonalProjections</scope><name>dimension_</name></member>
      <member refid="class_quant_lib_1_1_orthogonal_projections_1a87b911607fae4d0b0df2ff9ee8c318e0" prot="public" virt="non-virtual"><scope>QuantLib::OrthogonalProjections</scope><name>GetVector</name></member>
      <member refid="class_quant_lib_1_1_orthogonal_projections_1a260c951577565fd8c3beab80c263e1b7" prot="private" virt="non-virtual"><scope>QuantLib::OrthogonalProjections</scope><name>multiplierCutoff_</name></member>
      <member refid="class_quant_lib_1_1_orthogonal_projections_1a6e824995fe82a83a39a35b2a238cde09" prot="public" virt="non-virtual"><scope>QuantLib::OrthogonalProjections</scope><name>numberValidVectors</name></member>
      <member refid="class_quant_lib_1_1_orthogonal_projections_1a45a5a209a638ff8f6a5499f13ac7afb8" prot="private" virt="non-virtual"><scope>QuantLib::OrthogonalProjections</scope><name>numberValidVectors_</name></member>
      <member refid="class_quant_lib_1_1_orthogonal_projections_1a9fa528fb06b43f7ceface6a7339cbca2" prot="private" virt="non-virtual"><scope>QuantLib::OrthogonalProjections</scope><name>numberVectors_</name></member>
      <member refid="class_quant_lib_1_1_orthogonal_projections_1a61636bcafdb902e53fb1997355407b03" prot="private" virt="non-virtual"><scope>QuantLib::OrthogonalProjections</scope><name>originalVectors_</name></member>
      <member refid="class_quant_lib_1_1_orthogonal_projections_1ad07e116caf609cf1f0ff7d385a38a121" prot="public" virt="non-virtual"><scope>QuantLib::OrthogonalProjections</scope><name>OrthogonalProjections</name></member>
      <member refid="class_quant_lib_1_1_orthogonal_projections_1adcd5854fd7f7dfc1a57ed60ef00529f0" prot="private" virt="non-virtual"><scope>QuantLib::OrthogonalProjections</scope><name>orthoNormalizedVectors_</name></member>
      <member refid="class_quant_lib_1_1_orthogonal_projections_1af9f72e977c609de39f99bb3afc8d940a" prot="private" virt="non-virtual"><scope>QuantLib::OrthogonalProjections</scope><name>projectedVectors_</name></member>
      <member refid="class_quant_lib_1_1_orthogonal_projections_1a79cfd2bfe18e5b1bfe1c0405850afbce" prot="public" virt="non-virtual"><scope>QuantLib::OrthogonalProjections</scope><name>validVectors</name></member>
      <member refid="class_quant_lib_1_1_orthogonal_projections_1a8dbea476fab4dfac75ddf820191a9b0d" prot="private" virt="non-virtual"><scope>QuantLib::OrthogonalProjections</scope><name>validVectors_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
