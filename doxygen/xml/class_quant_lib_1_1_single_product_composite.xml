<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_single_product_composite" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::SingleProductComposite</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_market_model_composite" prot="public" virt="non-virtual">QuantLib::MarketModelComposite</basecompoundref>
    <includes refid="singleproductcomposite_8hpp" local="no">singleproductcomposite.hpp</includes>
    <sectiondef kind="user-defined">
      <header>MarketModelMultiProduct interface</header>
      <memberdef kind="function" id="class_quant_lib_1_1_single_product_composite_1addb324e7183f94aad3b5c906511dddfc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::SingleProductComposite::numberOfProducts</definition>
        <argsstring>() const override</argsstring>
        <name>numberOfProducts</name>
        <qualifiedname>QuantLib::SingleProductComposite::numberOfProducts</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_market_model_multi_product_1a2dede52d7bff85221b39246ac4b2b08f">numberOfProducts</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/products/singleproductcomposite.hpp" line="37" column="14" bodyfile="ql/models/marketmodels/products/singleproductcomposite.cpp" bodystart="24" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_single_product_composite_1a1da7046aa809ad95f3c653c84a7b5c0c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::SingleProductComposite::maxNumberOfCashFlowsPerProductPerStep</definition>
        <argsstring>() const override</argsstring>
        <name>maxNumberOfCashFlowsPerProductPerStep</name>
        <qualifiedname>QuantLib::SingleProductComposite::maxNumberOfCashFlowsPerProductPerStep</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_market_model_multi_product_1a12e6d1142856abb37586473cbcd2d4a1">maxNumberOfCashFlowsPerProductPerStep</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/products/singleproductcomposite.hpp" line="38" column="14" bodyfile="ql/models/marketmodels/products/singleproductcomposite.cpp" bodystart="29" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_single_product_composite_1a66b2386585db2d09834d6e93202fde6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool QuantLib::SingleProductComposite::nextTimeStep</definition>
        <argsstring>(const CurveState &amp;currentState, std::vector&lt; Size &gt; &amp;numberCashFlowsThisStep, std::vector&lt; std::vector&lt; CashFlow &gt; &gt; &amp;cashFlowsGenerated) override</argsstring>
        <name>nextTimeStep</name>
        <qualifiedname>QuantLib::SingleProductComposite::nextTimeStep</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_market_model_multi_product_1a4f02e7bcdb5c23c431183fb3a499ca28">nextTimeStep</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_curve_state" kindref="compound">CurveState</ref> &amp;</type>
          <declname>currentState</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> &gt; &amp;</type>
          <declname>numberCashFlowsThisStep</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="struct_quant_lib_1_1_market_model_multi_product_1_1_cash_flow" kindref="compound">CashFlow</ref> &gt; &gt; &amp;</type>
          <declname>cashFlowsGenerated</declname>
        </param>
        <briefdescription>
<para>return value indicates whether path is finished, TRUE means done </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/products/singleproductcomposite.hpp" line="39" column="14" bodyfile="ql/models/marketmodels/products/singleproductcomposite.cpp" bodystart="37" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_single_product_composite_1a9b22442d55922dae62b48ebac485131d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="class_quant_lib_1_1_market_model_multi_product" kindref="compound">MarketModelMultiProduct</ref> &gt;</type>
        <definition>std::unique_ptr&lt; MarketModelMultiProduct &gt; QuantLib::SingleProductComposite::clone</definition>
        <argsstring>() const override</argsstring>
        <name>clone</name>
        <qualifiedname>QuantLib::SingleProductComposite::clone</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_market_model_multi_product_1ad4ded115a66268f3e9d92efebbda6ba1">clone</reimplements>
        <briefdescription>
<para>returns a newly-allocated copy of itself </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/marketmodels/products/singleproductcomposite.hpp" line="42" column="25" bodyfile="ql/models/marketmodels/products/singleproductcomposite.cpp" bodystart="74" bodyend="76"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Composition of one or more market-model products. </para>
    </briefdescription>
    <detaileddescription>
<para>Instances of this class build a single market-model product by composing two or more subproducts.</para>
<para><simplesect kind="pre"><para>All subproducts must have the same rate times. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>QuantLib::MarketModelComposite</label>
        <link refid="class_quant_lib_1_1_market_model_composite"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::MarketModelMultiProduct</label>
        <link refid="class_quant_lib_1_1_market_model_multi_product"/>
      </node>
      <node id="1">
        <label>QuantLib::SingleProductComposite</label>
        <link refid="class_quant_lib_1_1_single_product_composite"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>QuantLib::EvolutionDescription</label>
        <link refid="class_quant_lib_1_1_evolution_description"/>
      </node>
      <node id="2">
        <label>QuantLib::MarketModelComposite</label>
        <link refid="class_quant_lib_1_1_market_model_composite"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>evolution_</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::MarketModelMultiProduct</label>
        <link refid="class_quant_lib_1_1_market_model_multi_product"/>
      </node>
      <node id="1">
        <label>QuantLib::SingleProductComposite</label>
        <link refid="class_quant_lib_1_1_single_product_composite"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/models/marketmodels/products/singleproductcomposite.hpp" line="33" column="5" bodyfile="ql/models/marketmodels/products/singleproductcomposite.hpp" bodystart="33" bodyend="44"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_market_model_composite_1a7fb546a63d60babb945d3bac04068d38" prot="public" virt="non-virtual"><scope>QuantLib::SingleProductComposite</scope><name>add</name></member>
      <member refid="class_quant_lib_1_1_market_model_composite_1ac9ad8553fcbdc2f477ed1880853bf3a2" prot="protected" virt="non-virtual"><scope>QuantLib::SingleProductComposite</scope><name>allEvolutionTimes_</name></member>
      <member refid="class_quant_lib_1_1_market_model_composite_1acfcfc49799b96b56b3c20b59b677acd4" prot="protected" virt="non-virtual"><scope>QuantLib::SingleProductComposite</scope><name>cashflowTimes_</name></member>
      <member refid="class_quant_lib_1_1_single_product_composite_1a9b22442d55922dae62b48ebac485131d" prot="public" virt="virtual"><scope>QuantLib::SingleProductComposite</scope><name>clone</name></member>
      <member refid="class_quant_lib_1_1_market_model_composite_1afbf923d2a218c35db6d390b218bbd391" prot="protected" virt="non-virtual"><scope>QuantLib::SingleProductComposite</scope><name>components_</name></member>
      <member refid="class_quant_lib_1_1_market_model_composite_1a460d0d2e3361311d6f6b9b97cdd56f27" prot="protected" virt="non-virtual"><scope>QuantLib::SingleProductComposite</scope><name>const_iterator</name></member>
      <member refid="class_quant_lib_1_1_market_model_composite_1a43bff2b0c49d3c0ccd12ca3ac65c84e0" prot="protected" virt="non-virtual"><scope>QuantLib::SingleProductComposite</scope><name>currentIndex_</name></member>
      <member refid="class_quant_lib_1_1_market_model_composite_1a6684e7fb54e59a07d10d52797fb03669" prot="public" virt="virtual"><scope>QuantLib::SingleProductComposite</scope><name>evolution</name></member>
      <member refid="class_quant_lib_1_1_market_model_composite_1a9184d1dabe486bd22bd4fe54bfa7d634" prot="protected" virt="non-virtual"><scope>QuantLib::SingleProductComposite</scope><name>evolution_</name></member>
      <member refid="class_quant_lib_1_1_market_model_composite_1a7d417de3fc4f724e0475daaf1c7a6a6e" prot="protected" virt="non-virtual"><scope>QuantLib::SingleProductComposite</scope><name>evolutionTimes_</name></member>
      <member refid="class_quant_lib_1_1_market_model_composite_1ac2a805f7801a3077c558a7be2f315ac2" prot="public" virt="non-virtual"><scope>QuantLib::SingleProductComposite</scope><name>finalize</name></member>
      <member refid="class_quant_lib_1_1_market_model_composite_1aae3aff0d2b8c7b91da3e7ba96b2fe350" prot="protected" virt="non-virtual"><scope>QuantLib::SingleProductComposite</scope><name>finalized_</name></member>
      <member refid="class_quant_lib_1_1_market_model_composite_1a5354509687345be1acb241f99fe30399" prot="protected" virt="non-virtual"><scope>QuantLib::SingleProductComposite</scope><name>isInSubset_</name></member>
      <member refid="class_quant_lib_1_1_market_model_composite_1a3cb0a4b683d3ef0cf82383b7de42355b" prot="public" virt="non-virtual"><scope>QuantLib::SingleProductComposite</scope><name>item</name></member>
      <member refid="class_quant_lib_1_1_market_model_composite_1a1eca0e479be5d1d3b16e2fe71b508803" prot="public" virt="non-virtual"><scope>QuantLib::SingleProductComposite</scope><name>item</name></member>
      <member refid="class_quant_lib_1_1_market_model_composite_1a0d9863e29c00aaf10400195801c99324" prot="protected" virt="non-virtual"><scope>QuantLib::SingleProductComposite</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_market_model_composite_1a7a6f950d1cb4bdb3b19e8d911f7326b6" prot="public" virt="non-virtual"><scope>QuantLib::SingleProductComposite</scope><name>MarketModelComposite</name></member>
      <member refid="class_quant_lib_1_1_single_product_composite_1a1da7046aa809ad95f3c653c84a7b5c0c" prot="public" virt="virtual"><scope>QuantLib::SingleProductComposite</scope><name>maxNumberOfCashFlowsPerProductPerStep</name></member>
      <member refid="class_quant_lib_1_1_market_model_composite_1ab5700f97cccd51b1d4c7d2f853f71265" prot="public" virt="non-virtual"><scope>QuantLib::SingleProductComposite</scope><name>multiplier</name></member>
      <member refid="class_quant_lib_1_1_single_product_composite_1a66b2386585db2d09834d6e93202fde6f" prot="public" virt="virtual"><scope>QuantLib::SingleProductComposite</scope><name>nextTimeStep</name></member>
      <member refid="class_quant_lib_1_1_single_product_composite_1addb324e7183f94aad3b5c906511dddfc" prot="public" virt="virtual"><scope>QuantLib::SingleProductComposite</scope><name>numberOfProducts</name></member>
      <member refid="class_quant_lib_1_1_market_model_composite_1a6318616c25735f38760083c3b6c8c4fd" prot="public" virt="virtual"><scope>QuantLib::SingleProductComposite</scope><name>possibleCashFlowTimes</name></member>
      <member refid="class_quant_lib_1_1_market_model_composite_1a7fc110a44812193fcc75e81d489f00ab" prot="protected" virt="non-virtual"><scope>QuantLib::SingleProductComposite</scope><name>rateTimes_</name></member>
      <member refid="class_quant_lib_1_1_market_model_composite_1aeb57800038078e9800939b1f03998b60" prot="public" virt="virtual"><scope>QuantLib::SingleProductComposite</scope><name>reset</name></member>
      <member refid="class_quant_lib_1_1_market_model_composite_1a84ef03dc6e0184be87d46a5e2bdf3f91" prot="public" virt="non-virtual"><scope>QuantLib::SingleProductComposite</scope><name>size</name></member>
      <member refid="class_quant_lib_1_1_market_model_composite_1a1cb5f06ce84dba8fadeef7713d1ac31f" prot="public" virt="non-virtual"><scope>QuantLib::SingleProductComposite</scope><name>subtract</name></member>
      <member refid="class_quant_lib_1_1_market_model_composite_1aa734ae17509efc7a22ccac0bf507ff8a" prot="public" virt="virtual"><scope>QuantLib::SingleProductComposite</scope><name>suggestedNumeraires</name></member>
      <member refid="class_quant_lib_1_1_market_model_multi_product_1ac7c964a1ca915e17b72f560e1dc52883" prot="public" virt="virtual"><scope>QuantLib::SingleProductComposite</scope><name>~MarketModelMultiProduct</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
