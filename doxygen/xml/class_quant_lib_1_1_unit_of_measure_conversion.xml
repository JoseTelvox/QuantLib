<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_unit_of_measure_conversion" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::UnitOfMeasureConversion</compoundname>
    <innerclass refid="struct_quant_lib_1_1_unit_of_measure_conversion_1_1_data" prot="protected">QuantLib::UnitOfMeasureConversion::Data</innerclass>
    <sectiondef kind="user-defined">
      <header>Utility methods</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_unit_of_measure_conversion_1aec1a901e59e6fc579d64a921ce41403f" prot="protected" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="struct_quant_lib_1_1_unit_of_measure_conversion_1_1_data" kindref="compound">Data</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;Data&gt; QuantLib::UnitOfMeasureConversion::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <qualifiedname>QuantLib::UnitOfMeasureConversion::data_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/unitofmeasureconversion.hpp" line="83" column="25" bodyfile="ql/experimental/commodities/unitofmeasureconversion.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_unit_of_measure_conversion_1a5738f69e07393dc6eeb1310350c0f785" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref></type>
        <definition>Quantity QuantLib::UnitOfMeasureConversion::convert</definition>
        <argsstring>(const Quantity &amp;quantity) const</argsstring>
        <name>convert</name>
        <qualifiedname>QuantLib::UnitOfMeasureConversion::convert</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_quantity" kindref="compound">Quantity</ref> &amp;</type>
          <declname>quantity</declname>
        </param>
        <briefdescription>
<para>apply the conversion factor to a cash amount </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/unitofmeasureconversion.hpp" line="73" column="18" bodyfile="ql/experimental/commodities/unitofmeasureconversion.cpp" bodystart="61" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_unit_of_measure_conversion_1a3892617c476751e824ea474fb4a63f31" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_unit_of_measure_conversion" kindref="compound">UnitOfMeasureConversion</ref></type>
        <definition>UnitOfMeasureConversion QuantLib::UnitOfMeasureConversion::chain</definition>
        <argsstring>(const UnitOfMeasureConversion &amp;r1, const UnitOfMeasureConversion &amp;r2)</argsstring>
        <name>chain</name>
        <qualifiedname>QuantLib::UnitOfMeasureConversion::chain</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_unit_of_measure_conversion" kindref="compound">UnitOfMeasureConversion</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_unit_of_measure_conversion" kindref="compound">UnitOfMeasureConversion</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
<para>chain two conversion factors </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/unitofmeasureconversion.hpp" line="75" column="40" bodyfile="ql/experimental/commodities/unitofmeasureconversion.cpp" bodystart="94" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_unit_of_measure_conversion_1a1df4e5abee4a3810f4300a35e9db051c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::UnitOfMeasureConversion::UnitOfMeasureConversion</definition>
        <argsstring>(const UnitOfMeasureConversion &amp;r1, const UnitOfMeasureConversion &amp;r2)</argsstring>
        <name>UnitOfMeasureConversion</name>
        <qualifiedname>QuantLib::UnitOfMeasureConversion::UnitOfMeasureConversion</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_unit_of_measure_conversion" kindref="compound">UnitOfMeasureConversion</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_unit_of_measure_conversion" kindref="compound">UnitOfMeasureConversion</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/unitofmeasureconversion.hpp" line="79" column="9" bodyfile="ql/experimental/commodities/unitofmeasureconversion.cpp" bodystart="38" bodyend="43"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Constructors</header>
      <memberdef kind="function" id="class_quant_lib_1_1_unit_of_measure_conversion_1a3769d5a2d98ad9bbec2171f3a6558a94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::UnitOfMeasureConversion::UnitOfMeasureConversion</definition>
        <argsstring>()=default</argsstring>
        <name>UnitOfMeasureConversion</name>
        <qualifiedname>QuantLib::UnitOfMeasureConversion::UnitOfMeasureConversion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/unitofmeasureconversion.hpp" line="43" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_unit_of_measure_conversion_1ae64e2ee1bec26624bf79ceb6ccb0cf38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::UnitOfMeasureConversion::UnitOfMeasureConversion</definition>
        <argsstring>(const CommodityType &amp;commodityType, const UnitOfMeasure &amp;source, const UnitOfMeasure &amp;target, Real conversionFactor)</argsstring>
        <name>UnitOfMeasureConversion</name>
        <qualifiedname>QuantLib::UnitOfMeasureConversion::UnitOfMeasureConversion</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref> &amp;</type>
          <declname>commodityType</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>conversionFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the conversionFactor <formula id="26">$ r $</formula> is given with the convention that a unit of the source is worth <formula id="26">$ r $</formula> units of the target. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/unitofmeasureconversion.hpp" line="48" column="9" bodyfile="ql/experimental/commodities/unitofmeasureconversion.cpp" bodystart="28" bodyend="36"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Inspectors</header>
      <memberdef kind="function" id="class_quant_lib_1_1_unit_of_measure_conversion_1a7fda925f19bded76b3ed9494d26e46eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref> &amp;</type>
        <definition>const UnitOfMeasure &amp; QuantLib::UnitOfMeasureConversion::source</definition>
        <argsstring>() const</argsstring>
        <name>source</name>
        <qualifiedname>QuantLib::UnitOfMeasureConversion::source</qualifiedname>
        <briefdescription>
<para>the source UOM. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/unitofmeasureconversion.hpp" line="57" column="29" bodyfile="ql/experimental/commodities/unitofmeasureconversion.hpp" bodystart="112" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_unit_of_measure_conversion_1a4c083c9b0df6527fe3022bac65bb8175" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_unit_of_measure" kindref="compound">UnitOfMeasure</ref> &amp;</type>
        <definition>const UnitOfMeasure &amp; QuantLib::UnitOfMeasureConversion::target</definition>
        <argsstring>() const</argsstring>
        <name>target</name>
        <qualifiedname>QuantLib::UnitOfMeasureConversion::target</qualifiedname>
        <briefdescription>
<para>the target UOM. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/unitofmeasureconversion.hpp" line="59" column="29" bodyfile="ql/experimental/commodities/unitofmeasureconversion.hpp" bodystart="116" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_unit_of_measure_conversion_1acf46ba5ba31444f286128a1f77533e0e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_commodity_type" kindref="compound">CommodityType</ref> &amp;</type>
        <definition>const CommodityType &amp; QuantLib::UnitOfMeasureConversion::commodityType</definition>
        <argsstring>() const</argsstring>
        <name>commodityType</name>
        <qualifiedname>QuantLib::UnitOfMeasureConversion::commodityType</qualifiedname>
        <briefdescription>
<para>the commodity type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/unitofmeasureconversion.hpp" line="61" column="29" bodyfile="ql/experimental/commodities/unitofmeasureconversion.hpp" bodystart="108" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_unit_of_measure_conversion_1adbfcd5e20b03721b863902431a8c3203" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_unit_of_measure_conversion_1a5c911acd096256df6a600c7d38d59e4a" kindref="member">Type</ref></type>
        <definition>UnitOfMeasureConversion::Type QuantLib::UnitOfMeasureConversion::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <qualifiedname>QuantLib::UnitOfMeasureConversion::type</qualifiedname>
        <briefdescription>
<para>the type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/unitofmeasureconversion.hpp" line="63" column="14" bodyfile="ql/experimental/commodities/unitofmeasureconversion.hpp" bodystart="124" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_unit_of_measure_conversion_1add4ffeeb3445b54c16acac47b4bda309" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::UnitOfMeasureConversion::conversionFactor</definition>
        <argsstring>() const</argsstring>
        <name>conversionFactor</name>
        <qualifiedname>QuantLib::UnitOfMeasureConversion::conversionFactor</qualifiedname>
        <briefdescription>
<para>the conversion factor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/unitofmeasureconversion.hpp" line="65" column="14" bodyfile="ql/experimental/commodities/unitofmeasureconversion.hpp" bodystart="120" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_unit_of_measure_conversion_1a9894e2b50dbbccd6e529fb7546cedb5b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; QuantLib::UnitOfMeasureConversion::code</definition>
        <argsstring>() const</argsstring>
        <name>code</name>
        <qualifiedname>QuantLib::UnitOfMeasureConversion::code</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/unitofmeasureconversion.hpp" line="67" column="27" bodyfile="ql/experimental/commodities/unitofmeasureconversion.hpp" bodystart="128" bodyend="130"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_quant_lib_1_1_unit_of_measure_conversion_1a5c911acd096256df6a600c7d38d59e4a" prot="public" static="no" strong="no">
        <type></type>
        <name>Type</name>
        <qualifiedname>QuantLib::UnitOfMeasureConversion::Type</qualifiedname>
        <enumvalue id="class_quant_lib_1_1_unit_of_measure_conversion_1a5c911acd096256df6a600c7d38d59e4aaa8fd47341caf24b7cda1b8b65e93a65c" prot="public">
          <name>Direct</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>given directly by the user </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_quant_lib_1_1_unit_of_measure_conversion_1a5c911acd096256df6a600c7d38d59e4aabab4ace6f137a2838bbcc5940f400112" prot="public">
          <name>Derived</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>derived from conversion factors between other uoms </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/commodities/unitofmeasureconversion.hpp" line="37" column="9" bodyfile="ql/experimental/commodities/unitofmeasureconversion.hpp" bodystart="37" bodyend="40"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ql/experimental/commodities/unitofmeasureconversion.hpp" line="35" column="5" bodyfile="ql/experimental/commodities/unitofmeasureconversion.hpp" bodystart="35" bodyend="104"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_unit_of_measure_conversion_1a3892617c476751e824ea474fb4a63f31" prot="public" virt="non-virtual"><scope>QuantLib::UnitOfMeasureConversion</scope><name>chain</name></member>
      <member refid="class_quant_lib_1_1_unit_of_measure_conversion_1a9894e2b50dbbccd6e529fb7546cedb5b" prot="public" virt="non-virtual"><scope>QuantLib::UnitOfMeasureConversion</scope><name>code</name></member>
      <member refid="class_quant_lib_1_1_unit_of_measure_conversion_1acf46ba5ba31444f286128a1f77533e0e" prot="public" virt="non-virtual"><scope>QuantLib::UnitOfMeasureConversion</scope><name>commodityType</name></member>
      <member refid="class_quant_lib_1_1_unit_of_measure_conversion_1add4ffeeb3445b54c16acac47b4bda309" prot="public" virt="non-virtual"><scope>QuantLib::UnitOfMeasureConversion</scope><name>conversionFactor</name></member>
      <member refid="class_quant_lib_1_1_unit_of_measure_conversion_1a5738f69e07393dc6eeb1310350c0f785" prot="public" virt="non-virtual"><scope>QuantLib::UnitOfMeasureConversion</scope><name>convert</name></member>
      <member refid="class_quant_lib_1_1_unit_of_measure_conversion_1aec1a901e59e6fc579d64a921ce41403f" prot="protected" virt="non-virtual"><scope>QuantLib::UnitOfMeasureConversion</scope><name>data_</name></member>
      <member refid="class_quant_lib_1_1_unit_of_measure_conversion_1a5c911acd096256df6a600c7d38d59e4aabab4ace6f137a2838bbcc5940f400112" prot="public" virt="non-virtual"><scope>QuantLib::UnitOfMeasureConversion</scope><name>Derived</name></member>
      <member refid="class_quant_lib_1_1_unit_of_measure_conversion_1a5c911acd096256df6a600c7d38d59e4aaa8fd47341caf24b7cda1b8b65e93a65c" prot="public" virt="non-virtual"><scope>QuantLib::UnitOfMeasureConversion</scope><name>Direct</name></member>
      <member refid="class_quant_lib_1_1_unit_of_measure_conversion_1a7fda925f19bded76b3ed9494d26e46eb" prot="public" virt="non-virtual"><scope>QuantLib::UnitOfMeasureConversion</scope><name>source</name></member>
      <member refid="class_quant_lib_1_1_unit_of_measure_conversion_1a4c083c9b0df6527fe3022bac65bb8175" prot="public" virt="non-virtual"><scope>QuantLib::UnitOfMeasureConversion</scope><name>target</name></member>
      <member refid="class_quant_lib_1_1_unit_of_measure_conversion_1a5c911acd096256df6a600c7d38d59e4a" prot="public" virt="non-virtual"><scope>QuantLib::UnitOfMeasureConversion</scope><name>Type</name></member>
      <member refid="class_quant_lib_1_1_unit_of_measure_conversion_1adbfcd5e20b03721b863902431a8c3203" prot="public" virt="non-virtual"><scope>QuantLib::UnitOfMeasureConversion</scope><name>type</name></member>
      <member refid="class_quant_lib_1_1_unit_of_measure_conversion_1a3769d5a2d98ad9bbec2171f3a6558a94" prot="public" virt="non-virtual"><scope>QuantLib::UnitOfMeasureConversion</scope><name>UnitOfMeasureConversion</name></member>
      <member refid="class_quant_lib_1_1_unit_of_measure_conversion_1ae64e2ee1bec26624bf79ceb6ccb0cf38" prot="public" virt="non-virtual"><scope>QuantLib::UnitOfMeasureConversion</scope><name>UnitOfMeasureConversion</name></member>
      <member refid="class_quant_lib_1_1_unit_of_measure_conversion_1a1df4e5abee4a3810f4300a35e9db051c" prot="protected" virt="non-virtual"><scope>QuantLib::UnitOfMeasureConversion</scope><name>UnitOfMeasureConversion</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
