<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_zabr_interpolated_smile_section" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::ZabrInterpolatedSmileSection</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_smile_section" prot="public" virt="non-virtual">QuantLib::SmileSection</basecompoundref>
    <basecompoundref refid="class_quant_lib_1_1_lazy_object" prot="public" virt="non-virtual">QuantLib::LazyObject</basecompoundref>
    <templateparamlist>
      <param>
        <type>typename Evaluation</type>
      </param>
    </templateparamlist>
    <sectiondef kind="user-defined">
      <header>Inspectors</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1aa4f7d0c090f00cd5482d8de45d4d62a8" prot="protected" static="no" mutable="yes">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_zabr_interpolation" kindref="compound">ZabrInterpolation</ref>&lt; Evaluation &gt; &gt;</type>
        <definition>ext::shared_ptr&lt;ZabrInterpolation&lt;Evaluation&gt; &gt; QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::zabrInterpolation_</definition>
        <argsstring></argsstring>
        <name>zabrInterpolation_</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::zabrInterpolation_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="115" column="29" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1a303c0cd80df00505b7b23fa63a302e26" prot="protected" static="no" mutable="no">
        <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
        <definition>const Handle&lt;Quote&gt; QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::forward_</definition>
        <argsstring></argsstring>
        <name>forward_</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::forward_</qualifiedname>
        <briefdescription>
<para>Market data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="118" column="18" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1a38a3d2b258b8a3a8653fa82f4f3fe7dc" prot="protected" static="no" mutable="no">
        <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
        <definition>const Handle&lt;Quote&gt; QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::atmVolatility_</definition>
        <argsstring></argsstring>
        <name>atmVolatility_</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::atmVolatility_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="119" column="18" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1a0761d6448ce85dc482f8837af20342cc" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &gt;</type>
        <definition>std::vector&lt;Handle&lt;Quote&gt; &gt; QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::volHandles_</definition>
        <argsstring></argsstring>
        <name>volHandles_</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::volHandles_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="120" column="17" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1a8292eb288cbc416828f2e9dbaf25f1d5" prot="protected" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt;</type>
        <definition>std::vector&lt;Rate&gt; QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::strikes_</definition>
        <argsstring></argsstring>
        <name>strikes_</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::strikes_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="121" column="25" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1a488215a15a2f1ebc8dee18b177c39a6f" prot="protected" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt;</type>
        <definition>std::vector&lt;Rate&gt; QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::actualStrikes_</definition>
        <argsstring></argsstring>
        <name>actualStrikes_</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::actualStrikes_</qualifiedname>
        <briefdescription>
<para>Only strikes corresponding to valid market data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="123" column="25" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1ac940d9a31a8ebe6e913b74c23836e186" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::hasFloatingStrikes_</definition>
        <argsstring></argsstring>
        <name>hasFloatingStrikes_</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::hasFloatingStrikes_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="124" column="10" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1a1a7f84d67797fe864fba85910287b54c" prot="protected" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::forwardValue_</definition>
        <argsstring></argsstring>
        <name>forwardValue_</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::forwardValue_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="126" column="18" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1a8a09c433ecdc1adda90186a6fe388fb3" prot="protected" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref> &gt;</type>
        <definition>std::vector&lt;Volatility&gt; QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::vols_</definition>
        <argsstring></argsstring>
        <name>vols_</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::vols_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="127" column="25" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1a2550706a61a797d2e784c968c39d36c6" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::alpha_</definition>
        <argsstring></argsstring>
        <name>alpha_</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::alpha_</qualifiedname>
        <briefdescription>
<para>Sabr parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="129" column="10" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1a1a4497240aa6c1a1c99edb65eae06e01" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::beta_</definition>
        <argsstring></argsstring>
        <name>beta_</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::beta_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="129" column="17" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1afe2ed335e48b7d36b4de1ffe3496e7b0" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::nu_</definition>
        <argsstring></argsstring>
        <name>nu_</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::nu_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="129" column="23" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1aeccb7cf3e864ef7a2cfe2213fc5cafe7" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::rho_</definition>
        <argsstring></argsstring>
        <name>rho_</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::rho_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="129" column="27" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1a2c33f97c5ef87f8fc0c1e50e01b073cd" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::gamma_</definition>
        <argsstring></argsstring>
        <name>gamma_</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::gamma_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="129" column="32" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1adb6630dd5e447cd858730b070990fb04" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::isAlphaFixed_</definition>
        <argsstring></argsstring>
        <name>isAlphaFixed_</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::isAlphaFixed_</qualifiedname>
        <briefdescription>
<para>Sabr interpolation settings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="131" column="10" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1a4992f029ba523ef23046f55a616bc7db" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::isBetaFixed_</definition>
        <argsstring></argsstring>
        <name>isBetaFixed_</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::isBetaFixed_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="131" column="24" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1acdbade2bab4429c22202b17896003221" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::isNuFixed_</definition>
        <argsstring></argsstring>
        <name>isNuFixed_</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::isNuFixed_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="131" column="37" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1a011ba9df8de3caa0e7296ce459626314" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::isRhoFixed_</definition>
        <argsstring></argsstring>
        <name>isRhoFixed_</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::isRhoFixed_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="131" column="48" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1a73525b80eb4d8d4b87c680f24cf3683b" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::isGammaFixed_</definition>
        <argsstring></argsstring>
        <name>isGammaFixed_</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::isGammaFixed_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="131" column="60" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1a530c90048c253a29aee1d57ddcfb5741" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::vegaWeighted_</definition>
        <argsstring></argsstring>
        <name>vegaWeighted_</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::vegaWeighted_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="132" column="10" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1a54fe8d4352372b8319e41e4db1b6ae91" prot="protected" static="no" mutable="no">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref> &gt;</type>
        <definition>const ext::shared_ptr&lt;EndCriteria&gt; QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::endCriteria_</definition>
        <argsstring></argsstring>
        <name>endCriteria_</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::endCriteria_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="133" column="27" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1aee17fdb019feb0368d55f7f962f9948c" prot="protected" static="no" mutable="no">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_optimization_method" kindref="compound">OptimizationMethod</ref> &gt;</type>
        <definition>const ext::shared_ptr&lt;OptimizationMethod&gt; QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::method_</definition>
        <argsstring></argsstring>
        <name>method_</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::method_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="134" column="27" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1a0b6a11278176a6e90015f9ec74803816" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::alpha</definition>
        <argsstring>() const</argsstring>
        <name>alpha</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::alpha</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="102" column="10" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1a644da5fec22ab69023f154374918ee7c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::beta</definition>
        <argsstring>() const</argsstring>
        <name>beta</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::beta</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="103" column="10" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="157" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1ad828a558cfad98b9811facc17b772093" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::nu</definition>
        <argsstring>() const</argsstring>
        <name>nu</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::nu</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="104" column="10" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="163" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1a8b3a5ca632e76b35ae8a0646924d87f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::rho</definition>
        <argsstring>() const</argsstring>
        <name>rho</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::rho</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="105" column="10" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="169" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1a28014f2e7663a9042644be7481a1e3b7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::gamma</definition>
        <argsstring>() const</argsstring>
        <name>gamma</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::gamma</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="106" column="10" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="175" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1aed1d156b881391bcee3f933722f20002" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::rmsError</definition>
        <argsstring>() const</argsstring>
        <name>rmsError</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::rmsError</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="107" column="10" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="181" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1a94aedfc0f5b2b48ea9ff9168595537b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::maxError</definition>
        <argsstring>() const</argsstring>
        <name>maxError</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::maxError</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="108" column="10" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="187" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1a24e94a9bcca7489554a8e60fc99cf71f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>EndCriteria::Type</type>
        <definition>EndCriteria::Type QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::endCriteria</definition>
        <argsstring>() const</argsstring>
        <name>endCriteria</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::endCriteria</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="109" column="23" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1ad3cded8ddcfd961130391578c59795aa" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::createInterpolation</definition>
        <argsstring>() const</argsstring>
        <name>createInterpolation</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::createInterpolation</qualifiedname>
        <briefdescription>
<para>Creates the mutable <ref refid="class_quant_lib_1_1_s_a_b_r_interpolation" kindref="compound">SABRInterpolation</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="114" column="10" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="290" bodyend="298"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Constructors</header>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1a8bc4fbec528ecc625b772b489a588ddc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::ZabrInterpolatedSmileSection</definition>
        <argsstring>(const Date &amp;optionDate, Handle&lt; Quote &gt; forward, const std::vector&lt; Rate &gt; &amp;strikes, bool hasFloatingStrikes, Handle&lt; Quote &gt; atmVolatility, const std::vector&lt; Handle&lt; Quote &gt; &gt; &amp;volHandles, Real alpha, Real beta, Real nu, Real rho, Real gamma, bool isAlphaFixed=false, bool isBetaFixed=false, bool isNuFixed=false, bool isRhoFixed=false, bool isGammaFixed=false, bool vegaWeighted=true, ext::shared_ptr&lt; EndCriteria &gt; endCriteria=ext::shared_ptr&lt; EndCriteria &gt;(), ext::shared_ptr&lt; OptimizationMethod &gt; method=ext::shared_ptr&lt; OptimizationMethod &gt;(), const DayCounter &amp;dc=Actual365Fixed())</argsstring>
        <name>ZabrInterpolatedSmileSection</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::ZabrInterpolatedSmileSection</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>optionDate</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
          <declname>forward</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt; &amp;</type>
          <declname>strikes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hasFloatingStrikes</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
          <declname>atmVolatility</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &gt; &amp;</type>
          <declname>volHandles</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nu</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>rho</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isAlphaFixed</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isBetaFixed</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isNuFixed</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isRhoFixed</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isGammaFixed</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>vegaWeighted</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref> &gt;</type>
          <declname>endCriteria</declname>
          <defval>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref> &gt;()</defval>
        </param>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_optimization_method" kindref="compound">OptimizationMethod</ref> &gt;</type>
          <declname>method</declname>
          <defval>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_optimization_method" kindref="compound">OptimizationMethod</ref> &gt;()</defval>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dc</declname>
          <defval><ref refid="class_quant_lib_1_1_actual365_fixed" kindref="compound">Actual365Fixed</ref>()</defval>
        </param>
        <briefdescription>
<para>all market data are quotes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="43" column="5" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="218" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1a74bc7c7b8ec6dc1573ecea219f0f77b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::ZabrInterpolatedSmileSection</definition>
        <argsstring>(const Date &amp;optionDate, const Rate &amp;forward, const std::vector&lt; Rate &gt; &amp;strikes, bool hasFloatingStrikes, const Volatility &amp;atmVolatility, const std::vector&lt; Volatility &gt; &amp;vols, Real alpha, Real beta, Real nu, Real rho, Real gamma, bool isAlphaFixed=false, bool isBetaFixed=false, bool isNuFixed=false, bool isRhoFixed=false, bool isGammaFixed=false, bool vegaWeighted=true, ext::shared_ptr&lt; EndCriteria &gt; endCriteria=ext::shared_ptr&lt; EndCriteria &gt;(), ext::shared_ptr&lt; OptimizationMethod &gt; method=ext::shared_ptr&lt; OptimizationMethod &gt;(), const DayCounter &amp;dc=Actual365Fixed())</argsstring>
        <name>ZabrInterpolatedSmileSection</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::ZabrInterpolatedSmileSection</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>optionDate</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &amp;</type>
          <declname>forward</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> &gt; &amp;</type>
          <declname>strikes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hasFloatingStrikes</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref> &amp;</type>
          <declname>atmVolatility</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref> &gt; &amp;</type>
          <declname>vols</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>nu</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>rho</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>gamma</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isAlphaFixed</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isBetaFixed</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isNuFixed</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isRhoFixed</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>isGammaFixed</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>vegaWeighted</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref> &gt;</type>
          <declname>endCriteria</declname>
          <defval>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref> &gt;()</defval>
        </param>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_optimization_method" kindref="compound">OptimizationMethod</ref> &gt;</type>
          <declname>method</declname>
          <defval>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_optimization_method" kindref="compound">OptimizationMethod</ref> &gt;()</defval>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;</type>
          <declname>dc</declname>
          <defval><ref refid="class_quant_lib_1_1_actual365_fixed" kindref="compound">Actual365Fixed</ref>()</defval>
        </param>
        <briefdescription>
<para>no quotes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="65" column="5" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="254" bodyend="287"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>LazyObject interface</header>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1aa1705bca7ecb8fb0c6857dc8bb5fc68d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::performCalculations</definition>
        <argsstring>() const override</argsstring>
        <name>performCalculations</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::performCalculations</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_lazy_object_1aafa5583a3743d9f93fa40da5b62e1ff8">performCalculations</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must implement any calculations which must be (re)done in order to calculate the desired results. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="89" column="10" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="301" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1abf32c9aa6f314dd573efbe9e701ec05d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::update</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_smile_section_1adecc5abf2867e2291878329b0256b08a">update</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must be implemented in derived classes. An instance of Observer does not call this method directly: instead, it will be called by the observables the instance registered with when they need to notify any changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="90" column="10" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="138" bodyend="141"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>SmileSection interface</header>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1af19d6ec3f0dbb6961ce03db063657864" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::minStrike</definition>
        <argsstring>() const override</argsstring>
        <name>minStrike</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::minStrike</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_smile_section_1a54bb5cd9f6913f7d69efc85d51af2624">minStrike</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="94" column="10" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1adcfbe4576d247d87a677cbe4e900723d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::maxStrike</definition>
        <argsstring>() const override</argsstring>
        <name>maxStrike</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::maxStrike</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_smile_section_1aa74a46c0a15e98112c1f9afaad9e6604">maxStrike</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="95" column="10" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="206" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1aa53987168b9e32149cb8093c5ac6ad47" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::atmLevel</definition>
        <argsstring>() const override</argsstring>
        <name>atmLevel</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::atmLevel</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_smile_section_1a7ff3d003fcdcf207cde30c3469b6422a">atmLevel</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="96" column="10" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="212" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1a7fb19702b56eb50386a2bac085cf39b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::varianceImpl</definition>
        <argsstring>(Rate strike) const override</argsstring>
        <name>varianceImpl</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::varianceImpl</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_smile_section_1a680162f5de7f231d1ff2b5fb76cfc54a">varianceImpl</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>strike</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="98" column="10" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="325" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_zabr_interpolated_smile_section_1afcfa7e058e4f3cec10f0645b992fcbb1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref></type>
        <definition>Real QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;::volatilityImpl</definition>
        <argsstring>(Rate strike) const override</argsstring>
        <name>volatilityImpl</name>
        <qualifiedname>QuantLib::ZabrInterpolatedSmileSection::volatilityImpl</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_smile_section_1a14bf773bdfb690c9b9e9cbe61f14c2bf">volatilityImpl</reimplements>
        <param>
          <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
          <declname>strike</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="99" column="16" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="145" bodyend="148"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::SmileSection</label>
        <link refid="class_quant_lib_1_1_smile_section"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;</label>
        <link refid="class_quant_lib_1_1_zabr_interpolated_smile_section"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>QuantLib::Handle&lt; QuantLib::Quote &gt;</label>
        <link refid="class_quant_lib_1_1_handle"/>
      </node>
      <node id="5">
        <label>QuantLib::LazyObject</label>
        <link refid="class_quant_lib_1_1_lazy_object"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="2">
        <label>QuantLib::SmileSection</label>
        <link refid="class_quant_lib_1_1_smile_section"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::ZabrInterpolatedSmileSection&lt; Evaluation &gt;</label>
        <link refid="class_quant_lib_1_1_zabr_interpolated_smile_section"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>atmVolatility_</edgelabel>
          <edgelabel>forward_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" line="38" column="1" bodyfile="ql/experimental/volatility/zabrinterpolatedsmilesection.hpp" bodystart="38" bodyend="135"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1a488215a15a2f1ebc8dee18b177c39a6f" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>actualStrikes_</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1a0b6a11278176a6e90015f9ec74803816" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>alpha</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1a2550706a61a797d2e784c968c39d36c6" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>alpha_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a02070ea7442d30625992c1711030d4b8" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>alwaysForward_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a17c9433135a259e4776baec66204a484" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>alwaysForwardNotifications</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1aa53987168b9e32149cb8093c5ac6ad47" prot="public" virt="virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>atmLevel</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1a38a3d2b258b8a3a8653fa82f4f3fe7dc" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>atmVolatility_</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1a644da5fec22ab69023f154374918ee7c" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>beta</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1a1a4497240aa6c1a1c99edb65eae06e01" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>beta_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a5244c7f83592375a0ea9048296435fd1" prot="protected" virt="virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a58b4986a80efa18634483a92c121e26e" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>calculated_</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1ad3cded8ddcfd961130391578c59795aa" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>createInterpolation</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a9d62efde0aa0bc8b6628ab562b5c479d" prot="public" virt="virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>dayCounter</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a3a4e90440ae22c4c9c3e9253b0199a82" prot="public" virt="virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>density</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a9ecdb328b2b90432da8a4429c4d56f06" prot="public" virt="virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>digitalOptionPrice</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1a24e94a9bcca7489554a8e60fc99cf71f" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>endCriteria</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1a54fe8d4352372b8319e41e4db1b6ae91" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>endCriteria_</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1ac9b9e60511fc940cd8d74fbbbcd87b5f" prot="public" virt="virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>exerciseDate</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a7bf1b552a5e93d12631f01a5fa59eb58" prot="public" virt="virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>exerciseTime</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1a303c0cd80df00505b7b23fa63a302e26" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>forward_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1afac6ee19c3107c453e1347dd8000e023" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>forwardFirstNotificationOnly</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1a1a7f84d67797fe864fba85910287b54c" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>forwardValue_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7157f41e83f2c5d924f5c5bafda04d1d" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>freeze</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a7bb721fe00c6854e602758aba629ab77" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>frozen_</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1a28014f2e7663a9042644be7481a1e3b7" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>gamma</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1a2c33f97c5ef87f8fc0c1e50e01b073cd" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>gamma_</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1ac940d9a31a8ebe6e913b74c23836e186" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>hasFloatingStrikes_</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a7fba48f0a4277b91b0d0768d262affdb" prot="protected" virt="virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>initializeExerciseTime</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1adb6630dd5e447cd858730b070990fb04" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>isAlphaFixed_</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1a4992f029ba523ef23046f55a616bc7db" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>isBetaFixed_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a0a7c5d42815a4e16ee2158e24dbfc748" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>isCalculated</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1a73525b80eb4d8d4b87c680f24cf3683b" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>isGammaFixed_</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1acdbade2bab4429c22202b17896003221" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>isNuFixed_</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1a011ba9df8de3caa0e7296ce459626314" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>isRhoFixed_</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a26f18f4ff7faaaebd8eae50e064b493e" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>LazyObject</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1a94aedfc0f5b2b48ea9ff9168595537b6" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>maxError</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1adcfbe4576d247d87a677cbe4e900723d" prot="public" virt="virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>maxStrike</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1aee17fdb019feb0368d55f7f962f9948c" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>method_</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1af19d6ec3f0dbb6961ce03db063657864" prot="public" virt="virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>minStrike</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1ad828a558cfad98b9811facc17b772093" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>nu</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1afe2ed335e48b7d36b4de1ffe3496e7b0" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>nu_</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual" ambiguityscope="QuantLib::SmileSection::"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual" ambiguityscope="QuantLib::SmileSection::"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::SmileSection::"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::SmileSection::QuantLib::Observer::"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1abf5fbad0f8d32a1b644ec3c23927061b" prot="public" virt="virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>optionPrice</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1aa1705bca7ecb8fb0c6857dc8bb5fc68d" prot="public" virt="virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>performCalculations</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a70c9b24e50132408d8d9ce4f6674662a" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>recalculate</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a42fe316ed2696fb7b8b6fb8853b5bae0" prot="public" virt="virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>referenceDate</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1a8b3a5ca632e76b35ae8a0646924d87f5" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>rho</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1aeccb7cf3e864ef7a2cfe2213fc5cafe7" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>rho_</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1aed1d156b881391bcee3f933722f20002" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>rmsError</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a3fbddba097e2b742fe8800217ed613cc" prot="public" virt="virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>shift</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a6c2ea1d64020c754251c89372fe46686" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>SmileSection</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1aae4f281efa6a9f4b5cea8165363df3b5" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>SmileSection</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a67cece6b7c60c0a5d7729bea038fe85c" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>SmileSection</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1a8292eb288cbc416828f2e9dbaf25f1d5" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>strikes_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a2e0e4786666453024b9d4e0761f2770b" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>unfreeze</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1abf32c9aa6f314dd573efbe9e701ec05d" prot="public" virt="virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a5bab1e23eb1c4d12f927c7b80cafa550" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>variance</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1a7fb19702b56eb50386a2bac085cf39b4" prot="public" virt="virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>varianceImpl</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a7186ee49bc91697dcca75fd5204629be" prot="public" virt="virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>vega</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1a530c90048c253a29aee1d57ddcfb5741" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>vegaWeighted_</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a0e1a9e52460bb881952fc9d9bce51a98" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>volatility</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a672a3e1398986f0a9c922b7b6bf3233c" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>volatility</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1afcfa7e058e4f3cec10f0645b992fcbb1" prot="public" virt="virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>volatilityImpl</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1aac4cb2b17d273eecb0508f3a5c050a22" prot="public" virt="virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>volatilityType</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1a0761d6448ce85dc482f8837af20342cc" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>volHandles_</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1a8a09c433ecdc1adda90186a6fe388fb3" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>vols_</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1a8bc4fbec528ecc625b772b489a588ddc" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>ZabrInterpolatedSmileSection</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1a74bc7c7b8ec6dc1573ecea219f0f77b3" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>ZabrInterpolatedSmileSection</name></member>
      <member refid="class_quant_lib_1_1_zabr_interpolated_smile_section_1aa4f7d0c090f00cd5482d8de45d4d62a8" prot="protected" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>zabrInterpolation_</name></member>
      <member refid="class_quant_lib_1_1_lazy_object_1a9d719c43bb627177a90d7d12324a2d6e" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>~LazyObject</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_smile_section_1a7c6cb707ed5e58e5a1fa92efc3a9a88f" prot="public" virt="non-virtual"><scope>QuantLib::ZabrInterpolatedSmileSection</scope><name>~SmileSection</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
