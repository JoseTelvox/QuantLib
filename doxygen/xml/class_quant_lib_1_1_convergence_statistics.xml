<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_convergence_statistics" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::ConvergenceStatistics</compoundname>
    <basecompoundref prot="public" virt="non-virtual">T</basecompoundref>
    <includes refid="convergencestatistics_8hpp" local="no">convergencestatistics.hpp</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type>class U</type>
        <defval><ref refid="class_quant_lib_1_1_doubling_convergence_steps" kindref="compound">DoublingConvergenceSteps</ref></defval>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_convergence_statistics_1a99ec6bedcf68a7e2174f748954167ec9" prot="public" static="no">
        <type>T::value_type</type>
        <definition>typedef T::value_type QuantLib::ConvergenceStatistics&lt; T, U &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>QuantLib::ConvergenceStatistics::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/convergencestatistics.hpp" line="60" column="40" bodyfile="ql/math/statistics/convergencestatistics.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_quant_lib_1_1_convergence_statistics_1ac49fd1c8297b2296fd2d4c38e595acd0" prot="public" static="no">
        <type>std::vector&lt; std::pair&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref>, value_type &gt; &gt;</type>
        <definition>typedef std::vector&lt;std::pair&lt;Size,value_type&gt; &gt; QuantLib::ConvergenceStatistics&lt; T, U &gt;::table_type</definition>
        <argsstring></argsstring>
        <name>table_type</name>
        <qualifiedname>QuantLib::ConvergenceStatistics::table_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/convergencestatistics.hpp" line="61" column="29" bodyfile="ql/math/statistics/convergencestatistics.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_convergence_statistics_1a41c3968e1461c58a9cf105f660ec262e" prot="private" static="no" mutable="no">
        <type>table_type</type>
        <definition>table_type QuantLib::ConvergenceStatistics&lt; T, U &gt;::table_</definition>
        <argsstring></argsstring>
        <name>table_</name>
        <qualifiedname>QuantLib::ConvergenceStatistics::table_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/convergencestatistics.hpp" line="81" column="20" bodyfile="ql/math/statistics/convergencestatistics.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_convergence_statistics_1a1322ff5a48bff91077a79f2ab97afa24" prot="private" static="no" mutable="no">
        <type>U</type>
        <definition>U QuantLib::ConvergenceStatistics&lt; T, U &gt;::samplingRule_</definition>
        <argsstring></argsstring>
        <name>samplingRule_</name>
        <qualifiedname>QuantLib::ConvergenceStatistics::samplingRule_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/convergencestatistics.hpp" line="82" column="11" bodyfile="ql/math/statistics/convergencestatistics.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_convergence_statistics_1a7e16aad671c0ee963b41ce1624bde131" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::ConvergenceStatistics&lt; T, U &gt;::nextSampleSize_</definition>
        <argsstring></argsstring>
        <name>nextSampleSize_</name>
        <qualifiedname>QuantLib::ConvergenceStatistics::nextSampleSize_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/convergencestatistics.hpp" line="83" column="14" bodyfile="ql/math/statistics/convergencestatistics.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_convergence_statistics_1abf004884140815f9c5673a1d009dcaa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::ConvergenceStatistics&lt; T, U &gt;::ConvergenceStatistics</definition>
        <argsstring>(const T &amp;stats, const U &amp;rule=U())</argsstring>
        <name>ConvergenceStatistics</name>
        <qualifiedname>QuantLib::ConvergenceStatistics::ConvergenceStatistics</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>stats</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>rule</declname>
          <defval>U()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/convergencestatistics.hpp" line="62" column="9" bodyfile="ql/math/statistics/convergencestatistics.hpp" bodystart="90" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_convergence_statistics_1a500b3b5f17c63f108d4f763e0708c669" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::ConvergenceStatistics&lt; T, U &gt;::ConvergenceStatistics</definition>
        <argsstring>(const U &amp;rule=U())</argsstring>
        <name>ConvergenceStatistics</name>
        <qualifiedname>QuantLib::ConvergenceStatistics::ConvergenceStatistics</qualifiedname>
        <param>
          <type>const U &amp;</type>
          <declname>rule</declname>
          <defval>U()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/convergencestatistics.hpp" line="64" column="9" bodyfile="ql/math/statistics/convergencestatistics.hpp" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_convergence_statistics_1af156a357b001eaaed96019bd5adc8279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::ConvergenceStatistics&lt; T, U &gt;::add</definition>
        <argsstring>(const value_type &amp;value, Real weight=1.0)</argsstring>
        <name>add</name>
        <qualifiedname>QuantLib::ConvergenceStatistics::add</qualifiedname>
        <param>
          <type>const value_type &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>weight</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/convergencestatistics.hpp" line="65" column="14" bodyfile="ql/math/statistics/convergencestatistics.hpp" bodystart="104" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_convergence_statistics_1abe51bdce29abac09aedee070fd2f1b3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DataIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void QuantLib::ConvergenceStatistics&lt; T, U &gt;::addSequence</definition>
        <argsstring>(DataIterator begin, DataIterator end)</argsstring>
        <name>addSequence</name>
        <qualifiedname>QuantLib::ConvergenceStatistics::addSequence</qualifiedname>
        <param>
          <type>DataIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>DataIterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/convergencestatistics.hpp" line="67" column="14" bodyfile="ql/math/statistics/convergencestatistics.hpp" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_convergence_statistics_1afe67e4f2c7377d257d3045f05dba030e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DataIterator</type>
          </param>
          <param>
            <type>class WeightIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void QuantLib::ConvergenceStatistics&lt; T, U &gt;::addSequence</definition>
        <argsstring>(DataIterator begin, DataIterator end, WeightIterator wbegin)</argsstring>
        <name>addSequence</name>
        <qualifiedname>QuantLib::ConvergenceStatistics::addSequence</qualifiedname>
        <param>
          <type>DataIterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>DataIterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>WeightIterator</type>
          <declname>wbegin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/convergencestatistics.hpp" line="72" column="14" bodyfile="ql/math/statistics/convergencestatistics.hpp" bodystart="72" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_convergence_statistics_1a046c9530e5715ddc09f098c9cfbd3e8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::ConvergenceStatistics&lt; T, U &gt;::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <qualifiedname>QuantLib::ConvergenceStatistics::reset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/convergencestatistics.hpp" line="77" column="14" bodyfile="ql/math/statistics/convergencestatistics.hpp" bodystart="116" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_convergence_statistics_1a1e40c079567d6ca5b81c8c094145af7e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; std::pair&lt; <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref>, value_type &gt; &gt; &amp;</type>
        <definition>const ConvergenceStatistics&lt; T, U &gt;::table_type &amp; QuantLib::ConvergenceStatistics&lt; T, U &gt;::convergenceTable</definition>
        <argsstring>() const</argsstring>
        <name>convergenceTable</name>
        <qualifiedname>QuantLib::ConvergenceStatistics::convergenceTable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/statistics/convergencestatistics.hpp" line="78" column="27" bodyfile="ql/math/statistics/convergencestatistics.hpp" bodystart="124" bodyend="126"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>statistics class with convergence table </para>
    </briefdescription>
    <detaileddescription>
<para>This class decorates another statistics class adding a convergence table calculation. The table tracks the convergence of the mean.</para>
<para>It is possible to specify the number of samples at which the mean should be stored by mean of the second template parameter; the default is to store <formula id="344">$ 2^{n-1} $</formula> samples at the <formula id="250">$ n $</formula>-th step. Any passed class must implement the following interface: <programlisting><codeline><highlight class="normal"><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>initialSamples()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>nextSamples(<ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref><sp/>currentSamples)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
</programlisting> as well as a copy constructor.</para>
<para><xrefsect id="test_1_test000076"><xreftitle>Test</xreftitle><xrefdescription><para>results are tested against known good values. </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::ConvergenceStatistics&lt; T, U &gt;</label>
        <link refid="class_quant_lib_1_1_convergence_statistics"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>T</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::ConvergenceStatistics&lt; T, U &gt;</label>
        <link refid="class_quant_lib_1_1_convergence_statistics"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>T</label>
      </node>
    </collaborationgraph>
    <location file="ql/math/statistics/convergencestatistics.hpp" line="58" column="5" bodyfile="ql/math/statistics/convergencestatistics.hpp" bodystart="58" bodyend="84"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_convergence_statistics_1af156a357b001eaaed96019bd5adc8279" prot="public" virt="non-virtual"><scope>QuantLib::ConvergenceStatistics</scope><name>add</name></member>
      <member refid="class_quant_lib_1_1_convergence_statistics_1abe51bdce29abac09aedee070fd2f1b3b" prot="public" virt="non-virtual"><scope>QuantLib::ConvergenceStatistics</scope><name>addSequence</name></member>
      <member refid="class_quant_lib_1_1_convergence_statistics_1afe67e4f2c7377d257d3045f05dba030e" prot="public" virt="non-virtual"><scope>QuantLib::ConvergenceStatistics</scope><name>addSequence</name></member>
      <member refid="class_quant_lib_1_1_convergence_statistics_1abf004884140815f9c5673a1d009dcaa9" prot="public" virt="non-virtual"><scope>QuantLib::ConvergenceStatistics</scope><name>ConvergenceStatistics</name></member>
      <member refid="class_quant_lib_1_1_convergence_statistics_1a500b3b5f17c63f108d4f763e0708c669" prot="public" virt="non-virtual"><scope>QuantLib::ConvergenceStatistics</scope><name>ConvergenceStatistics</name></member>
      <member refid="class_quant_lib_1_1_convergence_statistics_1a1e40c079567d6ca5b81c8c094145af7e" prot="public" virt="non-virtual"><scope>QuantLib::ConvergenceStatistics</scope><name>convergenceTable</name></member>
      <member refid="class_quant_lib_1_1_convergence_statistics_1a7e16aad671c0ee963b41ce1624bde131" prot="private" virt="non-virtual"><scope>QuantLib::ConvergenceStatistics</scope><name>nextSampleSize_</name></member>
      <member refid="class_quant_lib_1_1_convergence_statistics_1a046c9530e5715ddc09f098c9cfbd3e8c" prot="public" virt="non-virtual"><scope>QuantLib::ConvergenceStatistics</scope><name>reset</name></member>
      <member refid="class_quant_lib_1_1_convergence_statistics_1a1322ff5a48bff91077a79f2ab97afa24" prot="private" virt="non-virtual"><scope>QuantLib::ConvergenceStatistics</scope><name>samplingRule_</name></member>
      <member refid="class_quant_lib_1_1_convergence_statistics_1a41c3968e1461c58a9cf105f660ec262e" prot="private" virt="non-virtual"><scope>QuantLib::ConvergenceStatistics</scope><name>table_</name></member>
      <member refid="class_quant_lib_1_1_convergence_statistics_1ac49fd1c8297b2296fd2d4c38e595acd0" prot="public" virt="non-virtual"><scope>QuantLib::ConvergenceStatistics</scope><name>table_type</name></member>
      <member refid="class_quant_lib_1_1_convergence_statistics_1a99ec6bedcf68a7e2174f748954167ec9" prot="public" virt="non-virtual"><scope>QuantLib::ConvergenceStatistics</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
