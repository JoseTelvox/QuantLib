<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_equity_index" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::EquityIndex</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_index" prot="public" virt="non-virtual">QuantLib::Index</basecompoundref>
    <includes refid="equityindex_8hpp" local="no">equityindex.hpp</includes>
    <sectiondef kind="user-defined">
      <header>Other methods</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_equity_index_1a43829a577c4cfd577d55dd9f1f70a029" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string QuantLib::EquityIndex::name_</definition>
        <argsstring></argsstring>
        <name>name_</name>
        <qualifiedname>QuantLib::EquityIndex::name_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/equityindex.hpp" line="114" column="21" bodyfile="ql/indexes/equityindex.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_equity_index_1a24852994d92d76402f357ed8321cf45e" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref></type>
        <definition>Calendar QuantLib::EquityIndex::fixingCalendar_</definition>
        <argsstring></argsstring>
        <name>fixingCalendar_</name>
        <qualifiedname>QuantLib::EquityIndex::fixingCalendar_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/equityindex.hpp" line="115" column="18" bodyfile="ql/indexes/equityindex.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_equity_index_1a6f12a12112bde7c63ae8f86eb103f06b" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref></type>
        <definition>Currency QuantLib::EquityIndex::currency_</definition>
        <argsstring></argsstring>
        <name>currency_</name>
        <qualifiedname>QuantLib::EquityIndex::currency_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/equityindex.hpp" line="116" column="18" bodyfile="ql/indexes/equityindex.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_equity_index_1a767d07f4f78278051044532f4bc37d0a" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt;</type>
        <definition>Handle&lt;YieldTermStructure&gt; QuantLib::EquityIndex::interest_</definition>
        <argsstring></argsstring>
        <name>interest_</name>
        <qualifiedname>QuantLib::EquityIndex::interest_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/equityindex.hpp" line="117" column="16" bodyfile="ql/indexes/equityindex.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_equity_index_1a118069b69311870ad0847ef931e8f8fa" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt;</type>
        <definition>Handle&lt;YieldTermStructure&gt; QuantLib::EquityIndex::dividend_</definition>
        <argsstring></argsstring>
        <name>dividend_</name>
        <qualifiedname>QuantLib::EquityIndex::dividend_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/equityindex.hpp" line="118" column="16" bodyfile="ql/indexes/equityindex.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_equity_index_1a45dae59cc1adf875aecc946b7cbafdfc" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
        <definition>Handle&lt;Quote&gt; QuantLib::EquityIndex::spot_</definition>
        <argsstring></argsstring>
        <name>spot_</name>
        <qualifiedname>QuantLib::EquityIndex::spot_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/equityindex.hpp" line="119" column="16" bodyfile="ql/indexes/equityindex.hpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_equity_index_1a7bf46b6020f449f127b9bb43edd5fe63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_equity_index" kindref="compound">EquityIndex</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; EquityIndex &gt; QuantLib::EquityIndex::clone</definition>
        <argsstring>(const Handle&lt; YieldTermStructure &gt; &amp;interest, const Handle&lt; YieldTermStructure &gt; &amp;dividend, const Handle&lt; Quote &gt; &amp;spot) const</argsstring>
        <name>clone</name>
        <qualifiedname>QuantLib::EquityIndex::clone</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
          <declname>interest</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt; &amp;</type>
          <declname>dividend</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt; &amp;</type>
          <declname>spot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns a copy of itself linked to different interest, dividend curves or spot quote </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/equityindex.hpp" line="109" column="33" bodyfile="ql/indexes/equityindex.cpp" bodystart="104" bodyend="109"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Index interface</header>
      <memberdef kind="function" id="class_quant_lib_1_1_equity_index_1a0fc1ecdcdc628dac364d2af8c45a8d0b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string QuantLib::EquityIndex::name</definition>
        <argsstring>() const override</argsstring>
        <name>name</name>
        <qualifiedname>QuantLib::EquityIndex::name</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_index_1a1d71da32dc59a99b5e6bc9cbafa357fe">name</reimplements>
        <briefdescription>
<para>Returns the name of the index. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This method is used for output and comparison between indexes. It is <bold>not</bold> meant to be used for writing switch-on-type code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/equityindex.hpp" line="84" column="21" bodyfile="ql/indexes/equityindex.hpp" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_equity_index_1aeeb5871951d6bad8ea58bb848793c824" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref></type>
        <definition>Calendar QuantLib::EquityIndex::fixingCalendar</definition>
        <argsstring>() const override</argsstring>
        <name>fixingCalendar</name>
        <qualifiedname>QuantLib::EquityIndex::fixingCalendar</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_index_1a698fe28c856980f06db27a49ebd0fb05">fixingCalendar</reimplements>
        <briefdescription>
<para>returns the calendar defining valid fixing dates </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/equityindex.hpp" line="85" column="18" bodyfile="ql/indexes/equityindex.hpp" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_equity_index_1ae4f951551f0b0f97f0b1b9d5b012775e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool QuantLib::EquityIndex::isValidFixingDate</definition>
        <argsstring>(const Date &amp;fixingDate) const override</argsstring>
        <name>isValidFixingDate</name>
        <qualifiedname>QuantLib::EquityIndex::isValidFixingDate</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_index_1a9c26de5ae6c178fff2d898660e777b2a">isValidFixingDate</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>fixingDate</declname>
        </param>
        <briefdescription>
<para>returns TRUE if the fixing date is a valid one </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/equityindex.hpp" line="86" column="14" bodyfile="ql/indexes/equityindex.hpp" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_equity_index_1a44f96f0902b113bcfe3407414fe79adb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::EquityIndex::fixing</definition>
        <argsstring>(const Date &amp;fixingDate, bool forecastTodaysFixing=false) const override</argsstring>
        <name>fixing</name>
        <qualifiedname>QuantLib::EquityIndex::fixing</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_index_1afe813b1909717dc0bcd1fa54105ee9d4">fixing</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>fixingDate</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>forecastTodaysFixing</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>returns the fixing at the given date </para>
        </briefdescription>
        <detaileddescription>
<para>the date passed as arguments must be the actual calendar date of the fixing; no settlement days must be used. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/equityindex.hpp" line="87" column="14" bodyfile="ql/indexes/equityindex.cpp" bodystart="63" bodyend="84"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Inspectors</header>
      <memberdef kind="function" id="class_quant_lib_1_1_equity_index_1ae0cc688115d7311d61d27ea040ac7bec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref></type>
        <definition>Currency QuantLib::EquityIndex::currency</definition>
        <argsstring>() const</argsstring>
        <name>currency</name>
        <qualifiedname>QuantLib::EquityIndex::currency</qualifiedname>
        <briefdescription>
<para>The index currency. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/equityindex.hpp" line="92" column="18" bodyfile="ql/indexes/equityindex.hpp" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_equity_index_1abcdba480f9c3c91d0b05e5d5d2837e4a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt;</type>
        <definition>Handle&lt; YieldTermStructure &gt; QuantLib::EquityIndex::equityInterestRateCurve</definition>
        <argsstring>() const</argsstring>
        <name>equityInterestRateCurve</name>
        <qualifiedname>QuantLib::EquityIndex::equityInterestRateCurve</qualifiedname>
        <briefdescription>
<para>the rate curve used to forecast fixings </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/equityindex.hpp" line="94" column="16" bodyfile="ql/indexes/equityindex.hpp" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_equity_index_1a69ed884c9890ea0e75f69b40d01089ba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt;</type>
        <definition>Handle&lt; YieldTermStructure &gt; QuantLib::EquityIndex::equityDividendCurve</definition>
        <argsstring>() const</argsstring>
        <name>equityDividendCurve</name>
        <qualifiedname>QuantLib::EquityIndex::equityDividendCurve</qualifiedname>
        <briefdescription>
<para>the dividend curve used to forecast fixings </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/equityindex.hpp" line="96" column="16" bodyfile="ql/indexes/equityindex.hpp" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_equity_index_1a09990b4a2fe35c9819f3fcb6d5b4c0c7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
        <definition>Handle&lt; Quote &gt; QuantLib::EquityIndex::spot</definition>
        <argsstring>() const</argsstring>
        <name>spot</name>
        <qualifiedname>QuantLib::EquityIndex::spot</qualifiedname>
        <briefdescription>
<para>index spot value </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/equityindex.hpp" line="98" column="16" bodyfile="ql/indexes/equityindex.hpp" bodystart="98" bodyend="98"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Fixing calculations</header>
      <memberdef kind="function" id="class_quant_lib_1_1_equity_index_1a4584ae0d42fdc6b714e2a5bff1ed6181" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::EquityIndex::forecastFixing</definition>
        <argsstring>(const Date &amp;fixingDate) const</argsstring>
        <name>forecastFixing</name>
        <qualifiedname>QuantLib::EquityIndex::forecastFixing</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>fixingDate</declname>
        </param>
        <briefdescription>
<para>It can be overridden to implement particular conventions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/equityindex.hpp" line="103" column="22" bodyfile="ql/indexes/equityindex.cpp" bodystart="86" bodyend="102"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_equity_index_1aafef619d30f6bdd322d5b746c022c281" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::EquityIndex::EquityIndex</definition>
        <argsstring>(std::string name, Calendar fixingCalendar, Currency currency, Handle&lt; YieldTermStructure &gt; interest={}, Handle&lt; YieldTermStructure &gt; dividend={}, Handle&lt; Quote &gt; spot={})</argsstring>
        <name>EquityIndex</name>
        <qualifiedname>QuantLib::EquityIndex::EquityIndex</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref></type>
          <declname>fixingCalendar</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_currency" kindref="compound">Currency</ref></type>
          <declname>currency</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt;</type>
          <declname>interest</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt;</type>
          <declname>dividend</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
          <declname>spot</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/equityindex.hpp" line="65" column="9" bodyfile="ql/indexes/equityindex.cpp" bodystart="46" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_equity_index_1adb4a25f825fbdf3f979deca0c5bd39ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::EquityIndex::EquityIndex</definition>
        <argsstring>(std::string name, Calendar fixingCalendar, Handle&lt; YieldTermStructure &gt; interest={}, Handle&lt; YieldTermStructure &gt; dividend={}, Handle&lt; Quote &gt; spot={})</argsstring>
        <name>EquityIndex</name>
        <qualifiedname>QuantLib::EquityIndex::EquityIndex</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_calendar" kindref="compound">Calendar</ref></type>
          <declname>fixingCalendar</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt;</type>
          <declname>interest</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_yield_term_structure" kindref="compound">YieldTermStructure</ref> &gt;</type>
          <declname>dividend</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
          <declname>spot</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000048"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use the constructor taking a currency. Deprecated in version 1.36. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/indexes/equityindex.hpp" line="76" column="9" bodyfile="ql/indexes/equityindex.cpp" bodystart="34" bodyend="44"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Base class for equity indexes. </para>
    </briefdescription>
    <detaileddescription>
<para>The equity index object allows to retrieve past fixings, as well as project future fixings using either both the risk free interest rate term structure and the dividend term structure, or just the interest rate term structure in which case one can provide a term structure of equity forwards implied from, e.g. option prices.</para>
<para>In case of the first method, the forward is calculated as:   <formula id="188">\[I(t, T) = I(t, t) \frac{P_{D}(t, T)}{P_{R}(t, T)},
\]</formula> where <formula id="189">$ I(t, t) $</formula> is today&apos;s value of the index, <formula id="190">$ P_{D}(t, T) $</formula> is a discount factor of the dividend curve at future time <formula id="5">$ T $</formula>, and <formula id="191">$ P_{R}(t, T) $</formula> is a discount factor of the risk free curve at future time <formula id="5">$ T $</formula>.</para>
<para>In case of the latter method, the forward is calculated as:   <formula id="192">\[I(t, T) = I(t, t) \frac{1}{P_{F}(t, T)},
\]</formula> where <formula id="193">$ P_{F}(t, T) $</formula> is a discount factor of the equity forward term structure.</para>
<para>To forecast future fixings, the user can either provide a handle to the current index spot. If spot handle is empty, today&apos;s fixing will be used, instead. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::EquityIndex</label>
        <link refid="class_quant_lib_1_1_equity_index"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::Index</label>
        <link refid="class_quant_lib_1_1_index"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::EquityIndex</label>
        <link refid="class_quant_lib_1_1_equity_index"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::Index</label>
        <link refid="class_quant_lib_1_1_index"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
    </collaborationgraph>
    <location file="ql/indexes/equityindex.hpp" line="63" column="5" bodyfile="ql/indexes/equityindex.hpp" bodystart="63" bodyend="120"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_index_1a99d2677cae4cd185b34a170ee36eca9d" prot="public" virt="virtual"><scope>QuantLib::EquityIndex</scope><name>addFixing</name></member>
      <member refid="class_quant_lib_1_1_index_1a91fce2b65887f04e2cbcae5d9ffcc15e" prot="public" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>addFixings</name></member>
      <member refid="class_quant_lib_1_1_index_1a46b3d6241bd06bd76a49123c5c0011cf" prot="public" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>addFixings</name></member>
      <member refid="class_quant_lib_1_1_index_1aedde403ec6db8211816d7d1d0a883155" prot="public" virt="virtual"><scope>QuantLib::EquityIndex</scope><name>allowsNativeFixings</name></member>
      <member refid="class_quant_lib_1_1_index_1a6ebd31a5c6890f2dc0b25fc7824c809c" prot="public" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>clearFixings</name></member>
      <member refid="class_quant_lib_1_1_equity_index_1a7bf46b6020f449f127b9bb43edd5fe63" prot="public" virt="virtual"><scope>QuantLib::EquityIndex</scope><name>clone</name></member>
      <member refid="class_quant_lib_1_1_equity_index_1ae0cc688115d7311d61d27ea040ac7bec" prot="public" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>currency</name></member>
      <member refid="class_quant_lib_1_1_equity_index_1a6f12a12112bde7c63ae8f86eb103f06b" prot="private" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>currency_</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::EquityIndex</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_equity_index_1a118069b69311870ad0847ef931e8f8fa" prot="private" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>dividend_</name></member>
      <member refid="class_quant_lib_1_1_equity_index_1a69ed884c9890ea0e75f69b40d01089ba" prot="public" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>equityDividendCurve</name></member>
      <member refid="class_quant_lib_1_1_equity_index_1aafef619d30f6bdd322d5b746c022c281" prot="public" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>EquityIndex</name></member>
      <member refid="class_quant_lib_1_1_equity_index_1adb4a25f825fbdf3f979deca0c5bd39ee" prot="public" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>EquityIndex</name></member>
      <member refid="class_quant_lib_1_1_equity_index_1abcdba480f9c3c91d0b05e5d5d2837e4a" prot="public" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>equityInterestRateCurve</name></member>
      <member refid="class_quant_lib_1_1_equity_index_1a44f96f0902b113bcfe3407414fe79adb" prot="public" virt="virtual"><scope>QuantLib::EquityIndex</scope><name>fixing</name></member>
      <member refid="class_quant_lib_1_1_equity_index_1aeeb5871951d6bad8ea58bb848793c824" prot="public" virt="virtual"><scope>QuantLib::EquityIndex</scope><name>fixingCalendar</name></member>
      <member refid="class_quant_lib_1_1_equity_index_1a24852994d92d76402f357ed8321cf45e" prot="private" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>fixingCalendar_</name></member>
      <member refid="class_quant_lib_1_1_equity_index_1a4584ae0d42fdc6b714e2a5bff1ed6181" prot="public" virt="virtual"><scope>QuantLib::EquityIndex</scope><name>forecastFixing</name></member>
      <member refid="class_quant_lib_1_1_index_1a3ca2ef1910e74b22dd55c39013642a5c" prot="public" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>hasHistoricalFixing</name></member>
      <member refid="class_quant_lib_1_1_equity_index_1a767d07f4f78278051044532f4bc37d0a" prot="private" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>interest_</name></member>
      <member refid="class_quant_lib_1_1_equity_index_1ae4f951551f0b0f97f0b1b9d5b012775e" prot="public" virt="virtual"><scope>QuantLib::EquityIndex</scope><name>isValidFixingDate</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::EquityIndex</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_equity_index_1a0fc1ecdcdc628dac364d2af8c45a8d0b" prot="public" virt="virtual"><scope>QuantLib::EquityIndex</scope><name>name</name></member>
      <member refid="class_quant_lib_1_1_equity_index_1a43829a577c4cfd577d55dd9f1f70a029" prot="private" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>name_</name></member>
      <member refid="class_quant_lib_1_1_index_1aa9172bf19d428e1d212ef2e331ad8785" prot="protected" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>notifier</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::EquityIndex</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::EquityIndex</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::EquityIndex</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::EquityIndex</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::EquityIndex</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_index_1a56f55745a69269f98c5ccc9b7e94d90e" prot="public" virt="virtual"><scope>QuantLib::EquityIndex</scope><name>pastFixing</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_equity_index_1a09990b4a2fe35c9819f3fcb6d5b4c0c7" prot="public" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>spot</name></member>
      <member refid="class_quant_lib_1_1_equity_index_1a45dae59cc1adf875aecc946b7cbafdfc" prot="private" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>spot_</name></member>
      <member refid="class_quant_lib_1_1_index_1a373faa497820b43992d18ead1a8b87a8" prot="public" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>timeSeries</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_index_1a790ff8bc3caa48efbdb968f6fd23edf0" prot="public" virt="virtual"><scope>QuantLib::EquityIndex</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_index_1a5e8202e51d4c2053f61cb47d3f76b42f" prot="public" virt="non-virtual"><scope>QuantLib::EquityIndex</scope><name>~Index</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::EquityIndex</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::EquityIndex</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
