<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_optimization_method" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>QuantLib::OptimizationMethod</compoundname>
    <derivedcompoundref refid="class_quant_lib_1_1_hybrid_simulated_annealing" prot="public" virt="non-virtual">QuantLib::HybridSimulatedAnnealing&lt; SamplerGaussian, ProbabilityBoltzmannDownhill, TemperatureExponential, ReannealingTrivial &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_hybrid_simulated_annealing" prot="public" virt="non-virtual">QuantLib::HybridSimulatedAnnealing&lt; SamplerLogNormal, ProbabilityBoltzmannDownhill, TemperatureExponential, ReannealingTrivial &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_hybrid_simulated_annealing" prot="public" virt="non-virtual">QuantLib::HybridSimulatedAnnealing&lt; SamplerMirrorGaussian, ProbabilityBoltzmannDownhill, TemperatureExponential, ReannealingTrivial &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_hybrid_simulated_annealing" prot="public" virt="non-virtual">QuantLib::HybridSimulatedAnnealing&lt; SamplerGaussian, ProbabilityBoltzmannDownhill, TemperatureExponential, ReannealingFiniteDifferences &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_hybrid_simulated_annealing" prot="public" virt="non-virtual">QuantLib::HybridSimulatedAnnealing&lt; SamplerVeryFastAnnealing, ProbabilityBoltzmannDownhill, TemperatureVeryFastAnnealing, ReannealingTrivial &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_hybrid_simulated_annealing" prot="public" virt="non-virtual">QuantLib::HybridSimulatedAnnealing&lt; SamplerVeryFastAnnealing, ProbabilityBoltzmannDownhill, TemperatureVeryFastAnnealing, ReannealingFiniteDifferences &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_differential_evolution" prot="public" virt="non-virtual">QuantLib::DifferentialEvolution</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_firefly_algorithm" prot="public" virt="non-virtual">QuantLib::FireflyAlgorithm</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_hybrid_simulated_annealing" prot="public" virt="non-virtual">QuantLib::HybridSimulatedAnnealing&lt; Sampler, Probability, Temperature, Reannealing &gt;</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_levenberg_marquardt" prot="public" virt="non-virtual">QuantLib::LevenbergMarquardt</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_line_search_based_method" prot="public" virt="non-virtual">QuantLib::LineSearchBasedMethod</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_particle_swarm_optimization" prot="public" virt="non-virtual">QuantLib::ParticleSwarmOptimization</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_simplex" prot="public" virt="non-virtual">QuantLib::Simplex</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_simulated_annealing" prot="public" virt="non-virtual">QuantLib::SimulatedAnnealing&lt; RNG &gt;</derivedcompoundref>
    <includes refid="method_8hpp" local="no">method.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_optimization_method_1a2e9a51f0954eaf649d075d565d43938c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual QuantLib::OptimizationMethod::~OptimizationMethod</definition>
        <argsstring>()=default</argsstring>
        <name>~OptimizationMethod</name>
        <qualifiedname>QuantLib::OptimizationMethod::~OptimizationMethod</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/method.hpp" line="38" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_optimization_method_1a28097ae73d0d2a310938f51b72a48348" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>EndCriteria::Type</type>
        <definition>virtual EndCriteria::Type QuantLib::OptimizationMethod::minimize</definition>
        <argsstring>(Problem &amp;P, const EndCriteria &amp;endCriteria)=0</argsstring>
        <name>minimize</name>
        <qualifiedname>QuantLib::OptimizationMethod::minimize</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_differential_evolution_1aec279754b47ec3fcf91c4ab3c126147b">minimize</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_firefly_algorithm_1a20e6506e19f07e8e9b81c01061887e01">minimize</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hybrid_simulated_annealing_1a96c109b6479ed921f29f57b399c7518c">minimize</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hybrid_simulated_annealing_1a96c109b6479ed921f29f57b399c7518c">minimize</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hybrid_simulated_annealing_1a96c109b6479ed921f29f57b399c7518c">minimize</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hybrid_simulated_annealing_1a96c109b6479ed921f29f57b399c7518c">minimize</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hybrid_simulated_annealing_1a96c109b6479ed921f29f57b399c7518c">minimize</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hybrid_simulated_annealing_1a96c109b6479ed921f29f57b399c7518c">minimize</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hybrid_simulated_annealing_1a96c109b6479ed921f29f57b399c7518c">minimize</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hybrid_simulated_annealing_1a96c109b6479ed921f29f57b399c7518c">minimize</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hybrid_simulated_annealing_1a96c109b6479ed921f29f57b399c7518c">minimize</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hybrid_simulated_annealing_1a96c109b6479ed921f29f57b399c7518c">minimize</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hybrid_simulated_annealing_1a96c109b6479ed921f29f57b399c7518c">minimize</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hybrid_simulated_annealing_1a96c109b6479ed921f29f57b399c7518c">minimize</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hybrid_simulated_annealing_1a96c109b6479ed921f29f57b399c7518c">minimize</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_levenberg_marquardt_1a60c8e15c7e3e773a8ec3acc0bc798058">minimize</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_line_search_based_method_1a049d4b5a5636aa2df992908657d60f11">minimize</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_particle_swarm_optimization_1a9639eb90822fc91ac0d97d3f6fa279d8">minimize</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_simplex_1a781b28f0e84652c4c08042eec85996dc">minimize</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_simulated_annealing_1a38858ea9fc66c0ce4034868c7a175564">minimize</reimplementedby>
        <param>
          <type><ref refid="class_quant_lib_1_1_problem" kindref="compound">Problem</ref> &amp;</type>
          <declname>P</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref> &amp;</type>
          <declname>endCriteria</declname>
        </param>
        <briefdescription>
<para>minimize the optimization problem P </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/optimization/method.hpp" line="41" column="35"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Abstract class for constrained optimization method. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="13">
        <label>QuantLib::BFGS</label>
        <link refid="class_quant_lib_1_1_b_f_g_s"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>QuantLib::ConjugateGradient</label>
        <link refid="class_quant_lib_1_1_conjugate_gradient"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QuantLib::DifferentialEvolution</label>
        <link refid="class_quant_lib_1_1_differential_evolution"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>QuantLib::FireflyAlgorithm</label>
        <link refid="class_quant_lib_1_1_firefly_algorithm"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>QuantLib::HybridSimulatedAnnealing&lt; Sampler, Probability, Temperature, Reannealing &gt;</label>
        <link refid="class_quant_lib_1_1_hybrid_simulated_annealing"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::HybridSimulatedAnnealing&lt; SamplerGaussian, ProbabilityBoltzmannDownhill, TemperatureExponential, ReannealingFiniteDifferences &gt;</label>
        <link refid="class_quant_lib_1_1_hybrid_simulated_annealing"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::HybridSimulatedAnnealing&lt; SamplerGaussian, ProbabilityBoltzmannDownhill, TemperatureExponential, ReannealingTrivial &gt;</label>
        <link refid="class_quant_lib_1_1_hybrid_simulated_annealing"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::HybridSimulatedAnnealing&lt; SamplerLogNormal, ProbabilityBoltzmannDownhill, TemperatureExponential, ReannealingTrivial &gt;</label>
        <link refid="class_quant_lib_1_1_hybrid_simulated_annealing"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::HybridSimulatedAnnealing&lt; SamplerMirrorGaussian, ProbabilityBoltzmannDownhill, TemperatureExponential, ReannealingTrivial &gt;</label>
        <link refid="class_quant_lib_1_1_hybrid_simulated_annealing"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::HybridSimulatedAnnealing&lt; SamplerVeryFastAnnealing, ProbabilityBoltzmannDownhill, TemperatureVeryFastAnnealing, ReannealingFiniteDifferences &gt;</label>
        <link refid="class_quant_lib_1_1_hybrid_simulated_annealing"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::HybridSimulatedAnnealing&lt; SamplerVeryFastAnnealing, ProbabilityBoltzmannDownhill, TemperatureVeryFastAnnealing, ReannealingTrivial &gt;</label>
        <link refid="class_quant_lib_1_1_hybrid_simulated_annealing"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>QuantLib::LevenbergMarquardt</label>
        <link refid="class_quant_lib_1_1_levenberg_marquardt"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>QuantLib::LineSearchBasedMethod</label>
        <link refid="class_quant_lib_1_1_line_search_based_method"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::OptimizationMethod</label>
        <link refid="class_quant_lib_1_1_optimization_method"/>
      </node>
      <node id="16">
        <label>QuantLib::ParticleSwarmOptimization</label>
        <link refid="class_quant_lib_1_1_particle_swarm_optimization"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>QuantLib::Simplex</label>
        <link refid="class_quant_lib_1_1_simplex"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>QuantLib::SimulatedAnnealing&lt; RNG &gt;</label>
        <link refid="class_quant_lib_1_1_simulated_annealing"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>QuantLib::SteepestDescent</label>
        <link refid="class_quant_lib_1_1_steepest_descent"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="ql/math/optimization/method.hpp" line="36" column="5" bodyfile="ql/math/optimization/method.hpp" bodystart="36" bodyend="43"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_optimization_method_1a28097ae73d0d2a310938f51b72a48348" prot="public" virt="pure-virtual"><scope>QuantLib::OptimizationMethod</scope><name>minimize</name></member>
      <member refid="class_quant_lib_1_1_optimization_method_1a2e9a51f0954eaf649d075d565d43938c" prot="public" virt="virtual"><scope>QuantLib::OptimizationMethod</scope><name>~OptimizationMethod</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
