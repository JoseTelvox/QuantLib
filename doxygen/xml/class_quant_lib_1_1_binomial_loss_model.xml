<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_binomial_loss_model" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::BinomialLossModel</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_default_loss_model" prot="public" virt="non-virtual">QuantLib::DefaultLossModel</basecompoundref>
    <includes refid="binomiallossmodel_8hpp" local="no">binomiallossmodel.hpp</includes>
    <templateparamlist>
      <param>
        <type>class LLM</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_quant_lib_1_1_binomial_loss_model_1a6510321cf111be519384ec62294b6282" prot="public" static="no">
        <type>LLM::copulaType</type>
        <definition>typedef LLM::copulaType QuantLib::BinomialLossModel&lt; LLM &gt;::copulaType</definition>
        <argsstring></argsstring>
        <name>copulaType</name>
        <qualifiedname>QuantLib::BinomialLossModel::copulaType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/binomiallossmodel.hpp" line="63" column="42" bodyfile="ql/experimental/credit/binomiallossmodel.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_binomial_loss_model_1a006e9eb007f44cfcee2ce655ba732979" prot="protected" static="no" mutable="no">
        <type>const ext::shared_ptr&lt; LLM &gt;</type>
        <definition>const ext::shared_ptr&lt;LLM&gt; QuantLib::BinomialLossModel&lt; LLM &gt;::copula_</definition>
        <argsstring></argsstring>
        <name>copula_</name>
        <qualifiedname>QuantLib::BinomialLossModel::copula_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/binomiallossmodel.hpp" line="133" column="31" bodyfile="ql/experimental/credit/binomiallossmodel.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_binomial_loss_model_1ac7fffb800ac984b1c33c593114066334" prot="protected" static="no" mutable="yes">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BinomialLossModel&lt; LLM &gt;::attachAmount_</definition>
        <argsstring></argsstring>
        <name>attachAmount_</name>
        <qualifiedname>QuantLib::BinomialLossModel::attachAmount_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/binomiallossmodel.hpp" line="137" column="22" bodyfile="ql/experimental/credit/binomiallossmodel.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_binomial_loss_model_1a3678f97ec2765ae4fe5cd54b7cd4e8ba" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BinomialLossModel&lt; LLM &gt;::detachAmount_</definition>
        <argsstring></argsstring>
        <name>detachAmount_</name>
        <qualifiedname>QuantLib::BinomialLossModel::detachAmount_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/binomiallossmodel.hpp" line="137" column="36" bodyfile="ql/experimental/credit/binomiallossmodel.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_binomial_loss_model_1a0c6196d87fc647a4e54dcb26f1c622d6" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::BinomialLossModel&lt; LLM &gt;::BinomialLossModel</definition>
        <argsstring>(ext::shared_ptr&lt; LLM &gt; copula)</argsstring>
        <name>BinomialLossModel</name>
        <qualifiedname>QuantLib::BinomialLossModel::BinomialLossModel</qualifiedname>
        <param>
          <type>ext::shared_ptr&lt; LLM &gt;</type>
          <declname>copula</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/binomiallossmodel.hpp" line="64" column="18" bodyfile="ql/experimental/credit/binomiallossmodel.hpp" bodystart="64" bodyend="64"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_binomial_loss_model_1a9bcd81141d5b8a2bb7b3cebe7d69f6b4" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::BinomialLossModel&lt; LLM &gt;::resetModel</definition>
        <argsstring>() override</argsstring>
        <name>resetModel</name>
        <qualifiedname>QuantLib::BinomialLossModel::resetModel</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1ac32cbab626c8ba8ebb0dcace3eed4a38">resetModel</reimplements>
        <briefdescription>
<para>Concrete models do now any updates/inits they need on basket reset. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/binomiallossmodel.hpp" line="67" column="14" bodyfile="ql/experimental/credit/binomiallossmodel.hpp" bodystart="67" bodyend="74"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_binomial_loss_model_1ac6fa14fedef4f0b6c32340a36bca79ce" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::BinomialLossModel&lt; LLM &gt;::expectedDistribution</definition>
        <argsstring>(const Date &amp;date) const</argsstring>
        <name>expectedDistribution</name>
        <qualifiedname>QuantLib::BinomialLossModel::expectedDistribution</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the probability of the default loss values given by the method lossPoints. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/binomiallossmodel.hpp" line="80" column="21" bodyfile="ql/experimental/credit/binomiallossmodel.hpp" bodystart="80" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_binomial_loss_model_1a34bb92302c44eabcb0742dd516e583ba" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::BinomialLossModel&lt; LLM &gt;::lossPoints</definition>
        <argsstring>(const Date &amp;) const</argsstring>
        <name>lossPoints</name>
        <qualifiedname>QuantLib::BinomialLossModel::lossPoints</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <defname>d</defname>
        </param>
        <briefdescription>
<para>attainable loss points this model provides </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/binomiallossmodel.hpp" line="95" column="21" bodyfile="ql/experimental/credit/binomiallossmodel.hpp" bodystart="272" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_binomial_loss_model_1af33cc82a36f60038148aa0d8b9dcb10e" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::map&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref>, <ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> &gt;</type>
        <definition>std::map&lt; Real, Probability &gt; QuantLib::BinomialLossModel&lt; LLM &gt;::lossDistribution</definition>
        <argsstring>(const Date &amp;d) const override</argsstring>
        <name>lossDistribution</name>
        <qualifiedname>QuantLib::BinomialLossModel::lossDistribution</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1aeff66ecf317c1dc23713424daf563f88">lossDistribution</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Returns the cumulative full loss distribution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/binomiallossmodel.hpp" line="97" column="18" bodyfile="ql/experimental/credit/binomiallossmodel.hpp" bodystart="329" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_binomial_loss_model_1abae597741e45adadae3180bd5a916302" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BinomialLossModel&lt; LLM &gt;::percentile</definition>
        <argsstring>(const Date &amp;d, Real percentile) const override</argsstring>
        <name>percentile</name>
        <qualifiedname>QuantLib::BinomialLossModel::percentile</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1ac7142d4e72958aef5a602167a138973e">percentile</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>percentile</declname>
        </param>
        <briefdescription>
<para><ref refid="class_quant_lib_1_1_loss" kindref="compound">Loss</ref> level for this percentile. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/binomiallossmodel.hpp" line="99" column="14" bodyfile="ql/experimental/credit/binomiallossmodel.hpp" bodystart="346" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_binomial_loss_model_1af54e0d8ea342d41e36301ee3b028fc99" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BinomialLossModel&lt; LLM &gt;::expectedShortfall</definition>
        <argsstring>(const Date &amp;d, Real percentile) const override</argsstring>
        <name>expectedShortfall</name>
        <qualifiedname>QuantLib::BinomialLossModel::expectedShortfall</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1a60bd1a166744f4de455cae1c1c83f6a1">expectedShortfall</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>percentile</declname>
        </param>
        <briefdescription>
<para>Expected shortfall given a default loss percentile. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/binomiallossmodel.hpp" line="100" column="14" bodyfile="ql/experimental/credit/binomiallossmodel.hpp" bodystart="373" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_binomial_loss_model_1a141deb0ff1392932b8e88075fd4d6448" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BinomialLossModel&lt; LLM &gt;::expectedTrancheLoss</definition>
        <argsstring>(const Date &amp;d) const override</argsstring>
        <name>expectedTrancheLoss</name>
        <qualifiedname>QuantLib::BinomialLossModel::expectedTrancheLoss</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_default_loss_model_1a258763493804fe4c84b533716df00991">expectedTrancheLoss</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/binomiallossmodel.hpp" line="101" column="14" bodyfile="ql/experimental/credit/binomiallossmodel.hpp" bodystart="312" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_binomial_loss_model_1a5787b4962cdb148cda66ed016c2b6a25" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BinomialLossModel&lt; LLM &gt;::averageLoss</definition>
        <argsstring>(const Date &amp;, const std::vector&lt; Real &gt; &amp;reminingNots, const std::vector&lt; Real &gt; &amp;) const</argsstring>
        <name>averageLoss</name>
        <qualifiedname>QuantLib::BinomialLossModel::averageLoss</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <defname>d</defname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>reminingNots</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <defname>mktFctrs</defname>
        </param>
        <briefdescription>
<para><ref refid="struct_quant_lib_1_1_average" kindref="compound">Average</ref> loss per credit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/binomiallossmodel.hpp" line="105" column="14" bodyfile="ql/experimental/credit/binomiallossmodel.hpp" bodystart="247" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_binomial_loss_model_1adca9ac686ce153a1960a2b6f9caa9b53" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::BinomialLossModel&lt; LLM &gt;::condTrancheLoss</definition>
        <argsstring>(const Date &amp;, const std::vector&lt; Real &gt; &amp;lossVals, const std::vector&lt; Real &gt; &amp;bsktNots, const std::vector&lt; Probability &gt; &amp;uncondDefProbs, const std::vector&lt; Real &gt; &amp;) const</argsstring>
        <name>condTrancheLoss</name>
        <qualifiedname>QuantLib::BinomialLossModel::condTrancheLoss</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <defname>d</defname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>lossVals</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>bsktNots</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1ac41728dd3be3e1869bbb9aec06a89d60" kindref="member">Probability</ref> &gt; &amp;</type>
          <declname>uncondDefProbs</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <defname>mkf</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/binomiallossmodel.hpp" line="107" column="14" bodyfile="ql/experimental/credit/binomiallossmodel.hpp" bodystart="292" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_binomial_loss_model_1aea53a2bb68fa0531ff1a97a0f9d41c85" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::BinomialLossModel&lt; LLM &gt;::expConditionalLgd</definition>
        <argsstring>(const Date &amp;d, const std::vector&lt; Real &gt; &amp;mktFactors) const</argsstring>
        <name>expConditionalLgd</name>
        <qualifiedname>QuantLib::BinomialLossModel::expConditionalLgd</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/experimental/credit/binomiallossmodel.hpp" line="112" column="21" bodyfile="ql/experimental/credit/binomiallossmodel.hpp" bodystart="112" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_binomial_loss_model_1aeab391e5f4c2e53de1577aafea959674" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;</type>
        <definition>std::vector&lt; Real &gt; QuantLib::BinomialLossModel&lt; LLM &gt;::lossProbability</definition>
        <argsstring>(const Date &amp;date, const std::vector&lt; Real &gt; &amp;bsktNots, const std::vector&lt; Real &gt; &amp;uncondDefProbInv, const std::vector&lt; Real &gt; &amp;mktFactor) const</argsstring>
        <name>lossProbability</name>
        <qualifiedname>QuantLib::BinomialLossModel::lossProbability</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>bsktNots</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>uncondDefProbInv</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>mktFactor</declname>
        </param>
        <briefdescription>
<para><ref refid="class_quant_lib_1_1_loss" kindref="compound">Loss</ref> probability density conditional on the market factor value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>model does not take the unconditional rr</para>
        </inbodydescription>
        <location file="ql/experimental/credit/binomiallossmodel.hpp" line="125" column="21" bodyfile="ql/experimental/credit/binomiallossmodel.hpp" bodystart="147" bodyend="242"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Binomial Defaultable <ref refid="class_quant_lib_1_1_basket" kindref="compound">Basket</ref> <ref refid="class_quant_lib_1_1_loss" kindref="compound">Loss</ref> Model<simplesect kind="par"><title></title><para>Models the portfolio loss distribution by approximatting it to an adjusted binomial. Fits the two moments of the loss distribution through an adapted binomial approximation. This simple model allows for portfolio inhomogeneity with no excesive cost over the LHP.</para>
</simplesect>
<simplesect kind="par"><title></title><para>See:</para>
</simplesect>
<simplesect kind="par"><title></title><para><bold>Approximating Independent <ref refid="class_quant_lib_1_1_loss" kindref="compound">Loss</ref> Distributions with an Adjusted Binomial <ref refid="class_quant_lib_1_1_distribution" kindref="compound">Distribution</ref></bold> , Dominic O&apos;Kane, 2007 EDHEC RISK AND ASSET MANAGEMENT RESEARCH CENTRE </para>
</simplesect>
<simplesect kind="par"><title></title><para><bold>Modelling single name and multi-name credit derivatives</bold> Chapter 18.5.2, Dominic O&apos;Kane, Wiley Finance, 2008 </para>
</simplesect>
<simplesect kind="par"><title></title><para>The version presented here is adaptated to the multifactorial case by computing a conditional binomial approximation; notice that the Binomial is stable. This way the model can be used also in risk management models rather than only in pricing. The copula is also left undefined/arbitrary. </para>
</simplesect>
<simplesect kind="par"><title></title><para>LLM: <ref refid="class_quant_lib_1_1_loss" kindref="compound">Loss</ref> Latent Model template parameter able to model default and loss.</para>
</simplesect>
<simplesect kind="par"><title></title><para>The model is allowed and arbitrary copula, although initially designed for a Gaussian setup. If these exotic versions were not allowed the template parameter can then be dropped but the use of random recoveries should be added in some other way.</para>
</simplesect>
<xrefsect id="todo_1_todo000010"><xreftitle>Todo</xreftitle><xrefdescription><para>untested/wip for the random recovery models. </para>
<para>integrate with the previously computed probability inversions of the cumulative functions. </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::BinomialLossModel&lt; LLM &gt;</label>
        <link refid="class_quant_lib_1_1_binomial_loss_model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::DefaultLossModel</label>
        <link refid="class_quant_lib_1_1_default_loss_model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::BinomialLossModel&lt; LLM &gt;</label>
        <link refid="class_quant_lib_1_1_binomial_loss_model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::DefaultLossModel</label>
        <link refid="class_quant_lib_1_1_default_loss_model"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>basket_</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Handle&lt; QuantLib::Basket &gt;</label>
        <link refid="class_quant_lib_1_1_handle"/>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="4">
        <label>QuantLib::RelinkableHandle&lt; QuantLib::Basket &gt;</label>
        <link refid="class_quant_lib_1_1_relinkable_handle"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/experimental/credit/binomiallossmodel.hpp" line="61" column="5" bodyfile="ql/experimental/credit/binomiallossmodel.hpp" bodystart="61" bodyend="138"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_binomial_loss_model_1ac7fffb800ac984b1c33c593114066334" prot="protected" virt="non-virtual"><scope>QuantLib::BinomialLossModel</scope><name>attachAmount_</name></member>
      <member refid="class_quant_lib_1_1_binomial_loss_model_1a5787b4962cdb148cda66ed016c2b6a25" prot="protected" virt="non-virtual"><scope>QuantLib::BinomialLossModel</scope><name>averageLoss</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ad2700ffb7198321f52fdeb42e9a8e043" prot="protected" virt="non-virtual"><scope>QuantLib::BinomialLossModel</scope><name>basket_</name></member>
      <member refid="class_quant_lib_1_1_binomial_loss_model_1a0c6196d87fc647a4e54dcb26f1c622d6" prot="public" virt="non-virtual"><scope>QuantLib::BinomialLossModel</scope><name>BinomialLossModel</name></member>
      <member refid="class_quant_lib_1_1_binomial_loss_model_1adca9ac686ce153a1960a2b6f9caa9b53" prot="protected" virt="non-virtual"><scope>QuantLib::BinomialLossModel</scope><name>condTrancheLoss</name></member>
      <member refid="class_quant_lib_1_1_binomial_loss_model_1a006e9eb007f44cfcee2ce655ba732979" prot="protected" virt="non-virtual"><scope>QuantLib::BinomialLossModel</scope><name>copula_</name></member>
      <member refid="class_quant_lib_1_1_binomial_loss_model_1a6510321cf111be519384ec62294b6282" prot="public" virt="non-virtual"><scope>QuantLib::BinomialLossModel</scope><name>copulaType</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1a25ed3ba8a38c4afaca5dca5b8cfd1d7d" prot="protected" virt="virtual"><scope>QuantLib::BinomialLossModel</scope><name>defaultCorrelation</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ac51090f561e4372e495bfa9edee0000b" prot="protected" virt="non-virtual"><scope>QuantLib::BinomialLossModel</scope><name>DefaultLossModel</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ab57e81d3fdd238c0cb19db2808bc5b59" prot="protected" virt="virtual"><scope>QuantLib::BinomialLossModel</scope><name>densityTrancheLoss</name></member>
      <member refid="class_quant_lib_1_1_binomial_loss_model_1a3678f97ec2765ae4fe5cd54b7cd4e8ba" prot="protected" virt="non-virtual"><scope>QuantLib::BinomialLossModel</scope><name>detachAmount_</name></member>
      <member refid="class_quant_lib_1_1_binomial_loss_model_1aea53a2bb68fa0531ff1a97a0f9d41c85" prot="protected" virt="non-virtual"><scope>QuantLib::BinomialLossModel</scope><name>expConditionalLgd</name></member>
      <member refid="class_quant_lib_1_1_binomial_loss_model_1ac6fa14fedef4f0b6c32340a36bca79ce" prot="protected" virt="non-virtual"><scope>QuantLib::BinomialLossModel</scope><name>expectedDistribution</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1afd0d4637df1423173d5efc758a16f354" prot="protected" virt="virtual"><scope>QuantLib::BinomialLossModel</scope><name>expectedRecovery</name></member>
      <member refid="class_quant_lib_1_1_binomial_loss_model_1af54e0d8ea342d41e36301ee3b028fc99" prot="protected" virt="virtual"><scope>QuantLib::BinomialLossModel</scope><name>expectedShortfall</name></member>
      <member refid="class_quant_lib_1_1_binomial_loss_model_1a141deb0ff1392932b8e88075fd4d6448" prot="protected" virt="virtual"><scope>QuantLib::BinomialLossModel</scope><name>expectedTrancheLoss</name></member>
      <member refid="class_quant_lib_1_1_binomial_loss_model_1af33cc82a36f60038148aa0d8b9dcb10e" prot="protected" virt="virtual"><scope>QuantLib::BinomialLossModel</scope><name>lossDistribution</name></member>
      <member refid="class_quant_lib_1_1_binomial_loss_model_1a34bb92302c44eabcb0742dd516e583ba" prot="protected" virt="non-virtual"><scope>QuantLib::BinomialLossModel</scope><name>lossPoints</name></member>
      <member refid="class_quant_lib_1_1_binomial_loss_model_1aeab391e5f4c2e53de1577aafea959674" prot="protected" virt="non-virtual"><scope>QuantLib::BinomialLossModel</scope><name>lossProbability</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::BinomialLossModel</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::BinomialLossModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::BinomialLossModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::BinomialLossModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual"><scope>QuantLib::BinomialLossModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual"><scope>QuantLib::BinomialLossModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_binomial_loss_model_1abae597741e45adadae3180bd5a916302" prot="protected" virt="virtual"><scope>QuantLib::BinomialLossModel</scope><name>percentile</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ab46164d907ae7772c0a5f6788ce4568b" prot="protected" virt="virtual"><scope>QuantLib::BinomialLossModel</scope><name>probAtLeastNEvents</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1a922ca5f0ea73b3a33420fbcfb2556e93" prot="protected" virt="virtual"><scope>QuantLib::BinomialLossModel</scope><name>probOverLoss</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ab8053b0ecb53c758939cf5c7a33fb328" prot="protected" virt="virtual"><scope>QuantLib::BinomialLossModel</scope><name>probsBeingNthEvent</name></member>
      <member refid="class_quant_lib_1_1_binomial_loss_model_1a9bcd81141d5b8a2bb7b3cebe7d69f6b4" prot="private" virt="virtual"><scope>QuantLib::BinomialLossModel</scope><name>resetModel</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1a467843d56b00359a8fa7d0a1017079a5" prot="protected" virt="virtual"><scope>QuantLib::BinomialLossModel</scope><name>splitESFLevel</name></member>
      <member refid="class_quant_lib_1_1_default_loss_model_1ab70b30442fcdda802730fd711c5348da" prot="protected" virt="virtual"><scope>QuantLib::BinomialLossModel</scope><name>splitVaRLevel</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::BinomialLossModel</scope><name>~Observable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
