<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_analytic_two_asset_barrier_engine" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::AnalyticTwoAssetBarrierEngine</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_two_asset_barrier_option_1_1engine" prot="public" virt="non-virtual">QuantLib::TwoAssetBarrierOption::engine</basecompoundref>
    <includes refid="pricingengines_2barrier_2analytictwoassetbarrierengine_8hpp" local="no">analytictwoassetbarrierengine.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1aa670f9879805399b65983730bcfd4461" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;GeneralizedBlackScholesProcess&gt; QuantLib::AnalyticTwoAssetBarrierEngine::process1_</definition>
        <argsstring></argsstring>
        <name>process1_</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::process1_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="50" column="25" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1ac8edacddc35184c02710e89f4d28b771" prot="private" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;GeneralizedBlackScholesProcess&gt; QuantLib::AnalyticTwoAssetBarrierEngine::process2_</definition>
        <argsstring></argsstring>
        <name>process2_</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::process2_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="51" column="25" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a0cad945bd840f18ee53fe50332245276" prot="private" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
        <definition>Handle&lt;Quote&gt; QuantLib::AnalyticTwoAssetBarrierEngine::rho_</definition>
        <argsstring></argsstring>
        <name>rho_</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::rho_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="52" column="16" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a92cf88c65eb3241a3ed1b2523fc3b485" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::AnalyticTwoAssetBarrierEngine::AnalyticTwoAssetBarrierEngine</definition>
        <argsstring>(ext::shared_ptr&lt; GeneralizedBlackScholesProcess &gt; process1, ext::shared_ptr&lt; GeneralizedBlackScholesProcess &gt; process2, Handle&lt; Quote &gt; rho)</argsstring>
        <name>AnalyticTwoAssetBarrierEngine</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::AnalyticTwoAssetBarrierEngine</qualifiedname>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt;</type>
          <declname>process1</declname>
        </param>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_generalized_black_scholes_process" kindref="compound">GeneralizedBlackScholesProcess</ref> &gt;</type>
          <declname>process2</declname>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_handle" kindref="compound">Handle</ref>&lt; <ref refid="class_quant_lib_1_1_quote" kindref="compound">Quote</ref> &gt;</type>
          <declname>rho</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="44" column="9" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="28" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a20fcd536e6e7a3a7a4c6df21c71b016c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::AnalyticTwoAssetBarrierEngine::calculate</definition>
        <argsstring>() const override</argsstring>
        <name>calculate</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::calculate</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_pricing_engine_1ad2be11cff80d9792f0cc8231711fcb06">calculate</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="47" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="38" bodyend="87"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1af244bd6fa4da21d67c41611b83935f3f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticTwoAssetBarrierEngine::underlying1</definition>
        <argsstring>() const</argsstring>
        <name>underlying1</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::underlying1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="55" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a5c7a9e0b96b71166e688727f0935b96b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticTwoAssetBarrierEngine::underlying2</definition>
        <argsstring>() const</argsstring>
        <name>underlying2</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::underlying2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="56" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1afa7cb3a29860b2768e9c541bd3e5b0e3" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticTwoAssetBarrierEngine::strike</definition>
        <argsstring>() const</argsstring>
        <name>strike</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::strike</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="58" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="97" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1af5f3c47a04da5ea133805b9df4525b19" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        <definition>Time QuantLib::AnalyticTwoAssetBarrierEngine::residualTime</definition>
        <argsstring>() const</argsstring>
        <name>residualTime</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::residualTime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="59" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="104" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a1b1a71541ef4541dd2c44848fb653c18" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref></type>
        <definition>Volatility QuantLib::AnalyticTwoAssetBarrierEngine::volatility1</definition>
        <argsstring>() const</argsstring>
        <name>volatility1</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::volatility1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="61" column="20" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="108" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a6a0dfcef3e9ba90e07546a63b6906829" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1ae3abfa256de5aa2b506ab6bda014e4dc" kindref="member">Volatility</ref></type>
        <definition>Volatility QuantLib::AnalyticTwoAssetBarrierEngine::volatility2</definition>
        <argsstring>() const</argsstring>
        <name>volatility2</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::volatility2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="62" column="20" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="112" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a81e796a68d1a61681b66c68323861739" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticTwoAssetBarrierEngine::barrier</definition>
        <argsstring>() const</argsstring>
        <name>barrier</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::barrier</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="64" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="116" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a75afccbac208a6edf7d006f8fa5f5fb0" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticTwoAssetBarrierEngine::rho</definition>
        <argsstring>() const</argsstring>
        <name>rho</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::rho</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="65" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="120" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1af28b6b5f184d1706cc38c959f7a3d895" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::AnalyticTwoAssetBarrierEngine::riskFreeRate</definition>
        <argsstring>() const</argsstring>
        <name>riskFreeRate</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::riskFreeRate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="67" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1acb90a6ab4f16683193a45eae2d3e02c8" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::AnalyticTwoAssetBarrierEngine::dividendYield1</definition>
        <argsstring>() const</argsstring>
        <name>dividendYield1</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::dividendYield1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="69" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1ab21e1ea4d1fcd55edd2b67d6ac6e6d37" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::AnalyticTwoAssetBarrierEngine::dividendYield2</definition>
        <argsstring>() const</argsstring>
        <name>dividendYield2</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::dividendYield2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="70" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a243d07e027e211b686d92dc428022440" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::AnalyticTwoAssetBarrierEngine::costOfCarry1</definition>
        <argsstring>() const</argsstring>
        <name>costOfCarry1</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::costOfCarry1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="72" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a0ee47cb38e2cd11c37dd2b1f33fa4c44" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref></type>
        <definition>Rate QuantLib::AnalyticTwoAssetBarrierEngine::costOfCarry2</definition>
        <argsstring>() const</argsstring>
        <name>costOfCarry2</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::costOfCarry2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="73" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="144" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a791b4a35dacd1e3af6c7a894fe2cb059" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticTwoAssetBarrierEngine::mu</definition>
        <argsstring>(Real b, Real vol) const</argsstring>
        <name>mu</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::mu</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>vol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="75" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="182" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a83bbb77bd459ad49bbc7e5eb824832df" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticTwoAssetBarrierEngine::d1</definition>
        <argsstring>() const</argsstring>
        <name>d1</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::d1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="77" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a3a50f0177c3a48619802a69626c81f17" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticTwoAssetBarrierEngine::d2</definition>
        <argsstring>() const</argsstring>
        <name>d2</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::d2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="78" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="153" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1ae5729b12063a0c0f4655be8dc49111eb" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticTwoAssetBarrierEngine::d3</definition>
        <argsstring>() const</argsstring>
        <name>d3</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::d3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="79" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="157" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1abaa68cd15963f9d76c713f6c45a0b1cb" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticTwoAssetBarrierEngine::d4</definition>
        <argsstring>() const</argsstring>
        <name>d4</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::d4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="80" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="161" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a2c98d09da38efa4b6f093ec1f45c8f93" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticTwoAssetBarrierEngine::e1</definition>
        <argsstring>() const</argsstring>
        <name>e1</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::e1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="82" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1acc46c9d1f6e03be7099490f989a5b952" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticTwoAssetBarrierEngine::e2</definition>
        <argsstring>() const</argsstring>
        <name>e2</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::e2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="83" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a44cf60127ab667a8e1f90d45f582c26f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticTwoAssetBarrierEngine::e3</definition>
        <argsstring>() const</argsstring>
        <name>e3</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::e3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="84" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="174" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a6c9b2264e7198fcc20f4057ba228e3a9" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticTwoAssetBarrierEngine::e4</definition>
        <argsstring>() const</argsstring>
        <name>e4</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::e4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="85" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="178" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a424401c398a1ec1f85bfb16618de5ba1" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticTwoAssetBarrierEngine::call</definition>
        <argsstring>() const</argsstring>
        <name>call</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::call</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="87" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="186" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a68f54288303217ff86e7407d9afb769a" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticTwoAssetBarrierEngine::put</definition>
        <argsstring>() const</argsstring>
        <name>put</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::put</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="88" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a1d5edd73f2314132f8bf8ae3bc625060" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticTwoAssetBarrierEngine::A</definition>
        <argsstring>(Real eta, Real phi) const</argsstring>
        <name>A</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::A</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>eta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>phi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="90" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="196" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1aeb47d1594dde100f1476452001b289a7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticTwoAssetBarrierEngine::B</definition>
        <argsstring>(Real eta, Real phi) const</argsstring>
        <name>B</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::B</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>eta</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>phi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="91" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="234" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1aab1d997fca7349f9106fbb1066930601" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::AnalyticTwoAssetBarrierEngine::M</definition>
        <argsstring>(Real m_a, Real m_b, Real rho) const</argsstring>
        <name>M</name>
        <qualifiedname>QuantLib::AnalyticTwoAssetBarrierEngine::M</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>m_a</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>m_b</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>rho</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="93" column="14" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.cpp" bodystart="238" bodyend="241"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Analytic engine for barrier option on two assets. </para>
    </briefdescription>
    <detaileddescription>
<para>The formulas by Heynen and Kat are taken from Haug, &quot;Option
pricing formulas&quot;.</para>
<para><xrefsect id="test_1_test000105"><xreftitle>Test</xreftitle><xrefdescription><para>the correctness of the returned value is tested by reproducing results available in literature. </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::AnalyticTwoAssetBarrierEngine</label>
        <link refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::GenericEngine&lt; TwoAssetBarrierOption::arguments, TwoAssetBarrierOption::results &gt;</label>
        <link refid="class_quant_lib_1_1_generic_engine"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="6">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="4">
        <label>QuantLib::PricingEngine</label>
        <link refid="class_quant_lib_1_1_pricing_engine"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::TwoAssetBarrierOption::engine</label>
        <link refid="class_quant_lib_1_1_two_asset_barrier_option_1_1engine"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::AnalyticTwoAssetBarrierEngine</label>
        <link refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::GenericEngine&lt; TwoAssetBarrierOption::arguments, TwoAssetBarrierOption::results &gt;</label>
        <link refid="class_quant_lib_1_1_generic_engine"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>arguments_</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="6">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="8">
        <label>QuantLib::Option::arguments</label>
        <link refid="class_quant_lib_1_1_option_1_1arguments"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::PricingEngine</label>
        <link refid="class_quant_lib_1_1_pricing_engine"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>QuantLib::PricingEngine::arguments</label>
        <link refid="class_quant_lib_1_1_pricing_engine_1_1arguments"/>
      </node>
      <node id="7">
        <label>QuantLib::TwoAssetBarrierOption::arguments</label>
        <link refid="class_quant_lib_1_1_two_asset_barrier_option_1_1arguments"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::TwoAssetBarrierOption::engine</label>
        <link refid="class_quant_lib_1_1_two_asset_barrier_option_1_1engine"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" line="41" column="5" bodyfile="ql/pricingengines/barrier/analytictwoassetbarrierengine.hpp" bodystart="42" bodyend="94"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a1d5edd73f2314132f8bf8ae3bc625060" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>A</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a92cf88c65eb3241a3ed1b2523fc3b485" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>AnalyticTwoAssetBarrierEngine</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1ad2371cdbafa1989afb0e4733b1212c0d" prot="protected" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>arguments_</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1aeb47d1594dde100f1476452001b289a7" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>B</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a81e796a68d1a61681b66c68323861739" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>barrier</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a20fcd536e6e7a3a7a4c6df21c71b016c" prot="public" virt="virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>calculate</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a424401c398a1ec1f85bfb16618de5ba1" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>call</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a243d07e027e211b686d92dc428022440" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>costOfCarry1</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a0ee47cb38e2cd11c37dd2b1f33fa4c44" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>costOfCarry2</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a83bbb77bd459ad49bbc7e5eb824832df" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>d1</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a3a50f0177c3a48619802a69626c81f17" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>d2</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1ae5729b12063a0c0f4655be8dc49111eb" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>d3</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1abaa68cd15963f9d76c713f6c45a0b1cb" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>d4</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1acb90a6ab4f16683193a45eae2d3e02c8" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>dividendYield1</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1ab21e1ea4d1fcd55edd2b67d6ac6e6d37" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>dividendYield2</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a2c98d09da38efa4b6f093ec1f45c8f93" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>e1</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1acc46c9d1f6e03be7099490f989a5b952" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>e2</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a44cf60127ab667a8e1f90d45f582c26f" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>e3</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a6c9b2264e7198fcc20f4057ba228e3a9" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>e4</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1ad9c6e8dc65ca072d5e6e17640d74db3e" prot="public" virt="virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>getArguments</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1aea8272ef6e5e0ea1cffadfed0454fa88" prot="public" virt="virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>getResults</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1aab1d997fca7349f9106fbb1066930601" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>M</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a791b4a35dacd1e3af6c7a894fe2cb059" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>mu</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observer::"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1aa670f9879805399b65983730bcfd4461" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>process1_</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1ac8edacddc35184c02710e89f4d28b771" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>process2_</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a68f54288303217ff86e7407d9afb769a" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>put</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1a81c5390ba1e713e57ca87d5f841d37f2" prot="public" virt="virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>reset</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1af5f3c47a04da5ea133805b9df4525b19" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>residualTime</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1a41281f2ea4990dbce90be1f9f2e231f6" prot="protected" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>results_</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a75afccbac208a6edf7d006f8fa5f5fb0" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>rho</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a0cad945bd840f18ee53fe50332245276" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>rho_</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1af28b6b5f184d1706cc38c959f7a3d895" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>riskFreeRate</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1afa7cb3a29860b2768e9c541bd3e5b0e3" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>strike</name></member>
      <member refid="class_quant_lib_1_1_two_asset_barrier_option_1_1engine_1a2ec981a8c3317425ef9a88502e809f7b" prot="protected" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>triggered</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1af244bd6fa4da21d67c41611b83935f3f" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>underlying1</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a5c7a9e0b96b71166e688727f0935b96b" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>underlying2</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_generic_engine_1aaf5ef54d9e1abf8b1b50b48804edf3dc" prot="public" virt="virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a1b1a71541ef4541dd2c44848fb653c18" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>volatility1</name></member>
      <member refid="class_quant_lib_1_1_analytic_two_asset_barrier_engine_1a6a0dfcef3e9ba90e07546a63b6906829" prot="private" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>volatility2</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_pricing_engine_1a66b279a54578cd7e60d402e5147eb526" prot="public" virt="non-virtual"><scope>QuantLib::AnalyticTwoAssetBarrierEngine</scope><name>~PricingEngine</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
