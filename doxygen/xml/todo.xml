<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="todo" kind="page">
    <compoundname>todo</compoundname>
    <title>Todo List</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><variablelist>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_american_exercise" kindref="compound">QuantLib::AmericanExercise</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000003"/>check that everywhere the American condition is applied from earliestDate and not earlier  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_american_payoff_at_expiry" kindref="compound">QuantLib::AmericanPayoffAtExpiry</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000059"/>calculate greeks  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_american_payoff_at_hit" kindref="compound">QuantLib::AmericanPayoffAtHit</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000060"/>calculate greeks  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_continuous_geometric_average_price_asian_engine" kindref="compound">QuantLib::AnalyticContinuousGeometricAveragePriceAsianEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000061"/>handle seasoned options  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_continuous_geometric_average_price_asian_heston_engine" kindref="compound">QuantLib::AnalyticContinuousGeometricAveragePriceAsianHestonEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000004"/>handle seasoned options  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_digital_american_engine" kindref="compound">QuantLib::AnalyticDigitalAmericanEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000064"/>add more greeks (as of now only delta and rho available) </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_digital_american_k_o_engine" kindref="compound">QuantLib::AnalyticDigitalAmericanKOEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000065"/>add more greeks (as of now only delta and rho available) </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_engine" kindref="compound">QuantLib::AnalyticDiscreteGeometricAveragePriceAsianEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000062"/>implement correct theta, rho, and dividend-rho calculation </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_analytic_discrete_geometric_average_price_asian_heston_engine" kindref="compound">QuantLib::AnalyticDiscreteGeometricAveragePriceAsianHestonEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000005"/>handle seasoned options  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_base_correlation_loss_model" kindref="compound">QuantLib::BaseCorrelationLossModel&lt; BaseModel_T, Corr2DInt_T &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000008"/>Bespoke portfolios BC models are yet to be implemented. </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_base_correlation_term_structure" kindref="compound">QuantLib::BaseCorrelationTermStructure&lt; Interpolator2D_T &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000009"/>The relation to a given basket is to be made explicit for bespoke models to be implemented. </para>
<para></para>
<para>Consider moving to a matrix data structure. A matrix might make some computations heavy, template specialization on the dimension might be an alternative to having two classes, one for scalars and another for matrices. </para>
<para></para>
<para>Rethink all the data structure with a basket where current losses are not zero. </para>
<para></para>
<para>In principle the 2D interpolator is left optional since there are arbitrage issues on the interpolator type to be used. However one has to be careful when using non local interpolators like CubicSplines which have an effect on the past (calibrated) coupons of previous tenors.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_bicubic_spline" kindref="compound">QuantLib::BicubicSpline</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000047"/>revise end conditions  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_binomial_loss_model" kindref="compound">QuantLib::BinomialLossModel&lt; LLM &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000010"/>untested/wip for the random recovery models. </para>
<para></para>
<para>integrate with the previously computed probability inversions of the cumulative functions.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_binomial_vanilla_engine" kindref="compound">QuantLib::BinomialVanillaEngine&lt; T &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000066"/><ref refid="class_quant_lib_1_1_greeks" kindref="compound">Greeks</ref> are not overly accurate. They could be improved by building a tree so that it has three points at the current time. The value would be fetched from the middle one, while the two side points would be used for estimating partial derivatives.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_bivariate_cumulative_normal_distribution_dr78" kindref="compound">QuantLib::BivariateCumulativeNormalDistributionDr78</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000045"/>check accuracy of this algorithm and compare with: 1) Drezner, Z, (1978), Computation of the bivariate normal integral, Mathematics of Computation 32, pp. 277-279. 2) Drezner, Z. and Wesolowsky, G. O. (1990) <lsquo/>On the Computation of the Bivariate Normal Integral<rsquo/>, Journal of Statistical Computation and Simulation 35, pp. 101-107. 3) Drezner, Z (1992) Computation of the Multivariate Normal Integral, ACM Transactions on Mathematics Software 18, pp. 450-460. 4) Drezner, Z (1994) Computation of the Trivariate Normal Integral, Mathematics of Computation 62, pp. 289-294. 5) Genz, A. (1992) <lsquo/>Numerical Computation of the Multivariate Normal Probabilities<rsquo/>, J. Comput. Graph. Stat. 1, pp. 141-150. </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_black_callable_fixed_rate_bond_engine" kindref="compound">QuantLib::BlackCallableFixedRateBondEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000006"/>set additionalResults (e.g. vega, fairStrike, etc.) </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_black_variance_curve" kindref="compound">QuantLib::BlackVarianceCurve</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000070"/>check time extrapolation </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_black_variance_surface" kindref="compound">QuantLib::BlackVarianceSurface</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000071"/>check time extrapolation </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_bond_forward" kindref="compound">QuantLib::BondForward</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000037"/>Add preconditions and tests</para>
<para><anchor id="todo_1_todo000038"/>Create switch- if coupon goes to seller is toggled on, don&apos;t consider income in the <formula id="200">$ P_{DirtyFwd}(t) $</formula> calculation.</para>
<para><anchor id="todo_1_todo000039"/>Verify this works when the underlying is paper (in which case ignore all AI.) </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_boundary_condition_1ab685ab8e5ea909d20f659fab031a3dcb" kindref="member">QuantLib::BoundaryCondition&lt; Operator &gt;::Side</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000055"/>Generalize for n-dimensional conditions  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_callable_bond" kindref="compound">QuantLib::CallableBond</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000007"/>models/shortrate/calibrationHelpers </para>
<para></para>
<para>OAS/OAD </para>
<para></para>
<para>floating rate callable bonds ? </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_cash_flows" kindref="compound">QuantLib::CashFlows</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000001"/>add tests  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_c_d_o" kindref="compound">QuantLib::CDO</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000011"/>Investigate and fix cases <formula id="51">$ E_{i+1} &lt; E_i. $</formula>  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_cliquet_option" kindref="compound">QuantLib::CliquetOption</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000040"/><itemizedlist>
<listitem><para>add local/global caps/floors</para>
</listitem><listitem><para>add accrued coupon and last fixing</para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_continuous_averaging_asian_option" kindref="compound">QuantLib::ContinuousAveragingAsianOption</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000036"/>add running average </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_c_p_i_coupon" kindref="compound">QuantLib::CPICoupon</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000002"/>we do not do any convexity adjustment for lags different to the natural ZCIIS lag that was used to create the forward inflation curve.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_cubic_interpolation" kindref="compound">QuantLib::CubicInterpolation</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000048"/>implement missing schemes (FourthOrder and ModifiedParabolic) and missing boundary conditions (Periodic and Lagrange). </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_cumulative_behrens_fisher_1a202231feee88fff46bdf62b08aadf024" kindref="member">QuantLib::CumulativeBehrensFisher::density</ref>  (<ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> x) const</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000028"/>Implement in a separate class? given the name of this class..  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_default_latent_model" kindref="compound">QuantLib::DefaultLatentModel&lt; copulaPolicy &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000012"/>Consider QL_REQUIRE(basket_, &quot;No portfolio basket set.&quot;) test in debug model only for performance reasons.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_dirichlet_b_c" kindref="compound">QuantLib::DirichletBC</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000054"/>generalize to time-dependent conditions. </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_explicit_euler" kindref="compound">QuantLib::ExplicitEuler&lt; Operator &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000056"/>add Richardson extrapolation </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_fitted_bond_discount_curve" kindref="compound">QuantLib::FittedBondDiscountCurve</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000072"/>refactor the bond helper class so that it is pure virtual and returns a generic bond or its cash flows. Derived classes would include helpers for fixed-rate and zero-coupon bonds. In this way, both bonds and bills can be used to fit a discount curve using the exact same machinery. At present, only fixed-coupon bonds are supported. An even better way to move forward might be to get rate helpers to return cashflows, in which case this class could be used to fit any set of cash flows, not just bonds.</para>
<para><anchor id="todo_1_todo000073"/>add more fitting diagnostics: smoothness, standard deviation, student-t test, etc. Generic smoothness method may be useful for smoothing splines fitting. See Fisher, M., D. Nychka and D. Zervos: &quot;Fitting the term
      structure of interest rates with smoothing splines.&quot; Board of Governors of the Federal Reserve System, Federal Resere Board Working Paper, 95-1.</para>
<para><anchor id="todo_1_todo000074"/>add extrapolation routines </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_fitted_bond_discount_curve_1_1_fitting_method" kindref="compound">QuantLib::FittedBondDiscountCurve::FittingMethod</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000075"/>derive the special-case class LinearFittingMethods from <ref refid="class_quant_lib_1_1_fitted_bond_discount_curve_1_1_fitting_method" kindref="compound">FittingMethod</ref>. A linear fitting to a set of basis functions <formula id="506">$ b_i(t) $</formula> is any fitting of the form  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_forward" kindref="compound">QuantLib::Forward</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000041"/>Add preconditions and tests </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_forward_rate_agreement" kindref="compound">QuantLib::ForwardRateAgreement</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000042"/>Add preconditions and tests</para>
<para><anchor id="todo_1_todo000043"/>Differentiate between BBA (British)/AFB (French) [assumed here] and ABA (Australian) banker conventions in the calculations. </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_gaussian_l_h_p_loss_model" kindref="compound">QuantLib::GaussianLHPLossModel</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000013"/>It should be checking that basket exposures are deterministic (fixed or programmed amortizing) otherwise the model is not fit for the basket.</para>
<para><anchor id="todo_1_todo000014"/>Bugging on tranched baskets with upper limit over maximum attainable loss?  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_gaussian_quad_multidim_integrator" kindref="compound">QuantLib::GaussianQuadMultidimIntegrator</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000029"/>Add coherence test between the integrand function dimensions (the vector size) and the declared dimension in the constructor.</para>
<para><anchor id="todo_1_todo000030"/>Split into integrator classes for functions returning scalar and vector?  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_generalized_black_scholes_process_1a72dbcf1a1c410debf2b0b1d07124a3bf" kindref="member">QuantLib::GeneralizedBlackScholesProcess::diffusion</ref>  (<ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> t, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> x) const override</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000069"/>revise extrapolation  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_generalized_black_scholes_process_1abf46d8ac312c489f2fcf00fefc734953" kindref="member">QuantLib::GeneralizedBlackScholesProcess::drift</ref>  (<ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref> t, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> x) const override</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000068"/>revise extrapolation  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_generic_risk_statistics" kindref="compound">QuantLib::GenericRiskStatistics&lt; S &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000052"/>add historical annualized volatility </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_integral_engine" kindref="compound">QuantLib::IntegralEngine</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000067"/>define tolerance for calculate() </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_interest_rate_index" kindref="compound">QuantLib::InterestRateIndex</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000035"/>add methods returning <ref refid="class_quant_lib_1_1_interest_rate" kindref="compound">InterestRate</ref>  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_inverse_cumulative_student" kindref="compound">QuantLib::InverseCumulativeStudent</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000046"/>Find/implement an efficient algorithm for evaluating the cumulative Student t-distribution, replacing the <ref refid="class_quant_lib_1_1_newton" kindref="compound">Newton</ref> iteration  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_jibar" kindref="compound">QuantLib::Jibar</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000031"/>check settlement days and day-count convention.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_m_c_variance_swap_engine" kindref="compound">QuantLib::MCVarianceSwapEngine&lt; RNG, S &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000063"/>define tolerance of numerical integral and incorporate it in errorEstimate </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_mixed_scheme" kindref="compound">QuantLib::MixedScheme&lt; Operator &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000057"/><itemizedlist>
<listitem><para>derive variable theta schemes</para>
</listitem><listitem><para>introduce multi time-level schemes.</para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_multi_cubic_spline" kindref="compound">QuantLib::MultiCubicSpline&lt; i &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000049"/><itemizedlist>
<listitem><para>allow extrapolation as for the other interpolations</para>
</listitem><listitem><para>investigate if and how to implement Hyman filters and different boundary conditions</para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_neumann_b_c" kindref="compound">QuantLib::NeumannBC</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000053"/>generalize to time-dependent conditions. </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_nothing_exercise_value_1a7ff3910063d6be59c728c489400af692" kindref="member">QuantLib::NothingExerciseValue::NothingExerciseValue</ref>  (const std::vector&lt; Time &gt; &amp;rateTimes, std::valarray&lt; bool &gt; isExerciseTime=std::valarray&lt; bool &gt;())</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000058"/>use <ref refid="class_quant_lib_1_1_payoff" kindref="compound">Payoff</ref>  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_one_factor_affine_survival_structure_1ad9c3edf4f4cfec799108a4f954c22d2c" kindref="member">QuantLib::OneFactorAffineSurvivalStructure::conditionalSurvivalProbability</ref>  (const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;dFwd, const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;dTgt, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> yVal, bool extrapolate=false) const</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000015"/>turn into a protected method to be called by defaults and survivals  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_one_factor_copula" kindref="compound">QuantLib::OneFactorCopula</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000016"/>Improve on simple Euler integration  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_one_factor_gaussian_student_copula" kindref="compound">QuantLib::OneFactorGaussianStudentCopula</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000018"/>Improve performance/accuracy of the calculation of inverse cumulative Y. Tabulate and store it for selected correlations?  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_one_factor_student_copula" kindref="compound">QuantLib::OneFactorStudentCopula</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000017"/>Improve performance/accuracy of the calculation of inverse cumulative Y. Tabulate and store it for selected correlations?  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_one_factor_student_gaussian_copula" kindref="compound">QuantLib::OneFactorStudentGaussianCopula</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000019"/>Improve performance/accuracy of the calculation of inverse cumulative Y. Tabulate and store it for selected correlations?  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_randomized_l_d_s" kindref="compound">QuantLib::RandomizedLDS&lt; LDS, PRS &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000050"/>implement the other randomization algorithms </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_saddle_point_loss_model" kindref="compound">QuantLib::SaddlePointLossModel&lt; CP &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000020"/>Some portfolios show instabilities in the high order expansion terms. </para>
<para></para>
<para>Methods here are calling and integrating using the unconditional probabilities without inverting them first; quite a lot of calls to the copula inversion can be avoided; this should improve performance. </para>
<para></para>
<para>Revise the model for stability of the saddle point calculation. The search for the point does not convege in extreme cases; e.g. very high value of all the factors; factors for each variable not ordered from high to low,...  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_saddle_point_loss_model_1a65cf83c7daa2c2b91bab3a4e99293259" kindref="member">QuantLib::SaddlePointLossModel&lt; CP &gt;::findSaddle</ref>  (const std::vector&lt; Real &gt; &amp;invUncondProbs, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> lossLevel, const std::vector&lt; Real &gt; &amp;mktFactor, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> accuracy=1.0e-3, <ref refid="namespace_quant_lib_1a9adc2615d630d6006896b3402b09b03b" kindref="member">Natural</ref> maxEvaluations=50) const</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000021"/>Improve convergence speed (which is bad at the moment).See discussion in several places; references above and The Oxford Handbook of CD, sect 2.9  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_saddle_point_loss_model_1a043e0d936e5422163114204e5d3d15b4" kindref="member">QuantLib::SaddlePointLossModel&lt; CP &gt;::splitVaRLevel</ref>  (const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;date, <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> loss) const override</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000022"/>Fix this.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_solver1_d" kindref="compound">QuantLib::Solver1D&lt; Impl &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000051"/><itemizedlist>
<listitem><para>clean up the interface so that it is clear whether the accuracy is specified for <formula id="28">$ x $</formula> or <formula id="336">$ f(x) $</formula>.</para>
</listitem><listitem><para>add target value (now the target value is 0.0) </para>
</listitem></itemizedlist>
</para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_spot_recovery_latent_model" kindref="compound">QuantLib::SpotRecoveryLatentModel&lt; copulaPolicy &gt;</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000023"/>Rewrite this model: the distribution of the spot recovery given default could be given as a functional of rr_i with the market factors and the rest of methods depend on this. That would offer a family of models. </para>
<para></para>
<para>Implement eq. 45 to have the EL(t) and be able to integrate the model  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_spot_recovery_latent_model_1acd31d1e5570a5b9a1bf5af75616bcc84" kindref="member">QuantLib::SpotRecoveryLatentModel&lt; copulaPolicy &gt;::latentRRVarValue</ref>  (const std::vector&lt; Real &gt; &amp;allFactors, <ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref> iName) const</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000024"/>Write vector version for all names&apos; RRs  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_swap_rate_helper" kindref="compound">QuantLib::SwapRateHelper</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000076"/>use input <ref refid="class_quant_lib_1_1_swap_index" kindref="compound">SwapIndex</ref> to create the swap  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_swaption" kindref="compound">QuantLib::Swaption</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000044"/>add greeks and explicit exercise lag  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_synthetic_c_d_o" kindref="compound">QuantLib::SyntheticCDO</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000025"/>Investigate and fix cases <formula id="51">$ E_{i+1} &lt; E_i. $</formula>  </para>
</listitem>
<varlistentry><term>Member <ref refid="class_quant_lib_1_1_synthetic_c_d_o_1a41e8ceaf6791efa2d14a942e60031a5a" kindref="member">QuantLib::SyntheticCDO::SyntheticCDO</ref>  (const ext::shared_ptr&lt; Basket &gt; &amp;basket, Protection::Side side, <ref refid="class_quant_lib_1_1_schedule" kindref="compound">Schedule</ref> schedule, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> upfrontRate, <ref refid="namespace_quant_lib_1a919ba3567cc89fca373f8d6b8e80126b" kindref="member">Rate</ref> runningRate, const <ref refid="class_quant_lib_1_1_day_counter" kindref="compound">DayCounter</ref> &amp;dayCounter, <ref refid="namespace_quant_lib_1ac95a4b5bc8017f1eb4ad0b54a9af3881" kindref="member">BusinessDayConvention</ref> paymentConvention, ext::optional&lt; Real &gt; notional=ext::nullopt)</term></varlistentry>
<listitem><para><anchor id="todo_1_todo000026"/>: allow for extra payment flags, arbitrary upfront payment date...  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_tibor" kindref="compound">QuantLib::Tibor</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000032"/>check settlement days and end-of-month adjustment.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_time_grid" kindref="compound">QuantLib::TimeGrid</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000078"/>what was the rationale for limiting the grid to positive times? Investigate and see whether we can use it for negative ones as well.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_t_r_libor" kindref="compound">QuantLib::TRLibor</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000033"/>check end-of-month adjustment.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_united_kingdom" kindref="compound">QuantLib::UnitedKingdom</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000077"/>add LIFFE </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_yo_y_cap_floor_term_price_surface" kindref="compound">QuantLib::YoYCapFloorTermPriceSurface</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000027"/>deal with index interpolation.  </para>
</listitem>
<varlistentry><term>Class <ref refid="class_quant_lib_1_1_zibor" kindref="compound">QuantLib::Zibor</ref>  </term></varlistentry>
<listitem><para><anchor id="todo_1_todo000034"/>check settlement days, end-of-month adjustment, and day-count convention. </para>
</listitem>
</variablelist>
</para>
    </detaileddescription>
    <location file="todo"/>
  </compounddef>
</doxygen>
