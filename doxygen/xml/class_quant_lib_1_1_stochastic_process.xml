<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_stochastic_process" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>QuantLib::StochasticProcess</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_observer" prot="public" virt="non-virtual">QuantLib::Observer</basecompoundref>
    <basecompoundref refid="class_quant_lib_1_1_observable" prot="public" virt="non-virtual">QuantLib::Observable</basecompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_ext_o_u_with_jumps_process" prot="public" virt="non-virtual">QuantLib::ExtOUWithJumpsProcess</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_forward_measure_process" prot="public" virt="non-virtual">QuantLib::ForwardMeasureProcess</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_g2_process" prot="public" virt="non-virtual">QuantLib::G2Process</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_g_j_r_g_a_r_c_h_process" prot="public" virt="non-virtual">QuantLib::GJRGARCHProcess</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_heston_process" prot="public" virt="non-virtual">QuantLib::HestonProcess</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_heston_s_l_v_process" prot="public" virt="non-virtual">QuantLib::HestonSLVProcess</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_hybrid_heston_hull_white_process" prot="public" virt="non-virtual">QuantLib::HybridHestonHullWhiteProcess</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_joint_stochastic_process" prot="public" virt="non-virtual">QuantLib::JointStochasticProcess</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_kluge_ext_o_u_process" prot="public" virt="non-virtual">QuantLib::KlugeExtOUProcess</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_libor_forward_model_process" prot="public" virt="non-virtual">QuantLib::LiborForwardModelProcess</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_stochastic_process1_d" prot="public" virt="non-virtual">QuantLib::StochasticProcess1D</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_stochastic_process_array" prot="public" virt="non-virtual">QuantLib::StochasticProcessArray</derivedcompoundref>
    <includes refid="stochasticprocess_8hpp" local="no">stochasticprocess.hpp</includes>
    <innerclass refid="class_quant_lib_1_1_stochastic_process_1_1discretization" prot="public">QuantLib::StochasticProcess::discretization</innerclass>
    <sectiondef kind="user-defined">
      <header>Observer interface</header>
      <memberdef kind="variable" id="class_quant_lib_1_1_stochastic_process_1a98cd541abbfd37f62d10d3ec2ed214be" prot="protected" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_stochastic_process_1_1discretization" kindref="compound">discretization</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;discretization&gt; QuantLib::StochasticProcess::discretization_</definition>
        <argsstring></argsstring>
        <name>discretization_</name>
        <qualifiedname>QuantLib::StochasticProcess::discretization_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="153" column="25" bodyfile="ql/stochasticprocess.hpp" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_1a0f22628658fd2dc702c13c354ef3244e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::StochasticProcess::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <qualifiedname>QuantLib::StochasticProcess::update</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_observer_1a07905c55dca858470fcf4a1aea0005aa">update</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must be implemented in derived classes. An instance of Observer does not call this method directly: instead, it will be called by the observables the instance registered with when they need to notify any changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="148" column="14" bodyfile="ql/stochasticprocess.cpp" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_1a2dd24b794a6b320bc60ba9e1a87bf48e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::StochasticProcess::StochasticProcess</definition>
        <argsstring>()=default</argsstring>
        <name>StochasticProcess</name>
        <qualifiedname>QuantLib::StochasticProcess::StochasticProcess</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="151" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_1a957ee9776d6048835106ea29ea44927f" prot="protected" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::StochasticProcess::StochasticProcess</definition>
        <argsstring>(ext::shared_ptr&lt; discretization &gt;)</argsstring>
        <name>StochasticProcess</name>
        <qualifiedname>QuantLib::StochasticProcess::StochasticProcess</qualifiedname>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_stochastic_process_1_1discretization" kindref="compound">discretization</ref> &gt;</type>
          <defname>disc</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="152" column="18" bodyfile="ql/stochasticprocess.cpp" bodystart="29" bodyend="30"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Stochastic process interface</header>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_1a92e9b468d781e9ceb566d6e546113540" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>virtual Size QuantLib::StochasticProcess::size</definition>
        <argsstring>() const =0</argsstring>
        <name>size</name>
        <qualifiedname>QuantLib::StochasticProcess::size</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_ext_o_u_with_jumps_process_1af2c52de854cd141727618a3bce62a73f">size</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_g2_forward_process_1aebcf2390c1873c5c92fbb44b745699b8">size</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_g2_process_1a8bccf5fc056a975239eab21856e218e9">size</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_g_j_r_g_a_r_c_h_process_1a1d337c92c06bc623f4c69fbcd519800a">size</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_heston_process_1abf55870120f22d551262453b1a31c68a">size</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_heston_s_l_v_process_1ace58f60b984ec130f6cf684c432bf4ed">size</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a33e21e48c5c4e9a784b02764d3c9d46c">size</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_joint_stochastic_process_1a1d8d99426e58b52fcf752c20fdfad80b">size</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_kluge_ext_o_u_process_1a1f4278cabea630d806cf77fa0e5fcb43">size</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_libor_forward_model_process_1aa6ea0fff60f68a2bcc1344fee875b64a">size</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_stochastic_process1_d_1a427495e858236ca1692eff7c771b6e2a">size</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_stochastic_process_array_1ae76f170bd674159bd4b271c01ed8863b">size</reimplementedby>
        <briefdescription>
<para>returns the number of dimensions of the stochastic process </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="65" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_1a0346d38598fb9a5a1cd58024f05081aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::StochasticProcess::factors</definition>
        <argsstring>() const</argsstring>
        <name>factors</name>
        <qualifiedname>QuantLib::StochasticProcess::factors</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_bates_process_1a1f873a4591797539a5bab9ff4ada05f0">factors</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_ext_o_u_with_jumps_process_1abb8889680bf62e24482616bd70422e6d">factors</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_heston_process_1ae09bcddff8c039638458f46baf5e4c3a">factors</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_heston_s_l_v_process_1a5d347ed76b3894079c7539e79464c4e4">factors</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_joint_stochastic_process_1af8a64b9ef4002be8bc0e8995469537bf">factors</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_kluge_ext_o_u_process_1abc4b91924850204b0f675596086fc30b">factors</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_libor_forward_model_process_1a9555e54bffb43a64ce792d062e7c0245">factors</reimplementedby>
        <briefdescription>
<para>returns the number of independent factors of the process </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="67" column="22" bodyfile="ql/stochasticprocess.cpp" bodystart="32" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_1a4277a74107d071252a2445d23c90b654" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>virtual Array QuantLib::StochasticProcess::initialValues</definition>
        <argsstring>() const =0</argsstring>
        <name>initialValues</name>
        <qualifiedname>QuantLib::StochasticProcess::initialValues</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_ext_o_u_with_jumps_process_1a5a44fff80322b7cd7bfa7369d53aa883">initialValues</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_g2_forward_process_1af1ac5d8d4e77e1b9b07558bdc019bc7a">initialValues</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_g2_process_1a602151b4c1c5c5e3c7530370e1e85192">initialValues</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_g_j_r_g_a_r_c_h_process_1a0f5d360ffad9b28b30289c252e698fb1">initialValues</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_heston_process_1af9aa6d9b2330dd899d66cde7a704ba0e">initialValues</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_heston_s_l_v_process_1adfd54e06aa8f9b29c528ff751c89a854">initialValues</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a3b2c3e40783ef3f4bb25c01efc1cb8cd">initialValues</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_joint_stochastic_process_1ac1c1ef035fe7822d8976cbdd1c57695b">initialValues</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_kluge_ext_o_u_process_1aa33532807af70c7c0e1336325eb2a6a5">initialValues</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_libor_forward_model_process_1a2620f6d92d396b173ebe625fe84f45cc">initialValues</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_stochastic_process1_d_1afe261942062a36caf1d2902a0791331d">initialValues</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_stochastic_process_array_1a46fee2e8c0739e01cc3d0d9980eaae36">initialValues</reimplementedby>
        <briefdescription>
<para>returns the initial values of the state variables </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="69" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_1a467056bfaa17a1ea3debd1dc21402bb8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>virtual Array QuantLib::StochasticProcess::drift</definition>
        <argsstring>(Time t, const Array &amp;x) const =0</argsstring>
        <name>drift</name>
        <qualifiedname>QuantLib::StochasticProcess::drift</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_bates_process_1aefae3ed909fd57d858028ce25ffb5547">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_ext_o_u_with_jumps_process_1a66dcffef20c7b411c5d1500c3009bf49">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_g2_forward_process_1a8efdc2d3fa06060e65c29b0af4f97edc">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_g2_process_1aa4182d854e3453f2bbe7783515476190">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_g_j_r_g_a_r_c_h_process_1a682757e338de1485a79fd4800919fa49">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_heston_process_1ae372bfda029ebf799318fb6f4c15f8f4">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_heston_s_l_v_process_1a4d5d47d4b50bcb5ed08686615c1cf7a7">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a5aacd74a360f10b0b23aa728091364f4">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_joint_stochastic_process_1afa6901d4e0dd6885bf6788319ab0401a">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_kluge_ext_o_u_process_1a7bc44995833840c57909f6ffb3796b3d">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_libor_forward_model_process_1aaa8f4010a66cfc6af7c831942e3d3d6c">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_stochastic_process1_d_1a905264383316f171c09de1dc365f2d64">drift</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_stochastic_process_array_1adc37a3c3361fb193e6c632269fa33398">drift</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the drift part of the equation, i.e., <formula id="468">$ \mu(t, \mathrm{x}_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="73" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_1a45df6a954a177df19d31de5a7f2bef35" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>virtual Matrix QuantLib::StochasticProcess::diffusion</definition>
        <argsstring>(Time t, const Array &amp;x) const =0</argsstring>
        <name>diffusion</name>
        <qualifiedname>QuantLib::StochasticProcess::diffusion</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_ext_o_u_with_jumps_process_1a2915b3b5e1940e78523fa5f623e8996a">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_g2_forward_process_1a34a1ef5b9e5e38b0e1f40d7629a52236">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_g2_process_1aa3c0701a8bcf30bef6d34aa1520953ce">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_g_j_r_g_a_r_c_h_process_1a86b08e0630159514bc5d4a5fd3cb3719">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_heston_process_1ab130ae873bd99ecf7a193cdddd5b78e2">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_heston_s_l_v_process_1a4a695c61abbb7236f44d4a09d28c8aa8">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a205d742052f1f867f3a2c486f0474069">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_joint_stochastic_process_1adf246baf5516f08ef89e3cc30f0280fe">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_kluge_ext_o_u_process_1ad08983250a1f583b21ba3b4adf3f3859">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_libor_forward_model_process_1a665760f820e1260c31a9226cd9723681">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_stochastic_process1_d_1ae17cbed491dafb462e21846cf5f34238">diffusion</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_stochastic_process_array_1af6c78a889bf329d531ac10ba77a80bb5">diffusion</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>returns the diffusion part of the equation, i.e. <formula id="469">$ \sigma(t, \mathrm{x}_t) $</formula> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="78" column="24"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_1af225d654ba08bc09bf2ecab7d787ca9b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::StochasticProcess::expectation</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt) const</argsstring>
        <name>expectation</name>
        <qualifiedname>QuantLib::StochasticProcess::expectation</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_g2_forward_process_1a0b5d035a83d5d59135852e8430425a1c">expectation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_g2_process_1a45f1d103236a452497184c77cd12e748">expectation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_joint_stochastic_process_1a6c0a6402e956b5115d709c35782188eb">expectation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_stochastic_process1_d_1aec74ba7ca0fcd3494c2c45fd4f6f32ca">expectation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_stochastic_process_array_1aae5a87966f02f50f1b687a9576d3ffbf">expectation</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the expectation  <formula id="470">$ E(\mathrm{x}_{t_0 + \Delta t}
    | \mathrm{x}_{t_0} = \mathrm{x}_0) $</formula> of the process after a time interval <formula id="471">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="88" column="23" bodyfile="ql/stochasticprocess.cpp" bodystart="36" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_1a47e9f5540b2ca9c32650dc81d051ca86" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::StochasticProcess::stdDeviation</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt) const</argsstring>
        <name>stdDeviation</name>
        <qualifiedname>QuantLib::StochasticProcess::stdDeviation</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_g2_forward_process_1a8ede4ba6e866663178ef8be909ef6a79">stdDeviation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_g2_process_1a6004c8edd81536452519f0a8768e66b0">stdDeviation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_joint_stochastic_process_1a32f0e032d20bfa5aed4f1ac6228be001">stdDeviation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_stochastic_process1_d_1a6db30d97a969cf695142b77d4608fa31">stdDeviation</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_stochastic_process_array_1aad7fe05d67a2718e6545cb9d6c48b011">stdDeviation</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the standard deviation  <formula id="472">$ S(\mathrm{x}_{t_0 + \Delta t}
    | \mathrm{x}_{t_0} = \mathrm{x}_0) $</formula> of the process after a time interval <formula id="471">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="99" column="24" bodyfile="ql/stochasticprocess.cpp" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_1a3a92717719d8621148989905a132c5e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix QuantLib::StochasticProcess::covariance</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt) const</argsstring>
        <name>covariance</name>
        <qualifiedname>QuantLib::StochasticProcess::covariance</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_g2_forward_process_1a86fbf00504905bda227f2ec5388a28a6">covariance</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_g2_process_1a8c9cf9ae7b83e0f20768a66ee78851b1">covariance</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_joint_stochastic_process_1ada8e26f4c8b2bfdfe97e7770cd74f7e6">covariance</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_libor_forward_model_process_1a2d884a05ff638ce9e3f15c9c23be2860">covariance</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_stochastic_process1_d_1a7a6f6dbd4dcd88d7793c718ec4e2d7a9">covariance</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_stochastic_process_array_1a5ff1a948c3ac857bb2d02970aad48f60">covariance</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the covariance  <formula id="473">$ V(\mathrm{x}_{t_0 + \Delta t}
    | \mathrm{x}_{t_0} = \mathrm{x}_0) $</formula> of the process after a time interval <formula id="471">$ \Delta t $</formula> according to the given discretization. This method can be overridden in derived classes which want to hard-code a particular discretization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="110" column="24" bodyfile="ql/stochasticprocess.cpp" bodystart="48" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_1a8d99a715b297d5b6543b1d303a6002c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::StochasticProcess::evolve</definition>
        <argsstring>(Time t0, const Array &amp;x0, Time dt, const Array &amp;dw) const</argsstring>
        <name>evolve</name>
        <qualifiedname>QuantLib::StochasticProcess::evolve</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_bates_process_1a788cd67d2ec7fe459ac8a56d92de0eb3">evolve</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_ext_o_u_with_jumps_process_1a14df9e0bd6babdbc37ddaf7fce7a801f">evolve</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_geman_roncoroni_process_1a8d99a715b297d5b6543b1d303a6002c0">evolve</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_g_j_r_g_a_r_c_h_process_1afcc1596ecb454581b077864d791ddf56">evolve</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_heston_process_1ac2a4580aa415c723996aee12ccf107da">evolve</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_heston_s_l_v_process_1a62832fa91752bd193772670a36188f7f">evolve</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a04824599f62ab6827acb921776658653">evolve</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_joint_stochastic_process_1a6f5a529d85d6fb17261fc94f4005a715">evolve</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_kluge_ext_o_u_process_1a5b3391b7743f5797e26e97d6ace46a91">evolve</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_libor_forward_model_process_1a0d20b625cceb13fa78a3fab4276b13ba">evolve</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_stochastic_process1_d_1a2065cda22cc58067746379613726c3ad">evolve</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_stochastic_process_array_1ac9ddc7d0f596d17ee898873c0d574082">evolve</reimplementedby>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>dt</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>dw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the asset value after a time interval  <formula id="474">$ \Delta t
$</formula> according to the given discretization. By default, it returns    <formula id="475">\[E(\mathrm{x}_0,t_0,\Delta t) +
S(\mathrm{x}_0,t_0,\Delta t) \cdot \Delta \mathrm{w}
\]</formula> where <formula id="476">$ E $</formula> is the expectation and <formula id="290">$ S $</formula> the standard deviation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="123" column="23" bodyfile="ql/stochasticprocess.cpp" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_1ae2e3d89d3595fcd73be5e6e7e195f3e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::StochasticProcess::apply</definition>
        <argsstring>(const Array &amp;x0, const Array &amp;dx) const</argsstring>
        <name>apply</name>
        <qualifiedname>QuantLib::StochasticProcess::apply</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_g_j_r_g_a_r_c_h_process_1a74633341225e5363e0ac985b7e09f9ca">apply</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_heston_process_1a398724edde1a09b6cddaf88caaf1bf6a">apply</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_heston_s_l_v_process_1a17d2d04b61705732e4ec94101eb4d87d">apply</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1a213f3a8850800971bbe107b0f0042f6b">apply</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_joint_stochastic_process_1a00a5a20abdfa1759b929e8e70a9d6c8b">apply</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_libor_forward_model_process_1a7a2187acf2ba7a280d45654a2234e426">apply</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_stochastic_process1_d_1a8085d27753231bb61130e9850c4a6464">apply</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_stochastic_process_array_1a8997758462a3022c550c42c83f4f9740">apply</reimplementedby>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>dx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>applies a change to the asset value. By default, it returns <formula id="477">$ \mathrm{x} + \Delta \mathrm{x} $</formula>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="130" column="23" bodyfile="ql/stochasticprocess.cpp" bodystart="59" bodyend="62"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>utilities</header>
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_1a39c5f08a3779665f9185a558d2b8418d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
        <definition>Time QuantLib::StochasticProcess::time</definition>
        <argsstring>(const Date &amp;) const</argsstring>
        <name>time</name>
        <qualifiedname>QuantLib::StochasticProcess::time</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_generalized_black_scholes_process_1aadbaae308a4066e94a3aa913b444ed52">time</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_g_j_r_g_a_r_c_h_process_1a17b0b27f3b85a4981f8cc86f2b3f1907">time</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_gsr_process_1a061a8613ca728825cef901b9e45d60fa">time</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_heston_process_1a22244568ba9674ac2babfcc748b432b9">time</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_heston_s_l_v_process_1a2f91000da85f74aec8c779bff1d2f8b0">time</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hybrid_heston_hull_white_process_1ab969319119676dbe81df02167cdf1ad8">time</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_joint_stochastic_process_1a5aecb784a7d9fa20116e76089eeeecdf">time</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_merton76_process_1a8a88514463d8622033e4a8f100650db7">time</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_stochastic_process_array_1abcad9ab6e2b6fc7dfd4b403cdb8a64bf">time</reimplementedby>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the time value corresponding to the given date in the reference system of the stochastic process.</para>
<para><simplesect kind="note"><para>As a number of processes might not need this functionality, a default implementation is given which raises an exception. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="143" column="22" bodyfile="ql/stochasticprocess.cpp" bodystart="64" bodyend="66"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_stochastic_process_1a0e2b6a14e675db5abd0ab8965ff7b2c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::StochasticProcess::~StochasticProcess</definition>
        <argsstring>() override=default</argsstring>
        <name>~StochasticProcess</name>
        <qualifiedname>QuantLib::StochasticProcess::~StochasticProcess</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/stochasticprocess.hpp" line="61" column="9"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>multi-dimensional stochastic process class. </para>
    </briefdescription>
    <detaileddescription>
<para>This class describes a stochastic process governed by    <formula id="466">\[d\mathrm{x}_t = \mu(t, x_t)\mathrm{d}t
              + \sigma(t, \mathrm{x}_t) \cdot d\mathrm{W}_t.
\]</formula> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="10">
        <label>QuantLib::BatesProcess</label>
        <link refid="class_quant_lib_1_1_bates_process"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>QuantLib::BlackProcess</label>
        <link refid="class_quant_lib_1_1_black_process"/>
        <childnode refid="23" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>QuantLib::BlackScholesMertonProcess</label>
        <link refid="class_quant_lib_1_1_black_scholes_merton_process"/>
        <childnode refid="23" relation="public-inheritance">
        </childnode>
      </node>
      <node id="26">
        <label>QuantLib::BlackScholesProcess</label>
        <link refid="class_quant_lib_1_1_black_scholes_process"/>
        <childnode refid="23" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>QuantLib::CoxIngersollRossProcess</label>
        <link refid="class_quant_lib_1_1_cox_ingersoll_ross_process"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::ExtOUWithJumpsProcess</label>
        <link refid="class_quant_lib_1_1_ext_o_u_with_jumps_process"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>QuantLib::ExtendedBlackScholesMertonProcess</label>
        <link refid="class_quant_lib_1_1_extended_black_scholes_merton_process"/>
        <childnode refid="23" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>QuantLib::ExtendedOrnsteinUhlenbeckProcess</label>
        <link refid="class_quant_lib_1_1_extended_ornstein_uhlenbeck_process"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::ForwardMeasureProcess</label>
        <link refid="class_quant_lib_1_1_forward_measure_process"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>QuantLib::ForwardMeasureProcess1D</label>
        <link refid="class_quant_lib_1_1_forward_measure_process1_d"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::G2ForwardProcess</label>
        <link refid="class_quant_lib_1_1_g2_forward_process"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::G2Process</label>
        <link refid="class_quant_lib_1_1_g2_process"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QuantLib::GJRGARCHProcess</label>
        <link refid="class_quant_lib_1_1_g_j_r_g_a_r_c_h_process"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="28">
        <label>QuantLib::GarmanKohlagenProcess</label>
        <link refid="class_quant_lib_1_1_garman_kohlagen_process"/>
        <childnode refid="23" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>QuantLib::GemanRoncoroniProcess</label>
        <link refid="class_quant_lib_1_1_geman_roncoroni_process"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>QuantLib::GeneralizedBlackScholesProcess</label>
        <link refid="class_quant_lib_1_1_generalized_black_scholes_process"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30">
        <label>QuantLib::GeneralizedOrnsteinUhlenbeckProcess</label>
        <link refid="class_quant_lib_1_1_generalized_ornstein_uhlenbeck_process"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31">
        <label>QuantLib::GeometricBrownianMotionProcess</label>
        <link refid="class_quant_lib_1_1_geometric_brownian_motion_process"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>QuantLib::GsrProcess</label>
        <link refid="class_quant_lib_1_1_gsr_process"/>
        <childnode refid="19" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>QuantLib::HestonProcess</label>
        <link refid="class_quant_lib_1_1_heston_process"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>QuantLib::HestonSLVProcess</label>
        <link refid="class_quant_lib_1_1_heston_s_l_v_process"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>QuantLib::HullWhiteForwardProcess</label>
        <link refid="class_quant_lib_1_1_hull_white_forward_process"/>
        <childnode refid="19" relation="public-inheritance">
        </childnode>
      </node>
      <node id="32">
        <label>QuantLib::HullWhiteProcess</label>
        <link refid="class_quant_lib_1_1_hull_white_process"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>QuantLib::HybridHestonHullWhiteProcess</label>
        <link refid="class_quant_lib_1_1_hybrid_heston_hull_white_process"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>QuantLib::JointStochasticProcess</label>
        <link refid="class_quant_lib_1_1_joint_stochastic_process"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>QuantLib::KlugeExtOUProcess</label>
        <link refid="class_quant_lib_1_1_kluge_ext_o_u_process"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>QuantLib::LiborForwardModelProcess</label>
        <link refid="class_quant_lib_1_1_libor_forward_model_process"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="33">
        <label>QuantLib::Merton76Process</label>
        <link refid="class_quant_lib_1_1_merton76_process"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="34">
        <label>QuantLib::MfStateProcess</label>
        <link refid="class_quant_lib_1_1_mf_state_process"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="2">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="35">
        <label>QuantLib::OrnsteinUhlenbeckProcess</label>
        <link refid="class_quant_lib_1_1_ornstein_uhlenbeck_process"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="36">
        <label>QuantLib::SquareRootProcess</label>
        <link refid="class_quant_lib_1_1_square_root_process"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::StochasticProcess</label>
        <link refid="class_quant_lib_1_1_stochastic_process"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>QuantLib::StochasticProcess1D</label>
        <link refid="class_quant_lib_1_1_stochastic_process1_d"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="38">
        <label>QuantLib::StochasticProcessArray</label>
        <link refid="class_quant_lib_1_1_stochastic_process_array"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="37">
        <label>QuantLib::VarianceGammaProcess</label>
        <link refid="class_quant_lib_1_1_variance_gamma_process"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="29">
        <label>QuantLib::VegaStressedBlackScholesProcess</label>
        <link refid="class_quant_lib_1_1_vega_stressed_black_scholes_process"/>
        <childnode refid="23" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="2">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="1">
        <label>QuantLib::StochasticProcess</label>
        <link refid="class_quant_lib_1_1_stochastic_process"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="ql/stochasticprocess.hpp" line="42" column="5" bodyfile="ql/stochasticprocess.hpp" bodystart="42" bodyend="154"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_stochastic_process_1ae2e3d89d3595fcd73be5e6e7e195f3e7" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess</scope><name>apply</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a3a92717719d8621148989905a132c5e1" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess</scope><name>covariance</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a45df6a954a177df19d31de5a7f2bef35" prot="public" virt="pure-virtual"><scope>QuantLib::StochasticProcess</scope><name>diffusion</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a98cd541abbfd37f62d10d3ec2ed214be" prot="protected" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>discretization_</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a467056bfaa17a1ea3debd1dc21402bb8" prot="public" virt="pure-virtual"><scope>QuantLib::StochasticProcess</scope><name>drift</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a8d99a715b297d5b6543b1d303a6002c0" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess</scope><name>evolve</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1af225d654ba08bc09bf2ecab7d787ca9b" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess</scope><name>expectation</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0346d38598fb9a5a1cd58024f05081aa" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess</scope><name>factors</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a4277a74107d071252a2445d23c90b654" prot="public" virt="pure-virtual"><scope>QuantLib::StochasticProcess</scope><name>initialValues</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::StochasticProcess</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::StochasticProcess</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::StochasticProcess</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::StochasticProcess</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::StochasticProcess</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::StochasticProcess</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a92e9b468d781e9ceb566d6e546113540" prot="public" virt="pure-virtual"><scope>QuantLib::StochasticProcess</scope><name>size</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a47e9f5540b2ca9c32650dc81d051ca86" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess</scope><name>stdDeviation</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a2dd24b794a6b320bc60ba9e1a87bf48e" prot="protected" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>StochasticProcess</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a957ee9776d6048835106ea29ea44927f" prot="protected" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>StochasticProcess</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a39c5f08a3779665f9185a558d2b8418d" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess</scope><name>time</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0f22628658fd2dc702c13c354ef3244e" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::StochasticProcess</scope><name>~Observer</name></member>
      <member refid="class_quant_lib_1_1_stochastic_process_1a0e2b6a14e675db5abd0ab8965ff7b2c3" prot="public" virt="non-virtual"><scope>QuantLib::StochasticProcess</scope><name>~StochasticProcess</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
