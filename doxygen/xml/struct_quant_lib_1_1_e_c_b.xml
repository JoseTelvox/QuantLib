<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="struct_quant_lib_1_1_e_c_b" kind="struct" language="C++" prot="public">
    <compoundname>QuantLib::ECB</compoundname>
    <includes refid="ecb_8hpp" local="no">ecb.hpp</includes>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="struct_quant_lib_1_1_e_c_b_1af0d33b932fec930ea94b15a0e18ffd99" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::set&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt; &amp;</type>
        <definition>const std::set&lt; Date &gt; &amp; QuantLib::ECB::knownDates</definition>
        <argsstring>()</argsstring>
        <name>knownDates</name>
        <qualifiedname>QuantLib::ECB::knownDates</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/ecb.hpp" line="36" column="31" bodyfile="ql/time/ecb.cpp" bodystart="160" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_e_c_b_1a3dff4d78ddc46d635f819e46a1794d30" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::ECB::addDate</definition>
        <argsstring>(const Date &amp;d)</argsstring>
        <name>addDate</name>
        <qualifiedname>QuantLib::ECB::addDate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/ecb.hpp" line="37" column="21" bodyfile="ql/time/ecb.cpp" bodystart="164" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_e_c_b_1a25cfcef61d7d3c569d18ba3080731a9d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::ECB::removeDate</definition>
        <argsstring>(const Date &amp;d)</argsstring>
        <name>removeDate</name>
        <qualifiedname>QuantLib::ECB::removeDate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/ecb.hpp" line="38" column="21" bodyfile="ql/time/ecb.cpp" bodystart="168" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_e_c_b_1ad84636c6f82828394ccd7016aae985be" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>static Date QuantLib::ECB::date</definition>
        <argsstring>(Month m, Year y)</argsstring>
        <name>date</name>
        <qualifiedname>QuantLib::ECB::date</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1afc504c75e7ee54a75e255256d99781e4" kindref="member">Month</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespace_quant_lib_1a5dcda5470aff130981ac30f25d4244e7" kindref="member">Year</ref></type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>maintenance period start date in the given month/year </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/ecb.hpp" line="41" column="21" bodyfile="ql/time/ecb.hpp" bodystart="41" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_e_c_b_1a366f88d7502c340b884c29ecaac9adec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>static Date QuantLib::ECB::date</definition>
        <argsstring>(const std::string &amp;ecbCode, const Date &amp;referenceDate=Date())</argsstring>
        <name>date</name>
        <qualifiedname>QuantLib::ECB::date</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>ecbCode</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>referenceDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the <ref refid="struct_quant_lib_1_1_e_c_b" kindref="compound">ECB</ref> date for the given <ref refid="struct_quant_lib_1_1_e_c_b" kindref="compound">ECB</ref> code (e.g. March xxth, 2013 for MAR10).</para>
<para><simplesect kind="warning"><para>It raises an exception if the input string is not an <ref refid="struct_quant_lib_1_1_e_c_b" kindref="compound">ECB</ref> code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/ecb.hpp" line="50" column="21"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_e_c_b_1a7689d40422273f079df6fb0e26734033" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string QuantLib::ECB::code</definition>
        <argsstring>(const Date &amp;ecbDate)</argsstring>
        <name>code</name>
        <qualifiedname>QuantLib::ECB::code</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>ecbDate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the <ref refid="struct_quant_lib_1_1_e_c_b" kindref="compound">ECB</ref> code for the given date (e.g. MAR10 for March xxth, 2010).</para>
<para><simplesect kind="warning"><para>It raises an exception if the input date is not an <ref refid="struct_quant_lib_1_1_e_c_b" kindref="compound">ECB</ref> date </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/ecb.hpp" line="59" column="28" bodyfile="ql/time/ecb.cpp" bodystart="203" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_e_c_b_1a34b79e66103920b08934385fc41444f1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>Date QuantLib::ECB::nextDate</definition>
        <argsstring>(const Date &amp;d=Date())</argsstring>
        <name>nextDate</name>
        <qualifiedname>QuantLib::ECB::nextDate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>next maintenance period start date following the given date </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/ecb.hpp" line="62" column="21" bodyfile="ql/time/ecb.cpp" bodystart="226" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_e_c_b_1a09eb243ea8edffacec200c9eba162591" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref></type>
        <definition>static Date QuantLib::ECB::nextDate</definition>
        <argsstring>(const std::string &amp;ecbCode, const Date &amp;referenceDate=Date())</argsstring>
        <name>nextDate</name>
        <qualifiedname>QuantLib::ECB::nextDate</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>ecbCode</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>referenceDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>next maintenance period start date following the given <ref refid="struct_quant_lib_1_1_e_c_b" kindref="compound">ECB</ref> code </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/ecb.hpp" line="65" column="21" bodyfile="ql/time/ecb.hpp" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_e_c_b_1ab015d6045c2fc85f6ad211441a240dbd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt;</type>
        <definition>std::vector&lt; Date &gt; QuantLib::ECB::nextDates</definition>
        <argsstring>(const Date &amp;d=Date())</argsstring>
        <name>nextDates</name>
        <qualifiedname>QuantLib::ECB::nextDates</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>next maintenance period start dates following the given date </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/ecb.hpp" line="71" column="28" bodyfile="ql/time/ecb.cpp" bodystart="238" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_e_c_b_1a4828d34cb06a0cb8d131ce0637b63ce2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &gt;</type>
        <definition>static std::vector&lt; Date &gt; QuantLib::ECB::nextDates</definition>
        <argsstring>(const std::string &amp;ecbCode, const Date &amp;referenceDate=Date())</argsstring>
        <name>nextDates</name>
        <qualifiedname>QuantLib::ECB::nextDates</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>ecbCode</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>referenceDate</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>next maintenance period start dates following the given code </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/ecb.hpp" line="74" column="28" bodyfile="ql/time/ecb.hpp" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_e_c_b_1a97d2359a18c28b4dd88b81ddae146283" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool QuantLib::ECB::isECBdate</definition>
        <argsstring>(const Date &amp;d)</argsstring>
        <name>isECBdate</name>
        <qualifiedname>QuantLib::ECB::isECBdate</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns whether or not the given date is a maintenance period start date </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/ecb.hpp" line="81" column="21" bodyfile="ql/time/ecb.hpp" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_e_c_b_1a3f4fe5392e0afbc7179c1f0cb4fad0be" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool QuantLib::ECB::isECBcode</definition>
        <argsstring>(const std::string &amp;in)</argsstring>
        <name>isECBcode</name>
        <qualifiedname>QuantLib::ECB::isECBcode</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>returns whether or not the given string is an <ref refid="struct_quant_lib_1_1_e_c_b" kindref="compound">ECB</ref> code </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/ecb.hpp" line="87" column="21" bodyfile="ql/time/ecb.cpp" bodystart="251" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_e_c_b_1a46bedb0d2c71b6808f849ba86f3cfca0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string QuantLib::ECB::nextCode</definition>
        <argsstring>(const Date &amp;d=Date())</argsstring>
        <name>nextCode</name>
        <qualifiedname>QuantLib::ECB::nextCode</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref> &amp;</type>
          <declname>d</declname>
          <defval><ref refid="class_quant_lib_1_1_date" kindref="compound">Date</ref>()</defval>
        </param>
        <briefdescription>
<para>next <ref refid="struct_quant_lib_1_1_e_c_b" kindref="compound">ECB</ref> code following the given date </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/ecb.hpp" line="90" column="28" bodyfile="ql/time/ecb.hpp" bodystart="90" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1_e_c_b_1aafe2a9da5d7161d4a0f0b75e7d811a5a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string QuantLib::ECB::nextCode</definition>
        <argsstring>(const std::string &amp;ecbCode)</argsstring>
        <name>nextCode</name>
        <qualifiedname>QuantLib::ECB::nextCode</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>ecbCode</declname>
        </param>
        <briefdescription>
<para>next <ref refid="struct_quant_lib_1_1_e_c_b" kindref="compound">ECB</ref> code following the given code </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/time/ecb.hpp" line="95" column="28" bodyfile="ql/time/ecb.cpp" bodystart="268" bodyend="313"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>European Central Bank reserve maintenance dates. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ql/time/ecb.hpp" line="34" column="5" bodyfile="ql/time/ecb.hpp" bodystart="34" bodyend="97"/>
    <listofallmembers>
      <member refid="struct_quant_lib_1_1_e_c_b_1a3dff4d78ddc46d635f819e46a1794d30" prot="public" virt="non-virtual"><scope>QuantLib::ECB</scope><name>addDate</name></member>
      <member refid="struct_quant_lib_1_1_e_c_b_1a7689d40422273f079df6fb0e26734033" prot="public" virt="non-virtual"><scope>QuantLib::ECB</scope><name>code</name></member>
      <member refid="struct_quant_lib_1_1_e_c_b_1ad84636c6f82828394ccd7016aae985be" prot="public" virt="non-virtual"><scope>QuantLib::ECB</scope><name>date</name></member>
      <member refid="struct_quant_lib_1_1_e_c_b_1a366f88d7502c340b884c29ecaac9adec" prot="public" virt="non-virtual"><scope>QuantLib::ECB</scope><name>date</name></member>
      <member refid="struct_quant_lib_1_1_e_c_b_1a3f4fe5392e0afbc7179c1f0cb4fad0be" prot="public" virt="non-virtual"><scope>QuantLib::ECB</scope><name>isECBcode</name></member>
      <member refid="struct_quant_lib_1_1_e_c_b_1a97d2359a18c28b4dd88b81ddae146283" prot="public" virt="non-virtual"><scope>QuantLib::ECB</scope><name>isECBdate</name></member>
      <member refid="struct_quant_lib_1_1_e_c_b_1af0d33b932fec930ea94b15a0e18ffd99" prot="public" virt="non-virtual"><scope>QuantLib::ECB</scope><name>knownDates</name></member>
      <member refid="struct_quant_lib_1_1_e_c_b_1a46bedb0d2c71b6808f849ba86f3cfca0" prot="public" virt="non-virtual"><scope>QuantLib::ECB</scope><name>nextCode</name></member>
      <member refid="struct_quant_lib_1_1_e_c_b_1aafe2a9da5d7161d4a0f0b75e7d811a5a" prot="public" virt="non-virtual"><scope>QuantLib::ECB</scope><name>nextCode</name></member>
      <member refid="struct_quant_lib_1_1_e_c_b_1a34b79e66103920b08934385fc41444f1" prot="public" virt="non-virtual"><scope>QuantLib::ECB</scope><name>nextDate</name></member>
      <member refid="struct_quant_lib_1_1_e_c_b_1a09eb243ea8edffacec200c9eba162591" prot="public" virt="non-virtual"><scope>QuantLib::ECB</scope><name>nextDate</name></member>
      <member refid="struct_quant_lib_1_1_e_c_b_1ab015d6045c2fc85f6ad211441a240dbd" prot="public" virt="non-virtual"><scope>QuantLib::ECB</scope><name>nextDates</name></member>
      <member refid="struct_quant_lib_1_1_e_c_b_1a4828d34cb06a0cb8d131ce0637b63ce2" prot="public" virt="non-virtual"><scope>QuantLib::ECB</scope><name>nextDates</name></member>
      <member refid="struct_quant_lib_1_1_e_c_b_1a25cfcef61d7d3c569d18ba3080731a9d" prot="public" virt="non-virtual"><scope>QuantLib::ECB</scope><name>removeDate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
