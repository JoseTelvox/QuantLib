<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_combined_cost_function" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::CombinedCostFunction</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_cost_function" prot="public" virt="non-virtual">QuantLib::CostFunction</basecompoundref>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_combined_cost_function_1aac30f42eef1968128d48b1785ac3672f" prot="private" static="no" mutable="no">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_andreasen_huge_cost_function" kindref="compound">AndreasenHugeCostFunction</ref> &gt;</type>
        <definition>const ext::shared_ptr&lt;AndreasenHugeCostFunction&gt; QuantLib::CombinedCostFunction::putCostFct_</definition>
        <argsstring></argsstring>
        <name>putCostFct_</name>
        <qualifiedname>QuantLib::CombinedCostFunction::putCostFct_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="205" column="31" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_combined_cost_function_1ac4c43b908cf52351aa2bdf28e7b6692d" prot="private" static="no" mutable="no">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_andreasen_huge_cost_function" kindref="compound">AndreasenHugeCostFunction</ref> &gt;</type>
        <definition>const ext::shared_ptr&lt;AndreasenHugeCostFunction&gt; QuantLib::CombinedCostFunction::callCostFct_</definition>
        <argsstring></argsstring>
        <name>callCostFct_</name>
        <qualifiedname>QuantLib::CombinedCostFunction::callCostFct_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="206" column="31" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="206" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_combined_cost_function_1adc56797b54cf924f378d787538a1e8c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>QuantLib::CombinedCostFunction::CombinedCostFunction</definition>
        <argsstring>(ext::shared_ptr&lt; AndreasenHugeCostFunction &gt; putCostFct, ext::shared_ptr&lt; AndreasenHugeCostFunction &gt; callCostFct)</argsstring>
        <name>CombinedCostFunction</name>
        <qualifiedname>QuantLib::CombinedCostFunction::CombinedCostFunction</qualifiedname>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_andreasen_huge_cost_function" kindref="compound">AndreasenHugeCostFunction</ref> &gt;</type>
          <declname>putCostFct</declname>
        </param>
        <param>
          <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_andreasen_huge_cost_function" kindref="compound">AndreasenHugeCostFunction</ref> &gt;</type>
          <declname>callCostFct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="170" column="9" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_combined_cost_function_1ad9737114733b1ee3e524824270e9560c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::CombinedCostFunction::values</definition>
        <argsstring>(const Array &amp;sig) const override</argsstring>
        <name>values</name>
        <qualifiedname>QuantLib::CombinedCostFunction::values</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_cost_function_1ab43da17891b724c8352c01c2478d04db">values</reimplements>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>method to overload to compute the cost function values in x </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="174" column="15" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="174" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_combined_cost_function_1a1b54bd525e62a9074712eca691b27e1c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::CombinedCostFunction::initialValues</definition>
        <argsstring>() const</argsstring>
        <name>initialValues</name>
        <qualifiedname>QuantLib::CombinedCostFunction::initialValues</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="192" column="15" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="192" bodyend="202"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QuantLib::CombinedCostFunction</label>
        <link refid="class_quant_lib_1_1_combined_cost_function"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::CostFunction</label>
        <link refid="class_quant_lib_1_1_cost_function"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>QuantLib::CombinedCostFunction</label>
        <link refid="class_quant_lib_1_1_combined_cost_function"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QuantLib::CostFunction</label>
        <link refid="class_quant_lib_1_1_cost_function"/>
      </node>
    </collaborationgraph>
    <location file="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" line="168" column="5" bodyfile="ql/termstructures/volatility/equityfx/andreasenhugevolatilityinterpl.cpp" bodystart="168" bodyend="207"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_combined_cost_function_1ac4c43b908cf52351aa2bdf28e7b6692d" prot="private" virt="non-virtual"><scope>QuantLib::CombinedCostFunction</scope><name>callCostFct_</name></member>
      <member refid="class_quant_lib_1_1_combined_cost_function_1adc56797b54cf924f378d787538a1e8c1" prot="public" virt="non-virtual"><scope>QuantLib::CombinedCostFunction</scope><name>CombinedCostFunction</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a0dc9070b6d79cf91aef8ba48e2808263" prot="public" virt="virtual"><scope>QuantLib::CombinedCostFunction</scope><name>finiteDifferenceEpsilon</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1aad44fa61459514a8e55208d50716698b" prot="public" virt="virtual"><scope>QuantLib::CombinedCostFunction</scope><name>gradient</name></member>
      <member refid="class_quant_lib_1_1_combined_cost_function_1a1b54bd525e62a9074712eca691b27e1c" prot="public" virt="non-virtual"><scope>QuantLib::CombinedCostFunction</scope><name>initialValues</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a5bf2d8163ed5dea7ec811377e2835eca" prot="public" virt="virtual"><scope>QuantLib::CombinedCostFunction</scope><name>jacobian</name></member>
      <member refid="class_quant_lib_1_1_combined_cost_function_1aac30f42eef1968128d48b1785ac3672f" prot="private" virt="non-virtual"><scope>QuantLib::CombinedCostFunction</scope><name>putCostFct_</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a2255742e3e05477d773cdf3705411661" prot="public" virt="virtual"><scope>QuantLib::CombinedCostFunction</scope><name>value</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1ae0c8902d6ce2e535237ae4370956d161" prot="public" virt="virtual"><scope>QuantLib::CombinedCostFunction</scope><name>valueAndGradient</name></member>
      <member refid="class_quant_lib_1_1_combined_cost_function_1ad9737114733b1ee3e524824270e9560c" prot="public" virt="virtual"><scope>QuantLib::CombinedCostFunction</scope><name>values</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a1aa00768b27a3446404b3029660c2e68" prot="public" virt="virtual"><scope>QuantLib::CombinedCostFunction</scope><name>valuesAndJacobian</name></member>
      <member refid="class_quant_lib_1_1_cost_function_1a04929e863b85bc26f50ad9052ba7ee73" prot="public" virt="virtual"><scope>QuantLib::CombinedCostFunction</scope><name>~CostFunction</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
