<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="struct_quant_lib_1_1detail_1_1_s_a_b_r_specs" kind="struct" language="C++" prot="public">
    <compoundname>QuantLib::detail::SABRSpecs</compoundname>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_quant_lib_1_1detail_1_1_s_a_b_r_specs_1a60c4155e88ff7704311416493d5a1322" prot="public" static="no">
        <type><ref refid="class_quant_lib_1_1detail_1_1_s_a_b_r_wrapper" kindref="compound">SABRWrapper</ref></type>
        <definition>typedef SABRWrapper QuantLib::detail::SABRSpecs::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <qualifiedname>QuantLib::detail::SABRSpecs::type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/sabrinterpolation.hpp" line="136" column="25" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_s_a_b_r_specs_1a5bc9921fc52ef23eccd816074fdcc813" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
        <definition>Size QuantLib::detail::SABRSpecs::dimension</definition>
        <argsstring>()</argsstring>
        <name>dimension</name>
        <qualifiedname>QuantLib::detail::SABRSpecs::dimension</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/sabrinterpolation.hpp" line="65" column="10" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_s_a_b_r_specs_1aee6b67125e34d34494d17eae8ae18dd1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::detail::SABRSpecs::defaultValues</definition>
        <argsstring>(std::vector&lt; Real &gt; &amp;params, std::vector&lt; bool &gt; &amp;, const Real &amp;forward, const Real expiryTime, const std::vector&lt; Real &gt; &amp;addParams)</argsstring>
        <name>defaultValues</name>
        <qualifiedname>QuantLib::detail::SABRSpecs::defaultValues</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>std::vector&lt; bool &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>forward</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>expiryTime</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>addParams</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/sabrinterpolation.hpp" line="66" column="10" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="66" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_s_a_b_r_specs_1a9a03d9a77645c037dd4b6c680ba84ca7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void QuantLib::detail::SABRSpecs::guess</definition>
        <argsstring>(Array &amp;values, const std::vector&lt; bool &gt; &amp;paramIsFixed, const Real &amp;forward, const Real expiryTime, const std::vector&lt; Real &gt; &amp;r, const std::vector&lt; Real &gt; &amp;addParams)</argsstring>
        <name>guess</name>
        <qualifiedname>QuantLib::detail::SABRSpecs::guess</qualifiedname>
        <param>
          <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
          <declname>paramIsFixed</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>forward</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>expiryTime</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>addParams</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/sabrinterpolation.hpp" line="82" column="10" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="82" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_s_a_b_r_specs_1a5d6d9618a01473b87f3d6f1106341943" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::detail::SABRSpecs::eps1</definition>
        <argsstring>()</argsstring>
        <name>eps1</name>
        <qualifiedname>QuantLib::detail::SABRSpecs::eps1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/sabrinterpolation.hpp" line="100" column="10" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_s_a_b_r_specs_1a6a909a1f6e4def432ca66b2c034b9150" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::detail::SABRSpecs::eps2</definition>
        <argsstring>()</argsstring>
        <name>eps2</name>
        <qualifiedname>QuantLib::detail::SABRSpecs::eps2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/sabrinterpolation.hpp" line="101" column="10" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_s_a_b_r_specs_1a8ef37b275b21d3a0becb7fd8d4f015b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::detail::SABRSpecs::dilationFactor</definition>
        <argsstring>()</argsstring>
        <name>dilationFactor</name>
        <qualifiedname>QuantLib::detail::SABRSpecs::dilationFactor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/sabrinterpolation.hpp" line="102" column="10" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_s_a_b_r_specs_1a3d151a255099de94fb37504a09090da5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::detail::SABRSpecs::inverse</definition>
        <argsstring>(const Array &amp;y, const std::vector&lt; bool &gt; &amp;, const std::vector&lt; Real &gt; &amp;, const Real)</argsstring>
        <name>inverse</name>
        <qualifiedname>QuantLib::detail::SABRSpecs::inverse</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/sabrinterpolation.hpp" line="103" column="11" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="103" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_s_a_b_r_specs_1ae98dbd8f41386dc6fcdfabfa8877425c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::detail::SABRSpecs::direct</definition>
        <argsstring>(const Array &amp;x, const std::vector&lt; bool &gt; &amp;, const std::vector&lt; Real &gt; &amp;, const Real)</argsstring>
        <name>direct</name>
        <qualifiedname>QuantLib::detail::SABRSpecs::direct</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/sabrinterpolation.hpp" line="115" column="11" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="115" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_s_a_b_r_specs_1aea035ddd52e8fef0ab9eca2c9d8fadcc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::detail::SABRSpecs::weight</definition>
        <argsstring>(const Real strike, const Real forward, const Real stdDev, const std::vector&lt; Real &gt; &amp;addParams)</argsstring>
        <name>weight</name>
        <qualifiedname>QuantLib::detail::SABRSpecs::weight</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>strike</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>forward</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
          <declname>stdDev</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>addParams</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/sabrinterpolation.hpp" line="131" column="10" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="131" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="struct_quant_lib_1_1detail_1_1_s_a_b_r_specs_1ae389d83fd049434a13137bd2905f4e8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1detail_1_1_s_a_b_r_wrapper" kindref="compound">type</ref> &gt;</type>
        <definition>ext::shared_ptr&lt; type &gt; QuantLib::detail::SABRSpecs::instance</definition>
        <argsstring>(const Time t, const Real &amp;forward, const std::vector&lt; Real &gt; &amp;params, const std::vector&lt; Real &gt; &amp;addParams)</argsstring>
        <name>instance</name>
        <qualifiedname>QuantLib::detail::SABRSpecs::instance</qualifiedname>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a4f78b18a4dd1a979eb78b4e1e8ac1503" kindref="member">Time</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &amp;</type>
          <declname>forward</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>addParams</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/math/interpolations/sabrinterpolation.hpp" line="137" column="21" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="137" bodyend="141"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="ql/math/interpolations/sabrinterpolation.hpp" line="64" column="1" bodyfile="ql/math/interpolations/sabrinterpolation.hpp" bodystart="64" bodyend="142"/>
    <listofallmembers>
      <member refid="struct_quant_lib_1_1detail_1_1_s_a_b_r_specs_1aee6b67125e34d34494d17eae8ae18dd1" prot="public" virt="non-virtual"><scope>QuantLib::detail::SABRSpecs</scope><name>defaultValues</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_s_a_b_r_specs_1a8ef37b275b21d3a0becb7fd8d4f015b1" prot="public" virt="non-virtual"><scope>QuantLib::detail::SABRSpecs</scope><name>dilationFactor</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_s_a_b_r_specs_1a5bc9921fc52ef23eccd816074fdcc813" prot="public" virt="non-virtual"><scope>QuantLib::detail::SABRSpecs</scope><name>dimension</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_s_a_b_r_specs_1ae98dbd8f41386dc6fcdfabfa8877425c" prot="public" virt="non-virtual"><scope>QuantLib::detail::SABRSpecs</scope><name>direct</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_s_a_b_r_specs_1a5d6d9618a01473b87f3d6f1106341943" prot="public" virt="non-virtual"><scope>QuantLib::detail::SABRSpecs</scope><name>eps1</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_s_a_b_r_specs_1a6a909a1f6e4def432ca66b2c034b9150" prot="public" virt="non-virtual"><scope>QuantLib::detail::SABRSpecs</scope><name>eps2</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_s_a_b_r_specs_1a9a03d9a77645c037dd4b6c680ba84ca7" prot="public" virt="non-virtual"><scope>QuantLib::detail::SABRSpecs</scope><name>guess</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_s_a_b_r_specs_1ae389d83fd049434a13137bd2905f4e8e" prot="public" virt="non-virtual"><scope>QuantLib::detail::SABRSpecs</scope><name>instance</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_s_a_b_r_specs_1a3d151a255099de94fb37504a09090da5" prot="public" virt="non-virtual"><scope>QuantLib::detail::SABRSpecs</scope><name>inverse</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_s_a_b_r_specs_1a60c4155e88ff7704311416493d5a1322" prot="public" virt="non-virtual"><scope>QuantLib::detail::SABRSpecs</scope><name>type</name></member>
      <member refid="struct_quant_lib_1_1detail_1_1_s_a_b_r_specs_1aea035ddd52e8fef0ab9eca2c9d8fadcc" prot="public" virt="non-virtual"><scope>QuantLib::detail::SABRSpecs</scope><name>weight</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
