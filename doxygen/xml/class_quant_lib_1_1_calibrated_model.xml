<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="class_quant_lib_1_1_calibrated_model" kind="class" language="C++" prot="public">
    <compoundname>QuantLib::CalibratedModel</compoundname>
    <basecompoundref refid="class_quant_lib_1_1_observer" prot="public" virt="virtual">QuantLib::Observer</basecompoundref>
    <basecompoundref refid="class_quant_lib_1_1_observable" prot="public" virt="virtual">QuantLib::Observable</basecompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_g_j_r_g_a_r_c_h_model" prot="public" virt="non-virtual">QuantLib::GJRGARCHModel</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_grid_model_local_vol_surface" prot="public" virt="non-virtual">QuantLib::GridModelLocalVolSurface</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_gsr" prot="public" virt="non-virtual">QuantLib::Gsr</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_heston_model" prot="public" virt="non-virtual">QuantLib::HestonModel</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_libor_forward_model" prot="public" virt="non-virtual">QuantLib::LiborForwardModel</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_markov_functional" prot="public" virt="non-virtual">QuantLib::MarkovFunctional</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_piecewise_time_dependent_heston_model" prot="public" virt="non-virtual">QuantLib::PiecewiseTimeDependentHestonModel</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_short_rate_model" prot="public" virt="non-virtual">QuantLib::ShortRateModel</derivedcompoundref>
    <derivedcompoundref refid="class_quant_lib_1_1_variance_gamma_model" prot="public" virt="non-virtual">QuantLib::VarianceGammaModel</derivedcompoundref>
    <includes refid="model_8hpp" local="no">model.hpp</includes>
    <innerclass refid="class_quant_lib_1_1_calibrated_model_1_1_calibration_function" prot="public">QuantLib::CalibratedModel::CalibrationFunction</innerclass>
    <innerclass refid="class_quant_lib_1_1_calibrated_model_1_1_private_constraint" prot="public">QuantLib::CalibratedModel::PrivateConstraint</innerclass>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_quant_lib_1_1_calibrated_model_1a063e96ccbf2ebbdb39341822083bd37c" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_quant_lib_1_1_parameter" kindref="compound">Parameter</ref> &gt;</type>
        <definition>std::vector&lt;Parameter&gt; QuantLib::CalibratedModel::arguments_</definition>
        <argsstring></argsstring>
        <name>arguments_</name>
        <qualifiedname>QuantLib::CalibratedModel::arguments_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/model.hpp" line="126" column="21" bodyfile="ql/models/model.hpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_calibrated_model_1add85b46f3e818f3916bd30eb85d877ef" prot="protected" static="no" mutable="no">
        <type>ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_constraint" kindref="compound">Constraint</ref> &gt;</type>
        <definition>ext::shared_ptr&lt;Constraint&gt; QuantLib::CalibratedModel::constraint_</definition>
        <argsstring></argsstring>
        <name>constraint_</name>
        <qualifiedname>QuantLib::CalibratedModel::constraint_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/model.hpp" line="127" column="25" bodyfile="ql/models/model.hpp" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_calibrated_model_1a91f2d3c3d84fbe420b0d842de338037e" prot="protected" static="no" mutable="no">
        <type>EndCriteria::Type</type>
        <definition>EndCriteria::Type QuantLib::CalibratedModel::shortRateEndCriteria_</definition>
        <argsstring></argsstring>
        <name>shortRateEndCriteria_</name>
        <qualifiedname>QuantLib::CalibratedModel::shortRateEndCriteria_</qualifiedname>
        <initializer>= EndCriteria::None</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/model.hpp" line="128" column="27" bodyfile="ql/models/model.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_calibrated_model_1a4341c3bd6dc46bc9380bb4d52c032d25" prot="protected" static="no" mutable="no">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::CalibratedModel::problemValues_</definition>
        <argsstring></argsstring>
        <name>problemValues_</name>
        <qualifiedname>QuantLib::CalibratedModel::problemValues_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/model.hpp" line="129" column="15" bodyfile="ql/models/model.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_quant_lib_1_1_calibrated_model_1a6b9b9c042c526902626eead4de47e74c" prot="protected" static="no" mutable="no">
        <type><ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
        <definition>Integer QuantLib::CalibratedModel::functionEvaluation_</definition>
        <argsstring></argsstring>
        <name>functionEvaluation_</name>
        <qualifiedname>QuantLib::CalibratedModel::functionEvaluation_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/model.hpp" line="130" column="17" bodyfile="ql/models/model.hpp" bodystart="130" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_quant_lib_1_1_calibrated_model_1a6368e7ce0867de464f64d7b104b79b85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>QuantLib::CalibratedModel::CalibratedModel</definition>
        <argsstring>(Size nArguments)</argsstring>
        <name>CalibratedModel</name>
        <qualifiedname>QuantLib::CalibratedModel::CalibratedModel</qualifiedname>
        <param>
          <type><ref refid="namespace_quant_lib_1af4cc4ef40b52c17cc455ead2a97aedb3" kindref="member">Size</ref></type>
          <declname>nArguments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/model.hpp" line="88" column="9" bodyfile="ql/models/model.cpp" bodystart="32" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_calibrated_model_1a03d7cb63ca181a47a45994cfe448e42c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::CalibratedModel::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <qualifiedname>QuantLib::CalibratedModel::update</qualifiedname>
        <reimplements refid="class_quant_lib_1_1_observer_1a07905c55dca858470fcf4a1aea0005aa">update</reimplements>
        <reimplementedby refid="class_quant_lib_1_1_grid_model_local_vol_surface_1a60cf3f04aa71b5b6b099522c01ea5de9">update</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_gsr_1aeab33a390e5811f180d68296aa38668e">update</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_markov_functional_1a953314d06e0bb7506ff867131d47c546">update</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method must be implemented in derived classes. An instance of Observer does not call this method directly: instead, it will be called by the observables the instance registered with when they need to notify any changes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/model.hpp" line="90" column="14" bodyfile="ql/models/model.hpp" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_calibrated_model_1af2776521b1584d547ec2440833508677" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::CalibratedModel::calibrate</definition>
        <argsstring>(const std::vector&lt; ext::shared_ptr&lt; CalibrationHelper &gt; &gt; &amp;, OptimizationMethod &amp;method, const EndCriteria &amp;endCriteria, const Constraint &amp;constraint=Constraint(), const std::vector&lt; Real &gt; &amp;weights=std::vector&lt; Real &gt;(), const std::vector&lt; bool &gt; &amp;fixParameters=std::vector&lt; bool &gt;())</argsstring>
        <name>calibrate</name>
        <qualifiedname>QuantLib::CalibratedModel::calibrate</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_markov_functional_1a04e61412daeefb21d4a38c926df3a689">calibrate</reimplementedby>
        <param>
          <type>const std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_calibration_helper" kindref="compound">CalibrationHelper</ref> &gt; &gt; &amp;</type>
        </param>
        <param>
          <type><ref refid="class_quant_lib_1_1_optimization_method" kindref="compound">OptimizationMethod</ref> &amp;</type>
          <declname>method</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_end_criteria" kindref="compound">EndCriteria</ref> &amp;</type>
          <declname>endCriteria</declname>
        </param>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_constraint" kindref="compound">Constraint</ref> &amp;</type>
          <declname>constraint</declname>
          <defval><ref refid="class_quant_lib_1_1_constraint" kindref="compound">Constraint</ref>()</defval>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt; &amp;</type>
          <declname>weights</declname>
          <defval>std::vector&lt; <ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref> &gt;()</defval>
        </param>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
          <declname>fixParameters</declname>
          <defval>std::vector&lt; bool &gt;()</defval>
        </param>
        <briefdescription>
<para>Calibrate to a set of market instruments (usually caps/swaptions) </para>
        </briefdescription>
        <detaileddescription>
<para>An additional constraint can be passed which must be satisfied in addition to the constraints of the model. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/model.hpp" line="99" column="22" bodyfile="ql/models/model.cpp" bodystart="75" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_calibrated_model_1a2652178a7f9d28ca4e213f76b55c87e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a372ac5c1a422a6b276fe0552d4d83f50" kindref="member">Real</ref></type>
        <definition>Real QuantLib::CalibratedModel::value</definition>
        <argsstring>(const Array &amp;params, const std::vector&lt; ext::shared_ptr&lt; CalibrationHelper &gt; &gt; &amp;)</argsstring>
        <name>value</name>
        <qualifiedname>QuantLib::CalibratedModel::value</qualifiedname>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type>const std::vector&lt; ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_calibration_helper" kindref="compound">CalibrationHelper</ref> &gt; &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/model.hpp" line="107" column="14" bodyfile="ql/models/model.cpp" bodystart="117" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_calibrated_model_1a3b1198e322e93d700c2b48fe0cd888cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ext::shared_ptr&lt; <ref refid="class_quant_lib_1_1_constraint" kindref="compound">Constraint</ref> &gt; &amp;</type>
        <definition>const ext::shared_ptr&lt; Constraint &gt; &amp; QuantLib::CalibratedModel::constraint</definition>
        <argsstring>() const</argsstring>
        <name>constraint</name>
        <qualifiedname>QuantLib::CalibratedModel::constraint</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/model.hpp" line="110" column="31" bodyfile="ql/models/model.hpp" bodystart="160" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_calibrated_model_1a797a6b080b7a66d620758ff6fe34df39" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>EndCriteria::Type</type>
        <definition>EndCriteria::Type QuantLib::CalibratedModel::endCriteria</definition>
        <argsstring>() const</argsstring>
        <name>endCriteria</name>
        <qualifiedname>QuantLib::CalibratedModel::endCriteria</qualifiedname>
        <briefdescription>
<para>Returns end criteria result. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/model.hpp" line="113" column="27" bodyfile="ql/models/model.hpp" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_calibrated_model_1ab7766a4e575c67e8f1e00f98bfe2e8c6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
        <definition>const Array &amp; QuantLib::CalibratedModel::problemValues</definition>
        <argsstring>() const</argsstring>
        <name>problemValues</name>
        <qualifiedname>QuantLib::CalibratedModel::problemValues</qualifiedname>
        <briefdescription>
<para>Returns the problem values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/model.hpp" line="116" column="21" bodyfile="ql/models/model.hpp" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_calibrated_model_1adae9352d30045e32f5382fa79a0bc88c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref></type>
        <definition>Array QuantLib::CalibratedModel::params</definition>
        <argsstring>() const</argsstring>
        <name>params</name>
        <qualifiedname>QuantLib::CalibratedModel::params</qualifiedname>
        <briefdescription>
<para>Returns array of arguments on which calibration is done. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/model.hpp" line="119" column="15" bodyfile="ql/models/model.cpp" bodystart="126" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_calibrated_model_1a018930665d7468824b0f1800b7472eb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QuantLib::CalibratedModel::setParams</definition>
        <argsstring>(const Array &amp;params)</argsstring>
        <name>setParams</name>
        <qualifiedname>QuantLib::CalibratedModel::setParams</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_libor_forward_model_1ab181f0fcefdcd45b6286beb65d25ad7a">setParams</reimplementedby>
        <param>
          <type>const <ref refid="class_quant_lib_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/model.hpp" line="121" column="22" bodyfile="ql/models/model.cpp" bodystart="138" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="class_quant_lib_1_1_calibrated_model_1a66027503e827f56c83a5a60f8f066d84" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespace_quant_lib_1a8ac1a45a37d8d3dda438a2e59e222620" kindref="member">Integer</ref></type>
        <definition>Integer QuantLib::CalibratedModel::functionEvaluation</definition>
        <argsstring>() const</argsstring>
        <name>functionEvaluation</name>
        <qualifiedname>QuantLib::CalibratedModel::functionEvaluation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/model.hpp" line="122" column="17" bodyfile="ql/models/model.hpp" bodystart="122" bodyend="122"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_quant_lib_1_1_calibrated_model_1a9282281fe5c1dbc558462648b72b6e18" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void QuantLib::CalibratedModel::generateArguments</definition>
        <argsstring>()</argsstring>
        <name>generateArguments</name>
        <qualifiedname>QuantLib::CalibratedModel::generateArguments</qualifiedname>
        <reimplementedby refid="class_quant_lib_1_1_bates_model_1a1ded95fb898e610ec2c1db1c3a2ef189">generateArguments</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_extended_cox_ingersoll_ross_1a62853f19e479c511439fc16cc55caa2f">generateArguments</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_g2_1a8e3c37bb7772e12b430a17d89e30ab7e">generateArguments</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_generalized_hull_white_1afe39d8df716bfac7298b1186883183a2">generateArguments</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_g_j_r_g_a_r_c_h_model_1a14ec3a8a184ee316e2d744a8d8fee29e">generateArguments</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_grid_model_local_vol_surface_1a45710e1f555d25eb90ed11b68a697d9c">generateArguments</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_gsr_1a02c295f6587d60028a66b3d180a8b361">generateArguments</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_heston_model_1a945dba621d223a719248cf5980eaff8e">generateArguments</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_hull_white_1ab46f0af943b61dd3f951e31776e1a8ad">generateArguments</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_markov_functional_1acc214e87b5f64c2b27025536e81a0c11">generateArguments</reimplementedby>
        <reimplementedby refid="class_quant_lib_1_1_variance_gamma_model_1a4558ae0bd533b80e383fe38ff4e9a76f">generateArguments</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ql/models/model.hpp" line="125" column="22" bodyfile="ql/models/model.hpp" bodystart="125" bodyend="125"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Calibrated model class. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="11">
        <label>QuantLib::BatesDetJumpModel</label>
        <link refid="class_quant_lib_1_1_bates_det_jump_model"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>QuantLib::BatesDoubleExpDetJumpModel</label>
        <link refid="class_quant_lib_1_1_bates_double_exp_det_jump_model"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>QuantLib::BatesDoubleExpModel</label>
        <link refid="class_quant_lib_1_1_bates_double_exp_model"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>QuantLib::BatesModel</label>
        <link refid="class_quant_lib_1_1_bates_model"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>QuantLib::BlackKarasinski</label>
        <link refid="class_quant_lib_1_1_black_karasinski"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>QuantLib::CalibratedModel</label>
        <link refid="class_quant_lib_1_1_calibrated_model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>QuantLib::CoxIngersollRoss</label>
        <link refid="class_quant_lib_1_1_cox_ingersoll_ross"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>QuantLib::ExtendedCoxIngersollRoss</label>
        <link refid="class_quant_lib_1_1_extended_cox_ingersoll_ross"/>
        <childnode refid="19" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>QuantLib::G2</label>
        <link refid="class_quant_lib_1_1_g2"/>
        <childnode refid="24" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QuantLib::GJRGARCHModel</label>
        <link refid="class_quant_lib_1_1_g_j_r_g_a_r_c_h_model"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>QuantLib::GeneralizedHullWhite</label>
        <link refid="class_quant_lib_1_1_generalized_hull_white"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>QuantLib::GridModelLocalVolSurface</label>
        <link refid="class_quant_lib_1_1_grid_model_local_vol_surface"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>QuantLib::Gsr</label>
        <link refid="class_quant_lib_1_1_gsr"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>QuantLib::HestonModel</label>
        <link refid="class_quant_lib_1_1_heston_model"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>QuantLib::HullWhite</label>
        <link refid="class_quant_lib_1_1_hull_white"/>
        <childnode refid="22" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>QuantLib::LiborForwardModel</label>
        <link refid="class_quant_lib_1_1_libor_forward_model"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>QuantLib::MarkovFunctional</label>
        <link refid="class_quant_lib_1_1_markov_functional"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="2">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
      <node id="18">
        <label>QuantLib::OneFactorAffineModel</label>
        <link refid="class_quant_lib_1_1_one_factor_affine_model"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>QuantLib::OneFactorModel</label>
        <link refid="class_quant_lib_1_1_one_factor_model"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>QuantLib::PiecewiseTimeDependentHestonModel</label>
        <link refid="class_quant_lib_1_1_piecewise_time_dependent_heston_model"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>QuantLib::ShortRateModel</label>
        <link refid="class_quant_lib_1_1_short_rate_model"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>QuantLib::TwoFactorModel</label>
        <link refid="class_quant_lib_1_1_two_factor_model"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="26">
        <label>QuantLib::VarianceGammaModel</label>
        <link refid="class_quant_lib_1_1_variance_gamma_model"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>QuantLib::Vasicek</label>
        <link refid="class_quant_lib_1_1_vasicek"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>QuantLib::Array</label>
        <link refid="class_quant_lib_1_1_array"/>
      </node>
      <node id="1">
        <label>QuantLib::CalibratedModel</label>
        <link refid="class_quant_lib_1_1_calibrated_model"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>problemValues_</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>QuantLib::Observable</label>
        <link refid="class_quant_lib_1_1_observable"/>
      </node>
      <node id="2">
        <label>QuantLib::Observer</label>
        <link refid="class_quant_lib_1_1_observer"/>
      </node>
    </collaborationgraph>
    <location file="ql/models/model.hpp" line="86" column="5" bodyfile="ql/models/model.hpp" bodystart="86" bodyend="137"/>
    <listofallmembers>
      <member refid="class_quant_lib_1_1_calibrated_model_1a063e96ccbf2ebbdb39341822083bd37c" prot="protected" virt="non-virtual"><scope>QuantLib::CalibratedModel</scope><name>arguments_</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1af2776521b1584d547ec2440833508677" prot="public" virt="virtual"><scope>QuantLib::CalibratedModel</scope><name>calibrate</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1a6368e7ce0867de464f64d7b104b79b85" prot="public" virt="non-virtual"><scope>QuantLib::CalibratedModel</scope><name>CalibratedModel</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1a3b1198e322e93d700c2b48fe0cd888cf" prot="public" virt="non-virtual"><scope>QuantLib::CalibratedModel</scope><name>constraint</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1add85b46f3e818f3916bd30eb85d877ef" prot="protected" virt="non-virtual"><scope>QuantLib::CalibratedModel</scope><name>constraint_</name></member>
      <member refid="class_quant_lib_1_1_observer_1acfbf794db3e7d5cfdea2cd517a195183" prot="public" virt="virtual"><scope>QuantLib::CalibratedModel</scope><name>deepUpdate</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1a797a6b080b7a66d620758ff6fe34df39" prot="public" virt="non-virtual"><scope>QuantLib::CalibratedModel</scope><name>endCriteria</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1a66027503e827f56c83a5a60f8f066d84" prot="public" virt="non-virtual"><scope>QuantLib::CalibratedModel</scope><name>functionEvaluation</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1a6b9b9c042c526902626eead4de47e74c" prot="protected" virt="non-virtual"><scope>QuantLib::CalibratedModel</scope><name>functionEvaluation_</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1a9282281fe5c1dbc558462648b72b6e18" prot="protected" virt="virtual"><scope>QuantLib::CalibratedModel</scope><name>generateArguments</name></member>
      <member refid="class_quant_lib_1_1_observer_1ad45fa6f7242ee763d17c714a3e8bb6d7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::CalibratedModel</scope><name>iterator</name></member>
      <member refid="class_quant_lib_1_1_observable_1afb67478418efdb94382ac9d7ae904b94" prot="public" virt="non-virtual"><scope>QuantLib::CalibratedModel</scope><name>notifyObservers</name></member>
      <member refid="class_quant_lib_1_1_observable_1ae0d19b21fab87a01f53586a6b5c15f85" prot="public" virt="non-virtual"><scope>QuantLib::CalibratedModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a942cf6a572bd95341433a6772c70cb29" prot="public" virt="non-virtual"><scope>QuantLib::CalibratedModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observable_1a6c35885ef344665ecdfac9b9f3a59c0e" prot="public" virt="non-virtual"><scope>QuantLib::CalibratedModel</scope><name>Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a246072080d37c0cd180013417251c70b" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::CalibratedModel</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1ae6e892e237db5ffe7acbef54360ef0e3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::CalibratedModel</scope><name>Observer</name></member>
      <member refid="class_quant_lib_1_1_observer_1a40ad1a8bfb71e32b2916b370f3f9392c" prot="public" virt="non-virtual" ambiguityscope="QuantLib::"><scope>QuantLib::CalibratedModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ad1e086da62f05b4bc5eafa698ef6fbc3" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::CalibratedModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_observable_1ab45941c65068ab4c8d69a7d1a72beeb7" prot="public" virt="non-virtual" ambiguityscope="QuantLib::Observable::"><scope>QuantLib::CalibratedModel</scope><name>operator=</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1adae9352d30045e32f5382fa79a0bc88c" prot="public" virt="non-virtual"><scope>QuantLib::CalibratedModel</scope><name>params</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1ab7766a4e575c67e8f1e00f98bfe2e8c6" prot="public" virt="non-virtual"><scope>QuantLib::CalibratedModel</scope><name>problemValues</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1a4341c3bd6dc46bc9380bb4d52c032d25" prot="protected" virt="non-virtual"><scope>QuantLib::CalibratedModel</scope><name>problemValues_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a312bbe4a5386f10a1584f3477b3c2709" prot="public" virt="non-virtual"><scope>QuantLib::CalibratedModel</scope><name>registerWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1a338928c4fe626f9ccf0b98ceb318853a" prot="public" virt="non-virtual"><scope>QuantLib::CalibratedModel</scope><name>registerWithObservables</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1a018930665d7468824b0f1800b7472eb6" prot="public" virt="virtual"><scope>QuantLib::CalibratedModel</scope><name>setParams</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1a91f2d3c3d84fbe420b0d842de338037e" prot="protected" virt="non-virtual"><scope>QuantLib::CalibratedModel</scope><name>shortRateEndCriteria_</name></member>
      <member refid="class_quant_lib_1_1_observer_1a297d13afa77b0e7e6deae3bab777180f" prot="public" virt="non-virtual"><scope>QuantLib::CalibratedModel</scope><name>unregisterWith</name></member>
      <member refid="class_quant_lib_1_1_observer_1ab88925691aba7e7d96cc5188e94361ea" prot="public" virt="non-virtual"><scope>QuantLib::CalibratedModel</scope><name>unregisterWithAll</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1a03d7cb63ca181a47a45994cfe448e42c" prot="public" virt="virtual"><scope>QuantLib::CalibratedModel</scope><name>update</name></member>
      <member refid="class_quant_lib_1_1_calibrated_model_1a2652178a7f9d28ca4e213f76b55c87e9" prot="public" virt="non-virtual"><scope>QuantLib::CalibratedModel</scope><name>value</name></member>
      <member refid="class_quant_lib_1_1_observable_1a32093a7038e9bd8d28e5d378eca9f4f7" prot="public" virt="virtual"><scope>QuantLib::CalibratedModel</scope><name>~Observable</name></member>
      <member refid="class_quant_lib_1_1_observer_1a6b5c15445bbe598d34871f5a5a3ed671" prot="public" virt="virtual"><scope>QuantLib::CalibratedModel</scope><name>~Observer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
